// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseNetworkPlayerModel
#include "GlobalNamespace/BaseNetworkPlayerModel.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: BaseNetworkPlayerModel/PartyConfig
#include "GlobalNamespace/BaseNetworkPlayerModel_PartyConfig.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
#include "System/Runtime/CompilerServices/AsyncTaskMethodBuilder_1.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter`1
#include "System/Runtime/CompilerServices/TaskAwaiter_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.Generic.List`1/System.Collections.Generic.Enumerator
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: NetworkPlayer because it is already included!
  // Skipping declaration: JoinMatchmakingPartyConfig because it is already included!
  // Skipping declaration: StartClientPartyConfig because it is already included!
  // Skipping declaration: NetworkServer because it is already included!
  // Skipping declaration: <InitAuthenticationTokenProvider>d__53 because it is already included!
  // Skipping declaration: <GetPartyPlayers>d__54 because it is already included!
  // Skipping declaration: <GetOtherPlayers>d__55 because it is already included!
  // Skipping declaration: <>c__DisplayClass56_0 because it is already included!
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
  // Forward declaring type: IPlatformUserModel
  class IPlatformUserModel;
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
  // Forward declaring type: UserInfo
  class UserInfo;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: List`1 because it is already included!
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkPlayerModel`1<T>
  template<typename T>
  class NetworkPlayerModel_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::NetworkPlayerModel_1, "", "NetworkPlayerModel`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: NetworkPlayerModel`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class NetworkPlayerModel_1 : public ::GlobalNamespace::BaseNetworkPlayerModel {
    public:
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer<T>
    class NetworkPlayer;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::JoinMatchmakingPartyConfig<T>
    class JoinMatchmakingPartyConfig;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::StartClientPartyConfig<T>
    class StartClientPartyConfig;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::NetworkServer<T>
    class NetworkServer;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53<T>
    struct $InitAuthenticationTokenProvider$d__53;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54<T>
    class $GetPartyPlayers$d__54;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55<T>
    class $GetOtherPlayers$d__55;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0<T>
    class $$c__DisplayClass56_0;
    // Nested type: ::GlobalNamespace::NetworkPlayerModel_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/NetworkPlayer
    // [TokenAttribute] Offset: FFFFFFFF
    class NetworkPlayer : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::GlobalNamespace::INetworkPlayer*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "NetworkPlayer";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private readonly NetworkPlayerModel`1<T> _playerModel
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* playerModel;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // private readonly IConnectedPlayer _connectedPlayer
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::IConnectedPlayer* connectedPlayer;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IConnectedPlayer*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::GlobalNamespace::INetworkPlayer
      operator ::GlobalNamespace::INetworkPlayer() noexcept {
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
      }
      // Creating interface conversion operator: i_INetworkPlayer
      inline ::GlobalNamespace::INetworkPlayer* i_INetworkPlayer() noexcept {
        return reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly NetworkPlayerModel`1<T> _playerModel
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn__playerModel() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::dyn__playerModel");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerModel"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly IConnectedPlayer _connectedPlayer
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& dyn__connectedPlayer() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::dyn__connectedPlayer");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
        return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.String get_userId()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_userId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_userId");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.String get_userName()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_userName() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_userName");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.Boolean get_isMe()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isMe() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_isMe");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Int32 get_sortIndex()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_sortIndex() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_sortIndex");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public System.Int32 get_currentPartySize()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_currentPartySize() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_currentPartySize");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public BeatmapLevelSelectionMask get_selectionMask()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_selectionMask");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelSelectionMask, false>(this, ___internal__method);
      }
      // public GameplayServerConfiguration get_configuration()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::GameplayServerConfiguration get_configuration() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_configuration");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
      }
      // public System.Boolean get_isMyPartyOwner()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isMyPartyOwner() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_isMyPartyOwner");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public IConnectedPlayer get_connectedPlayer()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::IConnectedPlayer* get_connectedPlayer() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_connectedPlayer");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
      }
      // public System.Boolean get_canJoin()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canJoin() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canJoin");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_requiresPassword()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_requiresPassword() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_requiresPassword");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_isWaitingOnJoin()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isWaitingOnJoin() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_isWaitingOnJoin");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canInvite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canInvite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canInvite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_isWaitingOnInvite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isWaitingOnInvite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_isWaitingOnInvite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canKick()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canKick() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canKick");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canLeave()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canLeave() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canLeave");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canBlock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canBlock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canBlock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canUnblock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canUnblock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::get_canUnblock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void .ctor(NetworkPlayerModel`1<T> playerModel, IConnectedPlayer connectedPlayer)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::NetworkPlayer* New_ctor(::GlobalNamespace::NetworkPlayerModel_1<T>* playerModel, ::GlobalNamespace::IConnectedPlayer* connectedPlayer) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::NetworkPlayer*, creationType>(playerModel, connectedPlayer)));
      }
      // public System.Void Join()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Join() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Join");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Join(System.String password)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Join(::StringW password) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Join");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, password);
      }
      // public System.Void Invite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Invite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Invite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Kick()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Kick() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Kick");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Leave()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Leave() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Leave");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Block()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Block() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Block");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Unblock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Unblock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::Unblock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void SendJoinResponse(System.Boolean accept)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SendJoinResponse(bool accept) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::SendJoinResponse");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
      }
      // public System.Void SendInviteResponse(System.Boolean accept)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SendInviteResponse(bool accept) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkPlayer::SendInviteResponse");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
      }
    }; // NetworkPlayerModel`1/NetworkPlayer
    // Could not write size check! Type: NetworkPlayerModel`1/NetworkPlayer is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/JoinMatchmakingPartyConfig
    // [TokenAttribute] Offset: FFFFFFFF
    class JoinMatchmakingPartyConfig : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::GlobalNamespace::BaseNetworkPlayerModel::PartyConfig/*, public ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "JoinMatchmakingPartyConfig";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.String secret
      // Size: 0x8
      // Offset: 0x0
      ::StringW secret;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String code
      // Size: 0x8
      // Offset: 0x0
      ::StringW code;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating interface conversion operator: operator ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>
      operator ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>() noexcept {
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*>(this);
      }
      // Creating interface conversion operator: i_NetworkPlayerModel_1_T
      inline ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>* i_NetworkPlayerModel_1_T() noexcept {
        return reinterpret_cast<::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.String secret
      [[deprecated("Use field access instead!")]] ::StringW& dyn_secret() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::JoinMatchmakingPartyConfig::dyn_secret");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "secret"))->offset;
        return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.String code
      [[deprecated("Use field access instead!")]] ::StringW& dyn_code() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::JoinMatchmakingPartyConfig::dyn_code");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "code"))->offset;
        return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: BaseNetworkPlayerModel/PartyConfig
      // Base method: System.Void PartyConfig::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::JoinMatchmakingPartyConfig* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::JoinMatchmakingPartyConfig::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::JoinMatchmakingPartyConfig*, creationType>()));
      }
    }; // NetworkPlayerModel`1/JoinMatchmakingPartyConfig
    // Could not write size check! Type: NetworkPlayerModel`1/JoinMatchmakingPartyConfig is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/StartClientPartyConfig
    // [TokenAttribute] Offset: FFFFFFFF
    class StartClientPartyConfig : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::GlobalNamespace::BaseNetworkPlayerModel::PartyConfig/*, public ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "StartClientPartyConfig";
      static constexpr bool IS_VALUE_TYPE = false;
      // Creating interface conversion operator: operator ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>
      operator ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>() noexcept {
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*>(this);
      }
      // Creating interface conversion operator: i_NetworkPlayerModel_1_T
      inline ::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>* i_NetworkPlayerModel_1_T() noexcept {
        return reinterpret_cast<::GlobalNamespace::INetworkPlayerModelPartyConfig_1<::GlobalNamespace::NetworkPlayerModel_1<T>*>*>(this);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: BaseNetworkPlayerModel/PartyConfig
      // Base method: System.Void PartyConfig::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::StartClientPartyConfig* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::StartClientPartyConfig::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::StartClientPartyConfig*, creationType>()));
      }
    }; // NetworkPlayerModel`1/StartClientPartyConfig
    // Could not write size check! Type: NetworkPlayerModel`1/StartClientPartyConfig is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/NetworkServer
    // [TokenAttribute] Offset: FFFFFFFF
    class NetworkServer : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::GlobalNamespace::INetworkPlayer*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "NetworkServer";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private readonly NetworkPlayerModel`1<T> _playerModel
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* playerModel;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // private readonly System.String _code
      // Size: 0x8
      // Offset: 0x0
      ::StringW code;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // private readonly BeatmapLevelSelectionMask _selectionMask
      // Size: 0x18
      // Offset: 0x0
      ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
      // private readonly GameplayServerConfiguration _configuration
      // Size: 0x18
      // Offset: 0x0
      ::GlobalNamespace::GameplayServerConfiguration configuration;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
      // private System.Int32 _currentPlayerCount
      // Size: 0x4
      // Offset: 0x0
      int currentPlayerCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Single _lastUpdateTime
      // Size: 0x4
      // Offset: 0x0
      float lastUpdateTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating interface conversion operator: operator ::GlobalNamespace::INetworkPlayer
      operator ::GlobalNamespace::INetworkPlayer() noexcept {
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
      }
      // Creating interface conversion operator: i_INetworkPlayer
      inline ::GlobalNamespace::INetworkPlayer* i_INetworkPlayer() noexcept {
        return reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly NetworkPlayerModel`1<T> _playerModel
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn__playerModel() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__playerModel");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerModel"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.String _code
      [[deprecated("Use field access instead!")]] ::StringW& dyn__code() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__code");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_code"))->offset;
        return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly BeatmapLevelSelectionMask _selectionMask
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn__selectionMask() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__selectionMask");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_selectionMask"))->offset;
        return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSelectionMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly GameplayServerConfiguration _configuration
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn__configuration() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__configuration");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_configuration"))->offset;
        return *reinterpret_cast<::GlobalNamespace::GameplayServerConfiguration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _currentPlayerCount
      [[deprecated("Use field access instead!")]] int& dyn__currentPlayerCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__currentPlayerCount");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPlayerCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Single _lastUpdateTime
      [[deprecated("Use field access instead!")]] float& dyn__lastUpdateTime() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::dyn__lastUpdateTime");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastUpdateTime"))->offset;
        return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private System.String INetworkPlayer.get_userId()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW INetworkPlayer_get_userId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::INetworkPlayer.get_userId");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INetworkPlayer.get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.String get_code()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_code() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_code");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // private System.String INetworkPlayer.get_userName()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW INetworkPlayer_get_userName() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::INetworkPlayer.get_userName");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INetworkPlayer.get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.String get_serverName()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_serverName() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_serverName");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.Boolean get_isMe()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isMe() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_isMe");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Int32 get_currentPartySize()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_currentPartySize() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_currentPartySize");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public BeatmapLevelSelectionMask get_selectionMask()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_selectionMask");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelSelectionMask, false>(this, ___internal__method);
      }
      // public GameplayServerConfiguration get_configuration()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::GameplayServerConfiguration get_configuration() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_configuration");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
      }
      // public IConnectedPlayer get_connectedPlayer()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::IConnectedPlayer* get_connectedPlayer() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_connectedPlayer");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
      }
      // public System.Boolean get_isMyPartyOwner()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isMyPartyOwner() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_isMyPartyOwner");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_hasTimedOut()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_hasTimedOut() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_hasTimedOut");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTimedOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canJoin()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canJoin() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canJoin");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_requiresPassword()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_requiresPassword() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_requiresPassword");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_isWaitingOnJoin()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isWaitingOnJoin() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_isWaitingOnJoin");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canInvite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canInvite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canInvite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_isWaitingOnInvite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_isWaitingOnInvite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_isWaitingOnInvite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canKick()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canKick() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canKick");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canLeave()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canLeave() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canLeave");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canBlock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canBlock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canBlock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_canUnblock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_canUnblock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::get_canUnblock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void .ctor(NetworkPlayerModel`1<T> playerModel, System.String code, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::NetworkServer* New_ctor(::GlobalNamespace::NetworkPlayerModel_1<T>* playerModel, ::StringW code, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::NetworkServer*, creationType>(playerModel, code, selectionMask, configuration)));
      }
      // public System.Void Update(System.Int32 currentPlayerCount)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Update(int currentPlayerCount) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Update");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPlayerCount)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentPlayerCount);
      }
      // public System.Void Join()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Join() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Join");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Join(System.String password)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Join(::StringW password) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Join");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, password);
      }
      // public System.Void Invite()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Invite() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Invite");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Kick()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Kick() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Kick");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Leave()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Leave() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Leave");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Block()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Block() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Block");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Unblock()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Unblock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::Unblock");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void SendJoinResponse(System.Boolean accept)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SendJoinResponse(bool accept) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::SendJoinResponse");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
      }
      // public System.Void SendInviteResponse(System.Boolean accept)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SendInviteResponse(bool accept) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::NetworkServer::SendInviteResponse");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
      }
    }; // NetworkPlayerModel`1/NetworkServer
    // Could not write size check! Type: NetworkPlayerModel`1/NetworkServer is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/<InitAuthenticationTokenProvider>d__53
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $InitAuthenticationTokenProvider$d__53 : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<InitAuthenticationTokenProvider>d__53";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IAuthenticationTokenProvider> <>t__builder
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IAuthenticationTokenProvider*> $$t__builder;
      // public NetworkPlayerModel`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // private System.Runtime.CompilerServices.TaskAwaiter`1<UserInfo> <>u__1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::UserInfo*> $$u__1;
      public:
      // Creating value type constructor for type: $InitAuthenticationTokenProvider$d__53
      constexpr $InitAuthenticationTokenProvider$d__53(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IAuthenticationTokenProvider*> $$t__builder_ = {}, ::GlobalNamespace::NetworkPlayerModel_1<T>* $$4__this_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::UserInfo*> $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, $$4__this{$$4__this_}, $$u__1{$$u__1_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
      operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
        return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
      }
      // Creating interface conversion operator: i_IAsyncStateMachine
      inline ::System::Runtime::CompilerServices::IAsyncStateMachine* i_IAsyncStateMachine() noexcept {
        return reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::dyn_$$1__state");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IAuthenticationTokenProvider> <>t__builder
      [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IAuthenticationTokenProvider*>& dyn_$$t__builder() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::dyn_$$t__builder");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
        return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IAuthenticationTokenProvider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public NetworkPlayerModel`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::dyn_$$4__this");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UserInfo> <>u__1
      [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::UserInfo*>& dyn_$$u__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::dyn_$$u__1");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
        return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::UserInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private System.Void MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$InitAuthenticationTokenProvider$d__53::SetStateMachine");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
      }
    }; // NetworkPlayerModel`1/<InitAuthenticationTokenProvider>d__53
    // Could not write size check! Type: NetworkPlayerModel`1/<InitAuthenticationTokenProvider>d__53 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/<GetPartyPlayers>d__54
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetPartyPlayers$d__54 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>, public ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<GetPartyPlayers>d__54";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private INetworkPlayer <>2__current
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::INetworkPlayer* $$2__current;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::INetworkPlayer*) == 0x8);
      // private System.Int32 <>l__initialThreadId
      // Size: 0x4
      // Offset: 0x0
      int $$l__initialThreadId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public NetworkPlayerModel`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // private System.Int32 <i>5__2
      // Size: 0x4
      // Offset: 0x0
      int $i$5__2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>
      operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Creating interface conversion operator: i_INetworkPlayer
      inline ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* i_INetworkPlayer() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>
      operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private INetworkPlayer <>2__current
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::INetworkPlayer*& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>l__initialThreadId
      [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::dyn_$$l__initialThreadId");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public NetworkPlayerModel`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <i>5__2
      [[deprecated("Use field access instead!")]] int& dyn_$i$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::dyn_$i$5__2");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__2"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private INetworkPlayer System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::INetworkPlayer* System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::$GetPartyPlayers$d__54* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::$GetPartyPlayers$d__54*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerator`1<INetworkPlayer> System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>* System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetPartyPlayers$d__54::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
    }; // NetworkPlayerModel`1/<GetPartyPlayers>d__54
    // Could not write size check! Type: NetworkPlayerModel`1/<GetPartyPlayers>d__54 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/<GetOtherPlayers>d__55
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetOtherPlayers$d__55 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>, public ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*/ {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<GetOtherPlayers>d__55";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private INetworkPlayer <>2__current
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::INetworkPlayer* $$2__current;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::INetworkPlayer*) == 0x8);
      // private System.Int32 <>l__initialThreadId
      // Size: 0x4
      // Offset: 0x0
      int $$l__initialThreadId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public NetworkPlayerModel`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<NetworkPlayerModel`1/NetworkServer<T>> <>7__wrap1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>::Enumerator $$7__wrap1;
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>
      operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Creating interface conversion operator: i_INetworkPlayer
      inline ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* i_INetworkPlayer() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>
      operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private INetworkPlayer <>2__current
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::INetworkPlayer*& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<::GlobalNamespace::INetworkPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>l__initialThreadId
      [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::dyn_$$l__initialThreadId");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public NetworkPlayerModel`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<NetworkPlayerModel`1/NetworkServer<T>> <>7__wrap1
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>::Enumerator& dyn_$$7__wrap1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::dyn_$$7__wrap1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private INetworkPlayer System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::GlobalNamespace::INetworkPlayer* System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::$GetOtherPlayers$d__55* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::$GetOtherPlayers$d__55*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void <>m__Finally1()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $$m__Finally1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::<>m__Finally1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerator`1<INetworkPlayer> System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>* System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$GetOtherPlayers$d__55::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
    }; // NetworkPlayerModel`1/<GetOtherPlayers>d__55
    // Could not write size check! Type: NetworkPlayerModel`1/<GetOtherPlayers>d__55 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/<>c__DisplayClass56_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass56_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass56_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Boolean clearCurrentList
      // Size: 0x1
      // Offset: 0x0
      bool clearCurrentList;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public NetworkPlayerModel`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::NetworkPlayerModel_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::NetworkPlayerModel_1<T>*) == 0x8);
      // public BeatmapLevelSelectionMask localSelectionMask
      // Size: 0x18
      // Offset: 0x0
      ::GlobalNamespace::BeatmapLevelSelectionMask localSelectionMask;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
      // public GameplayServerConfiguration localConfiguration
      // Size: 0x18
      // Offset: 0x0
      ::GlobalNamespace::GameplayServerConfiguration localConfiguration;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Boolean clearCurrentList
      [[deprecated("Use field access instead!")]] bool& dyn_clearCurrentList() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::dyn_clearCurrentList");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clearCurrentList"))->offset;
        return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public NetworkPlayerModel`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerModel_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::GlobalNamespace::NetworkPlayerModel_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public BeatmapLevelSelectionMask localSelectionMask
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn_localSelectionMask() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::dyn_localSelectionMask");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSelectionMask"))->offset;
        return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSelectionMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public GameplayServerConfiguration localConfiguration
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn_localConfiguration() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::dyn_localConfiguration");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localConfiguration"))->offset;
        return *reinterpret_cast<::GlobalNamespace::GameplayServerConfiguration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::$$c__DisplayClass56_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::$$c__DisplayClass56_0*, creationType>()));
      }
      // System.Void <Refresh>b__0(System.Collections.Generic.IReadOnlyList`1<PublicServerInfo> servers)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $Refresh$b__0(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>* servers) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::<Refresh>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(servers)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, servers);
      }
      // System.Void <Refresh>b__1(ConnectionFailedReason reason)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $Refresh$b__1(::GlobalNamespace::ConnectionFailedReason reason) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c__DisplayClass56_0::<Refresh>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reason);
      }
    }; // NetworkPlayerModel`1/<>c__DisplayClass56_0
    // Could not write size check! Type: NetworkPlayerModel`1/<>c__DisplayClass56_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: NetworkPlayerModel`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = NetworkPlayerModel_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly NetworkPlayerModel`1/<>c<T> <>9
      static typename ::GlobalNamespace::NetworkPlayerModel_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename NetworkPlayerModel_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly NetworkPlayerModel`1/<>c<T> <>9
      static void _set_$$9(typename ::GlobalNamespace::NetworkPlayerModel_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename NetworkPlayerModel_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Comparison`1<NetworkPlayerModel`1/NetworkPlayer<T>> <>9__68_0
      static ::System::Comparison_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>* _get_$$9__68_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::_get_$$9__68_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename NetworkPlayerModel_1<T>::$$c*>::get(), "<>9__68_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Comparison`1<NetworkPlayerModel`1/NetworkPlayer<T>> <>9__68_0
      static void _set_$$9__68_0(::System::Comparison_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::_set_$$9__68_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename NetworkPlayerModel_1<T>::$$c*>::get(), "<>9__68_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename NetworkPlayerModel_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkPlayerModel_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkPlayerModel_1<T>::$$c*, creationType>()));
      }
      // System.Int32 <PlayerOrderChanged>b__68_0(NetworkPlayerModel`1/NetworkPlayer<T> a, NetworkPlayerModel`1/NetworkPlayer<T> b)
      // Offset: 0xFFFFFFFFFFFFFFFF
      int $PlayerOrderChanged$b__68_0(typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer* a, typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer* b) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::$$c::<PlayerOrderChanged>b__68_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PlayerOrderChanged>b__68_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, a, b);
      }
    }; // NetworkPlayerModel`1/<>c
    // Could not write size check! Type: NetworkPlayerModel`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // [InjectAttribute] Offset: 0x10DC8DC
    // private readonly IPlatformUserModel _platformUserModel
    // Size: 0x8
    // Offset: 0x0
    ::GlobalNamespace::IPlatformUserModel* platformUserModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPlatformUserModel*) == 0x8);
    // protected System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> authenticationTokenProviderTask
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* authenticationTokenProviderTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*) == 0x8);
    // private NetworkPlayerModel`1/NetworkPlayer<T> _localPlayer
    // Size: 0x8
    // Offset: 0x0
    typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer* localPlayer;
    // Field size check
    static_assert(sizeof(typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*) == 0x8);
    // private System.Boolean _networkingFailed
    // Size: 0x1
    // Offset: 0x0
    bool networkingFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _masterServerUnreachable
    // Size: 0x1
    // Offset: 0x0
    bool masterServerUnreachable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 _currentPlayerCount
    // Size: 0x4
    // Offset: 0x0
    int currentPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`1<System.Int32> partySizeChangedEvent
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<int>* partySizeChangedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    // private System.Action partyRefreshingEvent
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* partyRefreshingEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<INetworkPlayerModel> partyChangedEvent
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* partyChangedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*) == 0x8);
    // private System.Action`1<INetworkPlayer> joinRequestedEvent
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<::GlobalNamespace::INetworkPlayer*>* joinRequestedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*) == 0x8);
    // private System.Action`1<INetworkPlayer> inviteRequestedEvent
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<::GlobalNamespace::INetworkPlayer*>* inviteRequestedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<NetworkPlayerModel`1/NetworkPlayer<T>> _partyPlayers
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>* partyPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<NetworkPlayerModel`1/NetworkServer<T>> _publicServers
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>* publicServers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>*) == 0x8);
    // private System.Single _lastServerRefresh
    // Size: 0x4
    // Offset: 0x0
    float lastServerRefresh;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isRefreshing
    // Size: 0x1
    // Offset: 0x0
    bool isRefreshing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _filterChanged
    // Size: 0x1
    // Offset: 0x0
    bool filterChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Autogenerated static field getter
    // Get static field: static private System.Single kServerRefreshFrequency
    static float _get_kServerRefreshFrequency() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::_get_kServerRefreshFrequency");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkPlayerModel_1<T>*>::get(), "kServerRefreshFrequency"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Single kServerRefreshFrequency
    static void _set_kServerRefreshFrequency(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::_set_kServerRefreshFrequency");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkPlayerModel_1<T>*>::get(), "kServerRefreshFrequency", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Single kServerTimeoutPeriod
    static float _get_kServerTimeoutPeriod() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::_get_kServerTimeoutPeriod");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkPlayerModel_1<T>*>::get(), "kServerTimeoutPeriod"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Single kServerTimeoutPeriod
    static void _set_kServerTimeoutPeriod(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::_set_kServerTimeoutPeriod");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkPlayerModel_1<T>*>::get(), "kServerTimeoutPeriod", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly IPlatformUserModel _platformUserModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPlatformUserModel*& dyn__platformUserModel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__platformUserModel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_platformUserModel"))->offset;
      return *reinterpret_cast<::GlobalNamespace::IPlatformUserModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> authenticationTokenProviderTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*& dyn_authenticationTokenProviderTask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_authenticationTokenProviderTask");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "authenticationTokenProviderTask"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private NetworkPlayerModel`1/NetworkPlayer<T> _localPlayer
    [[deprecated("Use field access instead!")]] typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*& dyn__localPlayer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__localPlayer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayer"))->offset;
      return *reinterpret_cast<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _networkingFailed
    [[deprecated("Use field access instead!")]] bool& dyn__networkingFailed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__networkingFailed");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_networkingFailed"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _masterServerUnreachable
    [[deprecated("Use field access instead!")]] bool& dyn__masterServerUnreachable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__masterServerUnreachable");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_masterServerUnreachable"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _currentPlayerCount
    [[deprecated("Use field access instead!")]] int& dyn__currentPlayerCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__currentPlayerCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPlayerCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<System.Int32> partySizeChangedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<int>*& dyn_partySizeChangedEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_partySizeChangedEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partySizeChangedEvent"))->offset;
      return *reinterpret_cast<::System::Action_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action partyRefreshingEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_partyRefreshingEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_partyRefreshingEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partyRefreshingEvent"))->offset;
      return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<INetworkPlayerModel> partyChangedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*& dyn_partyChangedEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_partyChangedEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partyChangedEvent"))->offset;
      return *reinterpret_cast<::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<INetworkPlayer> joinRequestedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::INetworkPlayer*>*& dyn_joinRequestedEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_joinRequestedEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joinRequestedEvent"))->offset;
      return *reinterpret_cast<::System::Action_1<::GlobalNamespace::INetworkPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<INetworkPlayer> inviteRequestedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::INetworkPlayer*>*& dyn_inviteRequestedEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn_inviteRequestedEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inviteRequestedEvent"))->offset;
      return *reinterpret_cast<::System::Action_1<::GlobalNamespace::INetworkPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<NetworkPlayerModel`1/NetworkPlayer<T>> _partyPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>*& dyn__partyPlayers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__partyPlayers");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_partyPlayers"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<NetworkPlayerModel`1/NetworkServer<T>> _publicServers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>*& dyn__publicServers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__publicServers");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_publicServers"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single _lastServerRefresh
    [[deprecated("Use field access instead!")]] float& dyn__lastServerRefresh() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__lastServerRefresh");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastServerRefresh"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _isRefreshing
    [[deprecated("Use field access instead!")]] bool& dyn__isRefreshing() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__isRefreshing");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isRefreshing"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _filterChanged
    [[deprecated("Use field access instead!")]] bool& dyn__filterChanged() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::dyn__filterChanged");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_filterChanged"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.String get_secret()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_secret() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_secret");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.String get_code()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_code() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_code");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.String get_partyOwnerId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_partyOwnerId() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_partyOwnerId");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyOwnerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IEnumerable`1<INetworkPlayer> get_publicServers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* get_publicServers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_publicServers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
    }
    // protected T get_connectionManager()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_connectionManager() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_connectionManager");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void add_partyRefreshingEvent(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_partyRefreshingEvent(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::add_partyRefreshingEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_partyRefreshingEvent(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_partyRefreshingEvent(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::remove_partyRefreshingEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected IConnectionInitParams`1<T> GetConnectToServerParams(BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.String secret, System.String code)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::IConnectionInitParams_1<T>* GetConnectToServerParams(::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration, ::StringW secret, ::StringW code) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetConnectToServerParams");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectToServerParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectionMask), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectionInitParams_1<T>*, false>(this, ___internal__method, selectionMask, configuration, secret, code);
    }
    // protected IConnectionInitParams`1<T> GetStartClientParams(BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::IConnectionInitParams_1<T>* GetStartClientParams(::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetStartClientParams");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartClientParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectionMask), ::il2cpp_utils::ExtractType(configuration)})));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectionInitParams_1<T>*, false>(this, ___internal__method, selectionMask, configuration);
    }
    // protected System.Void RefreshPublicServers(BeatmapLevelSelectionMask localSelectionMask, GameplayServerConfiguration localConfiguration, System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RefreshPublicServers(::GlobalNamespace::BeatmapLevelSelectionMask localSelectionMask, ::GlobalNamespace::GameplayServerConfiguration localConfiguration, ::System::Action_1<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>*>* onSuccess, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onFailure) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::RefreshPublicServers");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPublicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localSelectionMask), ::il2cpp_utils::ExtractType(localConfiguration), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onFailure)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localSelectionMask, localConfiguration, onSuccess, onFailure);
    }
    // private System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> InitAuthenticationTokenProvider()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* InitAuthenticationTokenProvider() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::InitAuthenticationTokenProvider");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAuthenticationTokenProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*, false>(this, ___internal__method);
    }
    // private System.Void Refresh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Refresh() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::Refresh");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void HandlePlayersChanged()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandlePlayersChanged() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::HandlePlayersChanged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void HandleInviteRequested(INetworkPlayer player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandleInviteRequested(::GlobalNamespace::INetworkPlayer* player) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::HandleInviteRequested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInviteRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
    }
    // private System.Void HandleJoinRequested(INetworkPlayer player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandleJoinRequested(::GlobalNamespace::INetworkPlayer* player) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::HandleJoinRequested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
    }
    // private System.Void HandlePartyChanged(INetworkPlayerModel playerModel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandlePartyChanged(::GlobalNamespace::INetworkPlayerModel* playerModel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::HandlePartyChanged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePartyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerModel)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playerModel);
    }
    // public System.Void ResetMasterServerReachability()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResetMasterServerReachability() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::ResetMasterServerReachability");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetMasterServerReachability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private NetworkPlayerModel`1/NetworkPlayer<T> GetPlayer(System.String userId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer* GetPlayer(::StringW userId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetPlayer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkPlayer*, false>(this, ___internal__method, userId);
    }
    // private NetworkPlayerModel`1/NetworkServer<T> GetServer(System.String code)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer* GetServer(::StringW code) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetServer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::GlobalNamespace::NetworkPlayerModel_1<T>::NetworkServer*, false>(this, ___internal__method, code);
    }
    // public override System.Boolean get_localPlayerIsPartyOwner()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_localPlayerIsPartyOwner()
    bool get_localPlayerIsPartyOwner() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_localPlayerIsPartyOwner");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public override System.Boolean get_hasNetworkingFailed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_hasNetworkingFailed()
    bool get_hasNetworkingFailed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_hasNetworkingFailed");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasNetworkingFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public override System.Int32 get_currentPartySize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Int32 BaseNetworkPlayerModel::get_currentPartySize()
    int get_currentPartySize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::get_currentPartySize");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Void add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void add_partySizeChangedEvent(::System::Action_1<int>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::add_partySizeChangedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void remove_partySizeChangedEvent(::System::Action_1<int>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::remove_partySizeChangedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void add_partyChangedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::add_partyChangedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void remove_partyChangedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::remove_partyChangedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_joinRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::add_joinRequestedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_joinRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::remove_joinRequestedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_inviteRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::add_inviteRequestedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_inviteRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::remove_inviteRequestedEvent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPlayerModel_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPlayerModel_1<T>*, creationType>()));
    }
    // protected override System.Void Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Start()
    void Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::Start");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void Update()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Update()
    void Update() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::Update");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public override System.Boolean CreatePartyConnection(INetworkPlayerModelPartyConfig`1<T2> config)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::CreatePartyConnection(INetworkPlayerModelPartyConfig`1<T2> config)
    template<class T2>
    bool CreatePartyConnection(::GlobalNamespace::INetworkPlayerModelPartyConfig_1<T2>* config) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T2>, ::GlobalNamespace::INetworkPlayerModel>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::CreatePartyConnection");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePartyConnection", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, config);
    }
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetPartyPlayers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetPartyPlayers()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* GetPartyPlayers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetPartyPlayers");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
    }
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetOtherPlayers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetOtherPlayers()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* GetOtherPlayers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::GetOtherPlayers");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOtherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
    }
    // protected override System.Void Connected()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Connected()
    void Connected() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::Connected");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void Disconnected(DisconnectedReason disconnectedReason)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Disconnected(DisconnectedReason disconnectedReason)
    void Disconnected(::GlobalNamespace::DisconnectedReason disconnectedReason) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::Disconnected");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disconnectedReason);
    }
    // protected override System.Void ConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::ConnectionFailed(ConnectionFailedReason reason)
    void ConnectionFailed(::GlobalNamespace::ConnectionFailedReason reason) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::ConnectionFailed");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reason);
    }
    // protected override System.Void PlayerConnected(IConnectedPlayer player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerConnected(IConnectedPlayer player)
    void PlayerConnected(::GlobalNamespace::IConnectedPlayer* player) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::PlayerConnected");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
    }
    // protected override System.Void PlayerDisconnected(IConnectedPlayer player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerDisconnected(IConnectedPlayer player)
    void PlayerDisconnected(::GlobalNamespace::IConnectedPlayer* player) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::PlayerDisconnected");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
    }
    // protected override System.Void PlayerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerStateChanged(IConnectedPlayer connectedPlayer)
    void PlayerStateChanged(::GlobalNamespace::IConnectedPlayer* connectedPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::PlayerStateChanged");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connectedPlayer);
    }
    // protected override System.Void PlayerOrderChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerOrderChanged(IConnectedPlayer connectedPlayer)
    void PlayerOrderChanged(::GlobalNamespace::IConnectedPlayer* connectedPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayerModel_1::PlayerOrderChanged");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerOrderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connectedPlayer);
    }
  }; // NetworkPlayerModel`1
  // Could not write size check! Type: NetworkPlayerModel`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
