// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: AssetReference
  class AssetReference;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*, "", "VideoProjectionDataModelSO/VideoClipWithId");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VideoProjectionDataModelSO/VideoClipWithId
  // [TokenAttribute] Offset: FFFFFFFF
  class VideoProjectionDataModelSO::VideoClipWithId : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _id
    // Size: 0x4
    // Offset: 0x10
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: id and: videoAssetReference
    char __padding0[0x4] = {};
    // private UnityEngine.AddressableAssets.AssetReference _videoAssetReference
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AddressableAssets::AssetReference* videoAssetReference;
    // Field size check
    static_assert(sizeof(::UnityEngine::AddressableAssets::AssetReference*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _id
    [[deprecated("Use field access instead!")]] int& dyn__id();
    // Get instance field reference: private UnityEngine.AddressableAssets.AssetReference _videoAssetReference
    [[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AssetReference*& dyn__videoAssetReference();
    // public System.Int32 get_id()
    // Offset: 0x287FD60
    int get_id();
    // public UnityEngine.AddressableAssets.AssetReference get_videoAssetReference()
    // Offset: 0x287FD68
    ::UnityEngine::AddressableAssets::AssetReference* get_videoAssetReference();
    // public System.Void .ctor()
    // Offset: 0x287FD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VideoProjectionDataModelSO::VideoClipWithId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VideoProjectionDataModelSO::VideoClipWithId*, creationType>()));
    }
  }; // VideoProjectionDataModelSO/VideoClipWithId
  #pragma pack(pop)
  static check_size<sizeof(VideoProjectionDataModelSO::VideoClipWithId), 24 + sizeof(::UnityEngine::AddressableAssets::AssetReference*)> __GlobalNamespace_VideoProjectionDataModelSO_VideoClipWithIdSizeCheck;
  static_assert(sizeof(VideoProjectionDataModelSO::VideoClipWithId) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::*)()>(&GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_videoAssetReference
// Il2CppName: get_videoAssetReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AddressableAssets::AssetReference* (GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::*)()>(&GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_videoAssetReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*), "get_videoAssetReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
