// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VertexPath
  class VertexPath;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderMeshConstructor
  class SliderMeshConstructor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderMeshConstructor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderMeshConstructor*, "", "SliderMeshConstructor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: SliderMeshConstructor
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderMeshConstructor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // protected UnityEngine.Vector3[] reusableVerts
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> reusableVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // protected UnityEngine.Vector2[] reusableUvs
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector2> reusableUvs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // protected UnityEngine.Vector3[] reusableNormals
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> reusableNormals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // protected System.Int32[] reusableTriangles
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> reusableTriangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: protected UnityEngine.Vector3[] reusableVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_reusableVerts();
    // Get instance field reference: protected UnityEngine.Vector2[] reusableUvs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_reusableUvs();
    // Get instance field reference: protected UnityEngine.Vector3[] reusableNormals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_reusableNormals();
    // Get instance field reference: protected System.Int32[] reusableTriangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_reusableTriangles();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0x1496EE8
    ::UnityEngine::Mesh* get_mesh();
    // protected System.Void .ctor()
    // Offset: 0x1497130
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderMeshConstructor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderMeshConstructor*, creationType>()));
    }
    // public System.Void CreateMeshIfNonExisting()
    // Offset: 0x1496EF0
    void CreateMeshIfNonExisting();
    // public System.Void CreateSliderMesh(VertexPath path)
    // Offset: 0x1496FA8
    void CreateSliderMesh(::GlobalNamespace::VertexPath* path);
    // protected System.Void CreateSliderMeshInternal(VertexPath path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CreateSliderMeshInternal(::GlobalNamespace::VertexPath* path);
    // protected System.Int32 GetVertexCount(VertexPath path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetVertexCount(::GlobalNamespace::VertexPath* path);
    // protected System.Int32 GetTrianglesCount(VertexPath path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetTrianglesCount(::GlobalNamespace::VertexPath* path);
  }; // SliderMeshConstructor
  #pragma pack(pop)
  static check_size<sizeof(SliderMeshConstructor), 64 + sizeof(::UnityEngine::Mesh*)> __GlobalNamespace_SliderMeshConstructorSizeCheck;
  static_assert(sizeof(SliderMeshConstructor) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (GlobalNamespace::SliderMeshConstructor::*)()>(&GlobalNamespace::SliderMeshConstructor::get_mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting
// Il2CppName: CreateMeshIfNonExisting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMeshConstructor::*)()>(&GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "CreateMeshIfNonExisting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::CreateSliderMesh
// Il2CppName: CreateSliderMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMeshConstructor::*)(::GlobalNamespace::VertexPath*)>(&GlobalNamespace::SliderMeshConstructor::CreateSliderMesh)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("", "VertexPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "CreateSliderMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal
// Il2CppName: CreateSliderMeshInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMeshConstructor::*)(::GlobalNamespace::VertexPath*)>(&GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("", "VertexPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "CreateSliderMeshInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::GetVertexCount
// Il2CppName: GetVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SliderMeshConstructor::*)(::GlobalNamespace::VertexPath*)>(&GlobalNamespace::SliderMeshConstructor::GetVertexCount)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("", "VertexPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "GetVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMeshConstructor::GetTrianglesCount
// Il2CppName: GetTrianglesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SliderMeshConstructor::*)(::GlobalNamespace::VertexPath*)>(&GlobalNamespace::SliderMeshConstructor::GetTrianglesCount)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("", "VertexPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMeshConstructor*), "GetTrianglesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
