// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: SliderMidAnchorMode
#include "GlobalNamespace/SliderMidAnchorMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Type because it is already included!
  // Skipping declaration: BeatmapDataItem because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderData
  class SliderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderData*, "", "SliderData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: SliderData
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderData : public ::GlobalNamespace::BeatmapObjectData {
    public:
    // Nested type: ::GlobalNamespace::SliderData::Type
    struct Type;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SliderData/Type
    // [TokenAttribute] Offset: FFFFFFFF
    struct Type/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SliderData/Type Normal
      static constexpr const int Normal = 0;
      // Get static field: static public SliderData/Type Normal
      static ::GlobalNamespace::SliderData::Type _get_Normal();
      // Set static field: static public SliderData/Type Normal
      static void _set_Normal(::GlobalNamespace::SliderData::Type value);
      // static field const value: static public SliderData/Type Burst
      static constexpr const int Burst = 1;
      // Get static field: static public SliderData/Type Burst
      static ::GlobalNamespace::SliderData::Type _get_Burst();
      // Set static field: static public SliderData/Type Burst
      static void _set_Burst(::GlobalNamespace::SliderData::Type value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SliderData/Type
    #pragma pack(pop)
    static check_size<sizeof(SliderData::Type), 0 + sizeof(int)> __GlobalNamespace_SliderData_TypeSizeCheck;
    static_assert(sizeof(SliderData::Type) == 0x4);
    public:
    // private ColorType <colorType>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::ColorType colorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorType) == 0x4);
    // private SliderData/Type <sliderType>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::SliderData::Type sliderType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderData::Type) == 0x4);
    // private System.Boolean <hasHeadNote>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool hasHeadNote;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasHeadNote and: headControlPointLengthMultiplier
    char __padding2[0x3] = {};
    // private System.Single <headControlPointLengthMultiplier>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float headControlPointLengthMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <headLineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int headLineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private NoteLineLayer <headLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::NoteLineLayer headLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private NoteLineLayer <headBeforeJumpLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::NoteLineLayer headBeforeJumpLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private NoteCutDirection <headCutDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    ::GlobalNamespace::NoteCutDirection headCutDirection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteCutDirection) == 0x4);
    // private System.Single <headCutDirectionAngleOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    float headCutDirectionAngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <hasTailNote>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool hasTailNote;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasTailNote and: tailTime
    char __padding9[0x3] = {};
    // private System.Single <tailTime>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float tailTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <tailLineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    int tailLineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <tailControlPointLengthMultiplier>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float tailControlPointLengthMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private NoteLineLayer <tailLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    ::GlobalNamespace::NoteLineLayer tailLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private NoteLineLayer <tailBeforeJumpLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::NoteLineLayer tailBeforeJumpLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private NoteCutDirection <tailCutDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::NoteCutDirection tailCutDirection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteCutDirection) == 0x4);
    // private System.Single <tailCutDirectionAngleOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    float tailCutDirectionAngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private SliderMidAnchorMode <midAnchorMode>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    ::GlobalNamespace::SliderMidAnchorMode midAnchorMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderMidAnchorMode) == 0x4);
    // private System.Int32 <sliceCount>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    int sliceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <squishAmount>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    float squishAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private ColorType <colorType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& dyn_$colorType$k__BackingField();
    // Get instance field reference: private SliderData/Type <sliderType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderData::Type& dyn_$sliderType$k__BackingField();
    // Get instance field reference: private System.Boolean <hasHeadNote>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasHeadNote$k__BackingField();
    // Get instance field reference: private System.Single <headControlPointLengthMultiplier>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$headControlPointLengthMultiplier$k__BackingField();
    // Get instance field reference: private System.Int32 <headLineIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$headLineIndex$k__BackingField();
    // Get instance field reference: private NoteLineLayer <headLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$headLineLayer$k__BackingField();
    // Get instance field reference: private NoteLineLayer <headBeforeJumpLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$headBeforeJumpLineLayer$k__BackingField();
    // Get instance field reference: private NoteCutDirection <headCutDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& dyn_$headCutDirection$k__BackingField();
    // Get instance field reference: private System.Single <headCutDirectionAngleOffset>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$headCutDirectionAngleOffset$k__BackingField();
    // Get instance field reference: private System.Boolean <hasTailNote>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasTailNote$k__BackingField();
    // Get instance field reference: private System.Single <tailTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$tailTime$k__BackingField();
    // Get instance field reference: private System.Int32 <tailLineIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$tailLineIndex$k__BackingField();
    // Get instance field reference: private System.Single <tailControlPointLengthMultiplier>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$tailControlPointLengthMultiplier$k__BackingField();
    // Get instance field reference: private NoteLineLayer <tailLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$tailLineLayer$k__BackingField();
    // Get instance field reference: private NoteLineLayer <tailBeforeJumpLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$tailBeforeJumpLineLayer$k__BackingField();
    // Get instance field reference: private NoteCutDirection <tailCutDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& dyn_$tailCutDirection$k__BackingField();
    // Get instance field reference: private System.Single <tailCutDirectionAngleOffset>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$tailCutDirectionAngleOffset$k__BackingField();
    // Get instance field reference: private SliderMidAnchorMode <midAnchorMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMidAnchorMode& dyn_$midAnchorMode$k__BackingField();
    // Get instance field reference: private System.Int32 <sliceCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$sliceCount$k__BackingField();
    // Get instance field reference: private System.Single <squishAmount>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$squishAmount$k__BackingField();
    // public ColorType get_colorType()
    // Offset: 0x283F500
    ::GlobalNamespace::ColorType get_colorType();
    // private System.Void set_colorType(ColorType value)
    // Offset: 0x283F508
    void set_colorType(::GlobalNamespace::ColorType value);
    // public SliderData/Type get_sliderType()
    // Offset: 0x283F510
    ::GlobalNamespace::SliderData::Type get_sliderType();
    // private System.Void set_sliderType(SliderData/Type value)
    // Offset: 0x283F518
    void set_sliderType(::GlobalNamespace::SliderData::Type value);
    // public System.Boolean get_hasHeadNote()
    // Offset: 0x283F520
    bool get_hasHeadNote();
    // private System.Void set_hasHeadNote(System.Boolean value)
    // Offset: 0x283F528
    void set_hasHeadNote(bool value);
    // public System.Single get_headControlPointLengthMultiplier()
    // Offset: 0x283F534
    float get_headControlPointLengthMultiplier();
    // private System.Void set_headControlPointLengthMultiplier(System.Single value)
    // Offset: 0x283F53C
    void set_headControlPointLengthMultiplier(float value);
    // public System.Int32 get_headLineIndex()
    // Offset: 0x283F544
    int get_headLineIndex();
    // private System.Void set_headLineIndex(System.Int32 value)
    // Offset: 0x283F54C
    void set_headLineIndex(int value);
    // public NoteLineLayer get_headLineLayer()
    // Offset: 0x283F554
    ::GlobalNamespace::NoteLineLayer get_headLineLayer();
    // private System.Void set_headLineLayer(NoteLineLayer value)
    // Offset: 0x283F55C
    void set_headLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public NoteLineLayer get_headBeforeJumpLineLayer()
    // Offset: 0x283F564
    ::GlobalNamespace::NoteLineLayer get_headBeforeJumpLineLayer();
    // private System.Void set_headBeforeJumpLineLayer(NoteLineLayer value)
    // Offset: 0x283F56C
    void set_headBeforeJumpLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public NoteCutDirection get_headCutDirection()
    // Offset: 0x283F574
    ::GlobalNamespace::NoteCutDirection get_headCutDirection();
    // private System.Void set_headCutDirection(NoteCutDirection value)
    // Offset: 0x283F57C
    void set_headCutDirection(::GlobalNamespace::NoteCutDirection value);
    // public System.Single get_headCutDirectionAngleOffset()
    // Offset: 0x283F584
    float get_headCutDirectionAngleOffset();
    // private System.Void set_headCutDirectionAngleOffset(System.Single value)
    // Offset: 0x283F58C
    void set_headCutDirectionAngleOffset(float value);
    // public System.Boolean get_hasTailNote()
    // Offset: 0x283F594
    bool get_hasTailNote();
    // private System.Void set_hasTailNote(System.Boolean value)
    // Offset: 0x283F59C
    void set_hasTailNote(bool value);
    // public System.Single get_tailTime()
    // Offset: 0x283F5A8
    float get_tailTime();
    // private System.Void set_tailTime(System.Single value)
    // Offset: 0x283F5B0
    void set_tailTime(float value);
    // public System.Int32 get_tailLineIndex()
    // Offset: 0x283F5B8
    int get_tailLineIndex();
    // private System.Void set_tailLineIndex(System.Int32 value)
    // Offset: 0x283F5C0
    void set_tailLineIndex(int value);
    // public System.Single get_tailControlPointLengthMultiplier()
    // Offset: 0x283F5C8
    float get_tailControlPointLengthMultiplier();
    // private System.Void set_tailControlPointLengthMultiplier(System.Single value)
    // Offset: 0x283F5D0
    void set_tailControlPointLengthMultiplier(float value);
    // public NoteLineLayer get_tailLineLayer()
    // Offset: 0x283F5D8
    ::GlobalNamespace::NoteLineLayer get_tailLineLayer();
    // private System.Void set_tailLineLayer(NoteLineLayer value)
    // Offset: 0x283F5E0
    void set_tailLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public NoteLineLayer get_tailBeforeJumpLineLayer()
    // Offset: 0x283F5E8
    ::GlobalNamespace::NoteLineLayer get_tailBeforeJumpLineLayer();
    // private System.Void set_tailBeforeJumpLineLayer(NoteLineLayer value)
    // Offset: 0x283F5F0
    void set_tailBeforeJumpLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public NoteCutDirection get_tailCutDirection()
    // Offset: 0x283F5F8
    ::GlobalNamespace::NoteCutDirection get_tailCutDirection();
    // private System.Void set_tailCutDirection(NoteCutDirection value)
    // Offset: 0x283F600
    void set_tailCutDirection(::GlobalNamespace::NoteCutDirection value);
    // public System.Single get_tailCutDirectionAngleOffset()
    // Offset: 0x283F608
    float get_tailCutDirectionAngleOffset();
    // private System.Void set_tailCutDirectionAngleOffset(System.Single value)
    // Offset: 0x283F610
    void set_tailCutDirectionAngleOffset(float value);
    // public SliderMidAnchorMode get_midAnchorMode()
    // Offset: 0x283F618
    ::GlobalNamespace::SliderMidAnchorMode get_midAnchorMode();
    // private System.Void set_midAnchorMode(SliderMidAnchorMode value)
    // Offset: 0x283F620
    void set_midAnchorMode(::GlobalNamespace::SliderMidAnchorMode value);
    // public System.Int32 get_sliceCount()
    // Offset: 0x283F628
    int get_sliceCount();
    // private System.Void set_sliceCount(System.Int32 value)
    // Offset: 0x283F630
    void set_sliceCount(int value);
    // public System.Single get_squishAmount()
    // Offset: 0x283F638
    float get_squishAmount();
    // private System.Void set_squishAmount(System.Single value)
    // Offset: 0x283F640
    void set_squishAmount(float value);
    // public System.Void .ctor(SliderData/Type sliderType, ColorType colorType, System.Boolean hasHeadNote, System.Single headTime, System.Int32 headLineIndex, NoteLineLayer headLineLayer, NoteLineLayer headBeforeJumpLineLayer, System.Single headControlPointLengthMultiplier, NoteCutDirection headCutDirection, System.Single headCutDirectionAngleOffset, System.Boolean hasTailNote, System.Single tailTime, System.Int32 tailLineIndex, NoteLineLayer tailLineLayer, NoteLineLayer tailBeforeJumpLineLayer, System.Single tailControlPointLengthMultiplier, NoteCutDirection tailCutDirection, System.Single tailCutDirectionAngleOffset, SliderMidAnchorMode midAnchorMode, System.Int32 sliceCount, System.Single squishAmount)
    // Offset: 0x283F790
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderData* New_ctor(::GlobalNamespace::SliderData::Type sliderType, ::GlobalNamespace::ColorType colorType, bool hasHeadNote, float headTime, int headLineIndex, ::GlobalNamespace::NoteLineLayer headLineLayer, ::GlobalNamespace::NoteLineLayer headBeforeJumpLineLayer, float headControlPointLengthMultiplier, ::GlobalNamespace::NoteCutDirection headCutDirection, float headCutDirectionAngleOffset, bool hasTailNote, float tailTime, int tailLineIndex, ::GlobalNamespace::NoteLineLayer tailLineLayer, ::GlobalNamespace::NoteLineLayer tailBeforeJumpLineLayer, float tailControlPointLengthMultiplier, ::GlobalNamespace::NoteCutDirection tailCutDirection, float tailCutDirectionAngleOffset, ::GlobalNamespace::SliderMidAnchorMode midAnchorMode, int sliceCount, float squishAmount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderData*, creationType>(sliderType, colorType, hasHeadNote, headTime, headLineIndex, headLineLayer, headBeforeJumpLineLayer, headControlPointLengthMultiplier, headCutDirection, headCutDirectionAngleOffset, hasTailNote, tailTime, tailLineIndex, tailLineLayer, tailBeforeJumpLineLayer, tailControlPointLengthMultiplier, tailCutDirection, tailCutDirectionAngleOffset, midAnchorMode, sliceCount, squishAmount)));
    }
    // static public SliderData CreateSliderData(ColorType colorType, System.Single headTime, System.Int32 headLineIndex, NoteLineLayer headLineLayer, NoteLineLayer headBeforeJumpLineLayer, System.Single headControlPointLengthMultiplier, NoteCutDirection headCutDirection, System.Single tailTime, System.Int32 tailLineIndex, NoteLineLayer tailLineLayer, NoteLineLayer tailBeforeJumpLineLayer, System.Single tailControlPointLengthMultiplier, NoteCutDirection tailCutDirection, SliderMidAnchorMode midAnchorMode)
    // Offset: 0x283F8E4
    static ::GlobalNamespace::SliderData* CreateSliderData(::GlobalNamespace::ColorType colorType, float headTime, int headLineIndex, ::GlobalNamespace::NoteLineLayer headLineLayer, ::GlobalNamespace::NoteLineLayer headBeforeJumpLineLayer, float headControlPointLengthMultiplier, ::GlobalNamespace::NoteCutDirection headCutDirection, float tailTime, int tailLineIndex, ::GlobalNamespace::NoteLineLayer tailLineLayer, ::GlobalNamespace::NoteLineLayer tailBeforeJumpLineLayer, float tailControlPointLengthMultiplier, ::GlobalNamespace::NoteCutDirection tailCutDirection, ::GlobalNamespace::SliderMidAnchorMode midAnchorMode);
    // static public SliderData CreateBurstSliderData(ColorType colorType, System.Single headTime, System.Int32 headLineIndex, NoteLineLayer headLineLayer, NoteLineLayer headBeforeJumpLineLayer, NoteCutDirection headCutDirection, System.Single tailTime, System.Int32 tailLineIndex, NoteLineLayer tailLineLayer, NoteLineLayer tailBeforeJumpLineLayer, NoteCutDirection tailCutDirection, System.Int32 sliceCount, System.Single squishAmount)
    // Offset: 0x283FA00
    static ::GlobalNamespace::SliderData* CreateBurstSliderData(::GlobalNamespace::ColorType colorType, float headTime, int headLineIndex, ::GlobalNamespace::NoteLineLayer headLineLayer, ::GlobalNamespace::NoteLineLayer headBeforeJumpLineLayer, ::GlobalNamespace::NoteCutDirection headCutDirection, float tailTime, int tailLineIndex, ::GlobalNamespace::NoteLineLayer tailLineLayer, ::GlobalNamespace::NoteLineLayer tailBeforeJumpLineLayer, ::GlobalNamespace::NoteCutDirection tailCutDirection, int sliceCount, float squishAmount);
    // public System.Void SetHasHeadNote(System.Boolean hasHeadNote)
    // Offset: 0x2839C6C
    void SetHasHeadNote(bool hasHeadNote);
    // public System.Void SetHasTailNote(System.Boolean hasTailNote)
    // Offset: 0x2839E4C
    void SetHasTailNote(bool hasTailNote);
    // public System.Void SetHeadBeforeJumpLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x2839C78
    void SetHeadBeforeJumpLineLayer(::GlobalNamespace::NoteLineLayer lineLayer);
    // public System.Void SetTailBeforeJumpLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x2839E58
    void SetTailBeforeJumpLineLayer(::GlobalNamespace::NoteLineLayer lineLayer);
    // public System.Void SetCutDirectionAngleOffset(System.Single headCutDirectionAngleOffset, System.Single tailCutDirectionAngleOffset)
    // Offset: 0x2839DF0
    void SetCutDirectionAngleOffset(float headCutDirectionAngleOffset, float tailCutDirectionAngleOffset);
    // static public System.Int32 SubtypeIdentifier(ColorType colorType)
    // Offset: 0x283F8E0
    static int SubtypeIdentifier(::GlobalNamespace::ColorType colorType);
    // public override BeatmapDataItem GetCopy()
    // Offset: 0x283F648
    // Implemented from: BeatmapDataItem
    // Base method: BeatmapDataItem BeatmapDataItem::GetCopy()
    ::GlobalNamespace::BeatmapDataItem* GetCopy();
    // public override System.Void Mirror(System.Int32 lineCount)
    // Offset: 0x283FB18
    // Implemented from: BeatmapObjectData
    // Base method: System.Void BeatmapObjectData::Mirror(System.Int32 lineCount)
    void Mirror(int lineCount);
  }; // SliderData
  #pragma pack(pop)
  static check_size<sizeof(SliderData), 108 + sizeof(float)> __GlobalNamespace_SliderDataSizeCheck;
  static_assert(sizeof(SliderData) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderData::Type, "", "SliderData/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_colorType
// Il2CppName: get_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorType (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_colorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_colorType
// Il2CppName: set_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::ColorType)>(&GlobalNamespace::SliderData::set_colorType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_sliderType
// Il2CppName: get_sliderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderData::Type (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_sliderType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_sliderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_sliderType
// Il2CppName: set_sliderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::SliderData::Type)>(&GlobalNamespace::SliderData::set_sliderType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SliderData/Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_sliderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_hasHeadNote
// Il2CppName: get_hasHeadNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_hasHeadNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_hasHeadNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_hasHeadNote
// Il2CppName: set_hasHeadNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(bool)>(&GlobalNamespace::SliderData::set_hasHeadNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_hasHeadNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headControlPointLengthMultiplier
// Il2CppName: get_headControlPointLengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headControlPointLengthMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headControlPointLengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headControlPointLengthMultiplier
// Il2CppName: set_headControlPointLengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_headControlPointLengthMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headControlPointLengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headLineIndex
// Il2CppName: get_headLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headLineIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headLineIndex
// Il2CppName: set_headLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(int)>(&GlobalNamespace::SliderData::set_headLineIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headLineLayer
// Il2CppName: get_headLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headLineLayer
// Il2CppName: set_headLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::set_headLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headBeforeJumpLineLayer
// Il2CppName: get_headBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headBeforeJumpLineLayer
// Il2CppName: set_headBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::set_headBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headCutDirection
// Il2CppName: get_headCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteCutDirection (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headCutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headCutDirection
// Il2CppName: set_headCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::SliderData::set_headCutDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_headCutDirectionAngleOffset
// Il2CppName: get_headCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_headCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_headCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_headCutDirectionAngleOffset
// Il2CppName: set_headCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_headCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_headCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_hasTailNote
// Il2CppName: get_hasTailNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_hasTailNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_hasTailNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_hasTailNote
// Il2CppName: set_hasTailNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(bool)>(&GlobalNamespace::SliderData::set_hasTailNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_hasTailNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailTime
// Il2CppName: get_tailTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailTime
// Il2CppName: set_tailTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_tailTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailLineIndex
// Il2CppName: get_tailLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailLineIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailLineIndex
// Il2CppName: set_tailLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(int)>(&GlobalNamespace::SliderData::set_tailLineIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailControlPointLengthMultiplier
// Il2CppName: get_tailControlPointLengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailControlPointLengthMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailControlPointLengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailControlPointLengthMultiplier
// Il2CppName: set_tailControlPointLengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_tailControlPointLengthMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailControlPointLengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailLineLayer
// Il2CppName: get_tailLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailLineLayer
// Il2CppName: set_tailLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::set_tailLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailBeforeJumpLineLayer
// Il2CppName: get_tailBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailBeforeJumpLineLayer
// Il2CppName: set_tailBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::set_tailBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailCutDirection
// Il2CppName: get_tailCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteCutDirection (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailCutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailCutDirection
// Il2CppName: set_tailCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::SliderData::set_tailCutDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_tailCutDirectionAngleOffset
// Il2CppName: get_tailCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_tailCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_tailCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_tailCutDirectionAngleOffset
// Il2CppName: set_tailCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_tailCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_tailCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_midAnchorMode
// Il2CppName: get_midAnchorMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderMidAnchorMode (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_midAnchorMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_midAnchorMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_midAnchorMode
// Il2CppName: set_midAnchorMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::SliderMidAnchorMode)>(&GlobalNamespace::SliderData::set_midAnchorMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SliderMidAnchorMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_midAnchorMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_sliceCount
// Il2CppName: get_sliceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_sliceCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_sliceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_sliceCount
// Il2CppName: set_sliceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(int)>(&GlobalNamespace::SliderData::set_sliceCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_sliceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::get_squishAmount
// Il2CppName: get_squishAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::get_squishAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "get_squishAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::set_squishAmount
// Il2CppName: set_squishAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float)>(&GlobalNamespace::SliderData::set_squishAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "set_squishAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderData::CreateSliderData
// Il2CppName: CreateSliderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderData* (*)(::GlobalNamespace::ColorType, float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer, float, ::GlobalNamespace::NoteCutDirection, float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer, float, ::GlobalNamespace::NoteCutDirection, ::GlobalNamespace::SliderMidAnchorMode)>(&GlobalNamespace::SliderData::CreateSliderData)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    static auto* headTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* headLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* headBeforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* headControlPointLengthMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    static auto* tailTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tailLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* tailBeforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* tailControlPointLengthMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    static auto* midAnchorMode = &::il2cpp_utils::GetClassFromName("", "SliderMidAnchorMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "CreateSliderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType, headTime, headLineIndex, headLineLayer, headBeforeJumpLineLayer, headControlPointLengthMultiplier, headCutDirection, tailTime, tailLineIndex, tailLineLayer, tailBeforeJumpLineLayer, tailControlPointLengthMultiplier, tailCutDirection, midAnchorMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::CreateBurstSliderData
// Il2CppName: CreateBurstSliderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderData* (*)(::GlobalNamespace::ColorType, float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteCutDirection, float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteCutDirection, int, float)>(&GlobalNamespace::SliderData::CreateBurstSliderData)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    static auto* headTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* headLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* headBeforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* headCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    static auto* tailTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tailLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* tailBeforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* tailCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    static auto* sliceCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* squishAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "CreateBurstSliderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType, headTime, headLineIndex, headLineLayer, headBeforeJumpLineLayer, headCutDirection, tailTime, tailLineIndex, tailLineLayer, tailBeforeJumpLineLayer, tailCutDirection, sliceCount, squishAmount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SetHasHeadNote
// Il2CppName: SetHasHeadNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(bool)>(&GlobalNamespace::SliderData::SetHasHeadNote)> {
  static const MethodInfo* get() {
    static auto* hasHeadNote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SetHasHeadNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasHeadNote});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SetHasTailNote
// Il2CppName: SetHasTailNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(bool)>(&GlobalNamespace::SliderData::SetHasTailNote)> {
  static const MethodInfo* get() {
    static auto* hasTailNote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SetHasTailNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasTailNote});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SetHeadBeforeJumpLineLayer
// Il2CppName: SetHeadBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::SetHeadBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SetHeadBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SetTailBeforeJumpLineLayer
// Il2CppName: SetTailBeforeJumpLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::SliderData::SetTailBeforeJumpLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SetTailBeforeJumpLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SetCutDirectionAngleOffset
// Il2CppName: SetCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(float, float)>(&GlobalNamespace::SliderData::SetCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    static auto* headCutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailCutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SetCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headCutDirectionAngleOffset, tailCutDirectionAngleOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::SubtypeIdentifier
// Il2CppName: SubtypeIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::ColorType)>(&GlobalNamespace::SliderData::SubtypeIdentifier)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "SubtypeIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDataItem* (GlobalNamespace::SliderData::*)()>(&GlobalNamespace::SliderData::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderData::Mirror
// Il2CppName: Mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderData::*)(int)>(&GlobalNamespace::SliderData::Mirror)> {
  static const MethodInfo* get() {
    static auto* lineCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderData*), "Mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineCount});
  }
};
