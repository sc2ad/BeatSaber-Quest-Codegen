// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: ServiceEnvironment
#include "GlobalNamespace/ServiceEnvironment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DnsEndPoint
  class DnsEndPoint;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkConfigSO
  class NetworkConfigSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkConfigSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkConfigSO*, "", "NetworkConfigSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: NetworkConfigSO
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkConfigSO : public ::GlobalNamespace::PersistentScriptableObject/*, public ::GlobalNamespace::INetworkConfig*/ {
    public:
    public:
    // private System.Int32 _maxPartySize
    // Size: 0x4
    // Offset: 0x18
    int maxPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _discoveryPort
    // Size: 0x4
    // Offset: 0x1C
    int discoveryPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _partyPort
    // Size: 0x4
    // Offset: 0x20
    int partyPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplayerPort
    // Size: 0x4
    // Offset: 0x24
    int multiplayerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _masterServerPort
    // Size: 0x4
    // Offset: 0x28
    int masterServerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: masterServerPort and: masterServerHostName
    char __padding4[0x4] = {};
    // private System.String _masterServerHostName
    // Size: 0x8
    // Offset: 0x30
    ::StringW masterServerHostName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _multiplayerStatusUrl
    // Size: 0x8
    // Offset: 0x38
    ::StringW multiplayerStatusUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _quickPlaySetupUrl
    // Size: 0x8
    // Offset: 0x40
    ::StringW quickPlaySetupUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _graphUrl
    // Size: 0x8
    // Offset: 0x48
    ::StringW graphUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _graphAppId
    // Size: 0x8
    // Offset: 0x50
    ::StringW graphAppId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _forceGameLift
    // Size: 0x1
    // Offset: 0x58
    bool forceGameLift;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceGameLift and: serviceEnvironment
    char __padding10[0x3] = {};
    // private ServiceEnvironment _serviceEnvironment
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::ServiceEnvironment serviceEnvironment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ServiceEnvironment) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::INetworkConfig
    operator ::GlobalNamespace::INetworkConfig() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INetworkConfig*>(this);
    }
    // Creating interface conversion operator: i_INetworkConfig
    inline ::GlobalNamespace::INetworkConfig* i_INetworkConfig() noexcept {
      return reinterpret_cast<::GlobalNamespace::INetworkConfig*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _maxPartySize
    [[deprecated("Use field access instead!")]] int& dyn__maxPartySize();
    // Get instance field reference: private System.Int32 _discoveryPort
    [[deprecated("Use field access instead!")]] int& dyn__discoveryPort();
    // Get instance field reference: private System.Int32 _partyPort
    [[deprecated("Use field access instead!")]] int& dyn__partyPort();
    // Get instance field reference: private System.Int32 _multiplayerPort
    [[deprecated("Use field access instead!")]] int& dyn__multiplayerPort();
    // Get instance field reference: private System.Int32 _masterServerPort
    [[deprecated("Use field access instead!")]] int& dyn__masterServerPort();
    // Get instance field reference: private System.String _masterServerHostName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__masterServerHostName();
    // Get instance field reference: private System.String _multiplayerStatusUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn__multiplayerStatusUrl();
    // Get instance field reference: private System.String _quickPlaySetupUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn__quickPlaySetupUrl();
    // Get instance field reference: private System.String _graphUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn__graphUrl();
    // Get instance field reference: private System.String _graphAppId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__graphAppId();
    // Get instance field reference: private System.Boolean _forceGameLift
    [[deprecated("Use field access instead!")]] bool& dyn__forceGameLift();
    // Get instance field reference: private ServiceEnvironment _serviceEnvironment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ServiceEnvironment& dyn__serviceEnvironment();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x14C6AFC
    int get_maxPartySize();
    // public System.Int32 get_discoveryPort()
    // Offset: 0x14C6B04
    int get_discoveryPort();
    // public System.Int32 get_partyPort()
    // Offset: 0x14C6B0C
    int get_partyPort();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x14C6B14
    int get_multiplayerPort();
    // public DnsEndPoint get_masterServerEndPoint()
    // Offset: 0x14C6B1C
    ::GlobalNamespace::DnsEndPoint* get_masterServerEndPoint();
    // public System.String get_multiplayerStatusUrl()
    // Offset: 0x14C6B94
    ::StringW get_multiplayerStatusUrl();
    // public System.String get_quickPlaySetupUrl()
    // Offset: 0x14C6B9C
    ::StringW get_quickPlaySetupUrl();
    // public System.String get_graphUrl()
    // Offset: 0x14C6BA4
    ::StringW get_graphUrl();
    // public System.String get_graphAccessToken()
    // Offset: 0x14C6BAC
    ::StringW get_graphAccessToken();
    // public System.Boolean get_forceGameLift()
    // Offset: 0x14C6C40
    bool get_forceGameLift();
    // public ServiceEnvironment get_serviceEnvironment()
    // Offset: 0x14C6C48
    ::GlobalNamespace::ServiceEnvironment get_serviceEnvironment();
    // public System.Void .ctor()
    // Offset: 0x14C6C50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkConfigSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkConfigSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkConfigSO*, creationType>()));
    }
    // private System.String GetAppId()
    // Offset: 0x14C6C10
    ::StringW GetAppId();
  }; // NetworkConfigSO
  #pragma pack(pop)
  static check_size<sizeof(NetworkConfigSO), 92 + sizeof(::GlobalNamespace::ServiceEnvironment)> __GlobalNamespace_NetworkConfigSOSizeCheck;
  static_assert(sizeof(NetworkConfigSO) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_maxPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_discoveryPort
// Il2CppName: get_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_discoveryPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_partyPort
// Il2CppName: get_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_partyPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_multiplayerPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_masterServerEndPoint
// Il2CppName: get_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DnsEndPoint* (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_masterServerEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_multiplayerStatusUrl
// Il2CppName: get_multiplayerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_multiplayerStatusUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_multiplayerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_quickPlaySetupUrl
// Il2CppName: get_quickPlaySetupUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_quickPlaySetupUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_quickPlaySetupUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_graphUrl
// Il2CppName: get_graphUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_graphUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_graphUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_graphAccessToken
// Il2CppName: get_graphAccessToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_graphAccessToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_graphAccessToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_forceGameLift
// Il2CppName: get_forceGameLift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_forceGameLift)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_forceGameLift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::get_serviceEnvironment
// Il2CppName: get_serviceEnvironment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ServiceEnvironment (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::get_serviceEnvironment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "get_serviceEnvironment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NetworkConfigSO::GetAppId
// Il2CppName: GetAppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkConfigSO::*)()>(&GlobalNamespace::NetworkConfigSO::GetAppId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkConfigSO*), "GetAppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
