// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoolSO
  class BoolSO;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ConditionalImageMaterialSwitcher
  class ConditionalImageMaterialSwitcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ConditionalImageMaterialSwitcher);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ConditionalImageMaterialSwitcher*, "", "ConditionalImageMaterialSwitcher");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ConditionalImageMaterialSwitcher
  // [TokenAttribute] Offset: FFFFFFFF
  class ConditionalImageMaterialSwitcher : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0x1127740
    // private UnityEngine.Material _material0
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* material0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // [HeaderAttribute] Offset: 0x112778C
    // private UnityEngine.Material _material1
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* material1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // [SpaceAttribute] Offset: 0x11277D8
    // private BoolSO _value
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BoolSO* value;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BoolSO*) == 0x8);
    // private UnityEngine.UI.Image _image
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Material _material0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material0();
    // Get instance field reference: private UnityEngine.Material _material1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material1();
    // Get instance field reference: private BoolSO _value
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& dyn__value();
    // Get instance field reference: private UnityEngine.UI.Image _image
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__image();
    // public System.Void .ctor()
    // Offset: 0x1457554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConditionalImageMaterialSwitcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConditionalImageMaterialSwitcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConditionalImageMaterialSwitcher*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0x14574CC
    void Awake();
  }; // ConditionalImageMaterialSwitcher
  #pragma pack(pop)
  static check_size<sizeof(ConditionalImageMaterialSwitcher), 48 + sizeof(::UnityEngine::UI::Image*)> __GlobalNamespace_ConditionalImageMaterialSwitcherSizeCheck;
  static_assert(sizeof(ConditionalImageMaterialSwitcher) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ConditionalImageMaterialSwitcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ConditionalImageMaterialSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConditionalImageMaterialSwitcher::*)()>(&GlobalNamespace::ConditionalImageMaterialSwitcher::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConditionalImageMaterialSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
