// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ObjectsMovementRecorder
#include "GlobalNamespace/ObjectsMovementRecorder.hpp"
// Including type: PlaybackRenderer
#include "GlobalNamespace/PlaybackRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPosesSerializer
  class IPosesSerializer;
  // Forward declaring type: IBeatSaberLogger
  class IBeatSaberLogger;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ObjectsMovementRecorder::InitData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectsMovementRecorder::InitData*, "", "ObjectsMovementRecorder/InitData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: ObjectsMovementRecorder/InitData
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectsMovementRecorder::InitData : public ::Il2CppObject {
    public:
    public:
    // public readonly ObjectsMovementRecorder/Mode mode
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::ObjectsMovementRecorder::Mode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::Mode) == 0x4);
    // Padding between fields: mode and: recordingPath
    char __padding0[0x4] = {};
    // public readonly System.String recordingPath
    // Size: 0x8
    // Offset: 0x18
    ::StringW recordingPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly ObjectsMovementRecorder/CameraView cameraView
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::CameraView) == 0x4);
    // public readonly System.Boolean addDateTimeSuffixToRecordingName
    // Size: 0x1
    // Offset: 0x24
    bool addDateTimeSuffixToRecordingName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean screenshotRecording
    // Size: 0x1
    // Offset: 0x25
    bool screenshotRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenshotRecording and: screenshotWidth
    char __padding4[0x2] = {};
    // public readonly System.Int32 screenshotWidth
    // Size: 0x4
    // Offset: 0x28
    int screenshotWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 screenshotHeight
    // Size: 0x4
    // Offset: 0x2C
    int screenshotHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 framerate
    // Size: 0x4
    // Offset: 0x30
    int framerate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: framerate and: playbackScreenshots
    char __padding7[0x4] = {};
    // public readonly PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> playbackScreenshots;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>) == 0x8);
    // public readonly System.Boolean saveToOldFormat
    // Size: 0x1
    // Offset: 0x40
    bool saveToOldFormat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: saveToOldFormat and: posesSerializer
    char __padding9[0x7] = {};
    // public readonly IPosesSerializer posesSerializer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::IPosesSerializer* posesSerializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPosesSerializer*) == 0x8);
    // public readonly IBeatSaberLogger logger
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::IBeatSaberLogger* logger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatSaberLogger*) == 0x8);
    public:
    // Get instance field reference: public readonly ObjectsMovementRecorder/Mode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ObjectsMovementRecorder::Mode& dyn_mode();
    // Get instance field reference: public readonly System.String recordingPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_recordingPath();
    // Get instance field reference: public readonly ObjectsMovementRecorder/CameraView cameraView
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ObjectsMovementRecorder::CameraView& dyn_cameraView();
    // Get instance field reference: public readonly System.Boolean addDateTimeSuffixToRecordingName
    [[deprecated("Use field access instead!")]] bool& dyn_addDateTimeSuffixToRecordingName();
    // Get instance field reference: public readonly System.Boolean screenshotRecording
    [[deprecated("Use field access instead!")]] bool& dyn_screenshotRecording();
    // Get instance field reference: public readonly System.Int32 screenshotWidth
    [[deprecated("Use field access instead!")]] int& dyn_screenshotWidth();
    // Get instance field reference: public readonly System.Int32 screenshotHeight
    [[deprecated("Use field access instead!")]] int& dyn_screenshotHeight();
    // Get instance field reference: public readonly System.Int32 framerate
    [[deprecated("Use field access instead!")]] int& dyn_framerate();
    // Get instance field reference: public readonly PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>& dyn_playbackScreenshots();
    // Get instance field reference: public readonly System.Boolean saveToOldFormat
    [[deprecated("Use field access instead!")]] bool& dyn_saveToOldFormat();
    // Get instance field reference: public readonly IPosesSerializer posesSerializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPosesSerializer*& dyn_posesSerializer();
    // Get instance field reference: public readonly IBeatSaberLogger logger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatSaberLogger*& dyn_logger();
    // public System.Void .ctor(ObjectsMovementRecorder/Mode mode, System.String recordingPath, ObjectsMovementRecorder/CameraView cameraView, System.Boolean addDateTimeSuffixToRecordingName, System.Boolean screenshotRecording, System.Int32 screenshotWidth, System.Int32 screenshotHeight, System.Int32 framerate, PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots, System.Boolean saveToOldFormat, IBeatSaberLogger logger, IPosesSerializer posesSerializer)
    // Offset: 0x1588588
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectsMovementRecorder::InitData* New_ctor(::GlobalNamespace::ObjectsMovementRecorder::Mode mode, ::StringW recordingPath, ::GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView, bool addDateTimeSuffixToRecordingName, bool screenshotRecording, int screenshotWidth, int screenshotHeight, int framerate, ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> playbackScreenshots, bool saveToOldFormat, ::GlobalNamespace::IBeatSaberLogger* logger, ::GlobalNamespace::IPosesSerializer* posesSerializer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectsMovementRecorder::InitData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectsMovementRecorder::InitData*, creationType>(mode, recordingPath, cameraView, addDateTimeSuffixToRecordingName, screenshotRecording, screenshotWidth, screenshotHeight, framerate, playbackScreenshots, saveToOldFormat, logger, posesSerializer)));
    }
  }; // ObjectsMovementRecorder/InitData
  #pragma pack(pop)
  static check_size<sizeof(ObjectsMovementRecorder::InitData), 80 + sizeof(::GlobalNamespace::IBeatSaberLogger*)> __GlobalNamespace_ObjectsMovementRecorder_InitDataSizeCheck;
  static_assert(sizeof(ObjectsMovementRecorder::InitData) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::InitData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
