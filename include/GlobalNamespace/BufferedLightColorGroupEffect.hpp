// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: ColorBoostBeatmapEventData
  class ColorBoostBeatmapEventData;
  // Forward declaring type: LightColorBeatmapEventData
  class LightColorBeatmapEventData;
  // Forward declaring type: EnvironmentColorType
  struct EnvironmentColorType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BufferedLightColorGroupEffect
  class BufferedLightColorGroupEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BufferedLightColorGroupEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BufferedLightColorGroupEffect*, "", "BufferedLightColorGroupEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5A
  #pragma pack(push, 1)
  // Autogenerated type: BufferedLightColorGroupEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class BufferedLightColorGroupEffect : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BufferedLightColorGroupEffect::InitData
    class InitData;
    public:
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorManager*) == 0x8);
    // private readonly MaterialPropertyBlockController _materialPropertyBlockController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MaterialPropertyBlockController* materialPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BeatmapDataCallbackWrapper* colorBoostBeatmapDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper[] _lightColorBeatmapEventCallbackWrappers
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::BeatmapDataCallbackWrapper*> lightColorBeatmapEventCallbackWrappers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BeatmapDataCallbackWrapper*>) == 0x8);
    // private System.Int32 _lastIndex
    // Size: 0x4
    // Offset: 0x38
    int lastIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastIndex and: timesBuffer
    char __padding5[0x4] = {};
    // private readonly System.Single[] _timesBuffer
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> timesBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly UnityEngine.Vector4[] _colorsBuffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector4> colorsBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private readonly System.Single[] _elementIdsBuffer
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> elementIdsBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean _useBoostColors
    // Size: 0x1
    // Offset: 0x58
    bool useBoostColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _didReceiveEventThisFrame
    // Size: 0x1
    // Offset: 0x59
    bool didReceiveEventThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.Int32 kBufferSize
    static constexpr const int kBufferSize = 24;
    // Get static field: static private System.Int32 kBufferSize
    static int _get_kBufferSize();
    // Set static field: static private System.Int32 kBufferSize
    static void _set_kBufferSize(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11211D8
    // Get static field: static private readonly System.Int32 _timesBufferPropertyId
    static int _get__timesBufferPropertyId();
    // Set static field: static private readonly System.Int32 _timesBufferPropertyId
    static void _set__timesBufferPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11211E8
    // Get static field: static private readonly System.Int32 _colorBufferPropertyId
    static int _get__colorBufferPropertyId();
    // Set static field: static private readonly System.Int32 _colorBufferPropertyId
    static void _set__colorBufferPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11211F8
    // Get static field: static private readonly System.Int32 _elementIdBufferPropertyId
    static int _get__elementIdBufferPropertyId();
    // Set static field: static private readonly System.Int32 _elementIdBufferPropertyId
    static void _set__elementIdBufferPropertyId(int value);
    // Get instance field reference: private readonly ColorManager _colorManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& dyn__colorManager();
    // Get instance field reference: private readonly MaterialPropertyBlockController _materialPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__materialPropertyBlockController();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__colorBoostBeatmapDataCallbackWrapper();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper[] _lightColorBeatmapEventCallbackWrappers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapDataCallbackWrapper*>& dyn__lightColorBeatmapEventCallbackWrappers();
    // Get instance field reference: private System.Int32 _lastIndex
    [[deprecated("Use field access instead!")]] int& dyn__lastIndex();
    // Get instance field reference: private readonly System.Single[] _timesBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__timesBuffer();
    // Get instance field reference: private readonly UnityEngine.Vector4[] _colorsBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn__colorsBuffer();
    // Get instance field reference: private readonly System.Single[] _elementIdsBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__elementIdsBuffer();
    // Get instance field reference: private System.Boolean _useBoostColors
    [[deprecated("Use field access instead!")]] bool& dyn__useBoostColors();
    // Get instance field reference: private System.Boolean _didReceiveEventThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn__didReceiveEventThisFrame();
    // public System.Void .ctor(BufferedLightColorGroupEffect/InitData initData, ColorManager colorManager, BeatmapCallbacksController beatmapCallbacksController)
    // Offset: 0x13F1A54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BufferedLightColorGroupEffect* New_ctor(::GlobalNamespace::BufferedLightColorGroupEffect::InitData* initData, ::GlobalNamespace::ColorManager* colorManager, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BufferedLightColorGroupEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BufferedLightColorGroupEffect*, creationType>(initData, colorManager, beatmapCallbacksController)));
    }
    // static private System.Void .cctor()
    // Offset: 0x13F2184
    static void _cctor();
    // public System.Void Cleanup()
    // Offset: 0x13F1D28
    void Cleanup();
    // private System.Void HandleColorBoostBeatmapEvent(ColorBoostBeatmapEventData colorBoost)
    // Offset: 0x13F1E50
    void HandleColorBoostBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* colorBoost);
    // private System.Void HandleColorChangeBeatmapEvent(LightColorBeatmapEventData currentEvent)
    // Offset: 0x13F1E6C
    void HandleColorChangeBeatmapEvent(::GlobalNamespace::LightColorBeatmapEventData* currentEvent);
    // private System.Void HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame()
    // Offset: 0x13F1F6C
    void HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame();
    // protected UnityEngine.Color GetColor(EnvironmentColorType colorType, System.Boolean colorBoost, System.Single brightness)
    // Offset: 0x13F2090
    ::UnityEngine::Color GetColor(::GlobalNamespace::EnvironmentColorType colorType, bool colorBoost, float brightness);
  }; // BufferedLightColorGroupEffect
  #pragma pack(pop)
  static check_size<sizeof(BufferedLightColorGroupEffect), 89 + sizeof(bool)> __GlobalNamespace_BufferedLightColorGroupEffectSizeCheck;
  static_assert(sizeof(BufferedLightColorGroupEffect) == 0x5A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BufferedLightColorGroupEffect::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffect::*)()>(&GlobalNamespace::BufferedLightColorGroupEffect::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::HandleColorBoostBeatmapEvent
// Il2CppName: HandleColorBoostBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffect::*)(::GlobalNamespace::ColorBoostBeatmapEventData*)>(&GlobalNamespace::BufferedLightColorGroupEffect::HandleColorBoostBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* colorBoost = &::il2cpp_utils::GetClassFromName("", "ColorBoostBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), "HandleColorBoostBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBoost});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::HandleColorChangeBeatmapEvent
// Il2CppName: HandleColorChangeBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffect::*)(::GlobalNamespace::LightColorBeatmapEventData*)>(&GlobalNamespace::BufferedLightColorGroupEffect::HandleColorChangeBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* currentEvent = &::il2cpp_utils::GetClassFromName("", "LightColorBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), "HandleColorChangeBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentEvent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame
// Il2CppName: HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffect::*)()>(&GlobalNamespace::BufferedLightColorGroupEffect::HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), "HandleBeatmapCallbacksControllerDidProcessAllCallbacksThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffect::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::BufferedLightColorGroupEffect::*)(::GlobalNamespace::EnvironmentColorType, bool, float)>(&GlobalNamespace::BufferedLightColorGroupEffect::GetColor)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "EnvironmentColorType")->byval_arg;
    static auto* colorBoost = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* brightness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffect*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType, colorBoost, brightness});
  }
};
