// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IMultiplayerStatusModel
#include "GlobalNamespace/IMultiplayerStatusModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerStatusData
  class MultiplayerStatusData;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockMultiplayerStatusModel
  class MockMultiplayerStatusModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockMultiplayerStatusModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockMultiplayerStatusModel*, "", "MockMultiplayerStatusModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: MockMultiplayerStatusModel
  // [TokenAttribute] Offset: FFFFFFFF
  class MockMultiplayerStatusModel : public ::Il2CppObject/*, public ::GlobalNamespace::IMultiplayerStatusModel*/ {
    public:
    public:
    // [InjectAttribute] Offset: 0x1124CD4
    // private readonly MultiplayerStatusData _multiplayerStatusData
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::MultiplayerStatusData* multiplayerStatusData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerStatusData*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IMultiplayerStatusModel
    operator ::GlobalNamespace::IMultiplayerStatusModel() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IMultiplayerStatusModel*>(this);
    }
    // Creating interface conversion operator: i_IMultiplayerStatusModel
    inline ::GlobalNamespace::IMultiplayerStatusModel* i_IMultiplayerStatusModel() noexcept {
      return reinterpret_cast<::GlobalNamespace::IMultiplayerStatusModel*>(this);
    }
    // Creating conversion operator: operator ::GlobalNamespace::MultiplayerStatusData*
    constexpr operator ::GlobalNamespace::MultiplayerStatusData*() const noexcept {
      return multiplayerStatusData;
    }
    // Get instance field reference: private readonly MultiplayerStatusData _multiplayerStatusData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerStatusData*& dyn__multiplayerStatusData();
    // public System.Void .ctor()
    // Offset: 0x141B7FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockMultiplayerStatusModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockMultiplayerStatusModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockMultiplayerStatusModel*, creationType>()));
    }
    // public System.Threading.Tasks.Task`1<MultiplayerStatusData> GetMultiplayerStatusAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x141B788
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::MultiplayerStatusData*>* GetMultiplayerStatusAsync(::System::Threading::CancellationToken cancellationToken);
  }; // MockMultiplayerStatusModel
  #pragma pack(pop)
  static check_size<sizeof(MockMultiplayerStatusModel), 16 + sizeof(::GlobalNamespace::MultiplayerStatusData*)> __GlobalNamespace_MockMultiplayerStatusModelSizeCheck;
  static_assert(sizeof(MockMultiplayerStatusModel) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockMultiplayerStatusModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockMultiplayerStatusModel::GetMultiplayerStatusAsync
// Il2CppName: GetMultiplayerStatusAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::MultiplayerStatusData*>* (GlobalNamespace::MockMultiplayerStatusModel::*)(::System::Threading::CancellationToken)>(&GlobalNamespace::MockMultiplayerStatusModel::GetMultiplayerStatusAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockMultiplayerStatusModel*), "GetMultiplayerStatusAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
