// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ObjectsMovementRecorder
#include "GlobalNamespace/ObjectsMovementRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ProgramArguments
  class ProgramArguments;
  // Forward declaring type: IBeatSaberLogger
  class IBeatSaberLogger;
  // Forward declaring type: IPosesSerializer
  class IPosesSerializer;
  // Forward declaring type: RecordingToolResourceContainerSO
  class RecordingToolResourceContainerSO;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: RecordingToolSettings
  class RecordingToolSettings;
  // Forward declaring type: MenuDestination
  class MenuDestination;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LayerMask
  struct LayerMask;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RecordingToolConfigurationProcessor
  class RecordingToolConfigurationProcessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RecordingToolConfigurationProcessor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RecordingToolConfigurationProcessor*, "", "RecordingToolConfigurationProcessor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RecordingToolConfigurationProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class RecordingToolConfigurationProcessor : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::RecordingToolConfigurationProcessor::ColorSaveData
    class ColorSaveData;
    // Nested type: ::GlobalNamespace::RecordingToolConfigurationProcessor::PlaybackScreenshot
    class PlaybackScreenshot;
    // Nested type: ::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration
    class RecordingToolConfiguration;
    public:
    // private readonly ProgramArguments _programArguments
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::ProgramArguments* programArguments;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ProgramArguments*) == 0x8);
    // private readonly IBeatSaberLogger _logger
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IBeatSaberLogger* logger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatSaberLogger*) == 0x8);
    // private readonly IPosesSerializer _posesSerializer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IPosesSerializer* posesSerializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPosesSerializer*) == 0x8);
    // private readonly RecordingToolResourceContainerSO _resourceContainer
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::RecordingToolResourceContainerSO* resourceContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RecordingToolResourceContainerSO*) == 0x8);
    public:
    // static field const value: static public System.String kRecordingToolCommandLineArgument
    static constexpr const char* kRecordingToolCommandLineArgument = "--enable_recording_tool";
    // Get static field: static public System.String kRecordingToolCommandLineArgument
    static ::StringW _get_kRecordingToolCommandLineArgument();
    // Set static field: static public System.String kRecordingToolCommandLineArgument
    static void _set_kRecordingToolCommandLineArgument(::StringW value);
    // static field const value: static private System.String kSoloMode
    static constexpr const char* kSoloMode = "Solo";
    // Get static field: static private System.String kSoloMode
    static ::StringW _get_kSoloMode();
    // Set static field: static private System.String kSoloMode
    static void _set_kSoloMode(::StringW value);
    // static field const value: static private System.String kNormalEnvironmentType
    static constexpr const char* kNormalEnvironmentType = "Normal";
    // Get static field: static private System.String kNormalEnvironmentType
    static ::StringW _get_kNormalEnvironmentType();
    // Set static field: static private System.String kNormalEnvironmentType
    static void _set_kNormalEnvironmentType(::StringW value);
    // static field const value: static private System.String kNormalEnvironmentNameSuffix
    static constexpr const char* kNormalEnvironmentNameSuffix = "Environment";
    // Get static field: static private System.String kNormalEnvironmentNameSuffix
    static ::StringW _get_kNormalEnvironmentNameSuffix();
    // Set static field: static private System.String kNormalEnvironmentNameSuffix
    static void _set_kNormalEnvironmentNameSuffix(::StringW value);
    // static field const value: static private System.String kEverythingLayerMask
    static constexpr const char* kEverythingLayerMask = "Everything";
    // Get static field: static private System.String kEverythingLayerMask
    static ::StringW _get_kEverythingLayerMask();
    // Set static field: static private System.String kEverythingLayerMask
    static void _set_kEverythingLayerMask(::StringW value);
    // static field const value: static private System.String kNothingLayerMask
    static constexpr const char* kNothingLayerMask = "Nothing";
    // Get static field: static private System.String kNothingLayerMask
    static ::StringW _get_kNothingLayerMask();
    // Set static field: static private System.String kNothingLayerMask
    static void _set_kNothingLayerMask(::StringW value);
    // static field const value: static private System.String kDefaultMrcLayersMask
    static constexpr const char* kDefaultMrcLayersMask = "DefaultMrcLayers";
    // Get static field: static private System.String kDefaultMrcLayersMask
    static ::StringW _get_kDefaultMrcLayersMask();
    // Set static field: static private System.String kDefaultMrcLayersMask
    static void _set_kDefaultMrcLayersMask(::StringW value);
    // Get instance field reference: private readonly ProgramArguments _programArguments
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ProgramArguments*& dyn__programArguments();
    // Get instance field reference: private readonly IBeatSaberLogger _logger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatSaberLogger*& dyn__logger();
    // Get instance field reference: private readonly IPosesSerializer _posesSerializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPosesSerializer*& dyn__posesSerializer();
    // Get instance field reference: private readonly RecordingToolResourceContainerSO _resourceContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RecordingToolResourceContainerSO*& dyn__resourceContainer();
    // public System.Void .ctor(ProgramArguments programArguments, IBeatSaberLogger logger, IPosesSerializer posesSerializer, RecordingToolResourceContainerSO resourceContainer)
    // Offset: 0x14458E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordingToolConfigurationProcessor* New_ctor(::GlobalNamespace::ProgramArguments* programArguments, ::GlobalNamespace::IBeatSaberLogger* logger, ::GlobalNamespace::IPosesSerializer* posesSerializer, ::GlobalNamespace::RecordingToolResourceContainerSO* resourceContainer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingToolConfigurationProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordingToolConfigurationProcessor*, creationType>(programArguments, logger, posesSerializer, resourceContainer)));
    }
    // public System.Boolean IsRecordingToolEnabled()
    // Offset: 0x144592C
    bool IsRecordingToolEnabled();
    // public System.String GetConfigFilePath()
    // Offset: 0x1445994
    ::StringW GetConfigFilePath();
    // public System.String LoadConfigurationFile(System.String filePath)
    // Offset: 0x1445D68
    ::StringW LoadConfigurationFile(::StringW filePath);
    // public RecordingToolConfigurationProcessor/RecordingToolConfiguration DeserializeConfigurationFile(System.String jsonData)
    // Offset: 0x1445EF8
    ::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration* DeserializeConfigurationFile(::StringW jsonData);
    // public RecordingToolConfigurationProcessor/RecordingToolConfiguration LoadConfiguration(System.String filePath)
    // Offset: 0x144607C
    ::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration* LoadConfiguration(::StringW filePath);
    // static public UnityEngine.LayerMask GetDefaultMrcLayersMask()
    // Offset: 0x14460A4
    static ::UnityEngine::LayerMask GetDefaultMrcLayersMask();
    // public UnityEngine.LayerMask GetLayerMask(System.String layerName)
    // Offset: 0x144613C
    ::UnityEngine::LayerMask GetLayerMask(::StringW layerName);
    // public UnityEngine.LayerMask GetLayersMask(System.String[] layerNames)
    // Offset: 0x1446314
    ::UnityEngine::LayerMask GetLayersMask(::ArrayW<::StringW> layerNames);
    // static private System.ValueTuple`2<IBeatmapLevelPack,IPreviewBeatmapLevel> GetLevelPackAndLevelPreviewForLevelId(System.String packId, System.String levelId, System.Collections.Generic.IEnumerable`1<IBeatmapLevelPack> beatmapLevelPacks)
    // Offset: 0x14463CC
    static ::System::ValueTuple_2<::GlobalNamespace::IBeatmapLevelPack*, ::GlobalNamespace::IPreviewBeatmapLevel*> GetLevelPackAndLevelPreviewForLevelId(::StringW packId, ::StringW levelId, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IBeatmapLevelPack*>* beatmapLevelPacks);
    // public RecordingToolSettings CreateRecordingToolSettingsFromConfiguration(RecordingToolConfigurationProcessor/RecordingToolConfiguration recordingToolConfiguration)
    // Offset: 0x1446CAC
    ::GlobalNamespace::RecordingToolSettings* CreateRecordingToolSettingsFromConfiguration(::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration* recordingToolConfiguration);
    // public ObjectsMovementRecorder/InitData CreateObjectsMovementRecorderInitDataFromConfiguration(RecordingToolSettings recordingToolSettings)
    // Offset: 0x1447D9C
    ::GlobalNamespace::ObjectsMovementRecorder::InitData* CreateObjectsMovementRecorderInitDataFromConfiguration(::GlobalNamespace::RecordingToolSettings* recordingToolSettings);
    // public MenuDestination CreateMenuDestinationFromConfiguration(RecordingToolSettings recordingToolSettings)
    // Offset: 0x1447E98
    ::GlobalNamespace::MenuDestination* CreateMenuDestinationFromConfiguration(::GlobalNamespace::RecordingToolSettings* recordingToolSettings);
  }; // RecordingToolConfigurationProcessor
  #pragma pack(pop)
  static check_size<sizeof(RecordingToolConfigurationProcessor), 40 + sizeof(::GlobalNamespace::RecordingToolResourceContainerSO*)> __GlobalNamespace_RecordingToolConfigurationProcessorSizeCheck;
  static_assert(sizeof(RecordingToolConfigurationProcessor) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::IsRecordingToolEnabled
// Il2CppName: IsRecordingToolEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RecordingToolConfigurationProcessor::*)()>(&GlobalNamespace::RecordingToolConfigurationProcessor::IsRecordingToolEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "IsRecordingToolEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::GetConfigFilePath
// Il2CppName: GetConfigFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::RecordingToolConfigurationProcessor::*)()>(&GlobalNamespace::RecordingToolConfigurationProcessor::GetConfigFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "GetConfigFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::LoadConfigurationFile
// Il2CppName: LoadConfigurationFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::StringW)>(&GlobalNamespace::RecordingToolConfigurationProcessor::LoadConfigurationFile)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "LoadConfigurationFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::DeserializeConfigurationFile
// Il2CppName: DeserializeConfigurationFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration* (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::StringW)>(&GlobalNamespace::RecordingToolConfigurationProcessor::DeserializeConfigurationFile)> {
  static const MethodInfo* get() {
    static auto* jsonData = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "DeserializeConfigurationFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::LoadConfiguration
// Il2CppName: LoadConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration* (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::StringW)>(&GlobalNamespace::RecordingToolConfigurationProcessor::LoadConfiguration)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "LoadConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::GetDefaultMrcLayersMask
// Il2CppName: GetDefaultMrcLayersMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (*)()>(&GlobalNamespace::RecordingToolConfigurationProcessor::GetDefaultMrcLayersMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "GetDefaultMrcLayersMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::GetLayerMask
// Il2CppName: GetLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::StringW)>(&GlobalNamespace::RecordingToolConfigurationProcessor::GetLayerMask)> {
  static const MethodInfo* get() {
    static auto* layerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "GetLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::GetLayersMask
// Il2CppName: GetLayersMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::ArrayW<::StringW>)>(&GlobalNamespace::RecordingToolConfigurationProcessor::GetLayersMask)> {
  static const MethodInfo* get() {
    static auto* layerNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "GetLayersMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerNames});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::GetLevelPackAndLevelPreviewForLevelId
// Il2CppName: GetLevelPackAndLevelPreviewForLevelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::GlobalNamespace::IBeatmapLevelPack*, ::GlobalNamespace::IPreviewBeatmapLevel*> (*)(::StringW, ::StringW, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IBeatmapLevelPack*>*)>(&GlobalNamespace::RecordingToolConfigurationProcessor::GetLevelPackAndLevelPreviewForLevelId)> {
  static const MethodInfo* get() {
    static auto* packId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* beatmapLevelPacks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "GetLevelPackAndLevelPreviewForLevelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packId, levelId, beatmapLevelPacks});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::CreateRecordingToolSettingsFromConfiguration
// Il2CppName: CreateRecordingToolSettingsFromConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RecordingToolSettings* (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::GlobalNamespace::RecordingToolConfigurationProcessor::RecordingToolConfiguration*)>(&GlobalNamespace::RecordingToolConfigurationProcessor::CreateRecordingToolSettingsFromConfiguration)> {
  static const MethodInfo* get() {
    static auto* recordingToolConfiguration = &::il2cpp_utils::GetClassFromName("", "RecordingToolConfigurationProcessor/RecordingToolConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "CreateRecordingToolSettingsFromConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingToolConfiguration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::CreateObjectsMovementRecorderInitDataFromConfiguration
// Il2CppName: CreateObjectsMovementRecorderInitDataFromConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ObjectsMovementRecorder::InitData* (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::GlobalNamespace::RecordingToolSettings*)>(&GlobalNamespace::RecordingToolConfigurationProcessor::CreateObjectsMovementRecorderInitDataFromConfiguration)> {
  static const MethodInfo* get() {
    static auto* recordingToolSettings = &::il2cpp_utils::GetClassFromName("", "RecordingToolSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "CreateObjectsMovementRecorderInitDataFromConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingToolSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolConfigurationProcessor::CreateMenuDestinationFromConfiguration
// Il2CppName: CreateMenuDestinationFromConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MenuDestination* (GlobalNamespace::RecordingToolConfigurationProcessor::*)(::GlobalNamespace::RecordingToolSettings*)>(&GlobalNamespace::RecordingToolConfigurationProcessor::CreateMenuDestinationFromConfiguration)> {
  static const MethodInfo* get() {
    static auto* recordingToolSettings = &::il2cpp_utils::GetClassFromName("", "RecordingToolSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolConfigurationProcessor*), "CreateMenuDestinationFromConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingToolSettings});
  }
};
