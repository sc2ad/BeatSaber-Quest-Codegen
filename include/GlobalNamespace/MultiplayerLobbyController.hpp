// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLobbyAvatarManager
  class MultiplayerLobbyAvatarManager;
  // Forward declaring type: MultiplayerLobbyCenterStageManager
  class MultiplayerLobbyCenterStageManager;
  // Forward declaring type: MultiplayerLobbyAvatarPlaceManager
  class MultiplayerLobbyAvatarPlaceManager;
  // Forward declaring type: MenuEnvironmentManager
  class MenuEnvironmentManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLobbyController
  class MultiplayerLobbyController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerLobbyController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLobbyController*, "", "MultiplayerLobbyController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerLobbyController
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerLobbyController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _innerCircleRadius
    // Size: 0x4
    // Offset: 0x18
    float innerCircleRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minOuterCircleRadius
    // Size: 0x4
    // Offset: 0x1C
    float minOuterCircleRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InjectAttribute] Offset: 0x10E94DC
    // private readonly MultiplayerLobbyAvatarManager _multiplayerLobbyAvatarManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MultiplayerLobbyAvatarManager* multiplayerLobbyAvatarManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLobbyAvatarManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10E94EC
    // private readonly MultiplayerLobbyCenterStageManager _multiplayerLobbyCenterStageManager
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MultiplayerLobbyCenterStageManager* multiplayerLobbyCenterStageManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLobbyCenterStageManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10E94FC
    // private readonly MultiplayerLobbyAvatarPlaceManager _multiplayerLobbyAvatarPlaceManager
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MultiplayerLobbyAvatarPlaceManager* multiplayerLobbyAvatarPlaceManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLobbyAvatarPlaceManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10E950C
    // private readonly MenuEnvironmentManager _menuEnvironmentManager
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MenuEnvironmentManager* menuEnvironmentManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MenuEnvironmentManager*) == 0x8);
    // private System.Boolean <lobbyActivated>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool lobbyActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _innerCircleRadius
    [[deprecated("Use field access instead!")]] float& dyn__innerCircleRadius();
    // Get instance field reference: private System.Single _minOuterCircleRadius
    [[deprecated("Use field access instead!")]] float& dyn__minOuterCircleRadius();
    // Get instance field reference: private readonly MultiplayerLobbyAvatarManager _multiplayerLobbyAvatarManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLobbyAvatarManager*& dyn__multiplayerLobbyAvatarManager();
    // Get instance field reference: private readonly MultiplayerLobbyCenterStageManager _multiplayerLobbyCenterStageManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLobbyCenterStageManager*& dyn__multiplayerLobbyCenterStageManager();
    // Get instance field reference: private readonly MultiplayerLobbyAvatarPlaceManager _multiplayerLobbyAvatarPlaceManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLobbyAvatarPlaceManager*& dyn__multiplayerLobbyAvatarPlaceManager();
    // Get instance field reference: private readonly MenuEnvironmentManager _menuEnvironmentManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuEnvironmentManager*& dyn__menuEnvironmentManager();
    // Get instance field reference: private System.Boolean <lobbyActivated>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$lobbyActivated$k__BackingField();
    // public System.Boolean get_lobbyActivated()
    // Offset: 0x1418374
    bool get_lobbyActivated();
    // private System.Void set_lobbyActivated(System.Boolean value)
    // Offset: 0x141837C
    void set_lobbyActivated(bool value);
    // public System.Void .ctor()
    // Offset: 0x1418498
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLobbyController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLobbyController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLobbyController*, creationType>()));
    }
    // public System.Void ActivateMultiplayerLobby()
    // Offset: 0x1418388
    void ActivateMultiplayerLobby();
    // public System.Void DeactivateMultiplayerLobby()
    // Offset: 0x1418424
    void DeactivateMultiplayerLobby();
  }; // MultiplayerLobbyController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerLobbyController), 64 + sizeof(bool)> __GlobalNamespace_MultiplayerLobbyControllerSizeCheck;
  static_assert(sizeof(MultiplayerLobbyController) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyController::get_lobbyActivated
// Il2CppName: get_lobbyActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerLobbyController::*)()>(&GlobalNamespace::MultiplayerLobbyController::get_lobbyActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyController*), "get_lobbyActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyController::set_lobbyActivated
// Il2CppName: set_lobbyActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyController::*)(bool)>(&GlobalNamespace::MultiplayerLobbyController::set_lobbyActivated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyController*), "set_lobbyActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyController::ActivateMultiplayerLobby
// Il2CppName: ActivateMultiplayerLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyController::*)()>(&GlobalNamespace::MultiplayerLobbyController::ActivateMultiplayerLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyController*), "ActivateMultiplayerLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyController::DeactivateMultiplayerLobby
// Il2CppName: DeactivateMultiplayerLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyController::*)()>(&GlobalNamespace::MultiplayerLobbyController::DeactivateMultiplayerLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyController*), "DeactivateMultiplayerLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
