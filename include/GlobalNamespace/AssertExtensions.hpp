// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AssertExtensions
  class AssertExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AssertExtensions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AssertExtensions*, "", "AssertExtensions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: AssertExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerStepThroughAttribute] Offset: FFFFFFFF
  class AssertExtensions : public ::Il2CppObject {
    public:
    // static field const value: static private System.String kUnityAssertions
    static constexpr const char* kUnityAssertions = "UNITY_ASSERTIONS";
    // Get static field: static private System.String kUnityAssertions
    static ::StringW _get_kUnityAssertions();
    // Set static field: static private System.String kUnityAssertions
    static void _set_kUnityAssertions(::StringW value);
    // static public System.Void LessThan(System.Single expected, System.Single value, System.String message)
    // Offset: 0x15A63FC
    static void LessThan(float expected, float value, ::StringW message);
  }; // AssertExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AssertExtensions::LessThan
// Il2CppName: LessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, ::StringW)>(&GlobalNamespace::AssertExtensions::LessThan)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AssertExtensions*), "LessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected, value, message});
  }
};
