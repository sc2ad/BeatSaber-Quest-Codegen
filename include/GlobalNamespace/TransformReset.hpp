// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransformReset
  class TransformReset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransformReset);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransformReset*, "", "TransformReset");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: TransformReset
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformReset : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TransformReset::OriginalGameObjectTransform
    struct OriginalGameObjectTransform;
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: TransformReset/OriginalGameObjectTransform
    // [TokenAttribute] Offset: FFFFFFFF
    struct OriginalGameObjectTransform/*, public ::System::ValueType*/ {
      public:
      public:
      // private UnityEngine.Transform _thisTransform
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Transform* thisTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // private UnityEngine.Vector3 _thisPosition
      // Size: 0xC
      // Offset: 0x8
      ::UnityEngine::Vector3 thisPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Quaternion _thisRotation
      // Size: 0x10
      // Offset: 0x14
      ::UnityEngine::Quaternion thisRotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      public:
      // Creating value type constructor for type: OriginalGameObjectTransform
      constexpr OriginalGameObjectTransform(::UnityEngine::Transform* thisTransform_ = {}, ::UnityEngine::Vector3 thisPosition_ = {}, ::UnityEngine::Quaternion thisRotation_ = {}) noexcept : thisTransform{thisTransform_}, thisPosition{thisPosition_}, thisRotation{thisRotation_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private UnityEngine.Transform _thisTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__thisTransform();
      // Get instance field reference: private UnityEngine.Vector3 _thisPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__thisPosition();
      // Get instance field reference: private UnityEngine.Quaternion _thisRotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__thisRotation();
      // public UnityEngine.Transform get_thisTransform()
      // Offset: 0xA3BB98
      ::UnityEngine::Transform* get_thisTransform();
      // public System.Void set_thisTransform(UnityEngine.Transform value)
      // Offset: 0xA3BBA0
      void set_thisTransform(::UnityEngine::Transform* value);
      // public UnityEngine.Vector3 get_thisPosition()
      // Offset: 0xA3BBA8
      ::UnityEngine::Vector3 get_thisPosition();
      // public System.Void set_thisPosition(UnityEngine.Vector3 value)
      // Offset: 0xA3BBB4
      void set_thisPosition(::UnityEngine::Vector3 value);
      // public UnityEngine.Quaternion get_thisRotation()
      // Offset: 0xA3BBC0
      ::UnityEngine::Quaternion get_thisRotation();
      // public System.Void set_thisRotation(UnityEngine.Quaternion value)
      // Offset: 0xA3BBCC
      void set_thisRotation(::UnityEngine::Quaternion value);
      // public System.Void .ctor(UnityEngine.Transform constructionTransform)
      // Offset: 0xA3BB90
      OriginalGameObjectTransform(::UnityEngine::Transform* constructionTransform);
    }; // TransformReset/OriginalGameObjectTransform
    #pragma pack(pop)
    static check_size<sizeof(TransformReset::OriginalGameObjectTransform), 20 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_TransformReset_OriginalGameObjectTransformSizeCheck;
    static_assert(sizeof(TransformReset::OriginalGameObjectTransform) == 0x24);
    public:
    // private TransformReset/OriginalGameObjectTransform[] transformList
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform> transformList;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>) == 0x8);
    // private TransformReset/OriginalGameObjectTransform[] tempTransformList
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform> tempTransformList;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TransformReset/OriginalGameObjectTransform[] transformList
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>& dyn_transformList();
    // Get instance field reference: private TransformReset/OriginalGameObjectTransform[] tempTransformList
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>& dyn_tempTransformList();
    // public System.Void .ctor()
    // Offset: 0xCF9A7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformReset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformReset*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xCF9590
    void Awake();
    // public System.Void ReturnTransforms()
    // Offset: 0xCF98AC
    void ReturnTransforms();
    // public System.Void SetScale(System.Single ratio)
    // Offset: 0xCF996C
    void SetScale(float ratio);
    // public System.Void ResetTransforms()
    // Offset: 0xCF971C
    void ResetTransforms();
  }; // TransformReset
  #pragma pack(pop)
  static check_size<sizeof(TransformReset), 32 + sizeof(::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>)> __GlobalNamespace_TransformResetSizeCheck;
  static_assert(sizeof(TransformReset) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransformReset::OriginalGameObjectTransform, "", "TransformReset/OriginalGameObjectTransform");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransformReset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TransformReset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformReset::*)()>(&GlobalNamespace::TransformReset::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformReset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransformReset::ReturnTransforms
// Il2CppName: ReturnTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformReset::*)()>(&GlobalNamespace::TransformReset::ReturnTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformReset*), "ReturnTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransformReset::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformReset::*)(float)>(&GlobalNamespace::TransformReset::SetScale)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformReset*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransformReset::ResetTransforms
// Il2CppName: ResetTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformReset::*)()>(&GlobalNamespace::TransformReset::ResetTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformReset*), "ResetTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
