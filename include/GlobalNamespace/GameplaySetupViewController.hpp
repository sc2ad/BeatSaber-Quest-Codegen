// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: PlayerSettingsPanelController
#include "GlobalNamespace/PlayerSettingsPanelController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiersPanelController
  class GameplayModifiersPanelController;
  // Forward declaring type: EnvironmentOverrideSettingsPanelController
  class EnvironmentOverrideSettingsPanelController;
  // Forward declaring type: ColorsOverrideSettingsPanelController
  class ColorsOverrideSettingsPanelController;
  // Forward declaring type: MultiplayerSettingsPanelController
  class MultiplayerSettingsPanelController;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TextSegmentedControl
  class TextSegmentedControl;
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameplaySetupViewController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameplaySetupViewController*, "", "GameplaySetupViewController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC2
  #pragma pack(push, 1)
  // Autogenerated type: GameplaySetupViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class GameplaySetupViewController : public ::HMUI::ViewController {
    public:
    // Nested type: ::GlobalNamespace::GameplaySetupViewController::Panel
    class Panel;
    public:
    // private HMUI.TextSegmentedControl _selectionSegmentedControl
    // Size: 0x8
    // Offset: 0x70
    ::HMUI::TextSegmentedControl* selectionSegmentedControl;
    // Field size check
    static_assert(sizeof(::HMUI::TextSegmentedControl*) == 0x8);
    // private PlayerSettingsPanelController _playerSettingsPanelController
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::PlayerSettingsPanelController* playerSettingsPanelController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerSettingsPanelController*) == 0x8);
    // private GameplayModifiersPanelController _gameplayModifiersPanelController
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::GameplayModifiersPanelController* gameplayModifiersPanelController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayModifiersPanelController*) == 0x8);
    // private EnvironmentOverrideSettingsPanelController _environmentOverrideSettingsPanelController
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::EnvironmentOverrideSettingsPanelController* environmentOverrideSettingsPanelController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentOverrideSettingsPanelController*) == 0x8);
    // private ColorsOverrideSettingsPanelController _colorsOverrideSettingsPanelController
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::ColorsOverrideSettingsPanelController* colorsOverrideSettingsPanelController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorsOverrideSettingsPanelController*) == 0x8);
    // private MultiplayerSettingsPanelController _multiplayerSettingsPanelController
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MultiplayerSettingsPanelController* multiplayerSettingsPanelController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerSettingsPanelController*) == 0x8);
    // [InjectAttribute] Offset: 0x10EA2E4
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerDataModel*) == 0x8);
    // private System.Action didChangeGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action* didChangeGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Collections.Generic.List`1<GameplaySetupViewController/Panel> _panels
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::GlobalNamespace::GameplaySetupViewController::Panel*>* panels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GameplaySetupViewController::Panel*>*) == 0x8);
    // private System.Int32 _activePanelIdx
    // Size: 0x4
    // Offset: 0xB8
    int activePanelIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _showModifiers
    // Size: 0x1
    // Offset: 0xBC
    bool showModifiers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showEnvironmentOverrideSettings
    // Size: 0x1
    // Offset: 0xBD
    bool showEnvironmentOverrideSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showColorSchemesSettings
    // Size: 0x1
    // Offset: 0xBE
    bool showColorSchemesSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showMultiplayer
    // Size: 0x1
    // Offset: 0xBF
    bool showMultiplayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _shouldRefreshContent
    // Size: 0x1
    // Offset: 0xC0
    bool shouldRefreshContent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0xC1
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private HMUI.TextSegmentedControl _selectionSegmentedControl
    [[deprecated("Use field access instead!")]] ::HMUI::TextSegmentedControl*& dyn__selectionSegmentedControl();
    // Get instance field reference: private PlayerSettingsPanelController _playerSettingsPanelController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSettingsPanelController*& dyn__playerSettingsPanelController();
    // Get instance field reference: private GameplayModifiersPanelController _gameplayModifiersPanelController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiersPanelController*& dyn__gameplayModifiersPanelController();
    // Get instance field reference: private EnvironmentOverrideSettingsPanelController _environmentOverrideSettingsPanelController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentOverrideSettingsPanelController*& dyn__environmentOverrideSettingsPanelController();
    // Get instance field reference: private ColorsOverrideSettingsPanelController _colorsOverrideSettingsPanelController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorsOverrideSettingsPanelController*& dyn__colorsOverrideSettingsPanelController();
    // Get instance field reference: private MultiplayerSettingsPanelController _multiplayerSettingsPanelController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerSettingsPanelController*& dyn__multiplayerSettingsPanelController();
    // Get instance field reference: private readonly PlayerDataModel _playerDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& dyn__playerDataModel();
    // Get instance field reference: private System.Action didChangeGameplayModifiersEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didChangeGameplayModifiersEvent();
    // Get instance field reference: private System.Collections.Generic.List`1<GameplaySetupViewController/Panel> _panels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GameplaySetupViewController::Panel*>*& dyn__panels();
    // Get instance field reference: private System.Int32 _activePanelIdx
    [[deprecated("Use field access instead!")]] int& dyn__activePanelIdx();
    // Get instance field reference: private System.Boolean _showModifiers
    [[deprecated("Use field access instead!")]] bool& dyn__showModifiers();
    // Get instance field reference: private System.Boolean _showEnvironmentOverrideSettings
    [[deprecated("Use field access instead!")]] bool& dyn__showEnvironmentOverrideSettings();
    // Get instance field reference: private System.Boolean _showColorSchemesSettings
    [[deprecated("Use field access instead!")]] bool& dyn__showColorSchemesSettings();
    // Get instance field reference: private System.Boolean _showMultiplayer
    [[deprecated("Use field access instead!")]] bool& dyn__showMultiplayer();
    // Get instance field reference: private System.Boolean _shouldRefreshContent
    [[deprecated("Use field access instead!")]] bool& dyn__shouldRefreshContent();
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // public PlayerSpecificSettings get_playerSettings()
    // Offset: 0x13D83C0
    ::GlobalNamespace::PlayerSpecificSettings* get_playerSettings();
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0x13D83DC
    ::GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public OverrideEnvironmentSettings get_environmentOverrideSettings()
    // Offset: 0x13D83F8
    ::GlobalNamespace::OverrideEnvironmentSettings* get_environmentOverrideSettings();
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0x13D8420
    ::GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // public System.Void add_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0x13D8278
    void add_didChangeGameplayModifiersEvent(::System::Action* value);
    // public System.Void remove_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0x13D831C
    void remove_didChangeGameplayModifiersEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x13D8E44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplaySetupViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplaySetupViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplaySetupViewController*, creationType>()));
    }
    // public System.Void Setup(System.Boolean showModifiers, System.Boolean showEnvironmentOverrideSettings, System.Boolean showColorSchemesSettings, System.Boolean showMultiplayer, PlayerSettingsPanelController/PlayerSettingsPanelLayout playerSettingsPanelLayout)
    // Offset: 0x13C924C
    void Setup(bool showModifiers, bool showEnvironmentOverrideSettings, bool showColorSchemesSettings, bool showMultiplayer, ::GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout playerSettingsPanelLayout);
    // private System.Void Init()
    // Offset: 0x13D8448
    void Init();
    // protected System.Void OnDisable()
    // Offset: 0x13D8ACC
    void OnDisable();
    // private System.Void HandleSelectionSegmentedControlDidSelectCell(HMUI.SegmentedControl segmentedControl, System.Int32 cellIdx)
    // Offset: 0x13D8BB4
    void HandleSelectionSegmentedControlDidSelectCell(::HMUI::SegmentedControl* segmentedControl, int cellIdx);
    // private System.Void HandlePlayerSettingsPanelControllerDidChangePlayerSettings()
    // Offset: 0x13D8C74
    void HandlePlayerSettingsPanelControllerDidChangePlayerSettings();
    // private System.Void HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers()
    // Offset: 0x13D8CBC
    void HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers();
    // private System.Void SetActivePanel(System.Int32 panelIdx)
    // Offset: 0x13D8BBC
    void SetActivePanel(int panelIdx);
    // private System.Void RefreshContent()
    // Offset: 0x13D84E8
    void RefreshContent();
    // private System.Void RefreshActivePanel()
    // Offset: 0x13D8D18
    void RefreshActivePanel();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x13D8980
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
  }; // GameplaySetupViewController
  #pragma pack(pop)
  static check_size<sizeof(GameplaySetupViewController), 193 + sizeof(bool)> __GlobalNamespace_GameplaySetupViewControllerSizeCheck;
  static_assert(sizeof(GameplaySetupViewController) == 0xC2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::get_playerSettings
// Il2CppName: get_playerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerSpecificSettings* (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::get_playerSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "get_playerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayModifiers* (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::get_gameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::get_environmentOverrideSettings
// Il2CppName: get_environmentOverrideSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OverrideEnvironmentSettings* (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::get_environmentOverrideSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "get_environmentOverrideSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::get_colorSchemesSettings
// Il2CppName: get_colorSchemesSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorSchemesSettings* (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::get_colorSchemesSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "get_colorSchemesSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::add_didChangeGameplayModifiersEvent
// Il2CppName: add_didChangeGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(::System::Action*)>(&GlobalNamespace::GameplaySetupViewController::add_didChangeGameplayModifiersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "add_didChangeGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::remove_didChangeGameplayModifiersEvent
// Il2CppName: remove_didChangeGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(::System::Action*)>(&GlobalNamespace::GameplaySetupViewController::remove_didChangeGameplayModifiersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "remove_didChangeGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(bool, bool, bool, bool, ::GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout)>(&GlobalNamespace::GameplaySetupViewController::Setup)> {
  static const MethodInfo* get() {
    static auto* showModifiers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* showEnvironmentOverrideSettings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* showColorSchemesSettings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* showMultiplayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playerSettingsPanelLayout = &::il2cpp_utils::GetClassFromName("", "PlayerSettingsPanelController/PlayerSettingsPanelLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{showModifiers, showEnvironmentOverrideSettings, showColorSchemesSettings, showMultiplayer, playerSettingsPanelLayout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::HandleSelectionSegmentedControlDidSelectCell
// Il2CppName: HandleSelectionSegmentedControlDidSelectCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(::HMUI::SegmentedControl*, int)>(&GlobalNamespace::GameplaySetupViewController::HandleSelectionSegmentedControlDidSelectCell)> {
  static const MethodInfo* get() {
    static auto* segmentedControl = &::il2cpp_utils::GetClassFromName("HMUI", "SegmentedControl")->byval_arg;
    static auto* cellIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "HandleSelectionSegmentedControlDidSelectCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{segmentedControl, cellIdx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::HandlePlayerSettingsPanelControllerDidChangePlayerSettings
// Il2CppName: HandlePlayerSettingsPanelControllerDidChangePlayerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::HandlePlayerSettingsPanelControllerDidChangePlayerSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "HandlePlayerSettingsPanelControllerDidChangePlayerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers
// Il2CppName: HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::SetActivePanel
// Il2CppName: SetActivePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(int)>(&GlobalNamespace::GameplaySetupViewController::SetActivePanel)> {
  static const MethodInfo* get() {
    static auto* panelIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "SetActivePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panelIdx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::RefreshContent
// Il2CppName: RefreshContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::RefreshContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "RefreshContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::RefreshActivePanel
// Il2CppName: RefreshActivePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)()>(&GlobalNamespace::GameplaySetupViewController::RefreshActivePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "RefreshActivePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplaySetupViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplaySetupViewController::*)(bool, bool, bool)>(&GlobalNamespace::GameplaySetupViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplaySetupViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
