// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NativeVideoPlayer
#include "GlobalNamespace/NativeVideoPlayer.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NativeVideoPlayer::PlabackState, "", "NativeVideoPlayer/PlabackState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: NativeVideoPlayer/PlabackState
  // [TokenAttribute] Offset: FFFFFFFF
  struct NativeVideoPlayer::PlabackState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PlabackState
    constexpr PlabackState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public NativeVideoPlayer/PlabackState Idle
    static constexpr const int Idle = 1;
    // Get static field: static public NativeVideoPlayer/PlabackState Idle
    static ::GlobalNamespace::NativeVideoPlayer::PlabackState _get_Idle();
    // Set static field: static public NativeVideoPlayer/PlabackState Idle
    static void _set_Idle(::GlobalNamespace::NativeVideoPlayer::PlabackState value);
    // static field const value: static public NativeVideoPlayer/PlabackState Preparing
    static constexpr const int Preparing = 2;
    // Get static field: static public NativeVideoPlayer/PlabackState Preparing
    static ::GlobalNamespace::NativeVideoPlayer::PlabackState _get_Preparing();
    // Set static field: static public NativeVideoPlayer/PlabackState Preparing
    static void _set_Preparing(::GlobalNamespace::NativeVideoPlayer::PlabackState value);
    // static field const value: static public NativeVideoPlayer/PlabackState Buffering
    static constexpr const int Buffering = 3;
    // Get static field: static public NativeVideoPlayer/PlabackState Buffering
    static ::GlobalNamespace::NativeVideoPlayer::PlabackState _get_Buffering();
    // Set static field: static public NativeVideoPlayer/PlabackState Buffering
    static void _set_Buffering(::GlobalNamespace::NativeVideoPlayer::PlabackState value);
    // static field const value: static public NativeVideoPlayer/PlabackState Ready
    static constexpr const int Ready = 4;
    // Get static field: static public NativeVideoPlayer/PlabackState Ready
    static ::GlobalNamespace::NativeVideoPlayer::PlabackState _get_Ready();
    // Set static field: static public NativeVideoPlayer/PlabackState Ready
    static void _set_Ready(::GlobalNamespace::NativeVideoPlayer::PlabackState value);
    // static field const value: static public NativeVideoPlayer/PlabackState Ended
    static constexpr const int Ended = 5;
    // Get static field: static public NativeVideoPlayer/PlabackState Ended
    static ::GlobalNamespace::NativeVideoPlayer::PlabackState _get_Ended();
    // Set static field: static public NativeVideoPlayer/PlabackState Ended
    static void _set_Ended(::GlobalNamespace::NativeVideoPlayer::PlabackState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // NativeVideoPlayer/PlabackState
  #pragma pack(pop)
  static check_size<sizeof(NativeVideoPlayer::PlabackState), 0 + sizeof(int)> __GlobalNamespace_NativeVideoPlayer_PlabackStateSizeCheck;
  static_assert(sizeof(NativeVideoPlayer::PlabackState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
