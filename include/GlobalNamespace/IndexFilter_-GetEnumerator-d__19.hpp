// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.ValueTuple`3
#include "System/ValueTuple_3.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::IndexFilter::$GetEnumerator$d__19);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::IndexFilter::$GetEnumerator$d__19*, "", "IndexFilter/<GetEnumerator>d__19");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: IndexFilter/<GetEnumerator>d__19
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class IndexFilter::$GetEnumerator$d__19 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TupleElementNamesAttribute] Offset: 0x11328AC
    // private System.ValueTuple`3<System.Int32,System.Int32,System.Int32> <>2__current
    // Size: 0xFFFFFFFF
    // Offset: 0x14
    ::System::ValueTuple_3<int, int, int> $$2__current;
    // public IndexFilter <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IndexFilter* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IndexFilter*) == 0x8);
    // private System.Boolean <shouldLimitDurationOrder>5__2
    // Size: 0x1
    // Offset: 0x28
    bool $shouldLimitDurationOrder$5__2;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <shouldLimitDistributionOrder>5__3
    // Size: 0x1
    // Offset: 0x29
    bool $shouldLimitDistributionOrder$5__3;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <limitedOrderIndex>5__4
    // Size: 0x4
    // Offset: 0x2C
    int $limitedOrderIndex$5__4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.IEnumerator`1<System.ValueTuple`2<System.Int32,System.Int32>> <>7__wrap4
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<int, int>>* $$7__wrap4;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<int, int>>*) == 0x8);
    // private System.Int32 <elementId>5__6
    // Size: 0x4
    // Offset: 0x38
    int $elementId$5__6;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <index>5__7
    // Size: 0x4
    // Offset: 0x3C
    int $index$5__7;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <localChunkIndex>5__8
    // Size: 0x4
    // Offset: 0x40
    int $localChunkIndex$5__8;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>
    operator ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>*>(this);
    }
    // Creating interface conversion operator: i_ValueTuple_3_int_int_int
    inline ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>* i_ValueTuple_3_int_int_int() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.ValueTuple`3<System.Int32,System.Int32,System.Int32> <>2__current
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_3<int, int, int>& dyn_$$2__current();
    // Get instance field reference: public IndexFilter <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter*& dyn_$$4__this();
    // Get instance field reference: private System.Boolean <shouldLimitDurationOrder>5__2
    [[deprecated("Use field access instead!")]] bool& dyn_$shouldLimitDurationOrder$5__2();
    // Get instance field reference: private System.Boolean <shouldLimitDistributionOrder>5__3
    [[deprecated("Use field access instead!")]] bool& dyn_$shouldLimitDistributionOrder$5__3();
    // Get instance field reference: private System.Int32 <limitedOrderIndex>5__4
    [[deprecated("Use field access instead!")]] int& dyn_$limitedOrderIndex$5__4();
    // Get instance field reference: private System.Collections.Generic.IEnumerator`1<System.ValueTuple`2<System.Int32,System.Int32>> <>7__wrap4
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<int, int>>*& dyn_$$7__wrap4();
    // Get instance field reference: private System.Int32 <elementId>5__6
    [[deprecated("Use field access instead!")]] int& dyn_$elementId$5__6();
    // Get instance field reference: private System.Int32 <index>5__7
    [[deprecated("Use field access instead!")]] int& dyn_$index$5__7();
    // Get instance field reference: private System.Int32 <localChunkIndex>5__8
    [[deprecated("Use field access instead!")]] int& dyn_$localChunkIndex$5__8();
    // private System.ValueTuple`3<System.Int32,System.Int32,System.Int32> System.Collections.Generic.IEnumerator<(System.Int32element,System.Int32durationOrder,System.Int32distributionOrder)>.get_Current()
    // Offset: 0x139DE58
    ::System::ValueTuple_3<int, int, int> System_Collections_Generic_IEnumerator$_System_Int32element_System_Int32durationOrder_System_Int32distributionOrder_$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x139DEC8
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x139D6BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IndexFilter::$GetEnumerator$d__19* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IndexFilter::$GetEnumerator$d__19*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x139D7A4
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x139D880
    bool MoveNext();
    // private System.Void <>m__Finally1()
    // Offset: 0x139D7C0
    void $$m__Finally1();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x139DE68
    void System_Collections_IEnumerator_Reset();
  }; // IndexFilter/<GetEnumerator>d__19
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_Generic_IEnumerator$_System_Int32element_System_Int32durationOrder_System_Int32distributionOrder_$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<(System.Int32element,System.Int32durationOrder,System.Int32distributionOrder)>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_3<int, int, int> (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_Generic_IEnumerator$_System_Int32element_System_Int32durationOrder_System_Int32distributionOrder_$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "System.Collections.Generic.IEnumerator<(System.Int32element,System.Int32durationOrder,System.Int32distributionOrder)>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::$$m__Finally1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IndexFilter::$GetEnumerator$d__19::*)()>(&GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IndexFilter::$GetEnumerator$d__19*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
