// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataItem*, "", "BeatmapDataItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataItem
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataItem : public ::Il2CppObject/*, public ::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType
    struct BeatmapDataItemType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BeatmapDataItem/BeatmapDataItemType
    // [TokenAttribute] Offset: FFFFFFFF
    struct BeatmapDataItemType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BeatmapDataItemType
      constexpr BeatmapDataItemType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BeatmapDataItem/BeatmapDataItemType BeatmapObject
      static constexpr const int BeatmapObject = 0;
      // Get static field: static public BeatmapDataItem/BeatmapDataItemType BeatmapObject
      static ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType _get_BeatmapObject();
      // Set static field: static public BeatmapDataItem/BeatmapDataItemType BeatmapObject
      static void _set_BeatmapObject(::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType value);
      // static field const value: static public BeatmapDataItem/BeatmapDataItemType BeatmapEvent
      static constexpr const int BeatmapEvent = 1;
      // Get static field: static public BeatmapDataItem/BeatmapDataItemType BeatmapEvent
      static ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType _get_BeatmapEvent();
      // Set static field: static public BeatmapDataItem/BeatmapDataItemType BeatmapEvent
      static void _set_BeatmapEvent(::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BeatmapDataItem/BeatmapDataItemType
    #pragma pack(pop)
    static check_size<sizeof(BeatmapDataItem::BeatmapDataItemType), 0 + sizeof(int)> __GlobalNamespace_BeatmapDataItem_BeatmapDataItemTypeSizeCheck;
    static_assert(sizeof(BeatmapDataItem::BeatmapDataItemType) == 0x4);
    public:
    // private readonly System.Single <time>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 <executionOrder>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int executionOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 subtypeIdentifier
    // Size: 0x4
    // Offset: 0x18
    int subtypeIdentifier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly BeatmapDataItem/BeatmapDataItemType type
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType type;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>
    operator ::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>*>(this);
    }
    // Creating interface conversion operator: i_BeatmapDataItem
    inline ::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>* i_BeatmapDataItem() noexcept {
      return reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapDataItem*>*>(this);
    }
    // Get instance field reference: private readonly System.Single <time>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$time$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <executionOrder>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$executionOrder$k__BackingField();
    // Get instance field reference: public readonly System.Int32 subtypeIdentifier
    [[deprecated("Use field access instead!")]] int& dyn_subtypeIdentifier();
    // Get instance field reference: public readonly BeatmapDataItem/BeatmapDataItemType type
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType& dyn_type();
    // public System.Single get_time()
    // Offset: 0x26AF04C
    float get_time();
    // public System.Int32 get_executionOrder()
    // Offset: 0x26AF054
    int get_executionOrder();
    // public System.Int32 get_subtypeGroupIdentifier()
    // Offset: 0x26AF05C
    int get_subtypeGroupIdentifier();
    // protected System.Void .ctor(System.Single time, System.Int32 executionOrder, System.Int32 subtypeIdentifier, BeatmapDataItem/BeatmapDataItemType type)
    // Offset: 0x26AF064
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataItem* New_ctor(float time, int executionOrder, int subtypeIdentifier, ::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataItem*, creationType>(time, executionOrder, subtypeIdentifier, type)));
    }
    // public BeatmapDataItem GetCopy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::BeatmapDataItem* GetCopy();
    // public System.Int32 CompareTo(BeatmapDataItem b)
    // Offset: 0x26AF0B4
    int CompareTo(::GlobalNamespace::BeatmapDataItem* b);
  }; // BeatmapDataItem
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataItem), 28 + sizeof(::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType)> __GlobalNamespace_BeatmapDataItemSizeCheck;
  static_assert(sizeof(BeatmapDataItem) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataItem::BeatmapDataItemType, "", "BeatmapDataItem/BeatmapDataItemType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapDataItem::*)()>(&GlobalNamespace::BeatmapDataItem::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataItem*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::get_executionOrder
// Il2CppName: get_executionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataItem::*)()>(&GlobalNamespace::BeatmapDataItem::get_executionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataItem*), "get_executionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::get_subtypeGroupIdentifier
// Il2CppName: get_subtypeGroupIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataItem::*)()>(&GlobalNamespace::BeatmapDataItem::get_subtypeGroupIdentifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataItem*), "get_subtypeGroupIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDataItem* (GlobalNamespace::BeatmapDataItem::*)()>(&GlobalNamespace::BeatmapDataItem::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataItem*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataItem::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataItem::*)(::GlobalNamespace::BeatmapDataItem*)>(&GlobalNamespace::BeatmapDataItem::CompareTo)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataItem*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
