// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
// Including type: LightWithIds/LightData
#include "GlobalNamespace/LightWithIds_LightData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: LightmapLightWithIds/LightIntensitiesData
  // [TokenAttribute] Offset: FFFFFFFF
  class LightmapLightWithIds::LightIntensitiesData : public GlobalNamespace::LightWithIds::LightData {
    public:
    // Writing base type padding for base size: 0x25 to desired offset: 0x28
    char ___base_padding[0x3] = {};
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x28
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _probeHighlightsIntensityMultiplier
    // Size: 0x4
    // Offset: 0x2C
    float probeHighlightsIntensityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: LightIntensitiesData
    LightIntensitiesData(float intensity_ = {}, float probeHighlightsIntensityMultiplier_ = {}) noexcept : intensity{intensity_}, probeHighlightsIntensityMultiplier{probeHighlightsIntensityMultiplier_} {}
    // Get instance field reference: private System.Single _intensity
    float& dyn__intensity();
    // Get instance field reference: private System.Single _probeHighlightsIntensityMultiplier
    float& dyn__probeHighlightsIntensityMultiplier();
    // public System.Single get_intensity()
    // Offset: 0x1E2AF28
    float get_intensity();
    // public System.Void set_intensity(System.Single value)
    // Offset: 0x1E2AF30
    void set_intensity(float value);
    // public System.Single get_probeHighlightsIntensityMultiplier()
    // Offset: 0x1E2AF38
    float get_probeHighlightsIntensityMultiplier();
    // public System.Void set_probeHighlightsIntensityMultiplier(System.Single value)
    // Offset: 0x1E2AF40
    void set_probeHighlightsIntensityMultiplier(float value);
    // public System.Void .ctor()
    // Offset: 0x1E2AF48
    // Implemented from: LightWithIds/LightData
    // Base method: System.Void LightData::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightmapLightWithIds::LightIntensitiesData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightmapLightWithIds::LightIntensitiesData*, creationType>()));
    }
  }; // LightmapLightWithIds/LightIntensitiesData
  #pragma pack(pop)
  static check_size<sizeof(LightmapLightWithIds::LightIntensitiesData), 44 + sizeof(float)> __GlobalNamespace_LightmapLightWithIds_LightIntensitiesDataSizeCheck;
  static_assert(sizeof(LightmapLightWithIds::LightIntensitiesData) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightmapLightWithIds::LightIntensitiesData*, "", "LightmapLightWithIds/LightIntensitiesData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::*)()>(&GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_intensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds::LightIntensitiesData*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_intensity
// Il2CppName: set_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::*)(float)>(&GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_intensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds::LightIntensitiesData*), "set_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_probeHighlightsIntensityMultiplier
// Il2CppName: get_probeHighlightsIntensityMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::*)()>(&GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_probeHighlightsIntensityMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds::LightIntensitiesData*), "get_probeHighlightsIntensityMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_probeHighlightsIntensityMultiplier
// Il2CppName: set_probeHighlightsIntensityMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::*)(float)>(&GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_probeHighlightsIntensityMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds::LightIntensitiesData*), "set_probeHighlightsIntensityMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
