// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatSaberLogger
  class IBeatSaberLogger;
  // Forward declaring type: PosesRecordingData
  class PosesRecordingData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RecordingConverter
  class RecordingConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RecordingConverter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RecordingConverter*, "", "RecordingConverter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: RecordingConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class RecordingConverter : public ::Il2CppObject {
    public:
    public:
    // private readonly IBeatSaberLogger _logger
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::IBeatSaberLogger* logger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatSaberLogger*) == 0x8);
    public:
    // Creating conversion operator: operator ::GlobalNamespace::IBeatSaberLogger*
    constexpr operator ::GlobalNamespace::IBeatSaberLogger*() const noexcept {
      return logger;
    }
    // Get instance field reference: private readonly IBeatSaberLogger _logger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatSaberLogger*& dyn__logger();
    // public System.Void .ctor(IBeatSaberLogger logger)
    // Offset: 0x1368434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordingConverter* New_ctor(::GlobalNamespace::IBeatSaberLogger* logger) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordingConverter*, creationType>(logger)));
    }
    // public System.Void SaveToOldFormat(System.String path, PosesRecordingData data)
    // Offset: 0x13694BC
    void SaveToOldFormat(::StringW path, ::GlobalNamespace::PosesRecordingData* data);
  }; // RecordingConverter
  #pragma pack(pop)
  static check_size<sizeof(RecordingConverter), 16 + sizeof(::GlobalNamespace::IBeatSaberLogger*)> __GlobalNamespace_RecordingConverterSizeCheck;
  static_assert(sizeof(RecordingConverter) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RecordingConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RecordingConverter::SaveToOldFormat
// Il2CppName: SaveToOldFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RecordingConverter::*)(::StringW, ::GlobalNamespace::PosesRecordingData*)>(&GlobalNamespace::RecordingConverter::SaveToOldFormat)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingConverter*), "SaveToOldFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, data});
  }
};
