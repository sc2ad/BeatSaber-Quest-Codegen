// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RuntimeLightWithLightGroupIds
#include "GlobalNamespace/RuntimeLightWithLightGroupIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DirectionalLight
  class DirectionalLight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DirectionalLightWithLightGroupIds
  class DirectionalLightWithLightGroupIds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DirectionalLightWithLightGroupIds);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DirectionalLightWithLightGroupIds*, "", "DirectionalLightWithLightGroupIds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: DirectionalLightWithLightGroupIds
  // [TokenAttribute] Offset: FFFFFFFF
  class DirectionalLightWithLightGroupIds : public ::GlobalNamespace::RuntimeLightWithLightGroupIds {
    public:
    public:
    // private DirectionalLight _directionalLight
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::DirectionalLight* directionalLight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DirectionalLight*) == 0x8);
    public:
    // Get instance field reference: private DirectionalLight _directionalLight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLight*& dyn__directionalLight();
    // public System.Void .ctor()
    // Offset: 0x1CBA16C
    // Implemented from: RuntimeLightWithLightGroupIds
    // Base method: System.Void RuntimeLightWithLightGroupIds::.ctor()
    // Base method: System.Void LightWithIds::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DirectionalLightWithLightGroupIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithLightGroupIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DirectionalLightWithLightGroupIds*, creationType>()));
    }
    // protected override System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0x1CBA14C
    // Implemented from: RuntimeLightWithLightGroupIds
    // Base method: System.Void RuntimeLightWithLightGroupIds::ColorWasSet(UnityEngine.Color color)
    void ColorWasSet(::UnityEngine::Color color);
  }; // DirectionalLightWithLightGroupIds
  #pragma pack(pop)
  static check_size<sizeof(DirectionalLightWithLightGroupIds), 80 + sizeof(::GlobalNamespace::DirectionalLight*)> __GlobalNamespace_DirectionalLightWithLightGroupIdsSizeCheck;
  static_assert(sizeof(DirectionalLightWithLightGroupIds) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DirectionalLightWithLightGroupIds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DirectionalLightWithLightGroupIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DirectionalLightWithLightGroupIds::*)(::UnityEngine::Color)>(&GlobalNamespace::DirectionalLightWithLightGroupIds::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DirectionalLightWithLightGroupIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
