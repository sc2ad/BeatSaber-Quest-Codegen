// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderData
  class SliderData;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: MonoMemoryPool`1<TValue>
  template<typename TValue>
  class MonoMemoryPool_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderController::Pool);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderController::Pool*, "", "SliderController/Pool");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: SliderController/Pool
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderController::Pool : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::SliderController::Pool::Short
    class Short;
    // Nested type: ::GlobalNamespace::SliderController::Pool::Medium
    class Medium;
    // Nested type: ::GlobalNamespace::SliderController::Pool::Long
    class Long;
    public:
    // private readonly SliderController/Pool/Short _shortPool
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::SliderController::Pool::Short* shortPool;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderController::Pool::Short*) == 0x8);
    // private readonly SliderController/Pool/Medium _mediumPool
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SliderController::Pool::Medium* mediumPool;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderController::Pool::Medium*) == 0x8);
    // private readonly SliderController/Pool/Long _longPool
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::SliderController::Pool::Long* longPool;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderController::Pool::Long*) == 0x8);
    public:
    // static field const value: static private System.Single kMinDistanceToUseMedium
    static constexpr const float kMinDistanceToUseMedium = 5;
    // Get static field: static private System.Single kMinDistanceToUseMedium
    static float _get_kMinDistanceToUseMedium();
    // Set static field: static private System.Single kMinDistanceToUseMedium
    static void _set_kMinDistanceToUseMedium(float value);
    // static field const value: static private System.Single kMinDistanceToUseLong
    static constexpr const float kMinDistanceToUseLong = 15;
    // Get static field: static private System.Single kMinDistanceToUseLong
    static float _get_kMinDistanceToUseLong();
    // Set static field: static private System.Single kMinDistanceToUseLong
    static void _set_kMinDistanceToUseLong(float value);
    // Get instance field reference: private readonly SliderController/Pool/Short _shortPool
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Short*& dyn__shortPool();
    // Get instance field reference: private readonly SliderController/Pool/Medium _mediumPool
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Medium*& dyn__mediumPool();
    // Get instance field reference: private readonly SliderController/Pool/Long _longPool
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Long*& dyn__longPool();
    // public System.Void .ctor(SliderController/Pool/Short shortPool, SliderController/Pool/Medium mediumPool, SliderController/Pool/Long longPool)
    // Offset: 0x14952C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderController::Pool* New_ctor(::GlobalNamespace::SliderController::Pool::Short* shortPool, ::GlobalNamespace::SliderController::Pool::Medium* mediumPool, ::GlobalNamespace::SliderController::Pool::Long* longPool) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderController::Pool*, creationType>(shortPool, mediumPool, longPool)));
    }
    // public Zenject.MonoMemoryPool`1<SliderController> GetPool(SliderController/LengthType lengthType)
    // Offset: 0x1495300
    ::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>* GetPool(::GlobalNamespace::SliderController::LengthType lengthType);
    // static public SliderController/LengthType GetLengthFromSliderData(SliderData sliderNoteData, BeatmapObjectSpawnMovementData/SliderSpawnData sliderSpawnData)
    // Offset: 0x14953A8
    static ::GlobalNamespace::SliderController::LengthType GetLengthFromSliderData(::GlobalNamespace::SliderData* sliderNoteData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData sliderSpawnData);
  }; // SliderController/Pool
  #pragma pack(pop)
  static check_size<sizeof(SliderController::Pool), 32 + sizeof(::GlobalNamespace::SliderController::Pool::Long*)> __GlobalNamespace_SliderController_PoolSizeCheck;
  static_assert(sizeof(SliderController::Pool) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Pool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Pool::GetPool
// Il2CppName: GetPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>* (GlobalNamespace::SliderController::Pool::*)(::GlobalNamespace::SliderController::LengthType)>(&GlobalNamespace::SliderController::Pool::GetPool)> {
  static const MethodInfo* get() {
    static auto* lengthType = &::il2cpp_utils::GetClassFromName("", "SliderController/LengthType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController::Pool*), "GetPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lengthType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Pool::GetLengthFromSliderData
// Il2CppName: GetLengthFromSliderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderController::LengthType (*)(::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData)>(&GlobalNamespace::SliderController::Pool::GetLengthFromSliderData)> {
  static const MethodInfo* get() {
    static auto* sliderNoteData = &::il2cpp_utils::GetClassFromName("", "SliderData")->byval_arg;
    static auto* sliderSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/SliderSpawnData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController::Pool*), "GetLengthFromSliderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteData, sliderSpawnData});
  }
};
