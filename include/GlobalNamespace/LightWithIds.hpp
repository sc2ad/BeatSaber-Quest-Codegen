// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightWithIdManager
  class LightWithIdManager;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightWithIds
  class LightWithIds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightWithIds);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightWithIds*, "", "LightWithIds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: LightWithIds
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class LightWithIds : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LightWithIds::LightWithId
    class LightWithId;
    public:
    // [InjectAttribute] Offset: 0x1107E38
    // private LightWithIdManager _lightManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::LightWithIdManager* lightManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightWithIdManager*) == 0x8);
    // private System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> _lightWithIds
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* lightWithIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*) == 0x8);
    // private System.Boolean _isRegistered
    // Size: 0x1
    // Offset: 0x28
    bool isRegistered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _childrenColorWasSet
    // Size: 0x1
    // Offset: 0x29
    bool childrenColorWasSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private LightWithIdManager _lightManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& dyn__lightManager();
    // Get instance field reference: private System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> _lightWithIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*& dyn__lightWithIds();
    // Get instance field reference: private System.Boolean _isRegistered
    [[deprecated("Use field access instead!")]] bool& dyn__isRegistered();
    // Get instance field reference: private System.Boolean _childrenColorWasSet
    [[deprecated("Use field access instead!")]] bool& dyn__childrenColorWasSet();
    // public System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> get_lightWithIds()
    // Offset: 0x1CBE220
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* get_lightWithIds();
    // protected System.Void .ctor()
    // Offset: 0x1CB9C20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightWithIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightWithIds*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1CBE228
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1CBE290
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x1CB958C
    void OnEnable();
    // public System.Void MarkChildrenColorAsSet()
    // Offset: 0x1CBE5A8
    void MarkChildrenColorAsSet();
    // protected System.Void SetNewLightsWithIds(System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> lightsWithIds)
    // Offset: 0x1CBE264
    void SetNewLightsWithIds(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* lightsWithIds);
    // protected System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> GetLightWithIds()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GetLightWithIds();
    // private System.Void RegisterForColorChanges()
    // Offset: 0x1CBE294
    void RegisterForColorChanges();
    // private System.Void UnregisterFromColorChanges()
    // Offset: 0x1CBE5B4
    void UnregisterFromColorChanges();
    // protected System.Void OnDisable()
    // Offset: 0x1CBE89C
    void OnDisable();
    // private System.Void HandleLightManagerDidChangeSomeColorsThisFrame()
    // Offset: 0x1CBE8A0
    void HandleLightManagerDidChangeSomeColorsThisFrame();
    // protected System.Void ProcessNewColorData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessNewColorData();
  }; // LightWithIds
  #pragma pack(pop)
  static check_size<sizeof(LightWithIds), 41 + sizeof(bool)> __GlobalNamespace_LightWithIdsSizeCheck;
  static_assert(sizeof(LightWithIds) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::get_lightWithIds
// Il2CppName: get_lightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::get_lightWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "get_lightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::MarkChildrenColorAsSet
// Il2CppName: MarkChildrenColorAsSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::MarkChildrenColorAsSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "MarkChildrenColorAsSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::SetNewLightsWithIds
// Il2CppName: SetNewLightsWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*)>(&GlobalNamespace::LightWithIds::SetNewLightsWithIds)> {
  static const MethodInfo* get() {
    static auto* lightsWithIds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LightWithIds/LightWithId")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "SetNewLightsWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightsWithIds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::GetLightWithIds
// Il2CppName: GetLightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::GetLightWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "GetLightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::RegisterForColorChanges
// Il2CppName: RegisterForColorChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::RegisterForColorChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "RegisterForColorChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::UnregisterFromColorChanges
// Il2CppName: UnregisterFromColorChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::UnregisterFromColorChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "UnregisterFromColorChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame
// Il2CppName: HandleLightManagerDidChangeSomeColorsThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIds::ProcessNewColorData
// Il2CppName: ProcessNewColorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIds::*)()>(&GlobalNamespace::LightWithIds::ProcessNewColorData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIds*), "ProcessNewColorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
