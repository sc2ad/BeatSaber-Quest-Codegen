// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRInput/OVRControllerBase
#include "GlobalNamespace/OVRInput_OVRControllerBase.hpp"
// Including type: OVRInput/RawTouch
#include "GlobalNamespace/OVRInput_RawTouch.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap*, "", "OVRInput/OVRControllerBase/VirtualTouchMap");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: OVRInput/OVRControllerBase/VirtualTouchMap
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRInput::OVRControllerBase::VirtualTouchMap : public ::Il2CppObject {
    public:
    public:
    // public OVRInput/RawTouch None
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::OVRInput::RawTouch None;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch One
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::OVRInput::RawTouch One;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch Two
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRInput::RawTouch Two;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch Three
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::OVRInput::RawTouch Three;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch Four
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::RawTouch Four;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch PrimaryIndexTrigger
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRInput::RawTouch PrimaryIndexTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch PrimaryThumbstick
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::OVRInput::RawTouch PrimaryThumbstick;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch PrimaryThumbRest
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::OVRInput::RawTouch PrimaryThumbRest;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch PrimaryTouchpad
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRInput::RawTouch PrimaryTouchpad;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch SecondaryIndexTrigger
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::OVRInput::RawTouch SecondaryIndexTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch SecondaryThumbstick
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::OVRInput::RawTouch SecondaryThumbstick;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch SecondaryThumbRest
    // Size: 0x4
    // Offset: 0x3C
    ::GlobalNamespace::OVRInput::RawTouch SecondaryThumbRest;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    // public OVRInput/RawTouch SecondaryTouchpad
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::OVRInput::RawTouch SecondaryTouchpad;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawTouch) == 0x4);
    public:
    // Get instance field reference: public OVRInput/RawTouch None
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_None();
    // Get instance field reference: public OVRInput/RawTouch One
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_One();
    // Get instance field reference: public OVRInput/RawTouch Two
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_Two();
    // Get instance field reference: public OVRInput/RawTouch Three
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_Three();
    // Get instance field reference: public OVRInput/RawTouch Four
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_Four();
    // Get instance field reference: public OVRInput/RawTouch PrimaryIndexTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_PrimaryIndexTrigger();
    // Get instance field reference: public OVRInput/RawTouch PrimaryThumbstick
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_PrimaryThumbstick();
    // Get instance field reference: public OVRInput/RawTouch PrimaryThumbRest
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_PrimaryThumbRest();
    // Get instance field reference: public OVRInput/RawTouch PrimaryTouchpad
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_PrimaryTouchpad();
    // Get instance field reference: public OVRInput/RawTouch SecondaryIndexTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_SecondaryIndexTrigger();
    // Get instance field reference: public OVRInput/RawTouch SecondaryThumbstick
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_SecondaryThumbstick();
    // Get instance field reference: public OVRInput/RawTouch SecondaryThumbRest
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_SecondaryThumbRest();
    // Get instance field reference: public OVRInput/RawTouch SecondaryTouchpad
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawTouch& dyn_SecondaryTouchpad();
    // public System.Void .ctor()
    // Offset: 0x19FFE44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRInput::OVRControllerBase::VirtualTouchMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRInput::OVRControllerBase::VirtualTouchMap*, creationType>()));
    }
    // public OVRInput/RawTouch ToRawMask(OVRInput/Touch virtualMask)
    // Offset: 0x1A00B14
    ::GlobalNamespace::OVRInput::RawTouch ToRawMask(::GlobalNamespace::OVRInput::Touch virtualMask);
  }; // OVRInput/OVRControllerBase/VirtualTouchMap
  #pragma pack(pop)
  static check_size<sizeof(OVRInput::OVRControllerBase::VirtualTouchMap), 64 + sizeof(::GlobalNamespace::OVRInput::RawTouch)> __GlobalNamespace_OVRInput_OVRControllerBase_VirtualTouchMapSizeCheck;
  static_assert(sizeof(OVRInput::OVRControllerBase::VirtualTouchMap) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap::ToRawMask
// Il2CppName: ToRawMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRInput::RawTouch (GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap::*)(::GlobalNamespace::OVRInput::Touch)>(&GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap::ToRawMask)> {
  static const MethodInfo* get() {
    static auto* virtualMask = &::il2cpp_utils::GetClassFromName("", "OVRInput/Touch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap*), "ToRawMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{virtualMask});
  }
};
