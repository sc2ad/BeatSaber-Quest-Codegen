// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IFlyingObjectEffectDidFinishEvent
#include "GlobalNamespace/IFlyingObjectEffectDidFinishEvent.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: FlyingSpriteEffect
#include "GlobalNamespace/FlyingSpriteEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: FlyingObjectEffect because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlyingSpriteSpawner
  class FlyingSpriteSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlyingSpriteSpawner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlyingSpriteSpawner*, "", "FlyingSpriteSpawner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: FlyingSpriteSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  class FlyingSpriteSpawner : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*/ {
    public:
    public:
    // private UnityEngine.Sprite _sprite
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Sprite* sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Single _duration
    // Size: 0x4
    // Offset: 0x28
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _xSpread
    // Size: 0x4
    // Offset: 0x2C
    float xSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _targetYPos
    // Size: 0x4
    // Offset: 0x30
    float targetYPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _targetZPos
    // Size: 0x4
    // Offset: 0x34
    float targetZPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _shake
    // Size: 0x1
    // Offset: 0x48
    bool shake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shake and: flyingSpriteEffectPool
    char __padding7[0x7] = {};
    // [InjectAttribute] Offset: 0x111FF00
    // private readonly FlyingSpriteEffect/Pool _flyingSpriteEffectPool
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::FlyingSpriteEffect::Pool* flyingSpriteEffectPool;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FlyingSpriteEffect::Pool*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IFlyingObjectEffectDidFinishEvent
    operator ::GlobalNamespace::IFlyingObjectEffectDidFinishEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>(this);
    }
    // Creating interface conversion operator: i_IFlyingObjectEffectDidFinishEvent
    inline ::GlobalNamespace::IFlyingObjectEffectDidFinishEvent* i_IFlyingObjectEffectDidFinishEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Sprite _sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__sprite();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Single _duration
    [[deprecated("Use field access instead!")]] float& dyn__duration();
    // Get instance field reference: private System.Single _xSpread
    [[deprecated("Use field access instead!")]] float& dyn__xSpread();
    // Get instance field reference: private System.Single _targetYPos
    [[deprecated("Use field access instead!")]] float& dyn__targetYPos();
    // Get instance field reference: private System.Single _targetZPos
    [[deprecated("Use field access instead!")]] float& dyn__targetZPos();
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private System.Boolean _shake
    [[deprecated("Use field access instead!")]] bool& dyn__shake();
    // Get instance field reference: private readonly FlyingSpriteEffect/Pool _flyingSpriteEffectPool
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingSpriteEffect::Pool*& dyn__flyingSpriteEffectPool();
    // public System.Void .ctor()
    // Offset: 0x1425244
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlyingSpriteSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlyingSpriteSpawner*, creationType>()));
    }
    // public System.Void SpawnFlyingSprite(UnityEngine.Vector3 pos, UnityEngine.Quaternion rotation, UnityEngine.Quaternion inverseRotation)
    // Offset: 0x1424EBC
    void SpawnFlyingSprite(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rotation, ::UnityEngine::Quaternion inverseRotation);
    // public System.Void HandleFlyingObjectEffectDidFinish(FlyingObjectEffect flyingObjectEffect)
    // Offset: 0x1425128
    void HandleFlyingObjectEffectDidFinish(::GlobalNamespace::FlyingObjectEffect* flyingObjectEffect);
  }; // FlyingSpriteSpawner
  #pragma pack(pop)
  static check_size<sizeof(FlyingSpriteSpawner), 80 + sizeof(::GlobalNamespace::FlyingSpriteEffect::Pool*)> __GlobalNamespace_FlyingSpriteSpawnerSizeCheck;
  static_assert(sizeof(FlyingSpriteSpawner) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlyingSpriteSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite
// Il2CppName: SpawnFlyingSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlyingSpriteSpawner::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* inverseRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlyingSpriteSpawner*), "SpawnFlyingSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rotation, inverseRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish
// Il2CppName: HandleFlyingObjectEffectDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlyingSpriteSpawner::*)(::GlobalNamespace::FlyingObjectEffect*)>(&GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish)> {
  static const MethodInfo* get() {
    static auto* flyingObjectEffect = &::il2cpp_utils::GetClassFromName("", "FlyingObjectEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlyingSpriteSpawner*), "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flyingObjectEffect});
  }
};
