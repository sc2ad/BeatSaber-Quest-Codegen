// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportSupport
#include "GlobalNamespace/TeleportSupport.hpp"
// Including type: LocomotionTeleport
#include "GlobalNamespace/LocomotionTeleport.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportOrientationHandler
  class TeleportOrientationHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportOrientationHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportOrientationHandler*, "", "TeleportOrientationHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: TeleportOrientationHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportOrientationHandler : public ::GlobalNamespace::TeleportSupport {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::TeleportOrientationHandler::OrientationModes
    struct OrientationModes;
    // Nested type: ::GlobalNamespace::TeleportOrientationHandler::$UpdateOrientationCoroutine$d__7
    class $UpdateOrientationCoroutine$d__7;
    public:
    // private readonly System.Action _updateOrientationAction
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* updateOrientationAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly System.Action`1<LocomotionTeleport/AimData> _updateAimDataAction
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>* updateAimDataAction;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*) == 0x8);
    // protected LocomotionTeleport/AimData AimData
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::LocomotionTeleport::AimData* AimData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionTeleport::AimData*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Action _updateOrientationAction
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__updateOrientationAction();
    // Get instance field reference: private readonly System.Action`1<LocomotionTeleport/AimData> _updateAimDataAction
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*& dyn__updateAimDataAction();
    // Get instance field reference: protected LocomotionTeleport/AimData AimData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionTeleport::AimData*& dyn_AimData();
    // private System.Void UpdateAimData(LocomotionTeleport/AimData aimData)
    // Offset: 0xCF5CAC
    void UpdateAimData(::GlobalNamespace::LocomotionTeleport::AimData* aimData);
    // private System.Collections.IEnumerator UpdateOrientationCoroutine()
    // Offset: 0xCF5D48
    ::System::Collections::IEnumerator* UpdateOrientationCoroutine();
    // protected System.Void InitializeTeleportDestination()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitializeTeleportDestination();
    // protected System.Void UpdateTeleportDestination()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTeleportDestination();
    // protected UnityEngine.Quaternion GetLandingOrientation(TeleportOrientationHandler/OrientationModes mode, UnityEngine.Quaternion rotation)
    // Offset: 0xCF5DE4
    ::UnityEngine::Quaternion GetLandingOrientation(::GlobalNamespace::TeleportOrientationHandler::OrientationModes mode, ::UnityEngine::Quaternion rotation);
    // private System.Void <.ctor>b__3_0()
    // Offset: 0xCF5F08
    void $_ctor$b__3_0();
    // protected System.Void .ctor()
    // Offset: 0xCF5BF8
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportOrientationHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportOrientationHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportOrientationHandler*, creationType>()));
    }
    // protected override System.Void AddEventHandlers()
    // Offset: 0xCF5CB4
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::AddEventHandlers()
    void AddEventHandlers();
    // protected override System.Void RemoveEventHandlers()
    // Offset: 0xCF5D00
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::RemoveEventHandlers()
    void RemoveEventHandlers();
  }; // TeleportOrientationHandler
  #pragma pack(pop)
  static check_size<sizeof(TeleportOrientationHandler), 56 + sizeof(::GlobalNamespace::LocomotionTeleport::AimData*)> __GlobalNamespace_TeleportOrientationHandlerSizeCheck;
  static_assert(sizeof(TeleportOrientationHandler) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::UpdateAimData
// Il2CppName: UpdateAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)(::GlobalNamespace::LocomotionTeleport::AimData*)>(&GlobalNamespace::TeleportOrientationHandler::UpdateAimData)> {
  static const MethodInfo* get() {
    static auto* aimData = &::il2cpp_utils::GetClassFromName("", "LocomotionTeleport/AimData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "UpdateAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aimData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::UpdateOrientationCoroutine
// Il2CppName: UpdateOrientationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::UpdateOrientationCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "UpdateOrientationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::InitializeTeleportDestination
// Il2CppName: InitializeTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::InitializeTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "InitializeTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::UpdateTeleportDestination
// Il2CppName: UpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::UpdateTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "UpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::GetLandingOrientation
// Il2CppName: GetLandingOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::TeleportOrientationHandler::*)(::GlobalNamespace::TeleportOrientationHandler::OrientationModes, ::UnityEngine::Quaternion)>(&GlobalNamespace::TeleportOrientationHandler::GetLandingOrientation)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("", "TeleportOrientationHandler/OrientationModes")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "GetLandingOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::$_ctor$b__3_0
// Il2CppName: <.ctor>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::$_ctor$b__3_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "<.ctor>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::AddEventHandlers
// Il2CppName: AddEventHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::AddEventHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "AddEventHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandler::RemoveEventHandlers
// Il2CppName: RemoveEventHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandler::*)()>(&GlobalNamespace::TeleportOrientationHandler::RemoveEventHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandler*), "RemoveEventHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
