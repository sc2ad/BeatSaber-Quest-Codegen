// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSA
  class RSA;
  // Forward declaring type: DSA
  class DSA;
}
// Completed forward declares
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Forward declaring type: CryptoConvert
  class CryptoConvert_;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Cryptography::CryptoConvert_);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Cryptography::CryptoConvert_*, "Mono.Security.Cryptography", "CryptoConvert");
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Cryptography.CryptoConvert
  // [TokenAttribute] Offset: FFFFFFFF
  class CryptoConvert_ : public ::Il2CppObject {
    public:
    // static private System.Int32 ToInt32LE(System.Byte[] bytes, System.Int32 offset)
    // Offset: 0x14D9ABC
    static int ToInt32LE(::ArrayW<uint8_t> bytes, int offset);
    // static private System.UInt32 ToUInt32LE(System.Byte[] bytes, System.Int32 offset)
    // Offset: 0x14D9B3C
    static uint ToUInt32LE(::ArrayW<uint8_t> bytes, int offset);
    // static private System.Byte[] GetBytesLE(System.Int32 val)
    // Offset: 0x14D9BBC
    static ::ArrayW<uint8_t> GetBytesLE(int val);
    // static private System.Byte[] Trim(System.Byte[] array)
    // Offset: 0x14D9C60
    static ::ArrayW<uint8_t> Trim(::ArrayW<uint8_t> array);
    // static public System.Security.Cryptography.RSA FromCapiPrivateKeyBlob(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14D9D30
    static ::System::Security::Cryptography::RSA* FromCapiPrivateKeyBlob(::ArrayW<uint8_t> blob, int offset);
    // static public System.Security.Cryptography.DSA FromCapiPrivateKeyBlobDSA(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14DA2D8
    static ::System::Security::Cryptography::DSA* FromCapiPrivateKeyBlobDSA(::ArrayW<uint8_t> blob, int offset);
    // static public System.Byte[] ToCapiPrivateKeyBlob(System.Security.Cryptography.RSA rsa)
    // Offset: 0x14DA760
    static ::ArrayW<uint8_t> ToCapiPrivateKeyBlob(::System::Security::Cryptography::RSA* rsa);
    // static public System.Byte[] ToCapiPrivateKeyBlob(System.Security.Cryptography.DSA dsa)
    // Offset: 0x14DAB24
    static ::ArrayW<uint8_t> ToCapiPrivateKeyBlob(::System::Security::Cryptography::DSA* dsa);
    // static public System.Security.Cryptography.RSA FromCapiPublicKeyBlob(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14DADF4
    static ::System::Security::Cryptography::RSA* FromCapiPublicKeyBlob(::ArrayW<uint8_t> blob, int offset);
    // static public System.Security.Cryptography.DSA FromCapiPublicKeyBlobDSA(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14DB22C
    static ::System::Security::Cryptography::DSA* FromCapiPublicKeyBlobDSA(::ArrayW<uint8_t> blob, int offset);
    // static public System.Byte[] ToCapiPublicKeyBlob(System.Security.Cryptography.RSA rsa)
    // Offset: 0x14DB6BC
    static ::ArrayW<uint8_t> ToCapiPublicKeyBlob(::System::Security::Cryptography::RSA* rsa);
    // static public System.Byte[] ToCapiPublicKeyBlob(System.Security.Cryptography.DSA dsa)
    // Offset: 0x14DB8EC
    static ::ArrayW<uint8_t> ToCapiPublicKeyBlob(::System::Security::Cryptography::DSA* dsa);
    // static public System.Security.Cryptography.RSA FromCapiKeyBlob(System.Byte[] blob)
    // Offset: 0x14DBBD0
    static ::System::Security::Cryptography::RSA* FromCapiKeyBlob(::ArrayW<uint8_t> blob);
    // static public System.Security.Cryptography.RSA FromCapiKeyBlob(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14DBBD8
    static ::System::Security::Cryptography::RSA* FromCapiKeyBlob(::ArrayW<uint8_t> blob, int offset);
    // static public System.Security.Cryptography.DSA FromCapiKeyBlobDSA(System.Byte[] blob)
    // Offset: 0x14DBD38
    static ::System::Security::Cryptography::DSA* FromCapiKeyBlobDSA(::ArrayW<uint8_t> blob);
    // static public System.Security.Cryptography.DSA FromCapiKeyBlobDSA(System.Byte[] blob, System.Int32 offset)
    // Offset: 0x14DBD40
    static ::System::Security::Cryptography::DSA* FromCapiKeyBlobDSA(::ArrayW<uint8_t> blob, int offset);
  }; // Mono.Security.Cryptography.CryptoConvert
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToInt32LE
// Il2CppName: ToInt32LE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::ToInt32LE)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToInt32LE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToUInt32LE
// Il2CppName: ToUInt32LE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::ToUInt32LE)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToUInt32LE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::GetBytesLE
// Il2CppName: GetBytesLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int)>(&Mono::Security::Cryptography::CryptoConvert_::GetBytesLE)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "GetBytesLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::Trim
// Il2CppName: Trim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&Mono::Security::Cryptography::CryptoConvert_::Trim)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiPrivateKeyBlob
// Il2CppName: FromCapiPrivateKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiPrivateKeyBlob)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiPrivateKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiPrivateKeyBlobDSA
// Il2CppName: FromCapiPrivateKeyBlobDSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::DSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiPrivateKeyBlobDSA)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiPrivateKeyBlobDSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToCapiPrivateKeyBlob
// Il2CppName: ToCapiPrivateKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::RSA*)>(&Mono::Security::Cryptography::CryptoConvert_::ToCapiPrivateKeyBlob)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToCapiPrivateKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToCapiPrivateKeyBlob
// Il2CppName: ToCapiPrivateKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::DSA*)>(&Mono::Security::Cryptography::CryptoConvert_::ToCapiPrivateKeyBlob)> {
  static const MethodInfo* get() {
    static auto* dsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "DSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToCapiPrivateKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiPublicKeyBlob
// Il2CppName: FromCapiPublicKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiPublicKeyBlob)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiPublicKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiPublicKeyBlobDSA
// Il2CppName: FromCapiPublicKeyBlobDSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::DSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiPublicKeyBlobDSA)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiPublicKeyBlobDSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToCapiPublicKeyBlob
// Il2CppName: ToCapiPublicKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::RSA*)>(&Mono::Security::Cryptography::CryptoConvert_::ToCapiPublicKeyBlob)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToCapiPublicKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::ToCapiPublicKeyBlob
// Il2CppName: ToCapiPublicKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::DSA*)>(&Mono::Security::Cryptography::CryptoConvert_::ToCapiPublicKeyBlob)> {
  static const MethodInfo* get() {
    static auto* dsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "DSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "ToCapiPublicKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlob
// Il2CppName: FromCapiKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSA* (*)(::ArrayW<uint8_t>)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlob)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlob
// Il2CppName: FromCapiKeyBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlob)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiKeyBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlobDSA
// Il2CppName: FromCapiKeyBlobDSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::DSA* (*)(::ArrayW<uint8_t>)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlobDSA)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiKeyBlobDSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlobDSA
// Il2CppName: FromCapiKeyBlobDSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::DSA* (*)(::ArrayW<uint8_t>, int)>(&Mono::Security::Cryptography::CryptoConvert_::FromCapiKeyBlobDSA)> {
  static const MethodInfo* get() {
    static auto* blob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::CryptoConvert_*), "FromCapiKeyBlobDSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blob, offset});
  }
};
