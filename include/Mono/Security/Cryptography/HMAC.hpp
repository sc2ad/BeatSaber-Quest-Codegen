// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.KeyedHashAlgorithm
#include "System/Security/Cryptography/KeyedHashAlgorithm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Forward declaring type: HMAC
  class HMAC;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Cryptography::HMAC);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Cryptography::HMAC*, "Mono.Security.Cryptography", "HMAC");
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Cryptography.HMAC
  // [TokenAttribute] Offset: FFFFFFFF
  class HMAC : public ::System::Security::Cryptography::KeyedHashAlgorithm {
    public:
    public:
    // private System.Security.Cryptography.HashAlgorithm hash
    // Size: 0x8
    // Offset: 0x30
    ::System::Security::Cryptography::HashAlgorithm* hash;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::HashAlgorithm*) == 0x8);
    // private System.Boolean hashing
    // Size: 0x1
    // Offset: 0x38
    bool hashing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hashing and: innerPad
    char __padding1[0x7] = {};
    // private System.Byte[] innerPad
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> innerPad;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] outerPad
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> outerPad;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Deleting conversion operator: operator ::ArrayW<uint8_t>
    constexpr operator ::ArrayW<uint8_t>() const noexcept = delete;
    // Get instance field reference: private System.Security.Cryptography.HashAlgorithm hash
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::HashAlgorithm*& dyn_hash();
    // Get instance field reference: private System.Boolean hashing
    [[deprecated("Use field access instead!")]] bool& dyn_hashing();
    // Get instance field reference: private System.Byte[] innerPad
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_innerPad();
    // Get instance field reference: private System.Byte[] outerPad
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_outerPad();
    // public System.Void .ctor(System.Security.Cryptography.HashAlgorithm ha, System.Byte[] rgbKey)
    // Offset: 0x178B10C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HMAC* New_ctor(::System::Security::Cryptography::HashAlgorithm* ha, ::ArrayW<uint8_t> rgbKey) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Cryptography::HMAC::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HMAC*, creationType>(ha, rgbKey)));
    }
    // private System.Void initializePad()
    // Offset: 0x178AFA8
    void initializePad();
    // public override System.Byte[] get_Key()
    // Offset: 0x178AE2C
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Byte[] KeyedHashAlgorithm::get_Key()
    ::ArrayW<uint8_t> get_Key();
    // public override System.Void set_Key(System.Byte[] value)
    // Offset: 0x178AEAC
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::set_Key(System.Byte[] value)
    void set_Key(::ArrayW<uint8_t> value);
    // public override System.Void Initialize()
    // Offset: 0x178B1FC
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::Initialize()
    void Initialize();
    // protected override System.Byte[] HashFinal()
    // Offset: 0x178B240
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Byte[] HashAlgorithm::HashFinal()
    ::ArrayW<uint8_t> HashFinal();
    // protected override System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0x178B390
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    void HashCore(::ArrayW<uint8_t> array, int ibStart, int cbSize);
  }; // Mono.Security.Cryptography.HMAC
  #pragma pack(pop)
  static check_size<sizeof(HMAC), 72 + sizeof(::ArrayW<uint8_t>)> __Mono_Security_Cryptography_HMACSizeCheck;
  static_assert(sizeof(HMAC) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::initializePad
// Il2CppName: initializePad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Cryptography::HMAC::*)()>(&Mono::Security::Cryptography::HMAC::initializePad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "initializePad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Cryptography::HMAC::*)()>(&Mono::Security::Cryptography::HMAC::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::set_Key
// Il2CppName: set_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Cryptography::HMAC::*)(::ArrayW<uint8_t>)>(&Mono::Security::Cryptography::HMAC::set_Key)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "set_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Cryptography::HMAC::*)()>(&Mono::Security::Cryptography::HMAC::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::HashFinal
// Il2CppName: HashFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Cryptography::HMAC::*)()>(&Mono::Security::Cryptography::HMAC::HashFinal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "HashFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Cryptography::HMAC::HashCore
// Il2CppName: HashCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Cryptography::HMAC::*)(::ArrayW<uint8_t>, int, int)>(&Mono::Security::Cryptography::HMAC::HashCore)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ibStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cbSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Cryptography::HMAC*), "HashCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, ibStart, cbSize});
  }
};
