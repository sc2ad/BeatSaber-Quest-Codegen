// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Completed forward declares
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Forward declaring type: GeneralNames
  class GeneralNames;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::Extensions::GeneralNames);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::Extensions::GeneralNames*, "Mono.Security.X509.Extensions", "GeneralNames");
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.Extensions.GeneralNames
  // [TokenAttribute] Offset: FFFFFFFF
  class GeneralNames : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.ArrayList rfc822Name
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::ArrayList* rfc822Name;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList dnsName
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* dnsName;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList directoryNames
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* directoryNames;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList uris
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::ArrayList* uris;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList ipAddr
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* ipAddr;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.ArrayList rfc822Name
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_rfc822Name();
    // Get instance field reference: private System.Collections.ArrayList dnsName
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_dnsName();
    // Get instance field reference: private System.Collections.ArrayList directoryNames
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_directoryNames();
    // Get instance field reference: private System.Collections.ArrayList uris
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_uris();
    // Get instance field reference: private System.Collections.ArrayList ipAddr
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_ipAddr();
    // public System.String[] get_DNSNames()
    // Offset: 0x169F61C
    ::ArrayW<::StringW> get_DNSNames();
    // public System.String[] get_IPAddresses()
    // Offset: 0x169F6F4
    ::ArrayW<::StringW> get_IPAddresses();
    // public System.Void .ctor(Mono.Security.ASN1 sequence)
    // Offset: 0x169F154
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GeneralNames* New_ctor(::Mono::Security::ASN1* sequence) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::Extensions::GeneralNames::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GeneralNames*, creationType>(sequence)));
    }
    // public override System.String ToString()
    // Offset: 0x169F7CC
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Mono.Security.X509.Extensions.GeneralNames
  #pragma pack(pop)
  static check_size<sizeof(GeneralNames), 48 + sizeof(::System::Collections::ArrayList*)> __Mono_Security_X509_Extensions_GeneralNamesSizeCheck;
  static_assert(sizeof(GeneralNames) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::GeneralNames::get_DNSNames
// Il2CppName: get_DNSNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Mono::Security::X509::Extensions::GeneralNames::*)()>(&Mono::Security::X509::Extensions::GeneralNames::get_DNSNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::GeneralNames*), "get_DNSNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::GeneralNames::get_IPAddresses
// Il2CppName: get_IPAddresses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Mono::Security::X509::Extensions::GeneralNames::*)()>(&Mono::Security::X509::Extensions::GeneralNames::get_IPAddresses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::GeneralNames*), "get_IPAddresses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::GeneralNames::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::GeneralNames::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::Extensions::GeneralNames::*)()>(&Mono::Security::X509::Extensions::GeneralNames::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::GeneralNames*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
