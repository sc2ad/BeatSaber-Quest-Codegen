// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.X509.X509Extension
#include "Mono/Security/X509/X509Extension.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509::Extensions
namespace Mono::Security::X509::Extensions {
  // Forward declaring type: KeyUsages
  struct KeyUsages;
}
// Completed forward declares
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Forward declaring type: KeyUsageExtension
  class KeyUsageExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::Extensions::KeyUsageExtension);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::Extensions::KeyUsageExtension*, "Mono.Security.X509.Extensions", "KeyUsageExtension");
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.Extensions.KeyUsageExtension
  // [TokenAttribute] Offset: FFFFFFFF
  class KeyUsageExtension : public ::Mono::Security::X509::X509Extension {
    public:
    public:
    // private System.Int32 kubits
    // Size: 0x4
    // Offset: 0x28
    int kubits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return kubits;
    }
    // Get instance field reference: private System.Int32 kubits
    [[deprecated("Use field access instead!")]] int& dyn_kubits();
    // public System.Boolean Support(Mono.Security.X509.Extensions.KeyUsages usage)
    // Offset: 0x16A0758
    bool Support(::Mono::Security::X509::Extensions::KeyUsages usage);
    // public override System.String get_Name()
    // Offset: 0x16A0710
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.String X509Extension::get_Name()
    ::StringW get_Name();
    // public System.Void .ctor(Mono.Security.X509.X509Extension extension)
    // Offset: 0x16A03F4
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.Void X509Extension::.ctor(Mono.Security.X509.X509Extension extension)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeyUsageExtension* New_ctor(::Mono::Security::X509::X509Extension* extension) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::Extensions::KeyUsageExtension::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeyUsageExtension*, creationType>(extension)));
    }
    // protected override System.Void Decode()
    // Offset: 0x16A03FC
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.Void X509Extension::Decode()
    void Decode();
    // protected override System.Void Encode()
    // Offset: 0x16A0544
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.Void X509Extension::Encode()
    void Encode();
    // public override System.String ToString()
    // Offset: 0x16A0830
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.String X509Extension::ToString()
    ::StringW ToString();
  }; // Mono.Security.X509.Extensions.KeyUsageExtension
  #pragma pack(pop)
  static check_size<sizeof(KeyUsageExtension), 40 + sizeof(int)> __Mono_Security_X509_Extensions_KeyUsageExtensionSizeCheck;
  static_assert(sizeof(KeyUsageExtension) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::Support
// Il2CppName: Support
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::Extensions::KeyUsageExtension::*)(::Mono::Security::X509::Extensions::KeyUsages)>(&Mono::Security::X509::Extensions::KeyUsageExtension::Support)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("Mono.Security.X509.Extensions", "KeyUsages")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::KeyUsageExtension*), "Support", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::Extensions::KeyUsageExtension::*)()>(&Mono::Security::X509::Extensions::KeyUsageExtension::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::KeyUsageExtension*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::Extensions::KeyUsageExtension::*)()>(&Mono::Security::X509::Extensions::KeyUsageExtension::Decode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::KeyUsageExtension*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::Extensions::KeyUsageExtension::*)()>(&Mono::Security::X509::Extensions::KeyUsageExtension::Encode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::KeyUsageExtension*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::KeyUsageExtension::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::Extensions::KeyUsageExtension::*)()>(&Mono::Security::X509::Extensions::KeyUsageExtension::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::KeyUsageExtension*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
