// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.X509.X509Extension
#include "Mono/Security/X509/X509Extension.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509::Extensions
namespace Mono::Security::X509::Extensions {
  // Forward declaring type: GeneralNames
  class GeneralNames;
}
// Completed forward declares
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Forward declaring type: SubjectAltNameExtension
  class SubjectAltNameExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::Extensions::SubjectAltNameExtension);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::Extensions::SubjectAltNameExtension*, "Mono.Security.X509.Extensions", "SubjectAltNameExtension");
// Type namespace: Mono.Security.X509.Extensions
namespace Mono::Security::X509::Extensions {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.Extensions.SubjectAltNameExtension
  // [TokenAttribute] Offset: FFFFFFFF
  class SubjectAltNameExtension : public ::Mono::Security::X509::X509Extension {
    public:
    public:
    // private Mono.Security.X509.Extensions.GeneralNames _names
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::X509::Extensions::GeneralNames* names;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::Extensions::GeneralNames*) == 0x8);
    public:
    // Creating conversion operator: operator ::Mono::Security::X509::Extensions::GeneralNames*
    constexpr operator ::Mono::Security::X509::Extensions::GeneralNames*() const noexcept {
      return names;
    }
    // Get instance field reference: private Mono.Security.X509.Extensions.GeneralNames _names
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::Extensions::GeneralNames*& dyn__names();
    // public System.String[] get_DNSNames()
    // Offset: 0x16A1330
    ::ArrayW<::StringW> get_DNSNames();
    // public System.String[] get_IPAddresses()
    // Offset: 0x16A1348
    ::ArrayW<::StringW> get_IPAddresses();
    // public override System.String get_Name()
    // Offset: 0x16A12E8
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.String X509Extension::get_Name()
    ::StringW get_Name();
    // public System.Void .ctor(Mono.Security.X509.X509Extension extension)
    // Offset: 0x16A11F0
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.Void X509Extension::.ctor(Mono.Security.X509.X509Extension extension)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubjectAltNameExtension* New_ctor(::Mono::Security::X509::X509Extension* extension) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::Extensions::SubjectAltNameExtension::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubjectAltNameExtension*, creationType>(extension)));
    }
    // protected override System.Void Decode()
    // Offset: 0x16A11F8
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.Void X509Extension::Decode()
    void Decode();
    // public override System.String ToString()
    // Offset: 0x16A1360
    // Implemented from: Mono.Security.X509.X509Extension
    // Base method: System.String X509Extension::ToString()
    ::StringW ToString();
  }; // Mono.Security.X509.Extensions.SubjectAltNameExtension
  #pragma pack(pop)
  static check_size<sizeof(SubjectAltNameExtension), 40 + sizeof(::Mono::Security::X509::Extensions::GeneralNames*)> __Mono_Security_X509_Extensions_SubjectAltNameExtensionSizeCheck;
  static_assert(sizeof(SubjectAltNameExtension) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::get_DNSNames
// Il2CppName: get_DNSNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Mono::Security::X509::Extensions::SubjectAltNameExtension::*)()>(&Mono::Security::X509::Extensions::SubjectAltNameExtension::get_DNSNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::SubjectAltNameExtension*), "get_DNSNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::get_IPAddresses
// Il2CppName: get_IPAddresses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Mono::Security::X509::Extensions::SubjectAltNameExtension::*)()>(&Mono::Security::X509::Extensions::SubjectAltNameExtension::get_IPAddresses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::SubjectAltNameExtension*), "get_IPAddresses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::Extensions::SubjectAltNameExtension::*)()>(&Mono::Security::X509::Extensions::SubjectAltNameExtension::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::SubjectAltNameExtension*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::Extensions::SubjectAltNameExtension::*)()>(&Mono::Security::X509::Extensions::SubjectAltNameExtension::Decode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::SubjectAltNameExtension*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::Extensions::SubjectAltNameExtension::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::Extensions::SubjectAltNameExtension::*)()>(&Mono::Security::X509::Extensions::SubjectAltNameExtension::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::Extensions::SubjectAltNameExtension*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
