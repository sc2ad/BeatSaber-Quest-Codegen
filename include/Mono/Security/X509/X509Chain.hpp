// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.X509.X509ChainStatusFlags
#include "Mono/Security/X509/X509ChainStatusFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Chain
  class X509Chain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::X509Chain);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::X509Chain*, "Mono.Security.X509", "X509Chain");
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X509Chain
  // [TokenAttribute] Offset: FFFFFFFF
  class X509Chain : public ::Il2CppObject {
    public:
    public:
    // private Mono.Security.X509.X509CertificateCollection roots
    // Size: 0x8
    // Offset: 0x10
    ::Mono::Security::X509::X509CertificateCollection* roots;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private Mono.Security.X509.X509CertificateCollection certs
    // Size: 0x8
    // Offset: 0x18
    ::Mono::Security::X509::X509CertificateCollection* certs;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private Mono.Security.X509.X509Certificate _root
    // Size: 0x8
    // Offset: 0x20
    ::Mono::Security::X509::X509Certificate* root;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509Certificate*) == 0x8);
    // private Mono.Security.X509.X509CertificateCollection _chain
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::X509::X509CertificateCollection* chain;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private Mono.Security.X509.X509ChainStatusFlags _status
    // Size: 0x4
    // Offset: 0x30
    ::Mono::Security::X509::X509ChainStatusFlags status;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509ChainStatusFlags) == 0x4);
    public:
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection roots
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_roots();
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection certs
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_certs();
    // Get instance field reference: private Mono.Security.X509.X509Certificate _root
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509Certificate*& dyn__root();
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection _chain
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn__chain();
    // Get instance field reference: private Mono.Security.X509.X509ChainStatusFlags _status
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509ChainStatusFlags& dyn__status();
    // public Mono.Security.X509.X509CertificateCollection get_Chain()
    // Offset: 0x16B3F88
    ::Mono::Security::X509::X509CertificateCollection* get_Chain();
    // public Mono.Security.X509.X509Certificate get_Root()
    // Offset: 0x16B3F90
    ::Mono::Security::X509::X509Certificate* get_Root();
    // public Mono.Security.X509.X509ChainStatusFlags get_Status()
    // Offset: 0x16B3F98
    ::Mono::Security::X509::X509ChainStatusFlags get_Status();
    // public Mono.Security.X509.X509CertificateCollection get_TrustAnchors()
    // Offset: 0x16B3FA0
    ::Mono::Security::X509::X509CertificateCollection* get_TrustAnchors();
    // public System.Void set_TrustAnchors(Mono.Security.X509.X509CertificateCollection value)
    // Offset: 0x16B4028
    void set_TrustAnchors(::Mono::Security::X509::X509CertificateCollection* value);
    // public System.Void .ctor()
    // Offset: 0x16B3E98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Chain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509Chain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Chain*, creationType>()));
    }
    // public System.Void .ctor(Mono.Security.X509.X509CertificateCollection chain)
    // Offset: 0x16B3F04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Chain* New_ctor(::Mono::Security::X509::X509CertificateCollection* chain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509Chain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Chain*, creationType>(chain)));
    }
    // public System.Void LoadCertificate(Mono.Security.X509.X509Certificate x509)
    // Offset: 0x16B4030
    void LoadCertificate(::Mono::Security::X509::X509Certificate* x509);
    // public System.Void LoadCertificates(Mono.Security.X509.X509CertificateCollection collection)
    // Offset: 0x16B4048
    void LoadCertificates(::Mono::Security::X509::X509CertificateCollection* collection);
    // public Mono.Security.X509.X509Certificate FindByIssuerName(System.String issuerName)
    // Offset: 0x16B4060
    ::Mono::Security::X509::X509Certificate* FindByIssuerName(::StringW issuerName);
    // public System.Boolean Build(Mono.Security.X509.X509Certificate leaf)
    // Offset: 0x16B4234
    bool Build(::Mono::Security::X509::X509Certificate* leaf);
    // public System.Void Reset()
    // Offset: 0x16B4B40
    void Reset();
    // private System.Boolean IsValid(Mono.Security.X509.X509Certificate cert)
    // Offset: 0x16B4A70
    bool IsValid(::Mono::Security::X509::X509Certificate* cert);
    // private Mono.Security.X509.X509Certificate FindCertificateParent(Mono.Security.X509.X509Certificate child)
    // Offset: 0x16B4574
    ::Mono::Security::X509::X509Certificate* FindCertificateParent(::Mono::Security::X509::X509Certificate* child);
    // private Mono.Security.X509.X509Certificate FindCertificateRoot(Mono.Security.X509.X509Certificate potentialRoot)
    // Offset: 0x16B472C
    ::Mono::Security::X509::X509Certificate* FindCertificateRoot(::Mono::Security::X509::X509Certificate* potentialRoot);
    // private System.Boolean IsTrusted(Mono.Security.X509.X509Certificate potentialTrusted)
    // Offset: 0x16B4B90
    bool IsTrusted(::Mono::Security::X509::X509Certificate* potentialTrusted);
    // private System.Boolean IsParent(Mono.Security.X509.X509Certificate child, Mono.Security.X509.X509Certificate parent)
    // Offset: 0x16B4920
    bool IsParent(::Mono::Security::X509::X509Certificate* child, ::Mono::Security::X509::X509Certificate* parent);
  }; // Mono.Security.X509.X509Chain
  #pragma pack(pop)
  static check_size<sizeof(X509Chain), 48 + sizeof(::Mono::Security::X509::X509ChainStatusFlags)> __Mono_Security_X509_X509ChainSizeCheck;
  static_assert(sizeof(X509Chain) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::get_Chain
// Il2CppName: get_Chain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection* (Mono::Security::X509::X509Chain::*)()>(&Mono::Security::X509::X509Chain::get_Chain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "get_Chain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::get_Root
// Il2CppName: get_Root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::X509::X509Chain::*)()>(&Mono::Security::X509::X509Chain::get_Root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "get_Root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509ChainStatusFlags (Mono::Security::X509::X509Chain::*)()>(&Mono::Security::X509::X509Chain::get_Status)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::get_TrustAnchors
// Il2CppName: get_TrustAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection* (Mono::Security::X509::X509Chain::*)()>(&Mono::Security::X509::X509Chain::get_TrustAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "get_TrustAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::set_TrustAnchors
// Il2CppName: set_TrustAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::X509::X509Chain::set_TrustAnchors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "set_TrustAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::LoadCertificate
// Il2CppName: LoadCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::LoadCertificate)> {
  static const MethodInfo* get() {
    static auto* x509 = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "LoadCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x509});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::LoadCertificates
// Il2CppName: LoadCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::X509::X509Chain::LoadCertificates)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "LoadCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::FindByIssuerName
// Il2CppName: FindByIssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::X509::X509Chain::*)(::StringW)>(&Mono::Security::X509::X509Chain::FindByIssuerName)> {
  static const MethodInfo* get() {
    static auto* issuerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "FindByIssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuerName});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::Build)> {
  static const MethodInfo* get() {
    static auto* leaf = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaf});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509Chain::*)()>(&Mono::Security::X509::X509Chain::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::IsValid)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::FindCertificateParent
// Il2CppName: FindCertificateParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::FindCertificateParent)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "FindCertificateParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::FindCertificateRoot
// Il2CppName: FindCertificateRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::FindCertificateRoot)> {
  static const MethodInfo* get() {
    static auto* potentialRoot = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "FindCertificateRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{potentialRoot});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::IsTrusted
// Il2CppName: IsTrusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::IsTrusted)> {
  static const MethodInfo* get() {
    static auto* potentialTrusted = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "IsTrusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{potentialTrusted});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Chain::IsParent
// Il2CppName: IsParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Chain::*)(::Mono::Security::X509::X509Certificate*, ::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Chain::IsParent)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Chain*), "IsParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, parent});
  }
};
