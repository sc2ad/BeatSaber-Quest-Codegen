// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.X509.X509Builder
#include "Mono/Security/X509/X509Builder.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509ExtensionCollection
  class X509ExtensionCollection;
}
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateBuilder
  class X509CertificateBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::X509CertificateBuilder);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::X509CertificateBuilder*, "Mono.Security.X509", "X509CertificateBuilder");
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X509CertificateBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class X509CertificateBuilder : public ::Mono::Security::X509::X509Builder {
    public:
    public:
    // private System.Byte version
    // Size: 0x1
    // Offset: 0x18
    uint8_t version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: version and: sn
    char __padding0[0x7] = {};
    // private System.Byte[] sn
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> sn;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.String issuer
    // Size: 0x8
    // Offset: 0x28
    ::StringW issuer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.DateTime notBefore
    // Size: 0x8
    // Offset: 0x30
    ::System::DateTime notBefore;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime notAfter
    // Size: 0x8
    // Offset: 0x38
    ::System::DateTime notAfter;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.String subject
    // Size: 0x8
    // Offset: 0x40
    ::StringW subject;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Security.Cryptography.AsymmetricAlgorithm aa
    // Size: 0x8
    // Offset: 0x48
    ::System::Security::Cryptography::AsymmetricAlgorithm* aa;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::AsymmetricAlgorithm*) == 0x8);
    // private System.Byte[] issuerUniqueID
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> issuerUniqueID;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] subjectUniqueID
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<uint8_t> subjectUniqueID;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.X509.X509ExtensionCollection extensions
    // Size: 0x8
    // Offset: 0x60
    ::Mono::Security::X509::X509ExtensionCollection* extensions;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509ExtensionCollection*) == 0x8);
    public:
    // Deleting conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept = delete;
    // Get instance field reference: private System.Byte version
    [[deprecated("Use field access instead!")]] uint8_t& dyn_version();
    // Get instance field reference: private System.Byte[] sn
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_sn();
    // Get instance field reference: private System.String issuer
    [[deprecated("Use field access instead!")]] ::StringW& dyn_issuer();
    // Get instance field reference: private System.DateTime notBefore
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_notBefore();
    // Get instance field reference: private System.DateTime notAfter
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_notAfter();
    // Get instance field reference: private System.String subject
    [[deprecated("Use field access instead!")]] ::StringW& dyn_subject();
    // Get instance field reference: private System.Security.Cryptography.AsymmetricAlgorithm aa
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::AsymmetricAlgorithm*& dyn_aa();
    // Get instance field reference: private System.Byte[] issuerUniqueID
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_issuerUniqueID();
    // Get instance field reference: private System.Byte[] subjectUniqueID
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_subjectUniqueID();
    // Get instance field reference: private Mono.Security.X509.X509ExtensionCollection extensions
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509ExtensionCollection*& dyn_extensions();
    // public System.Byte get_Version()
    // Offset: 0x16B2D38
    uint8_t get_Version();
    // public System.Void set_Version(System.Byte value)
    // Offset: 0x16B2D40
    void set_Version(uint8_t value);
    // public System.Byte[] get_SerialNumber()
    // Offset: 0x16B2D48
    ::ArrayW<uint8_t> get_SerialNumber();
    // public System.Void set_SerialNumber(System.Byte[] value)
    // Offset: 0x16B2D50
    void set_SerialNumber(::ArrayW<uint8_t> value);
    // public System.String get_IssuerName()
    // Offset: 0x16B2D58
    ::StringW get_IssuerName();
    // public System.Void set_IssuerName(System.String value)
    // Offset: 0x16B2D60
    void set_IssuerName(::StringW value);
    // public System.DateTime get_NotBefore()
    // Offset: 0x16B2D68
    ::System::DateTime get_NotBefore();
    // public System.Void set_NotBefore(System.DateTime value)
    // Offset: 0x16B2D70
    void set_NotBefore(::System::DateTime value);
    // public System.DateTime get_NotAfter()
    // Offset: 0x16B2D78
    ::System::DateTime get_NotAfter();
    // public System.Void set_NotAfter(System.DateTime value)
    // Offset: 0x16B2D80
    void set_NotAfter(::System::DateTime value);
    // public System.String get_SubjectName()
    // Offset: 0x16B2D88
    ::StringW get_SubjectName();
    // public System.Void set_SubjectName(System.String value)
    // Offset: 0x16B2D90
    void set_SubjectName(::StringW value);
    // public System.Security.Cryptography.AsymmetricAlgorithm get_SubjectPublicKey()
    // Offset: 0x16B2D98
    ::System::Security::Cryptography::AsymmetricAlgorithm* get_SubjectPublicKey();
    // public System.Void set_SubjectPublicKey(System.Security.Cryptography.AsymmetricAlgorithm value)
    // Offset: 0x16B2DA0
    void set_SubjectPublicKey(::System::Security::Cryptography::AsymmetricAlgorithm* value);
    // public System.Byte[] get_IssuerUniqueId()
    // Offset: 0x16B2DA8
    ::ArrayW<uint8_t> get_IssuerUniqueId();
    // public System.Void set_IssuerUniqueId(System.Byte[] value)
    // Offset: 0x16B2DB0
    void set_IssuerUniqueId(::ArrayW<uint8_t> value);
    // public System.Byte[] get_SubjectUniqueId()
    // Offset: 0x16B2DB8
    ::ArrayW<uint8_t> get_SubjectUniqueId();
    // public System.Void set_SubjectUniqueId(System.Byte[] value)
    // Offset: 0x16B2DC0
    void set_SubjectUniqueId(::ArrayW<uint8_t> value);
    // public Mono.Security.X509.X509ExtensionCollection get_Extensions()
    // Offset: 0x16B2DC8
    ::Mono::Security::X509::X509ExtensionCollection* get_Extensions();
    // public System.Void .ctor(System.Byte version)
    // Offset: 0x16B2C78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateBuilder* New_ctor(uint8_t version) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509CertificateBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateBuilder*, creationType>(version)));
    }
    // private Mono.Security.ASN1 SubjectPublicKeyInfo()
    // Offset: 0x16B2DD0
    ::Mono::Security::ASN1* SubjectPublicKeyInfo();
    // private System.Byte[] UniqueIdentifier(System.Byte[] id)
    // Offset: 0x16B3144
    ::ArrayW<uint8_t> UniqueIdentifier(::ArrayW<uint8_t> id);
    // public System.Void .ctor()
    // Offset: 0x16B2C70
    // Implemented from: Mono.Security.X509.X509Builder
    // Base method: System.Void X509Builder::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509CertificateBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateBuilder*, creationType>()));
    }
    // protected override Mono.Security.ASN1 ToBeSigned(System.String oid)
    // Offset: 0x16B320C
    // Implemented from: Mono.Security.X509.X509Builder
    // Base method: Mono.Security.ASN1 X509Builder::ToBeSigned(System.String oid)
    ::Mono::Security::ASN1* ToBeSigned(::StringW oid);
  }; // Mono.Security.X509.X509CertificateBuilder
  #pragma pack(pop)
  static check_size<sizeof(X509CertificateBuilder), 96 + sizeof(::Mono::Security::X509::X509ExtensionCollection*)> __Mono_Security_X509_X509CertificateBuilderSizeCheck;
  static_assert(sizeof(X509CertificateBuilder) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_Version
// Il2CppName: set_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(uint8_t)>(&Mono::Security::X509::X509CertificateBuilder::set_Version)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_SerialNumber
// Il2CppName: get_SerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_SerialNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_SerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_SerialNumber
// Il2CppName: set_SerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509CertificateBuilder::set_SerialNumber)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_SerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_IssuerName
// Il2CppName: get_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_IssuerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_IssuerName
// Il2CppName: set_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::StringW)>(&Mono::Security::X509::X509CertificateBuilder::set_IssuerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_NotBefore
// Il2CppName: get_NotBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_NotBefore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_NotBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_NotBefore
// Il2CppName: set_NotBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::System::DateTime)>(&Mono::Security::X509::X509CertificateBuilder::set_NotBefore)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_NotBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_NotAfter
// Il2CppName: get_NotAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_NotAfter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_NotAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_NotAfter
// Il2CppName: set_NotAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::System::DateTime)>(&Mono::Security::X509::X509CertificateBuilder::set_NotAfter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_NotAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_SubjectName
// Il2CppName: get_SubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_SubjectName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_SubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_SubjectName
// Il2CppName: set_SubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::StringW)>(&Mono::Security::X509::X509CertificateBuilder::set_SubjectName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_SubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_SubjectPublicKey
// Il2CppName: get_SubjectPublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_SubjectPublicKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_SubjectPublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_SubjectPublicKey
// Il2CppName: set_SubjectPublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::System::Security::Cryptography::AsymmetricAlgorithm*)>(&Mono::Security::X509::X509CertificateBuilder::set_SubjectPublicKey)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "AsymmetricAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_SubjectPublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_IssuerUniqueId
// Il2CppName: get_IssuerUniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_IssuerUniqueId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_IssuerUniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_IssuerUniqueId
// Il2CppName: set_IssuerUniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509CertificateBuilder::set_IssuerUniqueId)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_IssuerUniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_SubjectUniqueId
// Il2CppName: get_SubjectUniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_SubjectUniqueId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_SubjectUniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::set_SubjectUniqueId
// Il2CppName: set_SubjectUniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateBuilder::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509CertificateBuilder::set_SubjectUniqueId)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "set_SubjectUniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::get_Extensions
// Il2CppName: get_Extensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509ExtensionCollection* (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::get_Extensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "get_Extensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::SubjectPublicKeyInfo
// Il2CppName: SubjectPublicKeyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::ASN1* (Mono::Security::X509::X509CertificateBuilder::*)()>(&Mono::Security::X509::X509CertificateBuilder::SubjectPublicKeyInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "SubjectPublicKeyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::UniqueIdentifier
// Il2CppName: UniqueIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509CertificateBuilder::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509CertificateBuilder::UniqueIdentifier)> {
  static const MethodInfo* get() {
    static auto* id = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "UniqueIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateBuilder::ToBeSigned
// Il2CppName: ToBeSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::ASN1* (Mono::Security::X509::X509CertificateBuilder::*)(::StringW)>(&Mono::Security::X509::X509CertificateBuilder::ToBeSigned)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateBuilder*), "ToBeSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid});
  }
};
