// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Forward declaring type: HandshakeType
  struct HandshakeType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::HandshakeType, "Mono.Security.Protocol.Tls.Handshake", "HandshakeType");
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.HandshakeType
  // [TokenAttribute] Offset: FFFFFFFF
  struct HandshakeType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: HandshakeType
    constexpr HandshakeType(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType HelloRequest
    static constexpr const uint8_t HelloRequest = 0u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType HelloRequest
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_HelloRequest();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType HelloRequest
    static void _set_HelloRequest(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientHello
    static constexpr const uint8_t ClientHello = 1u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientHello
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_ClientHello();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientHello
    static void _set_ClientHello(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHello
    static constexpr const uint8_t ServerHello = 2u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHello
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_ServerHello();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHello
    static void _set_ServerHello(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Certificate
    static constexpr const uint8_t Certificate = 11u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Certificate
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_Certificate();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Certificate
    static void _set_Certificate(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerKeyExchange
    static constexpr const uint8_t ServerKeyExchange = 12u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerKeyExchange
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_ServerKeyExchange();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerKeyExchange
    static void _set_ServerKeyExchange(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateRequest
    static constexpr const uint8_t CertificateRequest = 13u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateRequest
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_CertificateRequest();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateRequest
    static void _set_CertificateRequest(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHelloDone
    static constexpr const uint8_t ServerHelloDone = 14u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHelloDone
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_ServerHelloDone();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ServerHelloDone
    static void _set_ServerHelloDone(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateVerify
    static constexpr const uint8_t CertificateVerify = 15u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateVerify
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_CertificateVerify();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType CertificateVerify
    static void _set_CertificateVerify(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientKeyExchange
    static constexpr const uint8_t ClientKeyExchange = 16u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientKeyExchange
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_ClientKeyExchange();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType ClientKeyExchange
    static void _set_ClientKeyExchange(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Finished
    static constexpr const uint8_t Finished = 20u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Finished
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_Finished();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType Finished
    static void _set_Finished(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType None
    static constexpr const uint8_t None = 255u;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType None
    static ::Mono::Security::Protocol::Tls::Handshake::HandshakeType _get_None();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.HandshakeType None
    static void _set_None(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // Mono.Security.Protocol.Tls.Handshake.HandshakeType
  #pragma pack(pop)
  static check_size<sizeof(HandshakeType), 0 + sizeof(uint8_t)> __Mono_Security_Protocol_Tls_Handshake_HandshakeTypeSizeCheck;
  static_assert(sizeof(HandshakeType) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
