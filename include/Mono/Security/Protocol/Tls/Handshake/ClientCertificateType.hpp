// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Forward declaring type: ClientCertificateType
  struct ClientCertificateType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType, "Mono.Security.Protocol.Tls.Handshake", "ClientCertificateType");
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.ClientCertificateType
  // [TokenAttribute] Offset: FFFFFFFF
  struct ClientCertificateType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ClientCertificateType
    constexpr ClientCertificateType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSA
    static constexpr const int RSA = 1;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSA
    static ::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType _get_RSA();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSA
    static void _set_RSA(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSS
    static constexpr const int DSS = 2;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSS
    static ::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType _get_DSS();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSS
    static void _set_DSS(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSAFixed
    static constexpr const int RSAFixed = 3;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSAFixed
    static ::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType _get_RSAFixed();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType RSAFixed
    static void _set_RSAFixed(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSSFixed
    static constexpr const int DSSFixed = 4;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSSFixed
    static ::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType _get_DSSFixed();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType DSSFixed
    static void _set_DSSFixed(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType value);
    // static field const value: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType Unknown
    static constexpr const int Unknown = 255;
    // Get static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType Unknown
    static ::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType _get_Unknown();
    // Set static field: static public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType Unknown
    static void _set_Unknown(::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Mono.Security.Protocol.Tls.Handshake.ClientCertificateType
  #pragma pack(pop)
  static check_size<sizeof(ClientCertificateType), 0 + sizeof(int)> __Mono_Security_Protocol_Tls_Handshake_ClientCertificateTypeSizeCheck;
  static_assert(sizeof(ClientCertificateType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
