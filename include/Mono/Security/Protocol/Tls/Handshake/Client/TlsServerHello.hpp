// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeMessage.hpp"
// Including type: Mono.Security.Protocol.Tls.SecurityCompressionType
#include "Mono/Security/Protocol/Tls/SecurityCompressionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: CipherSuite
  class CipherSuite;
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Forward declaring type: TlsServerHello
  class TlsServerHello;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello*, "Mono.Security.Protocol.Tls.Handshake.Client", "TlsServerHello");
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.Client.TlsServerHello
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsServerHello : public ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage {
    public:
    public:
    // private Mono.Security.Protocol.Tls.SecurityCompressionType compressionMethod
    // Size: 0x4
    // Offset: 0x58
    ::Mono::Security::Protocol::Tls::SecurityCompressionType compressionMethod;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityCompressionType) == 0x4);
    // Padding between fields: compressionMethod and: random
    char __padding0[0x4] = {};
    // private System.Byte[] random
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint8_t> random;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] sessionId
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<uint8_t> sessionId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.Protocol.Tls.CipherSuite cipherSuite
    // Size: 0x8
    // Offset: 0x70
    ::Mono::Security::Protocol::Tls::CipherSuite* cipherSuite;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CipherSuite*) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityCompressionType compressionMethod
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityCompressionType& dyn_compressionMethod();
    // Get instance field reference: private System.Byte[] random
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_random();
    // Get instance field reference: private System.Byte[] sessionId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_sessionId();
    // Get instance field reference: private Mono.Security.Protocol.Tls.CipherSuite cipherSuite
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CipherSuite*& dyn_cipherSuite();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, System.Byte[] buffer)
    // Offset: 0x11043A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsServerHello* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::ArrayW<uint8_t> buffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsServerHello*, creationType>(context, buffer)));
    }
    // private System.Void processProtocol(System.Int16 protocol)
    // Offset: 0x1109554
    void processProtocol(int16_t protocol);
    // public override System.Void Update()
    // Offset: 0x11091E4
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::Update()
    void Update();
    // protected override System.Void ProcessAsSsl3()
    // Offset: 0x110938C
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsSsl3()
    void ProcessAsSsl3();
    // protected override System.Void ProcessAsTls1()
    // Offset: 0x110939C
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsTls1()
    void ProcessAsTls1();
  }; // Mono.Security.Protocol.Tls.Handshake.Client.TlsServerHello
  #pragma pack(pop)
  static check_size<sizeof(TlsServerHello), 112 + sizeof(::Mono::Security::Protocol::Tls::CipherSuite*)> __Mono_Security_Protocol_Tls_Handshake_Client_TlsServerHelloSizeCheck;
  static_assert(sizeof(TlsServerHello) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::processProtocol
// Il2CppName: processProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::*)(int16_t)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::processProtocol)> {
  static const MethodInfo* get() {
    static auto* protocol = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello*), "processProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocol});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerHello*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
