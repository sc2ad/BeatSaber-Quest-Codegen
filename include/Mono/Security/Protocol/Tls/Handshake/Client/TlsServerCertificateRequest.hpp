// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeMessage.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.ClientCertificateType
#include "Mono/Security/Protocol/Tls/Handshake/ClientCertificateType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Forward declaring type: TlsServerCertificateRequest
  class TlsServerCertificateRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest*, "Mono.Security.Protocol.Tls.Handshake.Client", "TlsServerCertificateRequest");
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificateRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsServerCertificateRequest : public ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage {
    public:
    public:
    // private Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] certificateTypes
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType> certificateTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>) == 0x8);
    // private System.String[] distinguisedNames
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> distinguisedNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] certificateTypes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>& dyn_certificateTypes();
    // Get instance field reference: private System.String[] distinguisedNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_distinguisedNames();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, System.Byte[] buffer)
    // Offset: 0x1104418
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsServerCertificateRequest* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::ArrayW<uint8_t> buffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsServerCertificateRequest*, creationType>(context, buffer)));
    }
    // public override System.Void Update()
    // Offset: 0x1108AB8
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::Update()
    void Update();
    // protected override System.Void ProcessAsSsl3()
    // Offset: 0x1108B24
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsSsl3()
    void ProcessAsSsl3();
    // protected override System.Void ProcessAsTls1()
    // Offset: 0x1108B34
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsTls1()
    void ProcessAsTls1();
  }; // Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificateRequest
  #pragma pack(pop)
  static check_size<sizeof(TlsServerCertificateRequest), 96 + sizeof(::ArrayW<::StringW>)> __Mono_Security_Protocol_Tls_Handshake_Client_TlsServerCertificateRequestSizeCheck;
  static_assert(sizeof(TlsServerCertificateRequest) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificateRequest*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
