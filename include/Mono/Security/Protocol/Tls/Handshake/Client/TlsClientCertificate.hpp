// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Forward declaring type: TlsClientCertificate
  class TlsClientCertificate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*, "Mono.Security.Protocol.Tls.Handshake.Client", "TlsClientCertificate");
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.Client.TlsClientCertificate
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsClientCertificate : public ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage {
    public:
    public:
    // private System.Boolean clientCertSelected
    // Size: 0x1
    // Offset: 0x58
    bool clientCertSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clientCertSelected and: clientCert
    char __padding0[0x7] = {};
    // private System.Security.Cryptography.X509Certificates.X509Certificate clientCert
    // Size: 0x8
    // Offset: 0x60
    ::System::Security::Cryptography::X509Certificates::X509Certificate* clientCert;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean clientCertSelected
    [[deprecated("Use field access instead!")]] bool& dyn_clientCertSelected();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate clientCert
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate*& dyn_clientCert();
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_ClientCertificate()
    // Offset: 0x1106088
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_ClientCertificate();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x110425C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsClientCertificate* New_ctor(::Mono::Security::Protocol::Tls::Context* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsClientCertificate*, creationType>(context)));
    }
    // private System.Void GetClientCertificate()
    // Offset: 0x11060C0
    void GetClientCertificate();
    // private System.Void SendCertificates()
    // Offset: 0x11062E4
    void SendCertificates();
    // private System.Security.Cryptography.X509Certificates.X509Certificate FindParentCertificate(System.Security.Cryptography.X509Certificates.X509Certificate cert)
    // Offset: 0x1106400
    ::System::Security::Cryptography::X509Certificates::X509Certificate* FindParentCertificate(::System::Security::Cryptography::X509Certificates::X509Certificate* cert);
    // public override System.Void Update()
    // Offset: 0x1106230
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::Update()
    void Update();
    // protected override System.Void ProcessAsSsl3()
    // Offset: 0x110664C
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsSsl3()
    void ProcessAsSsl3();
    // protected override System.Void ProcessAsTls1()
    // Offset: 0x1106698
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsTls1()
    void ProcessAsTls1();
  }; // Mono.Security.Protocol.Tls.Handshake.Client.TlsClientCertificate
  #pragma pack(pop)
  static check_size<sizeof(TlsClientCertificate), 96 + sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*)> __Mono_Security_Protocol_Tls_Handshake_Client_TlsClientCertificateSizeCheck;
  static_assert(sizeof(TlsClientCertificate) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::get_ClientCertificate
// Il2CppName: get_ClientCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::get_ClientCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "get_ClientCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::GetClientCertificate
// Il2CppName: GetClientCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::GetClientCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "GetClientCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::SendCertificates
// Il2CppName: SendCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::SendCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "SendCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::FindParentCertificate
// Il2CppName: FindParentCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::FindParentCertificate)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "FindParentCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientCertificate*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
