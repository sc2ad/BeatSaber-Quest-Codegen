// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Forward declaring type: TlsClientKeyExchange
  class TlsClientKeyExchange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange*, "Mono.Security.Protocol.Tls.Handshake.Client", "TlsClientKeyExchange");
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.Client.TlsClientKeyExchange
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsClientKeyExchange : public ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage {
    public:
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x1104290
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsClientKeyExchange* New_ctor(::Mono::Security::Protocol::Tls::Context* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsClientKeyExchange*, creationType>(context)));
    }
    // public System.Void ProcessCommon(System.Boolean sendLength)
    // Offset: 0x1107824
    void ProcessCommon(bool sendLength);
    // protected override System.Void ProcessAsSsl3()
    // Offset: 0x110781C
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsSsl3()
    void ProcessAsSsl3();
    // protected override System.Void ProcessAsTls1()
    // Offset: 0x11079EC
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsTls1()
    void ProcessAsTls1();
  }; // Mono.Security.Protocol.Tls.Handshake.Client.TlsClientKeyExchange
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessCommon
// Il2CppName: ProcessCommon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::*)(bool)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessCommon)> {
  static const MethodInfo* get() {
    static auto* sendLength = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange*), "ProcessCommon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendLength});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsClientKeyExchange*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
