// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
  // Forward declaring type: ClientContext
  class ClientContext;
  // Forward declaring type: AlertDescription
  struct AlertDescription;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Forward declaring type: TlsServerCertificate
  class TlsServerCertificate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*, "Mono.Security.Protocol.Tls.Handshake.Client", "TlsServerCertificate");
// Type namespace: Mono.Security.Protocol.Tls.Handshake.Client
namespace Mono::Security::Protocol::Tls::Handshake::Client {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificate
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsServerCertificate : public ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage {
    public:
    public:
    // private Mono.Security.X509.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x58
    ::Mono::Security::X509::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_certificates();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, System.Byte[] buffer)
    // Offset: 0x11043E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsServerCertificate* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::ArrayW<uint8_t> buffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsServerCertificate*, creationType>(context, buffer)));
    }
    // private System.Boolean checkCertificateUsage(Mono.Security.X509.X509Certificate cert)
    // Offset: 0x1107C68
    bool checkCertificateUsage(::Mono::Security::X509::X509Certificate* cert);
    // private System.Void validateCertificates(Mono.Security.X509.X509CertificateCollection certificates)
    // Offset: 0x1107BA4
    void validateCertificates(::Mono::Security::X509::X509CertificateCollection* certificates);
    // private System.Void RemoteValidation(Mono.Security.Protocol.Tls.ClientContext context, Mono.Security.Protocol.Tls.AlertDescription description)
    // Offset: 0x1107F10
    void RemoteValidation(::Mono::Security::Protocol::Tls::ClientContext* context, ::Mono::Security::Protocol::Tls::AlertDescription description);
    // private System.Void LocalValidation(Mono.Security.Protocol.Tls.ClientContext context, Mono.Security.Protocol.Tls.AlertDescription description)
    // Offset: 0x1108010
    void LocalValidation(::Mono::Security::Protocol::Tls::ClientContext* context, ::Mono::Security::Protocol::Tls::AlertDescription description);
    // private System.Boolean checkServerIdentity(Mono.Security.X509.X509Certificate cert)
    // Offset: 0x11084D0
    bool checkServerIdentity(::Mono::Security::X509::X509Certificate* cert);
    // private System.Boolean checkDomainName(System.String subjectName)
    // Offset: 0x1108900
    bool checkDomainName(::StringW subjectName);
    // static private System.Boolean Match(System.String hostname, System.String pattern)
    // Offset: 0x11086B8
    static bool Match(::StringW hostname, ::StringW pattern);
    // public override System.Void Update()
    // Offset: 0x1107A34
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::Update()
    void Update();
    // protected override System.Void ProcessAsSsl3()
    // Offset: 0x1107A84
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsSsl3()
    void ProcessAsSsl3();
    // protected override System.Void ProcessAsTls1()
    // Offset: 0x1107A94
    // Implemented from: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
    // Base method: System.Void HandshakeMessage::ProcessAsTls1()
    void ProcessAsTls1();
  }; // Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificate
  #pragma pack(pop)
  static check_size<sizeof(TlsServerCertificate), 88 + sizeof(::Mono::Security::X509::X509CertificateCollection*)> __Mono_Security_Protocol_Tls_Handshake_Client_TlsServerCertificateSizeCheck;
  static_assert(sizeof(TlsServerCertificate) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkCertificateUsage
// Il2CppName: checkCertificateUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkCertificateUsage)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "checkCertificateUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::validateCertificates
// Il2CppName: validateCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::validateCertificates)> {
  static const MethodInfo* get() {
    static auto* certificates = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "validateCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::RemoteValidation
// Il2CppName: RemoteValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::Mono::Security::Protocol::Tls::ClientContext*, ::Mono::Security::Protocol::Tls::AlertDescription)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::RemoteValidation)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ClientContext")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "RemoteValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, description});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::LocalValidation
// Il2CppName: LocalValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::Mono::Security::Protocol::Tls::ClientContext*, ::Mono::Security::Protocol::Tls::AlertDescription)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::LocalValidation)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ClientContext")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "LocalValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, description});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkServerIdentity
// Il2CppName: checkServerIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkServerIdentity)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "checkServerIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkDomainName
// Il2CppName: checkDomainName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)(::StringW)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::checkDomainName)> {
  static const MethodInfo* get() {
    static auto* subjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "checkDomainName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subjectName});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::Match)> {
  static const MethodInfo* get() {
    static auto* hostname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostname, pattern});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::*)()>(&Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::Client::TlsServerCertificate*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
