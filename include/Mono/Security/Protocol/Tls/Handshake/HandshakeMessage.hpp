// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.TlsStream
#include "Mono/Security/Protocol/Tls/TlsStream.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeType
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeType.hpp"
// Including type: Mono.Security.Protocol.Tls.ContentType
#include "Mono/Security/Protocol/Tls/ContentType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Forward declaring type: HandshakeMessage
  class HandshakeMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*, "Mono.Security.Protocol.Tls.Handshake", "HandshakeMessage");
// Type namespace: Mono.Security.Protocol.Tls.Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class HandshakeMessage : public ::Mono::Security::Protocol::Tls::TlsStream {
    public:
    public:
    // private Mono.Security.Protocol.Tls.Context context
    // Size: 0x8
    // Offset: 0x40
    ::Mono::Security::Protocol::Tls::Context* context;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Context*) == 0x8);
    // private Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType
    // Size: 0x1
    // Offset: 0x48
    ::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Handshake::HandshakeType) == 0x1);
    // private Mono.Security.Protocol.Tls.ContentType contentType
    // Size: 0x1
    // Offset: 0x49
    ::Mono::Security::Protocol::Tls::ContentType contentType;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::ContentType) == 0x1);
    // Padding between fields: contentType and: cache
    char __padding2[0x6] = {};
    // private System.Byte[] cache
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> cache;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.Protocol.Tls.Context context
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Context*& dyn_context();
    // Get instance field reference: private Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Handshake::HandshakeType& dyn_handshakeType();
    // Get instance field reference: private Mono.Security.Protocol.Tls.ContentType contentType
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::ContentType& dyn_contentType();
    // Get instance field reference: private System.Byte[] cache
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_cache();
    // public Mono.Security.Protocol.Tls.Context get_Context()
    // Offset: 0x1109640
    ::Mono::Security::Protocol::Tls::Context* get_Context();
    // public Mono.Security.Protocol.Tls.Handshake.HandshakeType get_HandshakeType()
    // Offset: 0x1109648
    ::Mono::Security::Protocol::Tls::Handshake::HandshakeType get_HandshakeType();
    // public Mono.Security.Protocol.Tls.ContentType get_ContentType()
    // Offset: 0x1109650
    ::Mono::Security::Protocol::Tls::ContentType get_ContentType();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType)
    // Offset: 0x1106044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandshakeMessage* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandshakeMessage*, creationType>(context, handshakeType)));
    }
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType, Mono.Security.Protocol.Tls.ContentType contentType)
    // Offset: 0x1109658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandshakeMessage* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType, ::Mono::Security::Protocol::Tls::ContentType contentType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandshakeMessage*, creationType>(context, handshakeType, contentType)));
    }
    // public System.Void .ctor(Mono.Security.Protocol.Tls.Context context, Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType, System.Byte[] data)
    // Offset: 0x11079F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandshakeMessage* New_ctor(::Mono::Security::Protocol::Tls::Context* context, ::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType, ::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandshakeMessage*, creationType>(context, handshakeType, data)));
    }
    // protected System.Void ProcessAsTls1()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessAsTls1();
    // protected System.Void ProcessAsSsl3()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessAsSsl3();
    // public System.Void Process()
    // Offset: 0x1104158
    void Process();
    // public System.Void Update()
    // Offset: 0x1106258
    void Update();
    // public System.Byte[] EncodeMessage()
    // Offset: 0x110969C
    ::ArrayW<uint8_t> EncodeMessage();
    // static public System.Boolean Compare(System.Byte[] buffer1, System.Byte[] buffer2)
    // Offset: 0x1108F98
    static bool Compare(::ArrayW<uint8_t> buffer1, ::ArrayW<uint8_t> buffer2);
  }; // Mono.Security.Protocol.Tls.Handshake.HandshakeMessage
  #pragma pack(pop)
  static check_size<sizeof(HandshakeMessage), 80 + sizeof(::ArrayW<uint8_t>)> __Mono_Security_Protocol_Tls_Handshake_HandshakeMessageSizeCheck;
  static_assert(sizeof(HandshakeMessage) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Context* (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_HandshakeType
// Il2CppName: get_HandshakeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Handshake::HandshakeType (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_HandshakeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "get_HandshakeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::ContentType (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::ProcessAsTls1
// Il2CppName: ProcessAsTls1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::ProcessAsTls1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "ProcessAsTls1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::ProcessAsSsl3
// Il2CppName: ProcessAsSsl3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::ProcessAsSsl3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "ProcessAsSsl3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Process)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::EncodeMessage
// Il2CppName: EncodeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::*)()>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::EncodeMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "EncodeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Handshake::HandshakeMessage::Compare)> {
  static const MethodInfo* get() {
    static auto* buffer1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* buffer2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Handshake::HandshakeMessage*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer1, buffer2});
  }
};
