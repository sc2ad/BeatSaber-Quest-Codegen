// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.CipherSuite
#include "Mono/Security/Protocol/Tls/CipherSuite.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: ContentType
  struct ContentType;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: TlsCipherSuite
  class TlsCipherSuite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::TlsCipherSuite);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::TlsCipherSuite*, "Mono.Security.Protocol.Tls", "TlsCipherSuite");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.TlsCipherSuite
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsCipherSuite : public ::Mono::Security::Protocol::Tls::CipherSuite {
    public:
    public:
    // private System.Byte[] header
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<uint8_t> header;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Object headerLock
    // Size: 0x8
    // Offset: 0x88
    ::Il2CppObject* headerLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // static field const value: static private System.Int32 MacHeaderLength
    static constexpr const int MacHeaderLength = 13;
    // Get static field: static private System.Int32 MacHeaderLength
    static int _get_MacHeaderLength();
    // Set static field: static private System.Int32 MacHeaderLength
    static void _set_MacHeaderLength(int value);
    // Get instance field reference: private System.Byte[] header
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_header();
    // Get instance field reference: private System.Object headerLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_headerLock();
    // public System.Void .ctor(System.Int16 code, System.String name, Mono.Security.Protocol.Tls.CipherAlgorithmType cipherAlgorithmType, Mono.Security.Protocol.Tls.HashAlgorithmType hashAlgorithmType, Mono.Security.Protocol.Tls.ExchangeAlgorithmType exchangeAlgorithmType, System.Boolean exportable, System.Boolean blockMode, System.Byte keyMaterialSize, System.Byte expandedKeyMaterialSize, System.Int16 effectiveKeyBytes, System.Byte ivSize, System.Byte blockSize)
    // Offset: 0x169C1A8
    // Implemented from: Mono.Security.Protocol.Tls.CipherSuite
    // Base method: System.Void CipherSuite::.ctor(System.Int16 code, System.String name, Mono.Security.Protocol.Tls.CipherAlgorithmType cipherAlgorithmType, Mono.Security.Protocol.Tls.HashAlgorithmType hashAlgorithmType, Mono.Security.Protocol.Tls.ExchangeAlgorithmType exchangeAlgorithmType, System.Boolean exportable, System.Boolean blockMode, System.Byte keyMaterialSize, System.Byte expandedKeyMaterialSize, System.Int16 effectiveKeyBytes, System.Byte ivSize, System.Byte blockSize)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsCipherSuite* New_ctor(int16_t code, ::StringW name, ::Mono::Security::Protocol::Tls::CipherAlgorithmType cipherAlgorithmType, ::Mono::Security::Protocol::Tls::HashAlgorithmType hashAlgorithmType, ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, uint8_t keyMaterialSize, uint8_t expandedKeyMaterialSize, int16_t effectiveKeyBytes, uint8_t ivSize, uint8_t blockSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::TlsCipherSuite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsCipherSuite*, creationType>(code, name, cipherAlgorithmType, hashAlgorithmType, exchangeAlgorithmType, exportable, blockMode, keyMaterialSize, expandedKeyMaterialSize, effectiveKeyBytes, ivSize, blockSize)));
    }
    // public override System.Byte[] ComputeServerRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0x169C2B0
    // Implemented from: Mono.Security.Protocol.Tls.CipherSuite
    // Base method: System.Byte[] CipherSuite::ComputeServerRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    ::ArrayW<uint8_t> ComputeServerRecordMAC(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // public override System.Byte[] ComputeClientRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0x169C558
    // Implemented from: Mono.Security.Protocol.Tls.CipherSuite
    // Base method: System.Byte[] CipherSuite::ComputeClientRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    ::ArrayW<uint8_t> ComputeClientRecordMAC(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // public override System.Void ComputeMasterSecret(System.Byte[] preMasterSecret)
    // Offset: 0x169C800
    // Implemented from: Mono.Security.Protocol.Tls.CipherSuite
    // Base method: System.Void CipherSuite::ComputeMasterSecret(System.Byte[] preMasterSecret)
    void ComputeMasterSecret(::ArrayW<uint8_t> preMasterSecret);
    // public override System.Void ComputeKeys()
    // Offset: 0x169C8A4
    // Implemented from: Mono.Security.Protocol.Tls.CipherSuite
    // Base method: System.Void CipherSuite::ComputeKeys()
    void ComputeKeys();
  }; // Mono.Security.Protocol.Tls.TlsCipherSuite
  #pragma pack(pop)
  static check_size<sizeof(TlsCipherSuite), 136 + sizeof(::Il2CppObject*)> __Mono_Security_Protocol_Tls_TlsCipherSuiteSizeCheck;
  static_assert(sizeof(TlsCipherSuite) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsCipherSuite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeServerRecordMAC
// Il2CppName: ComputeServerRecordMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::TlsCipherSuite::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeServerRecordMAC)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsCipherSuite*), "ComputeServerRecordMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeClientRecordMAC
// Il2CppName: ComputeClientRecordMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::TlsCipherSuite::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeClientRecordMAC)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsCipherSuite*), "ComputeClientRecordMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeMasterSecret
// Il2CppName: ComputeMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsCipherSuite::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeMasterSecret)> {
  static const MethodInfo* get() {
    static auto* preMasterSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsCipherSuite*), "ComputeMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{preMasterSecret});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeKeys
// Il2CppName: ComputeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsCipherSuite::*)()>(&Mono::Security::Protocol::Tls::TlsCipherSuite::ComputeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsCipherSuite*), "ComputeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
