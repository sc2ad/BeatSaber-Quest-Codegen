// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.SslClientStream
#include "Mono/Security/Protocol/Tls/SslClientStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: HttpsClientStream
  class HttpsClientStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::HttpsClientStream);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::HttpsClientStream*, "Mono.Security.Protocol.Tls", "HttpsClientStream");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.HttpsClientStream
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: 8FD550
  class HttpsClientStream : public ::Mono::Security::Protocol::Tls::SslClientStream {
    public:
    // Nested type: ::Mono::Security::Protocol::Tls::HttpsClientStream::$$c
    class $$c;
    public:
    // private System.Net.HttpWebRequest _request
    // Size: 0x8
    // Offset: 0xA0
    ::System::Net::HttpWebRequest* request;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // private System.Int32 _status
    // Size: 0x4
    // Offset: 0xA8
    int status;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Net.HttpWebRequest _request
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn__request();
    // Get instance field reference: private System.Int32 _status
    [[deprecated("Use field access instead!")]] int& dyn__status();
    // public System.Boolean get_TrustFailure()
    // Offset: 0x110CDAC
    bool get_TrustFailure();
    // public System.Void .ctor(System.IO.Stream stream, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Net.HttpWebRequest request, System.Byte[] buffer)
    // Offset: 0x110C82C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpsClientStream* New_ctor(::System::IO::Stream* stream, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, ::System::Net::HttpWebRequest* request, ::ArrayW<uint8_t> buffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::HttpsClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpsClientStream*, creationType>(stream, clientCertificates, request, buffer)));
    }
    // override System.Boolean RaiseServerCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] certificateErrors)
    // Offset: 0x110CDC8
    // Implemented from: Mono.Security.Protocol.Tls.SslClientStream
    // Base method: System.Boolean SslClientStream::RaiseServerCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] certificateErrors)
    bool RaiseServerCertificateValidation(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::ArrayW<int> certificateErrors);
  }; // Mono.Security.Protocol.Tls.HttpsClientStream
  #pragma pack(pop)
  static check_size<sizeof(HttpsClientStream), 168 + sizeof(int)> __Mono_Security_Protocol_Tls_HttpsClientStreamSizeCheck;
  static_assert(sizeof(HttpsClientStream) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::get_TrustFailure
// Il2CppName: get_TrustFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::HttpsClientStream::*)()>(&Mono::Security::Protocol::Tls::HttpsClientStream::get_TrustFailure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::HttpsClientStream*), "get_TrustFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::RaiseServerCertificateValidation
// Il2CppName: RaiseServerCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::HttpsClientStream::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<int>)>(&Mono::Security::Protocol::Tls::HttpsClientStream::RaiseServerCertificateValidation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* certificateErrors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::HttpsClientStream*), "RaiseServerCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, certificateErrors});
  }
};
