// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: Mono::Security::Cryptography
namespace Mono::Security::Cryptography {
  // Forward declaring type: RSAManaged
  class RSAManaged;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: TlsClientSettings
  class TlsClientSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::TlsClientSettings);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::TlsClientSettings*, "Mono.Security.Protocol.Tls", "TlsClientSettings");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.TlsClientSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsClientSettings : public ::Il2CppObject {
    public:
    public:
    // private System.String targetHost
    // Size: 0x8
    // Offset: 0x10
    ::StringW targetHost;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Certificate clientCertificate
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::X509Certificates::X509Certificate* clientCertificate;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*) == 0x8);
    // private Mono.Security.Cryptography.RSAManaged certificateRSA
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::Cryptography::RSAManaged* certificateRSA;
    // Field size check
    static_assert(sizeof(::Mono::Security::Cryptography::RSAManaged*) == 0x8);
    public:
    // Get instance field reference: private System.String targetHost
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetHost();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn_certificates();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate clientCertificate
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate*& dyn_clientCertificate();
    // Get instance field reference: private Mono.Security.Cryptography.RSAManaged certificateRSA
    [[deprecated("Use field access instead!")]] ::Mono::Security::Cryptography::RSAManaged*& dyn_certificateRSA();
    // public System.String get_TargetHost()
    // Offset: 0x169CC5C
    ::StringW get_TargetHost();
    // public System.Void set_TargetHost(System.String value)
    // Offset: 0x169CC64
    void set_TargetHost(::StringW value);
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_Certificates()
    // Offset: 0x169CC6C
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_Certificates();
    // public System.Void set_Certificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
    // Offset: 0x169CC74
    void set_Certificates(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* value);
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_ClientCertificate()
    // Offset: 0x169CC7C
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_ClientCertificate();
    // public System.Void set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate value)
    // Offset: 0x169CC84
    void set_ClientCertificate(::System::Security::Cryptography::X509Certificates::X509Certificate* value);
    // public Mono.Security.Cryptography.RSAManaged get_CertificateRSA()
    // Offset: 0x169CDDC
    ::Mono::Security::Cryptography::RSAManaged* get_CertificateRSA();
    // public System.Void .ctor()
    // Offset: 0x169CDE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsClientSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::TlsClientSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsClientSettings*, creationType>()));
    }
    // public System.Void UpdateCertificateRSA()
    // Offset: 0x169CC8C
    void UpdateCertificateRSA();
  }; // Mono.Security.Protocol.Tls.TlsClientSettings
  #pragma pack(pop)
  static check_size<sizeof(TlsClientSettings), 40 + sizeof(::Mono::Security::Cryptography::RSAManaged*)> __Mono_Security_Protocol_Tls_TlsClientSettingsSizeCheck;
  static_assert(sizeof(TlsClientSettings) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::get_TargetHost
// Il2CppName: get_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::Protocol::Tls::TlsClientSettings::*)()>(&Mono::Security::Protocol::Tls::TlsClientSettings::get_TargetHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "get_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::set_TargetHost
// Il2CppName: set_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsClientSettings::*)(::StringW)>(&Mono::Security::Protocol::Tls::TlsClientSettings::set_TargetHost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "set_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::get_Certificates
// Il2CppName: get_Certificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (Mono::Security::Protocol::Tls::TlsClientSettings::*)()>(&Mono::Security::Protocol::Tls::TlsClientSettings::get_Certificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "get_Certificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::set_Certificates
// Il2CppName: set_Certificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsClientSettings::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::TlsClientSettings::set_Certificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "set_Certificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::get_ClientCertificate
// Il2CppName: get_ClientCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::TlsClientSettings::*)()>(&Mono::Security::Protocol::Tls::TlsClientSettings::get_ClientCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "get_ClientCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::set_ClientCertificate
// Il2CppName: set_ClientCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsClientSettings::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*)>(&Mono::Security::Protocol::Tls::TlsClientSettings::set_ClientCertificate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "set_ClientCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::get_CertificateRSA
// Il2CppName: get_CertificateRSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Cryptography::RSAManaged* (Mono::Security::Protocol::Tls::TlsClientSettings::*)()>(&Mono::Security::Protocol::Tls::TlsClientSettings::get_CertificateRSA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "get_CertificateRSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsClientSettings::UpdateCertificateRSA
// Il2CppName: UpdateCertificateRSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsClientSettings::*)()>(&Mono::Security::Protocol::Tls::TlsClientSettings::UpdateCertificateRSA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsClientSettings*), "UpdateCertificateRSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
