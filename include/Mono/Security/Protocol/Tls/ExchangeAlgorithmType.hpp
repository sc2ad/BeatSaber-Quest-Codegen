// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: ExchangeAlgorithmType
  struct ExchangeAlgorithmType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType, "Mono.Security.Protocol.Tls", "ExchangeAlgorithmType");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.ExchangeAlgorithmType
  // [TokenAttribute] Offset: FFFFFFFF
  struct ExchangeAlgorithmType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ExchangeAlgorithmType
    constexpr ExchangeAlgorithmType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType DiffieHellman
    static constexpr const int DiffieHellman = 0;
    // Get static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType DiffieHellman
    static ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType _get_DiffieHellman();
    // Set static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType DiffieHellman
    static void _set_DiffieHellman(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType value);
    // static field const value: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType Fortezza
    static constexpr const int Fortezza = 1;
    // Get static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType Fortezza
    static ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType _get_Fortezza();
    // Set static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType Fortezza
    static void _set_Fortezza(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType value);
    // static field const value: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType None
    static constexpr const int None = 2;
    // Get static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType None
    static ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType _get_None();
    // Set static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType None
    static void _set_None(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType value);
    // static field const value: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaKeyX
    static constexpr const int RsaKeyX = 3;
    // Get static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaKeyX
    static ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType _get_RsaKeyX();
    // Set static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaKeyX
    static void _set_RsaKeyX(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType value);
    // static field const value: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaSign
    static constexpr const int RsaSign = 4;
    // Get static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaSign
    static ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType _get_RsaSign();
    // Set static field: static public Mono.Security.Protocol.Tls.ExchangeAlgorithmType RsaSign
    static void _set_RsaSign(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Mono.Security.Protocol.Tls.ExchangeAlgorithmType
  #pragma pack(pop)
  static check_size<sizeof(ExchangeAlgorithmType), 0 + sizeof(int)> __Mono_Security_Protocol_Tls_ExchangeAlgorithmTypeSizeCheck;
  static_assert(sizeof(ExchangeAlgorithmType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
