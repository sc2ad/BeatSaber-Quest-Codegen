// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.SecurityProtocolType
#include "Mono/Security/Protocol/Tls/SecurityProtocolType.hpp"
// Including type: Mono.Security.Protocol.Tls.SecurityCompressionType
#include "Mono/Security/Protocol/Tls/SecurityCompressionType.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.HandshakeType
#include "Mono/Security/Protocol/Tls/Handshake/HandshakeType.hpp"
// Including type: Mono.Security.Protocol.Tls.HandshakeState
#include "Mono/Security/Protocol/Tls/HandshakeState.hpp"
// Including type: System.Int16
#include "System/Int16.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: TlsServerSettings
  class TlsServerSettings;
  // Forward declaring type: TlsClientSettings
  class TlsClientSettings;
  // Forward declaring type: SecurityParameters
  class SecurityParameters;
  // Forward declaring type: CipherSuiteCollection
  class CipherSuiteCollection;
  // Forward declaring type: TlsStream
  class TlsStream;
  // Forward declaring type: RecordProtocol
  class RecordProtocol;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RandomNumberGenerator
  class RandomNumberGenerator;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::Context);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::Context*, "Mono.Security.Protocol.Tls", "Context");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0xE1
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.Context
  // [TokenAttribute] Offset: FFFFFFFF
  class Context : public ::Il2CppObject {
    public:
    public:
    // private Mono.Security.Protocol.Tls.SecurityProtocolType securityProtocol
    // Size: 0x4
    // Offset: 0x10
    ::Mono::Security::Protocol::Tls::SecurityProtocolType securityProtocol;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityProtocolType) == 0x4);
    // Padding between fields: securityProtocol and: sessionId
    char __padding0[0x4] = {};
    // private System.Byte[] sessionId
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> sessionId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.Protocol.Tls.SecurityCompressionType compressionMethod
    // Size: 0x4
    // Offset: 0x20
    ::Mono::Security::Protocol::Tls::SecurityCompressionType compressionMethod;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityCompressionType) == 0x4);
    // Padding between fields: compressionMethod and: serverSettings
    char __padding2[0x4] = {};
    // private Mono.Security.Protocol.Tls.TlsServerSettings serverSettings
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::Protocol::Tls::TlsServerSettings* serverSettings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::TlsServerSettings*) == 0x8);
    // private Mono.Security.Protocol.Tls.TlsClientSettings clientSettings
    // Size: 0x8
    // Offset: 0x30
    ::Mono::Security::Protocol::Tls::TlsClientSettings* clientSettings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::TlsClientSettings*) == 0x8);
    // private Mono.Security.Protocol.Tls.SecurityParameters current
    // Size: 0x8
    // Offset: 0x38
    ::Mono::Security::Protocol::Tls::SecurityParameters* current;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityParameters*) == 0x8);
    // private Mono.Security.Protocol.Tls.SecurityParameters negotiating
    // Size: 0x8
    // Offset: 0x40
    ::Mono::Security::Protocol::Tls::SecurityParameters* negotiating;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityParameters*) == 0x8);
    // private Mono.Security.Protocol.Tls.SecurityParameters read
    // Size: 0x8
    // Offset: 0x48
    ::Mono::Security::Protocol::Tls::SecurityParameters* read;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityParameters*) == 0x8);
    // private Mono.Security.Protocol.Tls.SecurityParameters write
    // Size: 0x8
    // Offset: 0x50
    ::Mono::Security::Protocol::Tls::SecurityParameters* write;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::SecurityParameters*) == 0x8);
    // private Mono.Security.Protocol.Tls.CipherSuiteCollection supportedCiphers
    // Size: 0x8
    // Offset: 0x58
    ::Mono::Security::Protocol::Tls::CipherSuiteCollection* supportedCiphers;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CipherSuiteCollection*) == 0x8);
    // private Mono.Security.Protocol.Tls.Handshake.HandshakeType lastHandshakeMsg
    // Size: 0x1
    // Offset: 0x60
    ::Mono::Security::Protocol::Tls::Handshake::HandshakeType lastHandshakeMsg;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Handshake::HandshakeType) == 0x1);
    // Padding between fields: lastHandshakeMsg and: handshakeState
    char __padding10[0x3] = {};
    // private Mono.Security.Protocol.Tls.HandshakeState handshakeState
    // Size: 0x4
    // Offset: 0x64
    ::Mono::Security::Protocol::Tls::HandshakeState handshakeState;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::HandshakeState) == 0x4);
    // private System.Boolean abbreviatedHandshake
    // Size: 0x1
    // Offset: 0x68
    bool abbreviatedHandshake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean receivedConnectionEnd
    // Size: 0x1
    // Offset: 0x69
    bool receivedConnectionEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean sentConnectionEnd
    // Size: 0x1
    // Offset: 0x6A
    bool sentConnectionEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean protocolNegotiated
    // Size: 0x1
    // Offset: 0x6B
    bool protocolNegotiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: protocolNegotiated and: writeSequenceNumber
    char __padding15[0x4] = {};
    // private System.UInt64 writeSequenceNumber
    // Size: 0x8
    // Offset: 0x70
    uint64_t writeSequenceNumber;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 readSequenceNumber
    // Size: 0x8
    // Offset: 0x78
    uint64_t readSequenceNumber;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Byte[] clientRandom
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<uint8_t> clientRandom;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] serverRandom
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<uint8_t> serverRandom;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] randomCS
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<uint8_t> randomCS;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] randomSC
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<uint8_t> randomSC;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] masterSecret
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<uint8_t> masterSecret;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] clientWriteKey
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<uint8_t> clientWriteKey;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] serverWriteKey
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<uint8_t> serverWriteKey;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] clientWriteIV
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<uint8_t> clientWriteIV;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] serverWriteIV
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<uint8_t> serverWriteIV;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.Protocol.Tls.TlsStream handshakeMessages
    // Size: 0x8
    // Offset: 0xC8
    ::Mono::Security::Protocol::Tls::TlsStream* handshakeMessages;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::TlsStream*) == 0x8);
    // private System.Security.Cryptography.RandomNumberGenerator random
    // Size: 0x8
    // Offset: 0xD0
    ::System::Security::Cryptography::RandomNumberGenerator* random;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::RandomNumberGenerator*) == 0x8);
    // private Mono.Security.Protocol.Tls.RecordProtocol recordProtocol
    // Size: 0x8
    // Offset: 0xD8
    ::Mono::Security::Protocol::Tls::RecordProtocol* recordProtocol;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::RecordProtocol*) == 0x8);
    // private System.Boolean <ChangeCipherSpecDone>k__BackingField
    // Size: 0x1
    // Offset: 0xE0
    bool ChangeCipherSpecDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static System.Int16 MAX_FRAGMENT_SIZE
    static constexpr const int16_t MAX_FRAGMENT_SIZE = 16384;
    // Get static field: static System.Int16 MAX_FRAGMENT_SIZE
    static int16_t _get_MAX_FRAGMENT_SIZE();
    // Set static field: static System.Int16 MAX_FRAGMENT_SIZE
    static void _set_MAX_FRAGMENT_SIZE(int16_t value);
    // static field const value: static System.Int16 TLS1_PROTOCOL_CODE
    static constexpr const int16_t TLS1_PROTOCOL_CODE = 769;
    // Get static field: static System.Int16 TLS1_PROTOCOL_CODE
    static int16_t _get_TLS1_PROTOCOL_CODE();
    // Set static field: static System.Int16 TLS1_PROTOCOL_CODE
    static void _set_TLS1_PROTOCOL_CODE(int16_t value);
    // static field const value: static System.Int16 SSL3_PROTOCOL_CODE
    static constexpr const int16_t SSL3_PROTOCOL_CODE = 768;
    // Get static field: static System.Int16 SSL3_PROTOCOL_CODE
    static int16_t _get_SSL3_PROTOCOL_CODE();
    // Set static field: static System.Int16 SSL3_PROTOCOL_CODE
    static void _set_SSL3_PROTOCOL_CODE(int16_t value);
    // static field const value: static System.Int64 UNIX_BASE_TICKS
    static constexpr const int64_t UNIX_BASE_TICKS = 621355968000000000;
    // Get static field: static System.Int64 UNIX_BASE_TICKS
    static int64_t _get_UNIX_BASE_TICKS();
    // Set static field: static System.Int64 UNIX_BASE_TICKS
    static void _set_UNIX_BASE_TICKS(int64_t value);
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityProtocolType securityProtocol
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityProtocolType& dyn_securityProtocol();
    // Get instance field reference: private System.Byte[] sessionId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_sessionId();
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityCompressionType compressionMethod
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityCompressionType& dyn_compressionMethod();
    // Get instance field reference: private Mono.Security.Protocol.Tls.TlsServerSettings serverSettings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::TlsServerSettings*& dyn_serverSettings();
    // Get instance field reference: private Mono.Security.Protocol.Tls.TlsClientSettings clientSettings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::TlsClientSettings*& dyn_clientSettings();
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityParameters current
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityParameters*& dyn_current();
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityParameters negotiating
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityParameters*& dyn_negotiating();
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityParameters read
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityParameters*& dyn_read();
    // Get instance field reference: private Mono.Security.Protocol.Tls.SecurityParameters write
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::SecurityParameters*& dyn_write();
    // Get instance field reference: private Mono.Security.Protocol.Tls.CipherSuiteCollection supportedCiphers
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CipherSuiteCollection*& dyn_supportedCiphers();
    // Get instance field reference: private Mono.Security.Protocol.Tls.Handshake.HandshakeType lastHandshakeMsg
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Handshake::HandshakeType& dyn_lastHandshakeMsg();
    // Get instance field reference: private Mono.Security.Protocol.Tls.HandshakeState handshakeState
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::HandshakeState& dyn_handshakeState();
    // Get instance field reference: private System.Boolean abbreviatedHandshake
    [[deprecated("Use field access instead!")]] bool& dyn_abbreviatedHandshake();
    // Get instance field reference: private System.Boolean receivedConnectionEnd
    [[deprecated("Use field access instead!")]] bool& dyn_receivedConnectionEnd();
    // Get instance field reference: private System.Boolean sentConnectionEnd
    [[deprecated("Use field access instead!")]] bool& dyn_sentConnectionEnd();
    // Get instance field reference: private System.Boolean protocolNegotiated
    [[deprecated("Use field access instead!")]] bool& dyn_protocolNegotiated();
    // Get instance field reference: private System.UInt64 writeSequenceNumber
    [[deprecated("Use field access instead!")]] uint64_t& dyn_writeSequenceNumber();
    // Get instance field reference: private System.UInt64 readSequenceNumber
    [[deprecated("Use field access instead!")]] uint64_t& dyn_readSequenceNumber();
    // Get instance field reference: private System.Byte[] clientRandom
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_clientRandom();
    // Get instance field reference: private System.Byte[] serverRandom
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_serverRandom();
    // Get instance field reference: private System.Byte[] randomCS
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_randomCS();
    // Get instance field reference: private System.Byte[] randomSC
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_randomSC();
    // Get instance field reference: private System.Byte[] masterSecret
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_masterSecret();
    // Get instance field reference: private System.Byte[] clientWriteKey
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_clientWriteKey();
    // Get instance field reference: private System.Byte[] serverWriteKey
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_serverWriteKey();
    // Get instance field reference: private System.Byte[] clientWriteIV
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_clientWriteIV();
    // Get instance field reference: private System.Byte[] serverWriteIV
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_serverWriteIV();
    // Get instance field reference: private Mono.Security.Protocol.Tls.TlsStream handshakeMessages
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::TlsStream*& dyn_handshakeMessages();
    // Get instance field reference: private System.Security.Cryptography.RandomNumberGenerator random
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::RandomNumberGenerator*& dyn_random();
    // Get instance field reference: private Mono.Security.Protocol.Tls.RecordProtocol recordProtocol
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::RecordProtocol*& dyn_recordProtocol();
    // Get instance field reference: private System.Boolean <ChangeCipherSpecDone>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ChangeCipherSpecDone$k__BackingField();
    // public System.Boolean get_AbbreviatedHandshake()
    // Offset: 0x1105750
    bool get_AbbreviatedHandshake();
    // public System.Void set_AbbreviatedHandshake(System.Boolean value)
    // Offset: 0x1105758
    void set_AbbreviatedHandshake(bool value);
    // public System.Boolean get_ProtocolNegotiated()
    // Offset: 0x1105764
    bool get_ProtocolNegotiated();
    // public System.Void set_ProtocolNegotiated(System.Boolean value)
    // Offset: 0x110576C
    void set_ProtocolNegotiated(bool value);
    // public System.Boolean get_ChangeCipherSpecDone()
    // Offset: 0x1105778
    bool get_ChangeCipherSpecDone();
    // public System.Void set_ChangeCipherSpecDone(System.Boolean value)
    // Offset: 0x1105780
    void set_ChangeCipherSpecDone(bool value);
    // public Mono.Security.Protocol.Tls.SecurityProtocolType get_SecurityProtocol()
    // Offset: 0x110578C
    ::Mono::Security::Protocol::Tls::SecurityProtocolType get_SecurityProtocol();
    // public System.Void set_SecurityProtocol(Mono.Security.Protocol.Tls.SecurityProtocolType value)
    // Offset: 0x1105838
    void set_SecurityProtocol(::Mono::Security::Protocol::Tls::SecurityProtocolType value);
    // public Mono.Security.Protocol.Tls.SecurityProtocolType get_SecurityProtocolFlags()
    // Offset: 0x1105840
    ::Mono::Security::Protocol::Tls::SecurityProtocolType get_SecurityProtocolFlags();
    // public System.Int16 get_Protocol()
    // Offset: 0x1105848
    int16_t get_Protocol();
    // public System.Byte[] get_SessionId()
    // Offset: 0x11058FC
    ::ArrayW<uint8_t> get_SessionId();
    // public System.Void set_SessionId(System.Byte[] value)
    // Offset: 0x1105904
    void set_SessionId(::ArrayW<uint8_t> value);
    // public Mono.Security.Protocol.Tls.SecurityCompressionType get_CompressionMethod()
    // Offset: 0x110590C
    ::Mono::Security::Protocol::Tls::SecurityCompressionType get_CompressionMethod();
    // public System.Void set_CompressionMethod(Mono.Security.Protocol.Tls.SecurityCompressionType value)
    // Offset: 0x1105914
    void set_CompressionMethod(::Mono::Security::Protocol::Tls::SecurityCompressionType value);
    // public Mono.Security.Protocol.Tls.TlsServerSettings get_ServerSettings()
    // Offset: 0x110591C
    ::Mono::Security::Protocol::Tls::TlsServerSettings* get_ServerSettings();
    // public Mono.Security.Protocol.Tls.TlsClientSettings get_ClientSettings()
    // Offset: 0x1105924
    ::Mono::Security::Protocol::Tls::TlsClientSettings* get_ClientSettings();
    // public Mono.Security.Protocol.Tls.Handshake.HandshakeType get_LastHandshakeMsg()
    // Offset: 0x110592C
    ::Mono::Security::Protocol::Tls::Handshake::HandshakeType get_LastHandshakeMsg();
    // public System.Void set_LastHandshakeMsg(Mono.Security.Protocol.Tls.Handshake.HandshakeType value)
    // Offset: 0x1105934
    void set_LastHandshakeMsg(::Mono::Security::Protocol::Tls::Handshake::HandshakeType value);
    // public Mono.Security.Protocol.Tls.HandshakeState get_HandshakeState()
    // Offset: 0x110593C
    ::Mono::Security::Protocol::Tls::HandshakeState get_HandshakeState();
    // public System.Void set_HandshakeState(Mono.Security.Protocol.Tls.HandshakeState value)
    // Offset: 0x1105944
    void set_HandshakeState(::Mono::Security::Protocol::Tls::HandshakeState value);
    // public System.Boolean get_ReceivedConnectionEnd()
    // Offset: 0x110594C
    bool get_ReceivedConnectionEnd();
    // public System.Void set_ReceivedConnectionEnd(System.Boolean value)
    // Offset: 0x1105954
    void set_ReceivedConnectionEnd(bool value);
    // public System.Boolean get_SentConnectionEnd()
    // Offset: 0x1105960
    bool get_SentConnectionEnd();
    // public System.Void set_SentConnectionEnd(System.Boolean value)
    // Offset: 0x1105968
    void set_SentConnectionEnd(bool value);
    // public Mono.Security.Protocol.Tls.CipherSuiteCollection get_SupportedCiphers()
    // Offset: 0x1105974
    ::Mono::Security::Protocol::Tls::CipherSuiteCollection* get_SupportedCiphers();
    // public System.Void set_SupportedCiphers(Mono.Security.Protocol.Tls.CipherSuiteCollection value)
    // Offset: 0x110597C
    void set_SupportedCiphers(::Mono::Security::Protocol::Tls::CipherSuiteCollection* value);
    // public Mono.Security.Protocol.Tls.TlsStream get_HandshakeMessages()
    // Offset: 0x1105984
    ::Mono::Security::Protocol::Tls::TlsStream* get_HandshakeMessages();
    // public System.UInt64 get_WriteSequenceNumber()
    // Offset: 0x110598C
    uint64_t get_WriteSequenceNumber();
    // public System.Void set_WriteSequenceNumber(System.UInt64 value)
    // Offset: 0x1105994
    void set_WriteSequenceNumber(uint64_t value);
    // public System.UInt64 get_ReadSequenceNumber()
    // Offset: 0x110599C
    uint64_t get_ReadSequenceNumber();
    // public System.Void set_ReadSequenceNumber(System.UInt64 value)
    // Offset: 0x11059A4
    void set_ReadSequenceNumber(uint64_t value);
    // public System.Byte[] get_ClientRandom()
    // Offset: 0x11059AC
    ::ArrayW<uint8_t> get_ClientRandom();
    // public System.Void set_ClientRandom(System.Byte[] value)
    // Offset: 0x11059B4
    void set_ClientRandom(::ArrayW<uint8_t> value);
    // public System.Byte[] get_ServerRandom()
    // Offset: 0x11059BC
    ::ArrayW<uint8_t> get_ServerRandom();
    // public System.Void set_ServerRandom(System.Byte[] value)
    // Offset: 0x11059C4
    void set_ServerRandom(::ArrayW<uint8_t> value);
    // public System.Byte[] get_RandomCS()
    // Offset: 0x11059CC
    ::ArrayW<uint8_t> get_RandomCS();
    // public System.Void set_RandomCS(System.Byte[] value)
    // Offset: 0x11059D4
    void set_RandomCS(::ArrayW<uint8_t> value);
    // public System.Byte[] get_RandomSC()
    // Offset: 0x11059DC
    ::ArrayW<uint8_t> get_RandomSC();
    // public System.Void set_RandomSC(System.Byte[] value)
    // Offset: 0x11059E4
    void set_RandomSC(::ArrayW<uint8_t> value);
    // public System.Byte[] get_MasterSecret()
    // Offset: 0x11059EC
    ::ArrayW<uint8_t> get_MasterSecret();
    // public System.Void set_MasterSecret(System.Byte[] value)
    // Offset: 0x11059F4
    void set_MasterSecret(::ArrayW<uint8_t> value);
    // public System.Byte[] get_ClientWriteKey()
    // Offset: 0x11059FC
    ::ArrayW<uint8_t> get_ClientWriteKey();
    // public System.Void set_ClientWriteKey(System.Byte[] value)
    // Offset: 0x1105A04
    void set_ClientWriteKey(::ArrayW<uint8_t> value);
    // public System.Byte[] get_ServerWriteKey()
    // Offset: 0x1105A0C
    ::ArrayW<uint8_t> get_ServerWriteKey();
    // public System.Void set_ServerWriteKey(System.Byte[] value)
    // Offset: 0x1105A14
    void set_ServerWriteKey(::ArrayW<uint8_t> value);
    // public System.Byte[] get_ClientWriteIV()
    // Offset: 0x1105A1C
    ::ArrayW<uint8_t> get_ClientWriteIV();
    // public System.Void set_ClientWriteIV(System.Byte[] value)
    // Offset: 0x1105A24
    void set_ClientWriteIV(::ArrayW<uint8_t> value);
    // public System.Byte[] get_ServerWriteIV()
    // Offset: 0x1105A2C
    ::ArrayW<uint8_t> get_ServerWriteIV();
    // public System.Void set_ServerWriteIV(System.Byte[] value)
    // Offset: 0x1105A34
    void set_ServerWriteIV(::ArrayW<uint8_t> value);
    // public Mono.Security.Protocol.Tls.RecordProtocol get_RecordProtocol()
    // Offset: 0x1105A3C
    ::Mono::Security::Protocol::Tls::RecordProtocol* get_RecordProtocol();
    // public System.Void set_RecordProtocol(Mono.Security.Protocol.Tls.RecordProtocol value)
    // Offset: 0x1105A44
    void set_RecordProtocol(::Mono::Security::Protocol::Tls::RecordProtocol* value);
    // public Mono.Security.Protocol.Tls.SecurityParameters get_Current()
    // Offset: 0x1105DA4
    ::Mono::Security::Protocol::Tls::SecurityParameters* get_Current();
    // public Mono.Security.Protocol.Tls.SecurityParameters get_Negotiating()
    // Offset: 0x1102918
    ::Mono::Security::Protocol::Tls::SecurityParameters* get_Negotiating();
    // public Mono.Security.Protocol.Tls.SecurityParameters get_Read()
    // Offset: 0x1105E30
    ::Mono::Security::Protocol::Tls::SecurityParameters* get_Read();
    // public Mono.Security.Protocol.Tls.SecurityParameters get_Write()
    // Offset: 0x1105E38
    ::Mono::Security::Protocol::Tls::SecurityParameters* get_Write();
    // public System.Void .ctor(Mono.Security.Protocol.Tls.SecurityProtocolType securityProtocolType)
    // Offset: 0x11037D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Context* New_ctor(::Mono::Security::Protocol::Tls::SecurityProtocolType securityProtocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::Context::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Context*, creationType>(securityProtocolType)));
    }
    // public System.Int32 GetUnixTime()
    // Offset: 0x1105A4C
    int GetUnixTime();
    // public System.Byte[] GetSecureRandomBytes(System.Int32 count)
    // Offset: 0x1102390
    ::ArrayW<uint8_t> GetSecureRandomBytes(int count);
    // public System.Void Clear()
    // Offset: 0x11038B0
    void Clear();
    // public System.Void ClearKeyInfo()
    // Offset: 0x1105AFC
    void ClearKeyInfo();
    // public Mono.Security.Protocol.Tls.SecurityProtocolType DecodeProtocolCode(System.Int16 code, System.Boolean allowFallback)
    // Offset: 0x1105C24
    ::Mono::Security::Protocol::Tls::SecurityProtocolType DecodeProtocolCode(int16_t code, bool allowFallback);
    // public System.Void ChangeProtocol(System.Int16 protocol)
    // Offset: 0x1105CDC
    void ChangeProtocol(int16_t protocol);
    // public System.Void StartSwitchingSecurityParameters(System.Boolean client)
    // Offset: 0x1105E40
    void StartSwitchingSecurityParameters(bool client);
    // public System.Void EndSwitchingSecurityParameters(System.Boolean client)
    // Offset: 0x1105E6C
    void EndSwitchingSecurityParameters(bool client);
  }; // Mono.Security.Protocol.Tls.Context
  #pragma pack(pop)
  static check_size<sizeof(Context), 224 + sizeof(bool)> __Mono_Security_Protocol_Tls_ContextSizeCheck;
  static_assert(sizeof(Context) == 0xE1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_AbbreviatedHandshake
// Il2CppName: get_AbbreviatedHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_AbbreviatedHandshake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_AbbreviatedHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_AbbreviatedHandshake
// Il2CppName: set_AbbreviatedHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::set_AbbreviatedHandshake)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_AbbreviatedHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ProtocolNegotiated
// Il2CppName: get_ProtocolNegotiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ProtocolNegotiated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ProtocolNegotiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ProtocolNegotiated
// Il2CppName: set_ProtocolNegotiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::set_ProtocolNegotiated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ProtocolNegotiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ChangeCipherSpecDone
// Il2CppName: get_ChangeCipherSpecDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ChangeCipherSpecDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ChangeCipherSpecDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ChangeCipherSpecDone
// Il2CppName: set_ChangeCipherSpecDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::set_ChangeCipherSpecDone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ChangeCipherSpecDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_SecurityProtocol
// Il2CppName: get_SecurityProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityProtocolType (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_SecurityProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_SecurityProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_SecurityProtocol
// Il2CppName: set_SecurityProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::SecurityProtocolType)>(&Mono::Security::Protocol::Tls::Context::set_SecurityProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SecurityProtocolType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_SecurityProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_SecurityProtocolFlags
// Il2CppName: get_SecurityProtocolFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityProtocolType (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_SecurityProtocolFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_SecurityProtocolFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_Protocol
// Il2CppName: get_Protocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_Protocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_Protocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_SessionId
// Il2CppName: get_SessionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_SessionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_SessionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_SessionId
// Il2CppName: set_SessionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_SessionId)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_SessionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_CompressionMethod
// Il2CppName: get_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityCompressionType (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_CompressionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_CompressionMethod
// Il2CppName: set_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::SecurityCompressionType)>(&Mono::Security::Protocol::Tls::Context::set_CompressionMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SecurityCompressionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ServerSettings
// Il2CppName: get_ServerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::TlsServerSettings* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ServerSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ServerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ClientSettings
// Il2CppName: get_ClientSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::TlsClientSettings* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ClientSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ClientSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_LastHandshakeMsg
// Il2CppName: get_LastHandshakeMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Handshake::HandshakeType (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_LastHandshakeMsg)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_LastHandshakeMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_LastHandshakeMsg
// Il2CppName: set_LastHandshakeMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::Handshake::HandshakeType)>(&Mono::Security::Protocol::Tls::Context::set_LastHandshakeMsg)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "HandshakeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_LastHandshakeMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_HandshakeState
// Il2CppName: get_HandshakeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::HandshakeState (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_HandshakeState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_HandshakeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_HandshakeState
// Il2CppName: set_HandshakeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::HandshakeState)>(&Mono::Security::Protocol::Tls::Context::set_HandshakeState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "HandshakeState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_HandshakeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ReceivedConnectionEnd
// Il2CppName: get_ReceivedConnectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ReceivedConnectionEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ReceivedConnectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ReceivedConnectionEnd
// Il2CppName: set_ReceivedConnectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::set_ReceivedConnectionEnd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ReceivedConnectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_SentConnectionEnd
// Il2CppName: get_SentConnectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_SentConnectionEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_SentConnectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_SentConnectionEnd
// Il2CppName: set_SentConnectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::set_SentConnectionEnd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_SentConnectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_SupportedCiphers
// Il2CppName: get_SupportedCiphers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::CipherSuiteCollection* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_SupportedCiphers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_SupportedCiphers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_SupportedCiphers
// Il2CppName: set_SupportedCiphers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::CipherSuiteCollection*)>(&Mono::Security::Protocol::Tls::Context::set_SupportedCiphers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CipherSuiteCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_SupportedCiphers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_HandshakeMessages
// Il2CppName: get_HandshakeMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::TlsStream* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_HandshakeMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_HandshakeMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_WriteSequenceNumber
// Il2CppName: get_WriteSequenceNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_WriteSequenceNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_WriteSequenceNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_WriteSequenceNumber
// Il2CppName: set_WriteSequenceNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(uint64_t)>(&Mono::Security::Protocol::Tls::Context::set_WriteSequenceNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_WriteSequenceNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ReadSequenceNumber
// Il2CppName: get_ReadSequenceNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ReadSequenceNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ReadSequenceNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ReadSequenceNumber
// Il2CppName: set_ReadSequenceNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(uint64_t)>(&Mono::Security::Protocol::Tls::Context::set_ReadSequenceNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ReadSequenceNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ClientRandom
// Il2CppName: get_ClientRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ClientRandom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ClientRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ClientRandom
// Il2CppName: set_ClientRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ClientRandom)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ClientRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ServerRandom
// Il2CppName: get_ServerRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ServerRandom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ServerRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ServerRandom
// Il2CppName: set_ServerRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ServerRandom)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ServerRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_RandomCS
// Il2CppName: get_RandomCS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_RandomCS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_RandomCS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_RandomCS
// Il2CppName: set_RandomCS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_RandomCS)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_RandomCS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_RandomSC
// Il2CppName: get_RandomSC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_RandomSC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_RandomSC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_RandomSC
// Il2CppName: set_RandomSC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_RandomSC)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_RandomSC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_MasterSecret
// Il2CppName: get_MasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_MasterSecret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_MasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_MasterSecret
// Il2CppName: set_MasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_MasterSecret)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_MasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ClientWriteKey
// Il2CppName: get_ClientWriteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ClientWriteKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ClientWriteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ClientWriteKey
// Il2CppName: set_ClientWriteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ClientWriteKey)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ClientWriteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ServerWriteKey
// Il2CppName: get_ServerWriteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ServerWriteKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ServerWriteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ServerWriteKey
// Il2CppName: set_ServerWriteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ServerWriteKey)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ServerWriteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ClientWriteIV
// Il2CppName: get_ClientWriteIV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ClientWriteIV)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ClientWriteIV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ClientWriteIV
// Il2CppName: set_ClientWriteIV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ClientWriteIV)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ClientWriteIV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_ServerWriteIV
// Il2CppName: get_ServerWriteIV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_ServerWriteIV)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_ServerWriteIV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_ServerWriteIV
// Il2CppName: set_ServerWriteIV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::Context::set_ServerWriteIV)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_ServerWriteIV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_RecordProtocol
// Il2CppName: get_RecordProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::RecordProtocol* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_RecordProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_RecordProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::set_RecordProtocol
// Il2CppName: set_RecordProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(::Mono::Security::Protocol::Tls::RecordProtocol*)>(&Mono::Security::Protocol::Tls::Context::set_RecordProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "RecordProtocol")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "set_RecordProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityParameters* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_Negotiating
// Il2CppName: get_Negotiating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityParameters* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_Negotiating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_Negotiating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_Read
// Il2CppName: get_Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityParameters* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::get_Write
// Il2CppName: get_Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityParameters* (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::get_Write)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "get_Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::GetUnixTime
// Il2CppName: GetUnixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::GetUnixTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "GetUnixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::GetSecureRandomBytes
// Il2CppName: GetSecureRandomBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::Context::*)(int)>(&Mono::Security::Protocol::Tls::Context::GetSecureRandomBytes)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "GetSecureRandomBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::ClearKeyInfo
// Il2CppName: ClearKeyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)()>(&Mono::Security::Protocol::Tls::Context::ClearKeyInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "ClearKeyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::DecodeProtocolCode
// Il2CppName: DecodeProtocolCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityProtocolType (Mono::Security::Protocol::Tls::Context::*)(int16_t, bool)>(&Mono::Security::Protocol::Tls::Context::DecodeProtocolCode)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* allowFallback = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "DecodeProtocolCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, allowFallback});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::ChangeProtocol
// Il2CppName: ChangeProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(int16_t)>(&Mono::Security::Protocol::Tls::Context::ChangeProtocol)> {
  static const MethodInfo* get() {
    static auto* protocol = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "ChangeProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocol});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::StartSwitchingSecurityParameters
// Il2CppName: StartSwitchingSecurityParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::StartSwitchingSecurityParameters)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "StartSwitchingSecurityParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::Context::EndSwitchingSecurityParameters
// Il2CppName: EndSwitchingSecurityParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::Context::*)(bool)>(&Mono::Security::Protocol::Tls::Context::EndSwitchingSecurityParameters)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::Context*), "EndSwitchingSecurityParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
