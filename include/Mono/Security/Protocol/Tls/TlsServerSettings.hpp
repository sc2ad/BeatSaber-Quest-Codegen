// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.RSAParameters
#include "System/Security/Cryptography/RSAParameters.hpp"
// Including type: Mono.Security.Protocol.Tls.Handshake.ClientCertificateType
#include "Mono/Security/Protocol/Tls/Handshake/ClientCertificateType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSA
  class RSA;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: TlsServerSettings
  class TlsServerSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::TlsServerSettings);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::TlsServerSettings*, "Mono.Security.Protocol.Tls", "TlsServerSettings");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.TlsServerSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsServerSettings : public ::Il2CppObject {
    public:
    public:
    // private Mono.Security.X509.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x10
    ::Mono::Security::X509::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private System.Security.Cryptography.RSA certificateRSA
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::RSA* certificateRSA;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::RSA*) == 0x8);
    // private System.Security.Cryptography.RSAParameters rsaParameters
    // Size: 0x40
    // Offset: 0x20
    ::System::Security::Cryptography::RSAParameters rsaParameters;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::RSAParameters) == 0x40);
    // private System.Byte[] signedParams
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint8_t> signedParams;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.String[] distinguisedNames
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::StringW> distinguisedNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Boolean serverKeyExchange
    // Size: 0x1
    // Offset: 0x70
    bool serverKeyExchange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean certificateRequest
    // Size: 0x1
    // Offset: 0x71
    bool certificateRequest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: certificateRequest and: certificateTypes
    char __padding6[0x6] = {};
    // private Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] certificateTypes
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType> certificateTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_certificates();
    // Get instance field reference: private System.Security.Cryptography.RSA certificateRSA
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::RSA*& dyn_certificateRSA();
    // Get instance field reference: private System.Security.Cryptography.RSAParameters rsaParameters
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::RSAParameters& dyn_rsaParameters();
    // Get instance field reference: private System.Byte[] signedParams
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_signedParams();
    // Get instance field reference: private System.String[] distinguisedNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_distinguisedNames();
    // Get instance field reference: private System.Boolean serverKeyExchange
    [[deprecated("Use field access instead!")]] bool& dyn_serverKeyExchange();
    // Get instance field reference: private System.Boolean certificateRequest
    [[deprecated("Use field access instead!")]] bool& dyn_certificateRequest();
    // Get instance field reference: private Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] certificateTypes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>& dyn_certificateTypes();
    // public System.Boolean get_ServerKeyExchange()
    // Offset: 0x169D36C
    bool get_ServerKeyExchange();
    // public System.Void set_ServerKeyExchange(System.Boolean value)
    // Offset: 0x169D374
    void set_ServerKeyExchange(bool value);
    // public Mono.Security.X509.X509CertificateCollection get_Certificates()
    // Offset: 0x169D380
    ::Mono::Security::X509::X509CertificateCollection* get_Certificates();
    // public System.Void set_Certificates(Mono.Security.X509.X509CertificateCollection value)
    // Offset: 0x169D388
    void set_Certificates(::Mono::Security::X509::X509CertificateCollection* value);
    // public System.Security.Cryptography.RSA get_CertificateRSA()
    // Offset: 0x169D390
    ::System::Security::Cryptography::RSA* get_CertificateRSA();
    // public System.Security.Cryptography.RSAParameters get_RsaParameters()
    // Offset: 0x169D398
    ::System::Security::Cryptography::RSAParameters get_RsaParameters();
    // public System.Void set_RsaParameters(System.Security.Cryptography.RSAParameters value)
    // Offset: 0x169D3AC
    void set_RsaParameters(::System::Security::Cryptography::RSAParameters value);
    // public System.Byte[] get_SignedParams()
    // Offset: 0x169D3C0
    ::ArrayW<uint8_t> get_SignedParams();
    // public System.Void set_SignedParams(System.Byte[] value)
    // Offset: 0x169D3C8
    void set_SignedParams(::ArrayW<uint8_t> value);
    // public System.Boolean get_CertificateRequest()
    // Offset: 0x169D3D0
    bool get_CertificateRequest();
    // public System.Void set_CertificateRequest(System.Boolean value)
    // Offset: 0x169D3D8
    void set_CertificateRequest(bool value);
    // public Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] get_CertificateTypes()
    // Offset: 0x169D3E4
    ::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType> get_CertificateTypes();
    // public System.Void set_CertificateTypes(Mono.Security.Protocol.Tls.Handshake.ClientCertificateType[] value)
    // Offset: 0x169D3EC
    void set_CertificateTypes(::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType> value);
    // public System.String[] get_DistinguisedNames()
    // Offset: 0x169D3F4
    ::ArrayW<::StringW> get_DistinguisedNames();
    // public System.Void set_DistinguisedNames(System.String[] value)
    // Offset: 0x169D3FC
    void set_DistinguisedNames(::ArrayW<::StringW> value);
    // public System.Void .ctor()
    // Offset: 0x169D404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsServerSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::TlsServerSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsServerSettings*, creationType>()));
    }
    // public System.Void UpdateCertificateRSA()
    // Offset: 0x169D40C
    void UpdateCertificateRSA();
  }; // Mono.Security.Protocol.Tls.TlsServerSettings
  #pragma pack(pop)
  static check_size<sizeof(TlsServerSettings), 120 + sizeof(::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>)> __Mono_Security_Protocol_Tls_TlsServerSettingsSizeCheck;
  static_assert(sizeof(TlsServerSettings) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_ServerKeyExchange
// Il2CppName: get_ServerKeyExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_ServerKeyExchange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_ServerKeyExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_ServerKeyExchange
// Il2CppName: set_ServerKeyExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(bool)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_ServerKeyExchange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_ServerKeyExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_Certificates
// Il2CppName: get_Certificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection* (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_Certificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_Certificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_Certificates
// Il2CppName: set_Certificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_Certificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_Certificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateRSA
// Il2CppName: get_CertificateRSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSA* (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateRSA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_CertificateRSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_RsaParameters
// Il2CppName: get_RsaParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSAParameters (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_RsaParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_RsaParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_RsaParameters
// Il2CppName: set_RsaParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(::System::Security::Cryptography::RSAParameters)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_RsaParameters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSAParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_RsaParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_SignedParams
// Il2CppName: get_SignedParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_SignedParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_SignedParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_SignedParams
// Il2CppName: set_SignedParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_SignedParams)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_SignedParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateRequest
// Il2CppName: get_CertificateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_CertificateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_CertificateRequest
// Il2CppName: set_CertificateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(bool)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_CertificateRequest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_CertificateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateTypes
// Il2CppName: get_CertificateTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType> (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_CertificateTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_CertificateTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_CertificateTypes
// Il2CppName: set_CertificateTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(::ArrayW<::Mono::Security::Protocol::Tls::Handshake::ClientCertificateType>)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_CertificateTypes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "ClientCertificateType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_CertificateTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::get_DistinguisedNames
// Il2CppName: get_DistinguisedNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::get_DistinguisedNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "get_DistinguisedNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::set_DistinguisedNames
// Il2CppName: set_DistinguisedNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)(::ArrayW<::StringW>)>(&Mono::Security::Protocol::Tls::TlsServerSettings::set_DistinguisedNames)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "set_DistinguisedNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::TlsServerSettings::UpdateCertificateRSA
// Il2CppName: UpdateCertificateRSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::TlsServerSettings::*)()>(&Mono::Security::Protocol::Tls::TlsServerSettings::UpdateCertificateRSA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::TlsServerSettings*), "UpdateCertificateRSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
