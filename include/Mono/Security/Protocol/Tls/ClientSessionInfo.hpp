// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: ClientSessionInfo
  class ClientSessionInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::ClientSessionInfo);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::ClientSessionInfo*, "Mono.Security.Protocol.Tls", "ClientSessionInfo");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.ClientSessionInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ClientSessionInfo : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: validuntil
    char __padding0[0x7] = {};
    // private System.DateTime validuntil
    // Size: 0x8
    // Offset: 0x18
    ::System::DateTime validuntil;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.String host
    // Size: 0x8
    // Offset: 0x20
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte[] sid
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> sid;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] masterSecret
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> masterSecret;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 DefaultValidityInterval
    static constexpr const int DefaultValidityInterval = 180;
    // Get static field: static private System.Int32 DefaultValidityInterval
    static int _get_DefaultValidityInterval();
    // Set static field: static private System.Int32 DefaultValidityInterval
    static void _set_DefaultValidityInterval(int value);
    // Get static field: static private readonly System.Int32 ValidityInterval
    static int _get_ValidityInterval();
    // Set static field: static private readonly System.Int32 ValidityInterval
    static void _set_ValidityInterval(int value);
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.DateTime validuntil
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_validuntil();
    // Get instance field reference: private System.String host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_host();
    // Get instance field reference: private System.Byte[] sid
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_sid();
    // Get instance field reference: private System.Byte[] masterSecret
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_masterSecret();
    // public System.String get_HostName()
    // Offset: 0x11056A8
    ::StringW get_HostName();
    // public System.Byte[] get_Id()
    // Offset: 0x11056B0
    ::ArrayW<uint8_t> get_Id();
    // public System.Boolean get_Valid()
    // Offset: 0x1104E38
    bool get_Valid();
    // static private System.Void .cctor()
    // Offset: 0x11054B8
    static void _cctor();
    // public System.Void .ctor(System.String hostname, System.Byte[] id)
    // Offset: 0x110487C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientSessionInfo* New_ctor(::StringW hostname, ::ArrayW<uint8_t> id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::ClientSessionInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientSessionInfo*, creationType>(hostname, id)));
    }
    // public System.Void GetContext(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x11051F4
    void GetContext(::Mono::Security::Protocol::Tls::Context* context);
    // public System.Void SetContext(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x110540C
    void SetContext(::Mono::Security::Protocol::Tls::Context* context);
    // public System.Void KeepAlive()
    // Offset: 0x11048B8
    void KeepAlive();
    // public System.Void Dispose()
    // Offset: 0x110497C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1105608
    void Dispose(bool disposing);
    // private System.Void CheckDisposed()
    // Offset: 0x11056B8
    void CheckDisposed();
    // protected override System.Void Finalize()
    // Offset: 0x110559C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Mono.Security.Protocol.Tls.ClientSessionInfo
  #pragma pack(pop)
  static check_size<sizeof(ClientSessionInfo), 48 + sizeof(::ArrayW<uint8_t>)> __Mono_Security_Protocol_Tls_ClientSessionInfoSizeCheck;
  static_assert(sizeof(ClientSessionInfo) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::get_HostName
// Il2CppName: get_HostName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::get_HostName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "get_HostName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::get_Valid
// Il2CppName: get_Valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::get_Valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "get_Valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::GetContext
// Il2CppName: GetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::ClientSessionInfo::GetContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "GetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::SetContext
// Il2CppName: SetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::ClientSessionInfo::SetContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "SetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::KeepAlive
// Il2CppName: KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)(bool)>(&Mono::Security::Protocol::Tls::ClientSessionInfo::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::CheckDisposed
// Il2CppName: CheckDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::CheckDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "CheckDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionInfo::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::ClientSessionInfo::*)()>(&Mono::Security::Protocol::Tls::ClientSessionInfo::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionInfo*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
