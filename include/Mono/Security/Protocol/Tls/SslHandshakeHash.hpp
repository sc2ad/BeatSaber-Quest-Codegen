// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.HashAlgorithm
#include "System/Security/Cryptography/HashAlgorithm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSA
  class RSA;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: SslHandshakeHash
  class SslHandshakeHash;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::SslHandshakeHash);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::SslHandshakeHash*, "Mono.Security.Protocol.Tls", "SslHandshakeHash");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.SslHandshakeHash
  // [TokenAttribute] Offset: FFFFFFFF
  class SslHandshakeHash : public ::System::Security::Cryptography::HashAlgorithm {
    public:
    // Writing base type padding for base size: 0x25 to desired offset: 0x28
    char ___base_padding[0x3] = {};
    public:
    // private System.Security.Cryptography.HashAlgorithm md5
    // Size: 0x8
    // Offset: 0x28
    ::System::Security::Cryptography::HashAlgorithm* md5;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::HashAlgorithm*) == 0x8);
    // private System.Security.Cryptography.HashAlgorithm sha
    // Size: 0x8
    // Offset: 0x30
    ::System::Security::Cryptography::HashAlgorithm* sha;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::HashAlgorithm*) == 0x8);
    // private System.Boolean hashing
    // Size: 0x1
    // Offset: 0x38
    bool hashing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hashing and: secret
    char __padding2[0x7] = {};
    // private System.Byte[] secret
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> secret;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] innerPadMD5
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> innerPadMD5;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] outerPadMD5
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> outerPadMD5;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] innerPadSHA
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<uint8_t> innerPadSHA;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] outerPadSHA
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint8_t> outerPadSHA;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private System.Security.Cryptography.HashAlgorithm md5
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::HashAlgorithm*& dyn_md5();
    // Get instance field reference: private System.Security.Cryptography.HashAlgorithm sha
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::HashAlgorithm*& dyn_sha();
    // Get instance field reference: private System.Boolean hashing
    [[deprecated("Use field access instead!")]] bool& dyn_hashing();
    // Get instance field reference: private System.Byte[] secret
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_secret();
    // Get instance field reference: private System.Byte[] innerPadMD5
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_innerPadMD5();
    // Get instance field reference: private System.Byte[] outerPadMD5
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_outerPadMD5();
    // Get instance field reference: private System.Byte[] innerPadSHA
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_innerPadSHA();
    // Get instance field reference: private System.Byte[] outerPadSHA
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_outerPadSHA();
    // public System.Void .ctor(System.Byte[] secret)
    // Offset: 0x11069F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslHandshakeHash* New_ctor(::ArrayW<uint8_t> secret) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslHandshakeHash::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslHandshakeHash*, creationType>(secret)));
    }
    // public System.Byte[] CreateSignature(System.Security.Cryptography.RSA rsa)
    // Offset: 0x1106A90
    ::ArrayW<uint8_t> CreateSignature(::System::Security::Cryptography::RSA* rsa);
    // public System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa, System.Byte[] rgbSignature)
    // Offset: 0x110A720
    bool VerifySignature(::System::Security::Cryptography::RSA* rsa, ::ArrayW<uint8_t> rgbSignature);
    // private System.Void initializePad()
    // Offset: 0x1113680
    void initializePad();
    // public override System.Void Initialize()
    // Offset: 0x1113624
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::Initialize()
    void Initialize();
    // protected override System.Byte[] HashFinal()
    // Offset: 0x11137B0
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Byte[] HashAlgorithm::HashFinal()
    ::ArrayW<uint8_t> HashFinal();
    // protected override System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0x1113A68
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    void HashCore(::ArrayW<uint8_t> array, int ibStart, int cbSize);
  }; // Mono.Security.Protocol.Tls.SslHandshakeHash
  #pragma pack(pop)
  static check_size<sizeof(SslHandshakeHash), 96 + sizeof(::ArrayW<uint8_t>)> __Mono_Security_Protocol_Tls_SslHandshakeHashSizeCheck;
  static_assert(sizeof(SslHandshakeHash) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::CreateSignature
// Il2CppName: CreateSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::SslHandshakeHash::*)(::System::Security::Cryptography::RSA*)>(&Mono::Security::Protocol::Tls::SslHandshakeHash::CreateSignature)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "CreateSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslHandshakeHash::*)(::System::Security::Cryptography::RSA*, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::SslHandshakeHash::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    static auto* rgbSignature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa, rgbSignature});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::initializePad
// Il2CppName: initializePad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslHandshakeHash::*)()>(&Mono::Security::Protocol::Tls::SslHandshakeHash::initializePad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "initializePad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslHandshakeHash::*)()>(&Mono::Security::Protocol::Tls::SslHandshakeHash::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::HashFinal
// Il2CppName: HashFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::SslHandshakeHash::*)()>(&Mono::Security::Protocol::Tls::SslHandshakeHash::HashFinal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "HashFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslHandshakeHash::HashCore
// Il2CppName: HashCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslHandshakeHash::*)(::ArrayW<uint8_t>, int, int)>(&Mono::Security::Protocol::Tls::SslHandshakeHash::HashCore)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ibStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cbSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslHandshakeHash*), "HashCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, ibStart, cbSize});
  }
};
