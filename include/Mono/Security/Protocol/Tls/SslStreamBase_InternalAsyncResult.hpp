// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.SslStreamBase
#include "Mono/Security/Protocol/Tls/SslStreamBase.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*, "Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult
  // [TokenAttribute] Offset: FFFFFFFF
  class SslStreamBase::InternalAsyncResult : public ::Il2CppObject/*, public ::System::IAsyncResult*/ {
    public:
    public:
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.AsyncCallback _userCallback
    // Size: 0x8
    // Offset: 0x18
    ::System::AsyncCallback* userCallback;
    // Field size check
    static_assert(sizeof(::System::AsyncCallback*) == 0x8);
    // private System.Object _userState
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* userState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Exception _asyncException
    // Size: 0x8
    // Offset: 0x28
    ::System::Exception* asyncException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Threading.ManualResetEvent handle
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::ManualResetEvent* handle;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private System.Boolean completed
    // Size: 0x1
    // Offset: 0x38
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: completed and: bytesRead
    char __padding5[0x3] = {};
    // private System.Int32 _bytesRead
    // Size: 0x4
    // Offset: 0x3C
    int bytesRead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _fromWrite
    // Size: 0x1
    // Offset: 0x40
    bool fromWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _proceedAfterHandshake
    // Size: 0x1
    // Offset: 0x41
    bool proceedAfterHandshake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: proceedAfterHandshake and: buffer
    char __padding8[0x6] = {};
    // private System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _offset
    // Size: 0x4
    // Offset: 0x50
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x54
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IAsyncResult
    operator ::System::IAsyncResult() noexcept {
      return *reinterpret_cast<::System::IAsyncResult*>(this);
    }
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.AsyncCallback _userCallback
    [[deprecated("Use field access instead!")]] ::System::AsyncCallback*& dyn__userCallback();
    // Get instance field reference: private System.Object _userState
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__userState();
    // Get instance field reference: private System.Exception _asyncException
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__asyncException();
    // Get instance field reference: private System.Threading.ManualResetEvent handle
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_handle();
    // Get instance field reference: private System.Boolean completed
    [[deprecated("Use field access instead!")]] bool& dyn_completed();
    // Get instance field reference: private System.Int32 _bytesRead
    [[deprecated("Use field access instead!")]] int& dyn__bytesRead();
    // Get instance field reference: private System.Boolean _fromWrite
    [[deprecated("Use field access instead!")]] bool& dyn__fromWrite();
    // Get instance field reference: private System.Boolean _proceedAfterHandshake
    [[deprecated("Use field access instead!")]] bool& dyn__proceedAfterHandshake();
    // Get instance field reference: private System.Byte[] _buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__buffer();
    // Get instance field reference: private System.Int32 _offset
    [[deprecated("Use field access instead!")]] int& dyn__offset();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // public System.Boolean get_ProceedAfterHandshake()
    // Offset: 0x169BE44
    bool get_ProceedAfterHandshake();
    // public System.Boolean get_FromWrite()
    // Offset: 0x169BE4C
    bool get_FromWrite();
    // public System.Byte[] get_Buffer()
    // Offset: 0x169BE54
    ::ArrayW<uint8_t> get_Buffer();
    // public System.Int32 get_Offset()
    // Offset: 0x169BE5C
    int get_Offset();
    // public System.Int32 get_Count()
    // Offset: 0x169BE64
    int get_Count();
    // public System.Int32 get_BytesRead()
    // Offset: 0x169BE6C
    int get_BytesRead();
    // public System.Object get_AsyncState()
    // Offset: 0x169BE74
    ::Il2CppObject* get_AsyncState();
    // public System.Exception get_AsyncException()
    // Offset: 0x169BE7C
    ::System::Exception* get_AsyncException();
    // public System.Boolean get_CompletedWithError()
    // Offset: 0x169BE84
    bool get_CompletedWithError();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x169BF68
    ::System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x169C06C
    bool get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x169BEBC
    bool get_IsCompleted();
    // public System.Void .ctor(System.AsyncCallback userCallback, System.Object userState, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Boolean fromWrite, System.Boolean proceedAfterHandshake)
    // Offset: 0x169BD80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslStreamBase::InternalAsyncResult* New_ctor(::System::AsyncCallback* userCallback, ::Il2CppObject* userState, ::ArrayW<uint8_t> buffer, int offset, int count, bool fromWrite, bool proceedAfterHandshake) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslStreamBase::InternalAsyncResult*, creationType>(userCallback, userState, buffer, offset, count, fromWrite, proceedAfterHandshake)));
    }
    // private System.Void SetComplete(System.Exception ex, System.Int32 bytesRead)
    // Offset: 0x169C074
    void SetComplete(::System::Exception* ex, int bytesRead);
    // public System.Void SetComplete(System.Exception ex)
    // Offset: 0x169C188
    void SetComplete(::System::Exception* ex);
    // public System.Void SetComplete(System.Int32 bytesRead)
    // Offset: 0x169C190
    void SetComplete(int bytesRead);
    // public System.Void SetComplete()
    // Offset: 0x169C19C
    void SetComplete();
  }; // Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(SslStreamBase::InternalAsyncResult), 84 + sizeof(int)> __Mono_Security_Protocol_Tls_SslStreamBase_InternalAsyncResultSizeCheck;
  static_assert(sizeof(SslStreamBase::InternalAsyncResult) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_ProceedAfterHandshake
// Il2CppName: get_ProceedAfterHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_ProceedAfterHandshake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_ProceedAfterHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_FromWrite
// Il2CppName: get_FromWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_FromWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_FromWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Offset
// Il2CppName: get_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_BytesRead
// Il2CppName: get_BytesRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_BytesRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_BytesRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncState
// Il2CppName: get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncException
// Il2CppName: get_AsyncException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_AsyncException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_CompletedWithError
// Il2CppName: get_CompletedWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_CompletedWithError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_CompletedWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncWaitHandle
// Il2CppName: get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::WaitHandle* (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_AsyncWaitHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_CompletedSynchronously
// Il2CppName: get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_CompletedSynchronously)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)(::System::Exception*, int)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* bytesRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex, bytesRead});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)(::System::Exception*)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)(int)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete)> {
  static const MethodInfo* get() {
    static auto* bytesRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesRead});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult::SetComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
