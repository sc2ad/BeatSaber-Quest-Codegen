// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.HttpsClientStream
#include "Mono/Security/Protocol/Tls/HttpsClientStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: CertificateSelectionCallback
  class CertificateSelectionCallback;
  // Forward declaring type: PrivateKeySelectionCallback
  class PrivateKeySelectionCallback;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::HttpsClientStream::$$c);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::HttpsClientStream::$$c*, "Mono.Security.Protocol.Tls", "HttpsClientStream/<>c");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.HttpsClientStream/Mono.Security.Protocol.Tls.<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class HttpsClientStream::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Mono.Security.Protocol.Tls.HttpsClientStream/Mono.Security.Protocol.Tls.<>c <>9
    static ::Mono::Security::Protocol::Tls::HttpsClientStream::$$c* _get_$$9();
    // Set static field: static public readonly Mono.Security.Protocol.Tls.HttpsClientStream/Mono.Security.Protocol.Tls.<>c <>9
    static void _set_$$9(::Mono::Security::Protocol::Tls::HttpsClientStream::$$c* value);
    // Get static field: static public Mono.Security.Protocol.Tls.CertificateSelectionCallback <>9__2_0
    static ::Mono::Security::Protocol::Tls::CertificateSelectionCallback* _get_$$9__2_0();
    // Set static field: static public Mono.Security.Protocol.Tls.CertificateSelectionCallback <>9__2_0
    static void _set_$$9__2_0(::Mono::Security::Protocol::Tls::CertificateSelectionCallback* value);
    // Get static field: static public Mono.Security.Protocol.Tls.PrivateKeySelectionCallback <>9__2_1
    static ::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* _get_$$9__2_1();
    // Set static field: static public Mono.Security.Protocol.Tls.PrivateKeySelectionCallback <>9__2_1
    static void _set_$$9__2_1(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* value);
    // static private System.Void .cctor()
    // Offset: 0x110D0A8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x110D10C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpsClientStream::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::HttpsClientStream::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpsClientStream::$$c*, creationType>()));
    }
    // System.Security.Cryptography.X509Certificates.X509Certificate <.ctor>b__2_0(System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCerts, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection serverRequestedCertificates)
    // Offset: 0x110D114
    ::System::Security::Cryptography::X509Certificates::X509Certificate* $_ctor$b__2_0(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCerts, ::System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* serverRequestedCertificates);
    // System.Security.Cryptography.AsymmetricAlgorithm <.ctor>b__2_1(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    // Offset: 0x110D160
    ::System::Security::Cryptography::AsymmetricAlgorithm* $_ctor$b__2_1(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::StringW targetHost);
  }; // Mono.Security.Protocol.Tls.HttpsClientStream/Mono.Security.Protocol.Tls.<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::HttpsClientStream::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::HttpsClientStream::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::$$c::$_ctor$b__2_0
// Il2CppName: <.ctor>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::HttpsClientStream::$$c::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::HttpsClientStream::$$c::$_ctor$b__2_0)> {
  static const MethodInfo* get() {
    static auto* clientCerts = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* serverCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverRequestedCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::HttpsClientStream::$$c*), "<.ctor>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCerts, serverCertificate, targetHost, serverRequestedCertificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::HttpsClientStream::$$c::$_ctor$b__2_1
// Il2CppName: <.ctor>b__2_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::Protocol::Tls::HttpsClientStream::$$c::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW)>(&Mono::Security::Protocol::Tls::HttpsClientStream::$$c::$_ctor$b__2_1)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::HttpsClientStream::$$c*), "<.ctor>b__2_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, targetHost});
  }
};
