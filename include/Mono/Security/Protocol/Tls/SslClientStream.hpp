// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.SslStreamBase
#include "Mono/Security/Protocol/Tls/SslStreamBase.hpp"
// Including type: Mono.Security.Protocol.Tls.SecurityProtocolType
#include "Mono/Security/Protocol/Tls/SecurityProtocolType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: CertificateValidationCallback
  class CertificateValidationCallback;
  // Forward declaring type: CertificateSelectionCallback
  class CertificateSelectionCallback;
  // Forward declaring type: PrivateKeySelectionCallback
  class PrivateKeySelectionCallback;
  // Forward declaring type: CertificateValidationCallback2
  class CertificateValidationCallback2;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: ValidationResult
  class ValidationResult;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: SslClientStream
  class SslClientStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::SslClientStream);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::SslClientStream*, "Mono.Security.Protocol.Tls", "SslClientStream");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.SslClientStream
  // [TokenAttribute] Offset: FFFFFFFF
  class SslClientStream : public ::Mono::Security::Protocol::Tls::SslStreamBase {
    public:
    // Nested type: ::Mono::Security::Protocol::Tls::SslClientStream::NegotiateState
    struct NegotiateState;
    // Nested type: ::Mono::Security::Protocol::Tls::SslClientStream::NegotiateAsyncResult
    class NegotiateAsyncResult;
    public:
    // private Mono.Security.Protocol.Tls.CertificateValidationCallback ServerCertValidation
    // Size: 0x8
    // Offset: 0x80
    ::Mono::Security::Protocol::Tls::CertificateValidationCallback* ServerCertValidation;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CertificateValidationCallback*) == 0x8);
    // private Mono.Security.Protocol.Tls.CertificateSelectionCallback ClientCertSelection
    // Size: 0x8
    // Offset: 0x88
    ::Mono::Security::Protocol::Tls::CertificateSelectionCallback* ClientCertSelection;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CertificateSelectionCallback*) == 0x8);
    // private Mono.Security.Protocol.Tls.PrivateKeySelectionCallback PrivateKeySelection
    // Size: 0x8
    // Offset: 0x90
    ::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* PrivateKeySelection;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback*) == 0x8);
    // private Mono.Security.Protocol.Tls.CertificateValidationCallback2 ServerCertValidation2
    // Size: 0x8
    // Offset: 0x98
    ::Mono::Security::Protocol::Tls::CertificateValidationCallback2* ServerCertValidation2;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CertificateValidationCallback2*) == 0x8);
    public:
    // Get instance field reference: private Mono.Security.Protocol.Tls.CertificateValidationCallback ServerCertValidation
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CertificateValidationCallback*& dyn_ServerCertValidation();
    // Get instance field reference: private Mono.Security.Protocol.Tls.CertificateSelectionCallback ClientCertSelection
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CertificateSelectionCallback*& dyn_ClientCertSelection();
    // Get instance field reference: private Mono.Security.Protocol.Tls.PrivateKeySelectionCallback PrivateKeySelection
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback*& dyn_PrivateKeySelection();
    // Get instance field reference: private Mono.Security.Protocol.Tls.CertificateValidationCallback2 ServerCertValidation2
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CertificateValidationCallback2*& dyn_ServerCertValidation2();
    // System.IO.Stream get_InputBuffer()
    // Offset: 0x1111AB8
    ::System::IO::Stream* get_InputBuffer();
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x1111AC0
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_SelectedClientCertificate()
    // Offset: 0x1111AE8
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_SelectedClientCertificate();
    // public Mono.Security.Protocol.Tls.CertificateValidationCallback get_ServerCertValidationDelegate()
    // Offset: 0x1111B10
    ::Mono::Security::Protocol::Tls::CertificateValidationCallback* get_ServerCertValidationDelegate();
    // public System.Void set_ServerCertValidationDelegate(Mono.Security.Protocol.Tls.CertificateValidationCallback value)
    // Offset: 0x1111B18
    void set_ServerCertValidationDelegate(::Mono::Security::Protocol::Tls::CertificateValidationCallback* value);
    // public Mono.Security.Protocol.Tls.CertificateSelectionCallback get_ClientCertSelectionDelegate()
    // Offset: 0x1111B20
    ::Mono::Security::Protocol::Tls::CertificateSelectionCallback* get_ClientCertSelectionDelegate();
    // public System.Void set_ClientCertSelectionDelegate(Mono.Security.Protocol.Tls.CertificateSelectionCallback value)
    // Offset: 0x1111B28
    void set_ClientCertSelectionDelegate(::Mono::Security::Protocol::Tls::CertificateSelectionCallback* value);
    // public Mono.Security.Protocol.Tls.PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate()
    // Offset: 0x1111B30
    ::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* get_PrivateKeyCertSelectionDelegate();
    // public System.Void set_PrivateKeyCertSelectionDelegate(Mono.Security.Protocol.Tls.PrivateKeySelectionCallback value)
    // Offset: 0x1111B38
    void set_PrivateKeyCertSelectionDelegate(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* value);
    // System.Void add_ServerCertValidation(Mono.Security.Protocol.Tls.CertificateValidationCallback value)
    // Offset: 0x1111828
    void add_ServerCertValidation(::Mono::Security::Protocol::Tls::CertificateValidationCallback* value);
    // System.Void remove_ServerCertValidation(Mono.Security.Protocol.Tls.CertificateValidationCallback value)
    // Offset: 0x11118CC
    void remove_ServerCertValidation(::Mono::Security::Protocol::Tls::CertificateValidationCallback* value);
    // System.Void add_ClientCertSelection(Mono.Security.Protocol.Tls.CertificateSelectionCallback value)
    // Offset: 0x110CC54
    void add_ClientCertSelection(::Mono::Security::Protocol::Tls::CertificateSelectionCallback* value);
    // System.Void remove_ClientCertSelection(Mono.Security.Protocol.Tls.CertificateSelectionCallback value)
    // Offset: 0x1111970
    void remove_ClientCertSelection(::Mono::Security::Protocol::Tls::CertificateSelectionCallback* value);
    // System.Void add_PrivateKeySelection(Mono.Security.Protocol.Tls.PrivateKeySelectionCallback value)
    // Offset: 0x110CD08
    void add_PrivateKeySelection(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* value);
    // System.Void remove_PrivateKeySelection(Mono.Security.Protocol.Tls.PrivateKeySelectionCallback value)
    // Offset: 0x1111A14
    void remove_PrivateKeySelection(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* value);
    // public System.Void add_ServerCertValidation2(Mono.Security.Protocol.Tls.CertificateValidationCallback2 value)
    // Offset: 0x1111B40
    void add_ServerCertValidation2(::Mono::Security::Protocol::Tls::CertificateValidationCallback2* value);
    // public System.Void remove_ServerCertValidation2(Mono.Security.Protocol.Tls.CertificateValidationCallback2 value)
    // Offset: 0x1111BE4
    void remove_ServerCertValidation2(::Mono::Security::Protocol::Tls::CertificateValidationCallback2* value);
    // public System.Void .ctor(System.IO.Stream stream, System.String targetHost, System.Boolean ownsStream)
    // Offset: 0x1111C88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientStream* New_ctor(::System::IO::Stream* stream, ::StringW targetHost, bool ownsStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientStream*, creationType>(stream, targetHost, ownsStream)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.String targetHost, System.Security.Cryptography.X509Certificates.X509Certificate clientCertificate)
    // Offset: 0x1111C98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientStream* New_ctor(::System::IO::Stream* stream, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509Certificate* clientCertificate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientStream*, creationType>(stream, targetHost, clientCertificate)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates)
    // Offset: 0x1111D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientStream* New_ctor(::System::IO::Stream* stream, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientStream*, creationType>(stream, targetHost, clientCertificates)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.String targetHost, System.Boolean ownsStream, Mono.Security.Protocol.Tls.SecurityProtocolType securityProtocolType)
    // Offset: 0x1111D98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientStream* New_ctor(::System::IO::Stream* stream, ::StringW targetHost, bool ownsStream, ::Mono::Security::Protocol::Tls::SecurityProtocolType securityProtocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientStream*, creationType>(stream, targetHost, ownsStream, securityProtocolType)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.String targetHost, System.Boolean ownsStream, Mono.Security.Protocol.Tls.SecurityProtocolType securityProtocolType, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates)
    // Offset: 0x110CAE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientStream* New_ctor(::System::IO::Stream* stream, ::StringW targetHost, bool ownsStream, ::Mono::Security::Protocol::Tls::SecurityProtocolType securityProtocolType, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslClientStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientStream*, creationType>(stream, targetHost, ownsStream, securityProtocolType, clientCertificates)));
    }
    // private System.Void SafeEndReceiveRecord(System.IAsyncResult ar, System.Boolean ignoreEmpty)
    // Offset: 0x1112298
    void SafeEndReceiveRecord(::System::IAsyncResult* ar, bool ignoreEmpty);
    // private System.Void NegotiateAsyncWorker(System.IAsyncResult result)
    // Offset: 0x11127D8
    void NegotiateAsyncWorker(::System::IAsyncResult* result);
    // System.Boolean RaiseServerCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] certificateErrors)
    // Offset: 0x111358C
    bool RaiseServerCertificateValidation(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::ArrayW<int> certificateErrors);
    // Mono.Security.Interface.ValidationResult RaiseServerCertificateValidation2(Mono.Security.X509.X509CertificateCollection collection)
    // Offset: 0x11135AC
    ::Mono::Security::Interface::ValidationResult* RaiseServerCertificateValidation2(::Mono::Security::X509::X509CertificateCollection* collection);
    // System.Security.Cryptography.X509Certificates.X509Certificate RaiseClientCertificateSelection(System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection serverRequestedCertificates)
    // Offset: 0x11062D4
    ::System::Security::Cryptography::X509Certificates::X509Certificate* RaiseClientCertificateSelection(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, ::System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* serverRequestedCertificates);
    // System.Security.Cryptography.AsymmetricAlgorithm RaisePrivateKeySelection(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    // Offset: 0x11069E4
    ::System::Security::Cryptography::AsymmetricAlgorithm* RaisePrivateKeySelection(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::StringW targetHost);
    // override System.Boolean get_HaveRemoteValidation2Callback()
    // Offset: 0x1113544
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Boolean SslStreamBase::get_HaveRemoteValidation2Callback()
    bool get_HaveRemoteValidation2Callback();
    // protected override System.Void Finalize()
    // Offset: 0x1112030
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Void SslStreamBase::Finalize()
    void Finalize();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1112264
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Void SslStreamBase::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // override System.IAsyncResult BeginNegotiateHandshake(System.AsyncCallback callback, System.Object state)
    // Offset: 0x111234C
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.IAsyncResult SslStreamBase::BeginNegotiateHandshake(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginNegotiateHandshake(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // override System.Void EndNegotiateHandshake(System.IAsyncResult result)
    // Offset: 0x11124F0
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Void SslStreamBase::EndNegotiateHandshake(System.IAsyncResult result)
    void EndNegotiateHandshake(::System::IAsyncResult* result);
    // override System.Security.Cryptography.X509Certificates.X509Certificate OnLocalCertificateSelection(System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection serverRequestedCertificates)
    // Offset: 0x1113530
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Security.Cryptography.X509Certificates.X509Certificate SslStreamBase::OnLocalCertificateSelection(System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection serverRequestedCertificates)
    ::System::Security::Cryptography::X509Certificates::X509Certificate* OnLocalCertificateSelection(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, ::System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* serverRequestedCertificates);
    // override Mono.Security.Interface.ValidationResult OnRemoteCertificateValidation2(Mono.Security.X509.X509CertificateCollection collection)
    // Offset: 0x1113554
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: Mono.Security.Interface.ValidationResult SslStreamBase::OnRemoteCertificateValidation2(Mono.Security.X509.X509CertificateCollection collection)
    ::Mono::Security::Interface::ValidationResult* OnRemoteCertificateValidation2(::Mono::Security::X509::X509CertificateCollection* collection);
    // override System.Boolean OnRemoteCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] errors)
    // Offset: 0x1113564
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Boolean SslStreamBase::OnRemoteCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] errors)
    bool OnRemoteCertificateValidation(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::ArrayW<int> errors);
    // override System.Security.Cryptography.AsymmetricAlgorithm OnLocalPrivateKeySelection(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    // Offset: 0x11135DC
    // Implemented from: Mono.Security.Protocol.Tls.SslStreamBase
    // Base method: System.Security.Cryptography.AsymmetricAlgorithm SslStreamBase::OnLocalPrivateKeySelection(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    ::System::Security::Cryptography::AsymmetricAlgorithm* OnLocalPrivateKeySelection(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::StringW targetHost);
  }; // Mono.Security.Protocol.Tls.SslClientStream
  #pragma pack(pop)
  static check_size<sizeof(SslClientStream), 152 + sizeof(::Mono::Security::Protocol::Tls::CertificateValidationCallback2*)> __Mono_Security_Protocol_Tls_SslClientStreamSizeCheck;
  static_assert(sizeof(SslClientStream) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_InputBuffer
// Il2CppName: get_InputBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_InputBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_InputBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_SelectedClientCertificate
// Il2CppName: get_SelectedClientCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_SelectedClientCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_SelectedClientCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_ServerCertValidationDelegate
// Il2CppName: get_ServerCertValidationDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::CertificateValidationCallback* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_ServerCertValidationDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_ServerCertValidationDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::set_ServerCertValidationDelegate
// Il2CppName: set_ServerCertValidationDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateValidationCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::set_ServerCertValidationDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "set_ServerCertValidationDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_ClientCertSelectionDelegate
// Il2CppName: get_ClientCertSelectionDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::CertificateSelectionCallback* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_ClientCertSelectionDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_ClientCertSelectionDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::set_ClientCertSelectionDelegate
// Il2CppName: set_ClientCertSelectionDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateSelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::set_ClientCertSelectionDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateSelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "set_ClientCertSelectionDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_PrivateKeyCertSelectionDelegate
// Il2CppName: get_PrivateKeyCertSelectionDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback* (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_PrivateKeyCertSelectionDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_PrivateKeyCertSelectionDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::set_PrivateKeyCertSelectionDelegate
// Il2CppName: set_PrivateKeyCertSelectionDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::set_PrivateKeyCertSelectionDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "PrivateKeySelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "set_PrivateKeyCertSelectionDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::add_ServerCertValidation
// Il2CppName: add_ServerCertValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateValidationCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::add_ServerCertValidation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "add_ServerCertValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::remove_ServerCertValidation
// Il2CppName: remove_ServerCertValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateValidationCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::remove_ServerCertValidation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "remove_ServerCertValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::add_ClientCertSelection
// Il2CppName: add_ClientCertSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateSelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::add_ClientCertSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateSelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "add_ClientCertSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::remove_ClientCertSelection
// Il2CppName: remove_ClientCertSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateSelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::remove_ClientCertSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateSelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "remove_ClientCertSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::add_PrivateKeySelection
// Il2CppName: add_PrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::add_PrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "PrivateKeySelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "add_PrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::remove_PrivateKeySelection
// Il2CppName: remove_PrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::PrivateKeySelectionCallback*)>(&Mono::Security::Protocol::Tls::SslClientStream::remove_PrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "PrivateKeySelectionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "remove_PrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::add_ServerCertValidation2
// Il2CppName: add_ServerCertValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateValidationCallback2*)>(&Mono::Security::Protocol::Tls::SslClientStream::add_ServerCertValidation2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateValidationCallback2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "add_ServerCertValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::remove_ServerCertValidation2
// Il2CppName: remove_ServerCertValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::Protocol::Tls::CertificateValidationCallback2*)>(&Mono::Security::Protocol::Tls::SslClientStream::remove_ServerCertValidation2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "CertificateValidationCallback2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "remove_ServerCertValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::SafeEndReceiveRecord
// Il2CppName: SafeEndReceiveRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::IAsyncResult*, bool)>(&Mono::Security::Protocol::Tls::SslClientStream::SafeEndReceiveRecord)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* ignoreEmpty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "SafeEndReceiveRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar, ignoreEmpty});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::NegotiateAsyncWorker
// Il2CppName: NegotiateAsyncWorker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslClientStream::NegotiateAsyncWorker)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "NegotiateAsyncWorker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::RaiseServerCertificateValidation
// Il2CppName: RaiseServerCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<int>)>(&Mono::Security::Protocol::Tls::SslClientStream::RaiseServerCertificateValidation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* certificateErrors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "RaiseServerCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, certificateErrors});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::RaiseServerCertificateValidation2
// Il2CppName: RaiseServerCertificateValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::ValidationResult* (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslClientStream::RaiseServerCertificateValidation2)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "RaiseServerCertificateValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::RaiseClientCertificateSelection
// Il2CppName: RaiseClientCertificateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslClientStream::RaiseClientCertificateSelection)> {
  static const MethodInfo* get() {
    static auto* clientCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* serverCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverRequestedCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "RaiseClientCertificateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCertificates, serverCertificate, targetHost, serverRequestedCertificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::RaisePrivateKeySelection
// Il2CppName: RaisePrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW)>(&Mono::Security::Protocol::Tls::SslClientStream::RaisePrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "RaisePrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, targetHost});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::get_HaveRemoteValidation2Callback
// Il2CppName: get_HaveRemoteValidation2Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::get_HaveRemoteValidation2Callback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "get_HaveRemoteValidation2Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)()>(&Mono::Security::Protocol::Tls::SslClientStream::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(bool)>(&Mono::Security::Protocol::Tls::SslClientStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::BeginNegotiateHandshake
// Il2CppName: BeginNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::SslClientStream::BeginNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "BeginNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::EndNegotiateHandshake
// Il2CppName: EndNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslClientStream::EndNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "EndNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::OnLocalCertificateSelection
// Il2CppName: OnLocalCertificateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslClientStream::OnLocalCertificateSelection)> {
  static const MethodInfo* get() {
    static auto* clientCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* serverCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverRequestedCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "OnLocalCertificateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCertificates, serverCertificate, targetHost, serverRequestedCertificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::OnRemoteCertificateValidation2
// Il2CppName: OnRemoteCertificateValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::ValidationResult* (Mono::Security::Protocol::Tls::SslClientStream::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslClientStream::OnRemoteCertificateValidation2)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "OnRemoteCertificateValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::OnRemoteCertificateValidation
// Il2CppName: OnRemoteCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<int>)>(&Mono::Security::Protocol::Tls::SslClientStream::OnRemoteCertificateValidation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* errors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "OnRemoteCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, errors});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslClientStream::OnLocalPrivateKeySelection
// Il2CppName: OnLocalPrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::Protocol::Tls::SslClientStream::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW)>(&Mono::Security::Protocol::Tls::SslClientStream::OnLocalPrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslClientStream*), "OnLocalPrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, targetHost});
  }
};
