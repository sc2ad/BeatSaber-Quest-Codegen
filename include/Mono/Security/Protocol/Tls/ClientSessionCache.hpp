// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: ClientSessionInfo
  class ClientSessionInfo;
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: ClientSessionCache
  class ClientSessionCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::ClientSessionCache);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::ClientSessionCache*, "Mono.Security.Protocol.Tls", "ClientSessionCache");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.ClientSessionCache
  // [TokenAttribute] Offset: FFFFFFFF
  class ClientSessionCache : public ::Il2CppObject {
    public:
    // Get static field: static private System.Collections.Hashtable cache
    static ::System::Collections::Hashtable* _get_cache();
    // Set static field: static private System.Collections.Hashtable cache
    static void _set_cache(::System::Collections::Hashtable* value);
    // Get static field: static private System.Object locker
    static ::Il2CppObject* _get_locker();
    // Set static field: static private System.Object locker
    static void _set_locker(::Il2CppObject* value);
    // static private System.Void .cctor()
    // Offset: 0x11044C0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x11054B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientSessionCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::ClientSessionCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientSessionCache*, creationType>()));
    }
    // static public System.Void Add(System.String host, System.Byte[] id)
    // Offset: 0x1104554
    static void Add(::StringW host, ::ArrayW<uint8_t> id);
    // static public System.Byte[] FromHost(System.String host)
    // Offset: 0x11049F0
    static ::ArrayW<uint8_t> FromHost(::StringW host);
    // static private Mono.Security.Protocol.Tls.ClientSessionInfo FromContext(Mono.Security.Protocol.Tls.Context context, System.Boolean checkValidity)
    // Offset: 0x1104EC8
    static ::Mono::Security::Protocol::Tls::ClientSessionInfo* FromContext(::Mono::Security::Protocol::Tls::Context* context, bool checkValidity);
    // static public System.Boolean SetContextInCache(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x1105078
    static bool SetContextInCache(::Mono::Security::Protocol::Tls::Context* context);
    // static public System.Boolean SetContextFromCache(Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x1105290
    static bool SetContextFromCache(::Mono::Security::Protocol::Tls::Context* context);
  }; // Mono.Security.Protocol.Tls.ClientSessionCache
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::ClientSessionCache::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::ClientSessionCache::Add)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* id = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, id});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::FromHost
// Il2CppName: FromHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&Mono::Security::Protocol::Tls::ClientSessionCache::FromHost)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), "FromHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::FromContext
// Il2CppName: FromContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::ClientSessionInfo* (*)(::Mono::Security::Protocol::Tls::Context*, bool)>(&Mono::Security::Protocol::Tls::ClientSessionCache::FromContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    static auto* checkValidity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), "FromContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, checkValidity});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::SetContextInCache
// Il2CppName: SetContextInCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::ClientSessionCache::SetContextInCache)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), "SetContextInCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::ClientSessionCache::SetContextFromCache
// Il2CppName: SetContextFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::ClientSessionCache::SetContextFromCache)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::ClientSessionCache*), "SetContextFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
