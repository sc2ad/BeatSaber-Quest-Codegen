// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Protocol.Tls.CipherAlgorithmType
#include "Mono/Security/Protocol/Tls/CipherAlgorithmType.hpp"
// Including type: Mono.Security.Protocol.Tls.HashAlgorithmType
#include "Mono/Security/Protocol/Tls/HashAlgorithmType.hpp"
// Including type: Mono.Security.Protocol.Tls.ExchangeAlgorithmType
#include "Mono/Security/Protocol/Tls/ExchangeAlgorithmType.hpp"
// Including type: System.Security.Cryptography.CipherMode
#include "System/Security/Cryptography/CipherMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
  // Forward declaring type: ContentType
  struct ContentType;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: SymmetricAlgorithm
  class SymmetricAlgorithm;
  // Forward declaring type: ICryptoTransform
  class ICryptoTransform;
  // Forward declaring type: KeyedHashAlgorithm
  class KeyedHashAlgorithm;
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: CipherSuite
  class CipherSuite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::CipherSuite);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::CipherSuite*, "Mono.Security.Protocol.Tls", "CipherSuite");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.CipherSuite
  // [TokenAttribute] Offset: FFFFFFFF
  class CipherSuite : public ::Il2CppObject {
    public:
    public:
    // private System.Int16 code
    // Size: 0x2
    // Offset: 0x10
    int16_t code;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: code and: name
    char __padding0[0x6] = {};
    // private System.String name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Mono.Security.Protocol.Tls.CipherAlgorithmType cipherAlgorithmType
    // Size: 0x4
    // Offset: 0x20
    ::Mono::Security::Protocol::Tls::CipherAlgorithmType cipherAlgorithmType;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::CipherAlgorithmType) == 0x4);
    // private Mono.Security.Protocol.Tls.HashAlgorithmType hashAlgorithmType
    // Size: 0x4
    // Offset: 0x24
    ::Mono::Security::Protocol::Tls::HashAlgorithmType hashAlgorithmType;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::HashAlgorithmType) == 0x4);
    // private Mono.Security.Protocol.Tls.ExchangeAlgorithmType exchangeAlgorithmType
    // Size: 0x4
    // Offset: 0x28
    ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType exchangeAlgorithmType;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::ExchangeAlgorithmType) == 0x4);
    // private System.Boolean isExportable
    // Size: 0x1
    // Offset: 0x2C
    bool isExportable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isExportable and: cipherMode
    char __padding5[0x3] = {};
    // private System.Security.Cryptography.CipherMode cipherMode
    // Size: 0x4
    // Offset: 0x30
    ::System::Security::Cryptography::CipherMode cipherMode;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::CipherMode) == 0x4);
    // private System.Byte keyMaterialSize
    // Size: 0x1
    // Offset: 0x34
    uint8_t keyMaterialSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: keyMaterialSize and: keyBlockSize
    char __padding7[0x3] = {};
    // private System.Int32 keyBlockSize
    // Size: 0x4
    // Offset: 0x38
    int keyBlockSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte expandedKeyMaterialSize
    // Size: 0x1
    // Offset: 0x3C
    uint8_t expandedKeyMaterialSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: expandedKeyMaterialSize and: effectiveKeyBits
    char __padding9[0x1] = {};
    // private System.Int16 effectiveKeyBits
    // Size: 0x2
    // Offset: 0x3E
    int16_t effectiveKeyBits;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Byte ivSize
    // Size: 0x1
    // Offset: 0x40
    uint8_t ivSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte blockSize
    // Size: 0x1
    // Offset: 0x41
    uint8_t blockSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: blockSize and: context
    char __padding12[0x6] = {};
    // private Mono.Security.Protocol.Tls.Context context
    // Size: 0x8
    // Offset: 0x48
    ::Mono::Security::Protocol::Tls::Context* context;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Context*) == 0x8);
    // private System.Security.Cryptography.SymmetricAlgorithm encryptionAlgorithm
    // Size: 0x8
    // Offset: 0x50
    ::System::Security::Cryptography::SymmetricAlgorithm* encryptionAlgorithm;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::SymmetricAlgorithm*) == 0x8);
    // private System.Security.Cryptography.ICryptoTransform encryptionCipher
    // Size: 0x8
    // Offset: 0x58
    ::System::Security::Cryptography::ICryptoTransform* encryptionCipher;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::ICryptoTransform*) == 0x8);
    // private System.Security.Cryptography.SymmetricAlgorithm decryptionAlgorithm
    // Size: 0x8
    // Offset: 0x60
    ::System::Security::Cryptography::SymmetricAlgorithm* decryptionAlgorithm;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::SymmetricAlgorithm*) == 0x8);
    // private System.Security.Cryptography.ICryptoTransform decryptionCipher
    // Size: 0x8
    // Offset: 0x68
    ::System::Security::Cryptography::ICryptoTransform* decryptionCipher;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::ICryptoTransform*) == 0x8);
    // private System.Security.Cryptography.KeyedHashAlgorithm clientHMAC
    // Size: 0x8
    // Offset: 0x70
    ::System::Security::Cryptography::KeyedHashAlgorithm* clientHMAC;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::KeyedHashAlgorithm*) == 0x8);
    // private System.Security.Cryptography.KeyedHashAlgorithm serverHMAC
    // Size: 0x8
    // Offset: 0x78
    ::System::Security::Cryptography::KeyedHashAlgorithm* serverHMAC;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::KeyedHashAlgorithm*) == 0x8);
    public:
    // Get static field: static public System.Byte[] EmptyArray
    static ::ArrayW<uint8_t> _get_EmptyArray();
    // Set static field: static public System.Byte[] EmptyArray
    static void _set_EmptyArray(::ArrayW<uint8_t> value);
    // Get instance field reference: private System.Int16 code
    [[deprecated("Use field access instead!")]] int16_t& dyn_code();
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private Mono.Security.Protocol.Tls.CipherAlgorithmType cipherAlgorithmType
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::CipherAlgorithmType& dyn_cipherAlgorithmType();
    // Get instance field reference: private Mono.Security.Protocol.Tls.HashAlgorithmType hashAlgorithmType
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::HashAlgorithmType& dyn_hashAlgorithmType();
    // Get instance field reference: private Mono.Security.Protocol.Tls.ExchangeAlgorithmType exchangeAlgorithmType
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType& dyn_exchangeAlgorithmType();
    // Get instance field reference: private System.Boolean isExportable
    [[deprecated("Use field access instead!")]] bool& dyn_isExportable();
    // Get instance field reference: private System.Security.Cryptography.CipherMode cipherMode
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::CipherMode& dyn_cipherMode();
    // Get instance field reference: private System.Byte keyMaterialSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_keyMaterialSize();
    // Get instance field reference: private System.Int32 keyBlockSize
    [[deprecated("Use field access instead!")]] int& dyn_keyBlockSize();
    // Get instance field reference: private System.Byte expandedKeyMaterialSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_expandedKeyMaterialSize();
    // Get instance field reference: private System.Int16 effectiveKeyBits
    [[deprecated("Use field access instead!")]] int16_t& dyn_effectiveKeyBits();
    // Get instance field reference: private System.Byte ivSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ivSize();
    // Get instance field reference: private System.Byte blockSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_blockSize();
    // Get instance field reference: private Mono.Security.Protocol.Tls.Context context
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Context*& dyn_context();
    // Get instance field reference: private System.Security.Cryptography.SymmetricAlgorithm encryptionAlgorithm
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::SymmetricAlgorithm*& dyn_encryptionAlgorithm();
    // Get instance field reference: private System.Security.Cryptography.ICryptoTransform encryptionCipher
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::ICryptoTransform*& dyn_encryptionCipher();
    // Get instance field reference: private System.Security.Cryptography.SymmetricAlgorithm decryptionAlgorithm
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::SymmetricAlgorithm*& dyn_decryptionAlgorithm();
    // Get instance field reference: private System.Security.Cryptography.ICryptoTransform decryptionCipher
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::ICryptoTransform*& dyn_decryptionCipher();
    // Get instance field reference: private System.Security.Cryptography.KeyedHashAlgorithm clientHMAC
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::KeyedHashAlgorithm*& dyn_clientHMAC();
    // Get instance field reference: private System.Security.Cryptography.KeyedHashAlgorithm serverHMAC
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::KeyedHashAlgorithm*& dyn_serverHMAC();
    // protected System.Security.Cryptography.ICryptoTransform get_EncryptionCipher()
    // Offset: 0x1101380
    ::System::Security::Cryptography::ICryptoTransform* get_EncryptionCipher();
    // protected System.Security.Cryptography.ICryptoTransform get_DecryptionCipher()
    // Offset: 0x1101388
    ::System::Security::Cryptography::ICryptoTransform* get_DecryptionCipher();
    // protected System.Security.Cryptography.KeyedHashAlgorithm get_ClientHMAC()
    // Offset: 0x1101390
    ::System::Security::Cryptography::KeyedHashAlgorithm* get_ClientHMAC();
    // protected System.Security.Cryptography.KeyedHashAlgorithm get_ServerHMAC()
    // Offset: 0x1101398
    ::System::Security::Cryptography::KeyedHashAlgorithm* get_ServerHMAC();
    // public Mono.Security.Protocol.Tls.CipherAlgorithmType get_CipherAlgorithmType()
    // Offset: 0x11013A0
    ::Mono::Security::Protocol::Tls::CipherAlgorithmType get_CipherAlgorithmType();
    // public System.String get_HashAlgorithmName()
    // Offset: 0x11013A8
    ::StringW get_HashAlgorithmName();
    // public Mono.Security.Protocol.Tls.HashAlgorithmType get_HashAlgorithmType()
    // Offset: 0x110144C
    ::Mono::Security::Protocol::Tls::HashAlgorithmType get_HashAlgorithmType();
    // public System.Int32 get_HashSize()
    // Offset: 0x1101454
    int get_HashSize();
    // public Mono.Security.Protocol.Tls.ExchangeAlgorithmType get_ExchangeAlgorithmType()
    // Offset: 0x1101474
    ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType get_ExchangeAlgorithmType();
    // public System.Security.Cryptography.CipherMode get_CipherMode()
    // Offset: 0x110147C
    ::System::Security::Cryptography::CipherMode get_CipherMode();
    // public System.Int16 get_Code()
    // Offset: 0x1101484
    int16_t get_Code();
    // public System.String get_Name()
    // Offset: 0x110148C
    ::StringW get_Name();
    // public System.Boolean get_IsExportable()
    // Offset: 0x1101494
    bool get_IsExportable();
    // public System.Byte get_KeyMaterialSize()
    // Offset: 0x110149C
    uint8_t get_KeyMaterialSize();
    // public System.Int32 get_KeyBlockSize()
    // Offset: 0x11014A4
    int get_KeyBlockSize();
    // public System.Byte get_ExpandedKeyMaterialSize()
    // Offset: 0x11014AC
    uint8_t get_ExpandedKeyMaterialSize();
    // public System.Int16 get_EffectiveKeyBits()
    // Offset: 0x11014B4
    int16_t get_EffectiveKeyBits();
    // public System.Byte get_IvSize()
    // Offset: 0x11014BC
    uint8_t get_IvSize();
    // public Mono.Security.Protocol.Tls.Context get_Context()
    // Offset: 0x11014C4
    ::Mono::Security::Protocol::Tls::Context* get_Context();
    // public System.Void set_Context(Mono.Security.Protocol.Tls.Context value)
    // Offset: 0x11014CC
    void set_Context(::Mono::Security::Protocol::Tls::Context* value);
    // public System.Void .ctor(System.Int16 code, System.String name, Mono.Security.Protocol.Tls.CipherAlgorithmType cipherAlgorithmType, Mono.Security.Protocol.Tls.HashAlgorithmType hashAlgorithmType, Mono.Security.Protocol.Tls.ExchangeAlgorithmType exchangeAlgorithmType, System.Boolean exportable, System.Boolean blockMode, System.Byte keyMaterialSize, System.Byte expandedKeyMaterialSize, System.Int16 effectiveKeyBits, System.Byte ivSize, System.Byte blockSize)
    // Offset: 0x11014D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CipherSuite* New_ctor(int16_t code, ::StringW name, ::Mono::Security::Protocol::Tls::CipherAlgorithmType cipherAlgorithmType, ::Mono::Security::Protocol::Tls::HashAlgorithmType hashAlgorithmType, ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, uint8_t keyMaterialSize, uint8_t expandedKeyMaterialSize, int16_t effectiveKeyBits, uint8_t ivSize, uint8_t blockSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::CipherSuite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CipherSuite*, creationType>(code, name, cipherAlgorithmType, hashAlgorithmType, exchangeAlgorithmType, exportable, blockMode, keyMaterialSize, expandedKeyMaterialSize, effectiveKeyBits, ivSize, blockSize)));
    }
    // static private System.Void .cctor()
    // Offset: 0x110299C
    static void _cctor();
    // System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm()
    // Offset: 0x1101418
    ::System::Security::Cryptography::HashAlgorithm* CreateHashAlgorithm();
    // System.Void Write(System.Byte[] array, System.Int32 offset, System.Int16 value)
    // Offset: 0x11015C4
    void Write(::ArrayW<uint8_t> array, int offset, int16_t value);
    // System.Void Write(System.Byte[] array, System.Int32 offset, System.UInt64 value)
    // Offset: 0x11016A0
    void Write(::ArrayW<uint8_t> array, int offset, uint64_t value);
    // public System.Void InitializeCipher()
    // Offset: 0x1101824
    void InitializeCipher();
    // public System.Byte[] EncryptRecord(System.Byte[] fragment, System.Byte[] mac)
    // Offset: 0x1101EF0
    ::ArrayW<uint8_t> EncryptRecord(::ArrayW<uint8_t> fragment, ::ArrayW<uint8_t> mac);
    // public System.Void DecryptRecord(System.Byte[] fragment, out System.Byte[] dcrFragment, out System.Byte[] dcrMAC)
    // Offset: 0x11020DC
    void DecryptRecord(::ArrayW<uint8_t> fragment, ByRef<::ArrayW<uint8_t>> dcrFragment, ByRef<::ArrayW<uint8_t>> dcrMAC);
    // public System.Byte[] ComputeClientRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<uint8_t> ComputeClientRecordMAC(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // public System.Byte[] ComputeServerRecordMAC(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<uint8_t> ComputeServerRecordMAC(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // public System.Void ComputeMasterSecret(System.Byte[] preMasterSecret)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ComputeMasterSecret(::ArrayW<uint8_t> preMasterSecret);
    // public System.Void ComputeKeys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ComputeKeys();
    // public System.Byte[] CreatePremasterSecret()
    // Offset: 0x11022CC
    ::ArrayW<uint8_t> CreatePremasterSecret();
    // public System.Byte[] PRF(System.Byte[] secret, System.String label, System.Byte[] data, System.Int32 length)
    // Offset: 0x1102418
    ::ArrayW<uint8_t> PRF(::ArrayW<uint8_t> secret, ::StringW label, ::ArrayW<uint8_t> data, int length);
    // public System.Byte[] Expand(System.Security.Cryptography.HashAlgorithm hash, System.Byte[] secret, System.Byte[] seed, System.Int32 length)
    // Offset: 0x1102638
    ::ArrayW<uint8_t> Expand(::System::Security::Cryptography::HashAlgorithm* hash, ::ArrayW<uint8_t> secret, ::ArrayW<uint8_t> seed, int length);
    // private System.Void createEncryptionCipher()
    // Offset: 0x1101848
    void createEncryptionCipher();
    // private System.Void createDecryptionCipher()
    // Offset: 0x1101B9C
    void createDecryptionCipher();
  }; // Mono.Security.Protocol.Tls.CipherSuite
  #pragma pack(pop)
  static check_size<sizeof(CipherSuite), 120 + sizeof(::System::Security::Cryptography::KeyedHashAlgorithm*)> __Mono_Security_Protocol_Tls_CipherSuiteSizeCheck;
  static_assert(sizeof(CipherSuite) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_EncryptionCipher
// Il2CppName: get_EncryptionCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::ICryptoTransform* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_EncryptionCipher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_EncryptionCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_DecryptionCipher
// Il2CppName: get_DecryptionCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::ICryptoTransform* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_DecryptionCipher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_DecryptionCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_ClientHMAC
// Il2CppName: get_ClientHMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::KeyedHashAlgorithm* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_ClientHMAC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_ClientHMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_ServerHMAC
// Il2CppName: get_ServerHMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::KeyedHashAlgorithm* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_ServerHMAC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_ServerHMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_CipherAlgorithmType
// Il2CppName: get_CipherAlgorithmType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::CipherAlgorithmType (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_CipherAlgorithmType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_CipherAlgorithmType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_HashAlgorithmName
// Il2CppName: get_HashAlgorithmName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_HashAlgorithmName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_HashAlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_HashAlgorithmType
// Il2CppName: get_HashAlgorithmType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::HashAlgorithmType (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_HashAlgorithmType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_HashAlgorithmType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_HashSize
// Il2CppName: get_HashSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_HashSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_HashSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_ExchangeAlgorithmType
// Il2CppName: get_ExchangeAlgorithmType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::ExchangeAlgorithmType (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_ExchangeAlgorithmType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_ExchangeAlgorithmType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_CipherMode
// Il2CppName: get_CipherMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::CipherMode (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_CipherMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_CipherMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_Code
// Il2CppName: get_Code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_Code)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_Code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_IsExportable
// Il2CppName: get_IsExportable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_IsExportable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_IsExportable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_KeyMaterialSize
// Il2CppName: get_KeyMaterialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_KeyMaterialSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_KeyMaterialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_KeyBlockSize
// Il2CppName: get_KeyBlockSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_KeyBlockSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_KeyBlockSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_ExpandedKeyMaterialSize
// Il2CppName: get_ExpandedKeyMaterialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_ExpandedKeyMaterialSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_ExpandedKeyMaterialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_EffectiveKeyBits
// Il2CppName: get_EffectiveKeyBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_EffectiveKeyBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_EffectiveKeyBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_IvSize
// Il2CppName: get_IvSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_IvSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_IvSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Context* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::CipherSuite::set_Context)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::CipherSuite::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::CreateHashAlgorithm
// Il2CppName: CreateHashAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithm* (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::CreateHashAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "CreateHashAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>, int, int16_t)>(&Mono::Security::Protocol::Tls::CipherSuite::Write)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>, int, uint64_t)>(&Mono::Security::Protocol::Tls::CipherSuite::Write)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::InitializeCipher
// Il2CppName: InitializeCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::InitializeCipher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "InitializeCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::EncryptRecord
// Il2CppName: EncryptRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::CipherSuite::EncryptRecord)> {
  static const MethodInfo* get() {
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* mac = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "EncryptRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fragment, mac});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::DecryptRecord
// Il2CppName: DecryptRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>, ByRef<::ArrayW<uint8_t>>, ByRef<::ArrayW<uint8_t>>)>(&Mono::Security::Protocol::Tls::CipherSuite::DecryptRecord)> {
  static const MethodInfo* get() {
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dcrFragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* dcrMAC = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "DecryptRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fragment, dcrFragment, dcrMAC});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::ComputeClientRecordMAC
// Il2CppName: ComputeClientRecordMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::CipherSuite::ComputeClientRecordMAC)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "ComputeClientRecordMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::ComputeServerRecordMAC
// Il2CppName: ComputeServerRecordMAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::CipherSuite::ComputeServerRecordMAC)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "ComputeServerRecordMAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::ComputeMasterSecret
// Il2CppName: ComputeMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::CipherSuite::ComputeMasterSecret)> {
  static const MethodInfo* get() {
    static auto* preMasterSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "ComputeMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{preMasterSecret});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::ComputeKeys
// Il2CppName: ComputeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::ComputeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "ComputeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::CreatePremasterSecret
// Il2CppName: CreatePremasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::CreatePremasterSecret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "CreatePremasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::PRF
// Il2CppName: PRF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)(::ArrayW<uint8_t>, ::StringW, ::ArrayW<uint8_t>, int)>(&Mono::Security::Protocol::Tls::CipherSuite::PRF)> {
  static const MethodInfo* get() {
    static auto* secret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "PRF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secret, label, data, length});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::Expand
// Il2CppName: Expand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::CipherSuite::*)(::System::Security::Cryptography::HashAlgorithm*, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, int)>(&Mono::Security::Protocol::Tls::CipherSuite::Expand)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithm")->byval_arg;
    static auto* secret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* seed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "Expand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, secret, seed, length});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::createEncryptionCipher
// Il2CppName: createEncryptionCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::createEncryptionCipher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "createEncryptionCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::CipherSuite::createDecryptionCipher
// Il2CppName: createDecryptionCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::CipherSuite::*)()>(&Mono::Security::Protocol::Tls::CipherSuite::createDecryptionCipher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::CipherSuite*), "createDecryptionCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
