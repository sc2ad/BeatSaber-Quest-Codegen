// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
  // Forward declaring type: RecordProtocol
  class RecordProtocol;
  // Forward declaring type: CipherAlgorithmType
  struct CipherAlgorithmType;
  // Forward declaring type: HashAlgorithmType
  struct HashAlgorithmType;
  // Forward declaring type: ExchangeAlgorithmType
  struct ExchangeAlgorithmType;
  // Forward declaring type: SecurityProtocolType
  struct SecurityProtocolType;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MemoryStream
  class MemoryStream;
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: ValidationResult
  class ValidationResult;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: SslStreamBase
  class SslStreamBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::SslStreamBase);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::SslStreamBase*, "Mono.Security.Protocol.Tls", "SslStreamBase");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.SslStreamBase
  // [TokenAttribute] Offset: FFFFFFFF
  class SslStreamBase : public ::System::IO::Stream {
    public:
    // Nested type: ::Mono::Security::Protocol::Tls::SslStreamBase::AsyncHandshakeDelegate
    class AsyncHandshakeDelegate;
    // Nested type: ::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult
    class InternalAsyncResult;
    public:
    // System.IO.Stream innerStream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* innerStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // System.IO.MemoryStream inputBuffer
    // Size: 0x8
    // Offset: 0x30
    ::System::IO::MemoryStream* inputBuffer;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    // Mono.Security.Protocol.Tls.Context context
    // Size: 0x8
    // Offset: 0x38
    ::Mono::Security::Protocol::Tls::Context* context;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Context*) == 0x8);
    // Mono.Security.Protocol.Tls.RecordProtocol protocol
    // Size: 0x8
    // Offset: 0x40
    ::Mono::Security::Protocol::Tls::RecordProtocol* protocol;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::RecordProtocol*) == 0x8);
    // System.Boolean ownsStream
    // Size: 0x1
    // Offset: 0x48
    bool ownsStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x49
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean checkCertRevocationStatus
    // Size: 0x1
    // Offset: 0x4A
    bool checkCertRevocationStatus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkCertRevocationStatus and: negotiate
    char __padding6[0x5] = {};
    // private System.Object negotiate
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* negotiate;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object read
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppObject* read;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object write
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppObject* write;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Threading.ManualResetEvent negotiationComplete
    // Size: 0x8
    // Offset: 0x68
    ::System::Threading::ManualResetEvent* negotiationComplete;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private System.Byte[] recbuf
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<uint8_t> recbuf;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.IO.MemoryStream recordStream
    // Size: 0x8
    // Offset: 0x78
    ::System::IO::MemoryStream* recordStream;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    public:
    // Get static field: static private System.Threading.ManualResetEvent record_processing
    static ::System::Threading::ManualResetEvent* _get_record_processing();
    // Set static field: static private System.Threading.ManualResetEvent record_processing
    static void _set_record_processing(::System::Threading::ManualResetEvent* value);
    // Get instance field reference: System.IO.Stream innerStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_innerStream();
    // Get instance field reference: System.IO.MemoryStream inputBuffer
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn_inputBuffer();
    // Get instance field reference: Mono.Security.Protocol.Tls.Context context
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Context*& dyn_context();
    // Get instance field reference: Mono.Security.Protocol.Tls.RecordProtocol protocol
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::RecordProtocol*& dyn_protocol();
    // Get instance field reference: System.Boolean ownsStream
    [[deprecated("Use field access instead!")]] bool& dyn_ownsStream();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Boolean checkCertRevocationStatus
    [[deprecated("Use field access instead!")]] bool& dyn_checkCertRevocationStatus();
    // Get instance field reference: private System.Object negotiate
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_negotiate();
    // Get instance field reference: private System.Object read
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_read();
    // Get instance field reference: private System.Object write
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_write();
    // Get instance field reference: private System.Threading.ManualResetEvent negotiationComplete
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_negotiationComplete();
    // Get instance field reference: private System.Byte[] recbuf
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_recbuf();
    // Get instance field reference: private System.IO.MemoryStream recordStream
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn_recordStream();
    // System.Boolean get_MightNeedHandshake()
    // Offset: 0x1114FB8
    bool get_MightNeedHandshake();
    // System.Boolean get_HaveRemoteValidation2Callback()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HaveRemoteValidation2Callback();
    // public System.Boolean get_CheckCertRevocationStatus()
    // Offset: 0x1115470
    bool get_CheckCertRevocationStatus();
    // public System.Void set_CheckCertRevocationStatus(System.Boolean value)
    // Offset: 0x1115478
    void set_CheckCertRevocationStatus(bool value);
    // public Mono.Security.Protocol.Tls.CipherAlgorithmType get_CipherAlgorithm()
    // Offset: 0x1115484
    ::Mono::Security::Protocol::Tls::CipherAlgorithmType get_CipherAlgorithm();
    // public System.Int32 get_CipherStrength()
    // Offset: 0x11154C8
    int get_CipherStrength();
    // public Mono.Security.Protocol.Tls.HashAlgorithmType get_HashAlgorithm()
    // Offset: 0x111550C
    ::Mono::Security::Protocol::Tls::HashAlgorithmType get_HashAlgorithm();
    // public System.Int32 get_HashStrength()
    // Offset: 0x1115550
    int get_HashStrength();
    // public System.Int32 get_KeyExchangeStrength()
    // Offset: 0x11155AC
    int get_KeyExchangeStrength();
    // public Mono.Security.Protocol.Tls.ExchangeAlgorithmType get_KeyExchangeAlgorithm()
    // Offset: 0x1115618
    ::Mono::Security::Protocol::Tls::ExchangeAlgorithmType get_KeyExchangeAlgorithm();
    // public Mono.Security.Protocol.Tls.SecurityProtocolType get_SecurityProtocol()
    // Offset: 0x111565C
    ::Mono::Security::Protocol::Tls::SecurityProtocolType get_SecurityProtocol();
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_ServerCertificate()
    // Offset: 0x1115688
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_ServerCertificate();
    // Mono.Security.X509.X509CertificateCollection get_ServerCertificates()
    // Offset: 0x1115768
    ::Mono::Security::X509::X509CertificateCollection* get_ServerCertificates();
    // protected System.Void .ctor(System.IO.Stream stream, System.Boolean ownsStream)
    // Offset: 0x1111E2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslStreamBase* New_ctor(::System::IO::Stream* stream, bool ownsStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::SslStreamBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslStreamBase*, creationType>(stream, ownsStream)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1117B78
    static void _cctor();
    // private System.Void AsyncHandshakeCallback(System.IAsyncResult asyncResult)
    // Offset: 0x1114490
    void AsyncHandshakeCallback(::System::IAsyncResult* asyncResult);
    // System.Void NegotiateHandshake()
    // Offset: 0x1115098
    void NegotiateHandshake();
    // System.IAsyncResult BeginNegotiateHandshake(System.AsyncCallback callback, System.Object state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::IAsyncResult* BeginNegotiateHandshake(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.Void EndNegotiateHandshake(System.IAsyncResult result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EndNegotiateHandshake(::System::IAsyncResult* result);
    // System.Security.Cryptography.X509Certificates.X509Certificate OnLocalCertificateSelection(System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection serverRequestedCertificates)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509Certificate* OnLocalCertificateSelection(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, ::System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* serverRequestedCertificates);
    // System.Boolean OnRemoteCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] errors)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool OnRemoteCertificateValidation(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::ArrayW<int> errors);
    // Mono.Security.Interface.ValidationResult OnRemoteCertificateValidation2(Mono.Security.X509.X509CertificateCollection collection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Mono::Security::Interface::ValidationResult* OnRemoteCertificateValidation2(::Mono::Security::X509::X509CertificateCollection* collection);
    // System.Security.Cryptography.AsymmetricAlgorithm OnLocalPrivateKeySelection(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::AsymmetricAlgorithm* OnLocalPrivateKeySelection(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::StringW targetHost);
    // System.Security.Cryptography.X509Certificates.X509Certificate RaiseLocalCertificateSelection(System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection requestedCertificates)
    // Offset: 0x11135CC
    ::System::Security::Cryptography::X509Certificates::X509Certificate* RaiseLocalCertificateSelection(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates, ::System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* requestedCertificates);
    // System.Boolean RaiseRemoteCertificateValidation(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Int32[] errors)
    // Offset: 0x111359C
    bool RaiseRemoteCertificateValidation(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::ArrayW<int> errors);
    // Mono.Security.Interface.ValidationResult RaiseRemoteCertificateValidation2(Mono.Security.X509.X509CertificateCollection collection)
    // Offset: 0x11135BC
    ::Mono::Security::Interface::ValidationResult* RaiseRemoteCertificateValidation2(::Mono::Security::X509::X509CertificateCollection* collection);
    // System.Security.Cryptography.AsymmetricAlgorithm RaiseLocalPrivateKeySelection(System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.String targetHost)
    // Offset: 0x11135EC
    ::System::Security::Cryptography::AsymmetricAlgorithm* RaiseLocalPrivateKeySelection(::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::StringW targetHost);
    // private System.Boolean BeginNegotiateHandshake(Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult asyncResult)
    // Offset: 0x111516C
    bool BeginNegotiateHandshake(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult* asyncResult);
    // private System.Void EndNegotiateHandshake(Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult asyncResult)
    // Offset: 0x11153D0
    void EndNegotiateHandshake(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult* asyncResult);
    // private System.Void InternalBeginRead(Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult asyncResult)
    // Offset: 0x1114A30
    void InternalBeginRead(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult* asyncResult);
    // private System.Void InternalReadCallback(System.IAsyncResult result)
    // Offset: 0x1116164
    void InternalReadCallback(::System::IAsyncResult* result);
    // private System.Void InternalReadCallback_inner(Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult internalResult, System.Byte[] recbuf, System.Object[] state, System.Boolean didRead, System.Int32 n)
    // Offset: 0x1115A40
    void InternalReadCallback_inner(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult* internalResult, ::ArrayW<uint8_t> recbuf, ::ArrayW<::Il2CppObject*> state, bool didRead, int n);
    // private System.Void InternalBeginWrite(Mono.Security.Protocol.Tls.SslStreamBase/Mono.Security.Protocol.Tls.InternalAsyncResult asyncResult)
    // Offset: 0x11147A8
    void InternalBeginWrite(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult* asyncResult);
    // private System.Void InternalWriteCallback(System.IAsyncResult ar)
    // Offset: 0x1116434
    void InternalWriteCallback(::System::IAsyncResult* ar);
    // public System.Int32 Read(System.Byte[] buffer)
    // Offset: 0x1116BD0
    int Read(::ArrayW<uint8_t> buffer);
    // public System.Void Write(System.Byte[] buffer)
    // Offset: 0x11176AC
    void Write(::ArrayW<uint8_t> buffer);
    // private System.Void resetBuffer()
    // Offset: 0x11159EC
    void resetBuffer();
    // System.Void checkDisposed()
    // Offset: 0x1115964
    void checkDisposed();
    // public override System.Boolean get_CanRead()
    // Offset: 0x1117A10
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1117A30
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1117A38
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x1117A58
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x1117AB8
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1117B18
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x1115790
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginRead(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x1116608
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginWrite(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x11167DC
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(::System::IAsyncResult* asyncResult);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x11169E0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(::System::IAsyncResult* asyncResult);
    // public override System.Void Close()
    // Offset: 0x1116B90
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Close()
    void Close();
    // public override System.Void Flush()
    // Offset: 0x1116B98
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1116BF8
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x11175EC
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x111764C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x11176D4
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // protected override System.Void Finalize()
    // Offset: 0x11121EC
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1112094
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // Mono.Security.Protocol.Tls.SslStreamBase
  #pragma pack(pop)
  static check_size<sizeof(SslStreamBase), 120 + sizeof(::System::IO::MemoryStream*)> __Mono_Security_Protocol_Tls_SslStreamBaseSizeCheck;
  static_assert(sizeof(SslStreamBase) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_MightNeedHandshake
// Il2CppName: get_MightNeedHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_MightNeedHandshake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_MightNeedHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_HaveRemoteValidation2Callback
// Il2CppName: get_HaveRemoteValidation2Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_HaveRemoteValidation2Callback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_HaveRemoteValidation2Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CheckCertRevocationStatus
// Il2CppName: get_CheckCertRevocationStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CheckCertRevocationStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CheckCertRevocationStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::set_CheckCertRevocationStatus
// Il2CppName: set_CheckCertRevocationStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(bool)>(&Mono::Security::Protocol::Tls::SslStreamBase::set_CheckCertRevocationStatus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "set_CheckCertRevocationStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CipherAlgorithm
// Il2CppName: get_CipherAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::CipherAlgorithmType (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CipherAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CipherAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CipherStrength
// Il2CppName: get_CipherStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CipherStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CipherStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_HashAlgorithm
// Il2CppName: get_HashAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::HashAlgorithmType (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_HashAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_HashAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_HashStrength
// Il2CppName: get_HashStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_HashStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_HashStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_KeyExchangeStrength
// Il2CppName: get_KeyExchangeStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_KeyExchangeStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_KeyExchangeStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_KeyExchangeAlgorithm
// Il2CppName: get_KeyExchangeAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::ExchangeAlgorithmType (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_KeyExchangeAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_KeyExchangeAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_SecurityProtocol
// Il2CppName: get_SecurityProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::SecurityProtocolType (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_SecurityProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_SecurityProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_ServerCertificate
// Il2CppName: get_ServerCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_ServerCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_ServerCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_ServerCertificates
// Il2CppName: get_ServerCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection* (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_ServerCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_ServerCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::AsyncHandshakeCallback
// Il2CppName: AsyncHandshakeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::AsyncHandshakeCallback)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "AsyncHandshakeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::NegotiateHandshake
// Il2CppName: NegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::NegotiateHandshake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "NegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::BeginNegotiateHandshake
// Il2CppName: BeginNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::SslStreamBase::BeginNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "BeginNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::EndNegotiateHandshake
// Il2CppName: EndNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::EndNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "EndNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::OnLocalCertificateSelection
// Il2CppName: OnLocalCertificateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslStreamBase::OnLocalCertificateSelection)> {
  static const MethodInfo* get() {
    static auto* clientCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* serverCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverRequestedCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "OnLocalCertificateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCertificates, serverCertificate, targetHost, serverRequestedCertificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::OnRemoteCertificateValidation
// Il2CppName: OnRemoteCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<int>)>(&Mono::Security::Protocol::Tls::SslStreamBase::OnRemoteCertificateValidation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* errors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "OnRemoteCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, errors});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::OnRemoteCertificateValidation2
// Il2CppName: OnRemoteCertificateValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::ValidationResult* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslStreamBase::OnRemoteCertificateValidation2)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "OnRemoteCertificateValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::OnLocalPrivateKeySelection
// Il2CppName: OnLocalPrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW)>(&Mono::Security::Protocol::Tls::SslStreamBase::OnLocalPrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "OnLocalPrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, targetHost});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::RaiseLocalCertificateSelection
// Il2CppName: RaiseLocalCertificateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslStreamBase::RaiseLocalCertificateSelection)> {
  static const MethodInfo* get() {
    static auto* certificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* remoteCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestedCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "RaiseLocalCertificateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificates, remoteCertificate, targetHost, requestedCertificates});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::RaiseRemoteCertificateValidation
// Il2CppName: RaiseRemoteCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<int>)>(&Mono::Security::Protocol::Tls::SslStreamBase::RaiseRemoteCertificateValidation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* errors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "RaiseRemoteCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, errors});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::RaiseRemoteCertificateValidation2
// Il2CppName: RaiseRemoteCertificateValidation2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::ValidationResult* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::Protocol::Tls::SslStreamBase::RaiseRemoteCertificateValidation2)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "RaiseRemoteCertificateValidation2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::RaiseLocalPrivateKeySelection
// Il2CppName: RaiseLocalPrivateKeySelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsymmetricAlgorithm* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::StringW)>(&Mono::Security::Protocol::Tls::SslStreamBase::RaiseLocalPrivateKeySelection)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "RaiseLocalPrivateKeySelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, targetHost});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::BeginNegotiateHandshake
// Il2CppName: BeginNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::BeginNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "BeginNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::EndNegotiateHandshake
// Il2CppName: EndNegotiateHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::EndNegotiateHandshake)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "EndNegotiateHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalBeginRead
// Il2CppName: InternalBeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalBeginRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "InternalBeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalReadCallback
// Il2CppName: InternalReadCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalReadCallback)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "InternalReadCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalReadCallback_inner
// Il2CppName: InternalReadCallback_inner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*, ::ArrayW<uint8_t>, ::ArrayW<::Il2CppObject*>, bool, int)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalReadCallback_inner)> {
  static const MethodInfo* get() {
    static auto* internalResult = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult")->byval_arg;
    static auto* recbuf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* state = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* didRead = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "InternalReadCallback_inner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalResult, recbuf, state, didRead, n});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalBeginWrite
// Il2CppName: InternalBeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::Mono::Security::Protocol::Tls::SslStreamBase::InternalAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalBeginWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "SslStreamBase/InternalAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "InternalBeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::InternalWriteCallback
// Il2CppName: InternalWriteCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::InternalWriteCallback)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "InternalWriteCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::SslStreamBase::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::SslStreamBase::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::resetBuffer
// Il2CppName: resetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::resetBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "resetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::checkDisposed
// Il2CppName: checkDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::checkDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "checkDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(int64_t)>(&Mono::Security::Protocol::Tls::SslStreamBase::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::SslStreamBase::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::SslStreamBase::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::EndRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::SslStreamBase::EndWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>, int, int)>(&Mono::Security::Protocol::Tls::SslStreamBase::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Mono::Security::Protocol::Tls::SslStreamBase::*)(int64_t, ::System::IO::SeekOrigin)>(&Mono::Security::Protocol::Tls::SslStreamBase::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(int64_t)>(&Mono::Security::Protocol::Tls::SslStreamBase::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(::ArrayW<uint8_t>, int, int)>(&Mono::Security::Protocol::Tls::SslStreamBase::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)()>(&Mono::Security::Protocol::Tls::SslStreamBase::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::SslStreamBase::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::SslStreamBase::*)(bool)>(&Mono::Security::Protocol::Tls::SslStreamBase::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::SslStreamBase*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
