// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Protocol::Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: Context
  class Context;
  // Forward declaring type: TlsStream
  class TlsStream;
  // Forward declaring type: AlertLevel
  struct AlertLevel;
  // Forward declaring type: AlertDescription
  struct AlertDescription;
  // Forward declaring type: Alert
  class Alert;
  // Forward declaring type: ContentType
  struct ContentType;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: Mono::Security::Protocol::Tls::Handshake
namespace Mono::Security::Protocol::Tls::Handshake {
  // Forward declaring type: HandshakeType
  struct HandshakeType;
  // Forward declaring type: HandshakeMessage
  class HandshakeMessage;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Forward declaring type: RecordProtocol
  class RecordProtocol;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Protocol::Tls::RecordProtocol);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Protocol::Tls::RecordProtocol*, "Mono.Security.Protocol.Tls", "RecordProtocol");
// Type namespace: Mono.Security.Protocol.Tls
namespace Mono::Security::Protocol::Tls {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Tls.RecordProtocol
  // [TokenAttribute] Offset: FFFFFFFF
  class RecordProtocol : public ::Il2CppObject {
    public:
    // Nested type: ::Mono::Security::Protocol::Tls::RecordProtocol::ReceiveRecordAsyncResult
    class ReceiveRecordAsyncResult;
    // Nested type: ::Mono::Security::Protocol::Tls::RecordProtocol::SendRecordAsyncResult
    class SendRecordAsyncResult;
    public:
    // protected System.IO.Stream innerStream
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Stream* innerStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // protected Mono.Security.Protocol.Tls.Context context
    // Size: 0x8
    // Offset: 0x18
    ::Mono::Security::Protocol::Tls::Context* context;
    // Field size check
    static_assert(sizeof(::Mono::Security::Protocol::Tls::Context*) == 0x8);
    public:
    // Get static field: static private System.Threading.ManualResetEvent record_processing
    static ::System::Threading::ManualResetEvent* _get_record_processing();
    // Set static field: static private System.Threading.ManualResetEvent record_processing
    static void _set_record_processing(::System::Threading::ManualResetEvent* value);
    // Get instance field reference: protected System.IO.Stream innerStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_innerStream();
    // Get instance field reference: protected Mono.Security.Protocol.Tls.Context context
    [[deprecated("Use field access instead!")]] ::Mono::Security::Protocol::Tls::Context*& dyn_context();
    // public Mono.Security.Protocol.Tls.Context get_Context()
    // Offset: 0x110D7A4
    ::Mono::Security::Protocol::Tls::Context* get_Context();
    // public System.Void set_Context(Mono.Security.Protocol.Tls.Context value)
    // Offset: 0x110D7AC
    void set_Context(::Mono::Security::Protocol::Tls::Context* value);
    // public System.Void .ctor(System.IO.Stream innerStream, Mono.Security.Protocol.Tls.Context context)
    // Offset: 0x11039F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordProtocol* New_ctor(::System::IO::Stream* innerStream, ::Mono::Security::Protocol::Tls::Context* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Protocol::Tls::RecordProtocol::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordProtocol*, creationType>(innerStream, context)));
    }
    // static private System.Void .cctor()
    // Offset: 0x110FEBC
    static void _cctor();
    // public System.Void SendRecord(Mono.Security.Protocol.Tls.Handshake.HandshakeType type)
    // Offset: 0x110D7B4
    void SendRecord(::Mono::Security::Protocol::Tls::Handshake::HandshakeType type);
    // protected System.Void ProcessHandshakeMessage(Mono.Security.Protocol.Tls.TlsStream handMsg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessHandshakeMessage(::Mono::Security::Protocol::Tls::TlsStream* handMsg);
    // protected System.Void ProcessChangeCipherSpec()
    // Offset: 0x110D9F4
    void ProcessChangeCipherSpec();
    // public Mono.Security.Protocol.Tls.Handshake.HandshakeMessage GetMessage(Mono.Security.Protocol.Tls.Handshake.HandshakeType type)
    // Offset: 0x110DAB0
    ::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage* GetMessage(::Mono::Security::Protocol::Tls::Handshake::HandshakeType type);
    // public System.IAsyncResult BeginReceiveRecord(System.IO.Stream record, System.AsyncCallback callback, System.Object state)
    // Offset: 0x110DB10
    ::System::IAsyncResult* BeginReceiveRecord(::System::IO::Stream* record, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // private System.Void InternalReceiveRecordCallback(System.IAsyncResult asyncResult)
    // Offset: 0x110DD3C
    void InternalReceiveRecordCallback(::System::IAsyncResult* asyncResult);
    // public System.Byte[] EndReceiveRecord(System.IAsyncResult asyncResult)
    // Offset: 0x110E76C
    ::ArrayW<uint8_t> EndReceiveRecord(::System::IAsyncResult* asyncResult);
    // public System.Byte[] ReceiveRecord(System.IO.Stream record)
    // Offset: 0x110EA94
    ::ArrayW<uint8_t> ReceiveRecord(::System::IO::Stream* record);
    // private System.Byte[] ReadRecordBuffer(System.Int32 contentType, System.IO.Stream record)
    // Offset: 0x110E180
    ::ArrayW<uint8_t> ReadRecordBuffer(int contentType, ::System::IO::Stream* record);
    // private System.Void ProcessAlert(Mono.Security.Protocol.Tls.AlertLevel alertLevel, Mono.Security.Protocol.Tls.AlertDescription alertDesc)
    // Offset: 0x110E6B4
    void ProcessAlert(::Mono::Security::Protocol::Tls::AlertLevel alertLevel, ::Mono::Security::Protocol::Tls::AlertDescription alertDesc);
    // System.Void SendAlert(ref System.Exception ex)
    // Offset: 0x110ED88
    void SendAlert(ByRef<::System::Exception*> ex);
    // public System.Void SendAlert(Mono.Security.Protocol.Tls.AlertDescription description)
    // Offset: 0x110F028
    void SendAlert(::Mono::Security::Protocol::Tls::AlertDescription description);
    // public System.Void SendAlert(Mono.Security.Protocol.Tls.AlertLevel level, Mono.Security.Protocol.Tls.AlertDescription description)
    // Offset: 0x110432C
    void SendAlert(::Mono::Security::Protocol::Tls::AlertLevel level, ::Mono::Security::Protocol::Tls::AlertDescription description);
    // public System.Void SendAlert(Mono.Security.Protocol.Tls.Alert alert)
    // Offset: 0x110EF38
    void SendAlert(::Mono::Security::Protocol::Tls::Alert* alert);
    // public System.Void SendChangeCipherSpec()
    // Offset: 0x110F0CC
    void SendChangeCipherSpec();
    // public System.Void SendChangeCipherSpec(System.IO.Stream recordStream)
    // Offset: 0x110F1D0
    void SendChangeCipherSpec(::System::IO::Stream* recordStream);
    // public System.IAsyncResult BeginSendChangeCipherSpec(System.AsyncCallback callback, System.Object state)
    // Offset: 0x110F310
    ::System::IAsyncResult* BeginSendChangeCipherSpec(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Void EndSendChangeCipherSpec(System.IAsyncResult asyncResult)
    // Offset: 0x110F49C
    void EndSendChangeCipherSpec(::System::IAsyncResult* asyncResult);
    // public System.IAsyncResult BeginSendRecord(Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType, System.AsyncCallback callback, System.Object state)
    // Offset: 0x110D7E4
    ::System::IAsyncResult* BeginSendRecord(::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // private System.Void InternalSendRecordCallback(System.IAsyncResult ar)
    // Offset: 0x110F5F0
    void InternalSendRecordCallback(::System::IAsyncResult* ar);
    // public System.IAsyncResult BeginSendRecord(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] recordData, System.AsyncCallback callback, System.Object state)
    // Offset: 0x110F3AC
    ::System::IAsyncResult* BeginSendRecord(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> recordData, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Void EndSendRecord(System.IAsyncResult asyncResult)
    // Offset: 0x110D8F0
    void EndSendRecord(::System::IAsyncResult* asyncResult);
    // public System.Void SendRecord(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] recordData)
    // Offset: 0x110F09C
    void SendRecord(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> recordData);
    // public System.Byte[] EncodeRecord(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] recordData)
    // Offset: 0x110F2F4
    ::ArrayW<uint8_t> EncodeRecord(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> recordData);
    // public System.Byte[] EncodeRecord(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] recordData, System.Int32 offset, System.Int32 count)
    // Offset: 0x110FADC
    ::ArrayW<uint8_t> EncodeRecord(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> recordData, int offset, int count);
    // public System.Byte[] EncodeHandshakeRecord(Mono.Security.Protocol.Tls.Handshake.HandshakeType handshakeType)
    // Offset: 0x110FDAC
    ::ArrayW<uint8_t> EncodeHandshakeRecord(::Mono::Security::Protocol::Tls::Handshake::HandshakeType handshakeType);
    // private System.Byte[] encryptRecordFragment(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0x110FCAC
    ::ArrayW<uint8_t> encryptRecordFragment(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // private System.Byte[] decryptRecordFragment(Mono.Security.Protocol.Tls.ContentType contentType, System.Byte[] fragment)
    // Offset: 0x110E46C
    ::ArrayW<uint8_t> decryptRecordFragment(::Mono::Security::Protocol::Tls::ContentType contentType, ::ArrayW<uint8_t> fragment);
    // private System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)
    // Offset: 0x110FE3C
    bool Compare(::ArrayW<uint8_t> array1, ::ArrayW<uint8_t> array2);
  }; // Mono.Security.Protocol.Tls.RecordProtocol
  #pragma pack(pop)
  static check_size<sizeof(RecordProtocol), 24 + sizeof(::Mono::Security::Protocol::Tls::Context*)> __Mono_Security_Protocol_Tls_RecordProtocolSizeCheck;
  static_assert(sizeof(RecordProtocol) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Context* (Mono::Security::Protocol::Tls::RecordProtocol::*)()>(&Mono::Security::Protocol::Tls::RecordProtocol::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Context*)>(&Mono::Security::Protocol::Tls::RecordProtocol::set_Context)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::Protocol::Tls::RecordProtocol::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendRecord
// Il2CppName: SendRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Handshake::HandshakeType)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendRecord)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "HandshakeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::ProcessHandshakeMessage
// Il2CppName: ProcessHandshakeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::TlsStream*)>(&Mono::Security::Protocol::Tls::RecordProtocol::ProcessHandshakeMessage)> {
  static const MethodInfo* get() {
    static auto* handMsg = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "TlsStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "ProcessHandshakeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handMsg});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::ProcessChangeCipherSpec
// Il2CppName: ProcessChangeCipherSpec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)()>(&Mono::Security::Protocol::Tls::RecordProtocol::ProcessChangeCipherSpec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "ProcessChangeCipherSpec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::GetMessage
// Il2CppName: GetMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Protocol::Tls::Handshake::HandshakeMessage* (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Handshake::HandshakeType)>(&Mono::Security::Protocol::Tls::RecordProtocol::GetMessage)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "HandshakeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "GetMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::BeginReceiveRecord
// Il2CppName: BeginReceiveRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IO::Stream*, ::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::RecordProtocol::BeginReceiveRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "BeginReceiveRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::InternalReceiveRecordCallback
// Il2CppName: InternalReceiveRecordCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::RecordProtocol::InternalReceiveRecordCallback)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "InternalReceiveRecordCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EndReceiveRecord
// Il2CppName: EndReceiveRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::RecordProtocol::EndReceiveRecord)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EndReceiveRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::ReceiveRecord
// Il2CppName: ReceiveRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IO::Stream*)>(&Mono::Security::Protocol::Tls::RecordProtocol::ReceiveRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "ReceiveRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::ReadRecordBuffer
// Il2CppName: ReadRecordBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(int, ::System::IO::Stream*)>(&Mono::Security::Protocol::Tls::RecordProtocol::ReadRecordBuffer)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "ReadRecordBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, record});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::ProcessAlert
// Il2CppName: ProcessAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::AlertLevel, ::Mono::Security::Protocol::Tls::AlertDescription)>(&Mono::Security::Protocol::Tls::RecordProtocol::ProcessAlert)> {
  static const MethodInfo* get() {
    static auto* alertLevel = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertLevel")->byval_arg;
    static auto* alertDesc = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "ProcessAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alertLevel, alertDesc});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendAlert
// Il2CppName: SendAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(ByRef<::System::Exception*>)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendAlert)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendAlert
// Il2CppName: SendAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::AlertDescription)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendAlert)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendAlert
// Il2CppName: SendAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::AlertLevel, ::Mono::Security::Protocol::Tls::AlertDescription)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendAlert)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertLevel")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "AlertDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, description});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendAlert
// Il2CppName: SendAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Alert*)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendAlert)> {
  static const MethodInfo* get() {
    static auto* alert = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "Alert")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alert});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendChangeCipherSpec
// Il2CppName: SendChangeCipherSpec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)()>(&Mono::Security::Protocol::Tls::RecordProtocol::SendChangeCipherSpec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendChangeCipherSpec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendChangeCipherSpec
// Il2CppName: SendChangeCipherSpec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IO::Stream*)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendChangeCipherSpec)> {
  static const MethodInfo* get() {
    static auto* recordStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendChangeCipherSpec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordStream});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::BeginSendChangeCipherSpec
// Il2CppName: BeginSendChangeCipherSpec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::RecordProtocol::BeginSendChangeCipherSpec)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "BeginSendChangeCipherSpec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EndSendChangeCipherSpec
// Il2CppName: EndSendChangeCipherSpec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::RecordProtocol::EndSendChangeCipherSpec)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EndSendChangeCipherSpec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::BeginSendRecord
// Il2CppName: BeginSendRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Handshake::HandshakeType, ::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::RecordProtocol::BeginSendRecord)> {
  static const MethodInfo* get() {
    static auto* handshakeType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "HandshakeType")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "BeginSendRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handshakeType, callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::InternalSendRecordCallback
// Il2CppName: InternalSendRecordCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::RecordProtocol::InternalSendRecordCallback)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "InternalSendRecordCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::BeginSendRecord
// Il2CppName: BeginSendRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>, ::System::AsyncCallback*, ::Il2CppObject*)>(&Mono::Security::Protocol::Tls::RecordProtocol::BeginSendRecord)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* recordData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "BeginSendRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, recordData, callback, state});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EndSendRecord
// Il2CppName: EndSendRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::System::IAsyncResult*)>(&Mono::Security::Protocol::Tls::RecordProtocol::EndSendRecord)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EndSendRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::SendRecord
// Il2CppName: SendRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::RecordProtocol::SendRecord)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* recordData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "SendRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, recordData});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EncodeRecord
// Il2CppName: EncodeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::RecordProtocol::EncodeRecord)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* recordData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EncodeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, recordData});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EncodeRecord
// Il2CppName: EncodeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>, int, int)>(&Mono::Security::Protocol::Tls::RecordProtocol::EncodeRecord)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* recordData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EncodeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, recordData, offset, count});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::EncodeHandshakeRecord
// Il2CppName: EncodeHandshakeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::Handshake::HandshakeType)>(&Mono::Security::Protocol::Tls::RecordProtocol::EncodeHandshakeRecord)> {
  static const MethodInfo* get() {
    static auto* handshakeType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls.Handshake", "HandshakeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "EncodeHandshakeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handshakeType});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::encryptRecordFragment
// Il2CppName: encryptRecordFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::RecordProtocol::encryptRecordFragment)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "encryptRecordFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::decryptRecordFragment
// Il2CppName: decryptRecordFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Protocol::Tls::RecordProtocol::*)(::Mono::Security::Protocol::Tls::ContentType, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::RecordProtocol::decryptRecordFragment)> {
  static const MethodInfo* get() {
    static auto* contentType = &::il2cpp_utils::GetClassFromName("Mono.Security.Protocol.Tls", "ContentType")->byval_arg;
    static auto* fragment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "decryptRecordFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentType, fragment});
  }
};
// Writing MetadataGetter for method: Mono::Security::Protocol::Tls::RecordProtocol::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Protocol::Tls::RecordProtocol::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Mono::Security::Protocol::Tls::RecordProtocol::Compare)> {
  static const MethodInfo* get() {
    static auto* array1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* array2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Protocol::Tls::RecordProtocol*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array1, array2});
  }
};
