// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Mono.RuntimeStructs
#include "Mono/RuntimeStructs.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Mono
namespace Mono {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Mono.RuntimeGPtrArrayHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: E5B69C
  struct RuntimeGPtrArrayHandle/*, public System::ValueType*/ {
    public:
    // private Mono.RuntimeStructs/GPtrArray* value
    // Size: 0x8
    // Offset: 0x0
    Mono::RuntimeStructs::GPtrArray* value;
    // Field size check
    static_assert(sizeof(Mono::RuntimeStructs::GPtrArray*) == 0x8);
    // Creating value type constructor for type: RuntimeGPtrArrayHandle
    constexpr RuntimeGPtrArrayHandle(Mono::RuntimeStructs::GPtrArray* value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator Mono::RuntimeStructs::GPtrArray*
    constexpr operator Mono::RuntimeStructs::GPtrArray*() const noexcept {
      return value;
    }
    // Get instance field reference: private Mono.RuntimeStructs/GPtrArray* value
    Mono::RuntimeStructs::GPtrArray*& dyn_value();
    // System.Void .ctor(System.IntPtr ptr)
    // Offset: 0x1C3F9A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RuntimeGPtrArrayHandle(System::IntPtr ptr) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::RuntimeGPtrArrayHandle::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, ptr);
    }
    // System.Int32 get_Length()
    // Offset: 0x1C3F9D4
    int get_Length();
    // System.IntPtr get_Item(System.Int32 i)
    // Offset: 0x1C3F9F0
    System::IntPtr get_Item(int i);
    // System.IntPtr Lookup(System.Int32 i)
    // Offset: 0x1C3F9F4
    System::IntPtr Lookup(int i);
    // static private System.Void GPtrArrayFree(Mono.RuntimeStructs/GPtrArray* value)
    // Offset: 0x1C3FA94
    static void GPtrArrayFree(Mono::RuntimeStructs::GPtrArray* value);
    // static System.Void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h)
    // Offset: 0x1C3FA98
    static void DestroyAndFree(ByRef<Mono::RuntimeGPtrArrayHandle> h);
  }; // Mono.RuntimeGPtrArrayHandle
  #pragma pack(pop)
  static check_size<sizeof(RuntimeGPtrArrayHandle), 0 + sizeof(Mono::RuntimeStructs::GPtrArray*)> __Mono_RuntimeGPtrArrayHandleSizeCheck;
  static_assert(sizeof(RuntimeGPtrArrayHandle) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::RuntimeGPtrArrayHandle, "Mono", "RuntimeGPtrArrayHandle");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::RuntimeGPtrArrayHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::RuntimeGPtrArrayHandle::*)()>(&Mono::RuntimeGPtrArrayHandle::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::RuntimeGPtrArrayHandle), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Mono::RuntimeGPtrArrayHandle::*)(int)>(&Mono::RuntimeGPtrArrayHandle::get_Item)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::RuntimeGPtrArrayHandle), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::Lookup
// Il2CppName: Lookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Mono::RuntimeGPtrArrayHandle::*)(int)>(&Mono::RuntimeGPtrArrayHandle::Lookup)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::RuntimeGPtrArrayHandle), "Lookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::GPtrArrayFree
// Il2CppName: GPtrArrayFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Mono::RuntimeStructs::GPtrArray*)>(&Mono::RuntimeGPtrArrayHandle::GPtrArrayFree)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Mono", "RuntimeStructs/GPtrArray"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::RuntimeGPtrArrayHandle), "GPtrArrayFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::RuntimeGPtrArrayHandle::DestroyAndFree
// Il2CppName: DestroyAndFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<Mono::RuntimeGPtrArrayHandle>)>(&Mono::RuntimeGPtrArrayHandle::DestroyAndFree)> {
  static const MethodInfo* get() {
    static auto* h = &::il2cpp_utils::GetClassFromName("Mono", "RuntimeGPtrArrayHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::RuntimeGPtrArrayHandle), "DestroyAndFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{h});
  }
};
