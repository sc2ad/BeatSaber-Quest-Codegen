// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Forward declaring type: AsyncProtocolResult
  class AsyncProtocolResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Net::Security::AsyncProtocolResult);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Net::Security::AsyncProtocolResult*, "Mono.Net.Security", "AsyncProtocolResult");
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.AsyncProtocolResult
  // [TokenAttribute] Offset: FFFFFFFF
  class AsyncProtocolResult : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 <UserResult>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int UserResult;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: UserResult and: Error
    char __padding0[0x4] = {};
    // private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* Error;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32 <UserResult>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$UserResult$k__BackingField();
    // Get instance field reference: private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_$Error$k__BackingField();
    // public System.Int32 get_UserResult()
    // Offset: 0x1B006E8
    int get_UserResult();
    // public System.Runtime.ExceptionServices.ExceptionDispatchInfo get_Error()
    // Offset: 0x1B006F0
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* get_Error();
    // public System.Void .ctor(System.Int32 result)
    // Offset: 0x1B004B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncProtocolResult* New_ctor(int result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Net::Security::AsyncProtocolResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncProtocolResult*, creationType>(result)));
    }
    // public System.Void .ctor(System.Runtime.ExceptionServices.ExceptionDispatchInfo error)
    // Offset: 0x1B0065C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncProtocolResult* New_ctor(::System::Runtime::ExceptionServices::ExceptionDispatchInfo* error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Net::Security::AsyncProtocolResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncProtocolResult*, creationType>(error)));
    }
  }; // Mono.Net.Security.AsyncProtocolResult
  #pragma pack(pop)
  static check_size<sizeof(AsyncProtocolResult), 24 + sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*)> __Mono_Net_Security_AsyncProtocolResultSizeCheck;
  static_assert(sizeof(AsyncProtocolResult) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Net::Security::AsyncProtocolResult::get_UserResult
// Il2CppName: get_UserResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Net::Security::AsyncProtocolResult::*)()>(&Mono::Net::Security::AsyncProtocolResult::get_UserResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::AsyncProtocolResult*), "get_UserResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::AsyncProtocolResult::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo* (Mono::Net::Security::AsyncProtocolResult::*)()>(&Mono::Net::Security::AsyncProtocolResult::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::AsyncProtocolResult*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::AsyncProtocolResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Net::Security::AsyncProtocolResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
