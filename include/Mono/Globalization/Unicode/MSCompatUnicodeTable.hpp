// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Globalization::Unicode
namespace Mono::Globalization::Unicode {
  // Forward declaring type: TailoringInfo
  class TailoringInfo;
  // Forward declaring type: Contraction
  class Contraction;
  // Forward declaring type: Level2Map
  class Level2Map;
  // Forward declaring type: CodePointIndexer
  class CodePointIndexer;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Mono.Globalization.Unicode
namespace Mono::Globalization::Unicode {
  // Forward declaring type: MSCompatUnicodeTable
  class MSCompatUnicodeTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Globalization::Unicode::MSCompatUnicodeTable);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Globalization::Unicode::MSCompatUnicodeTable*, "Mono.Globalization.Unicode", "MSCompatUnicodeTable");
// Type namespace: Mono.Globalization.Unicode
namespace Mono::Globalization::Unicode {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Globalization.Unicode.MSCompatUnicodeTable
  // [TokenAttribute] Offset: FFFFFFFF
  class MSCompatUnicodeTable : public ::Il2CppObject {
    public:
    // Nested type: ::Mono::Globalization::Unicode::MSCompatUnicodeTable::$$c
    class $$c;
    // Get static field: static public System.Int32 MaxExpansionLength
    static int _get_MaxExpansionLength();
    // Set static field: static public System.Int32 MaxExpansionLength
    static void _set_MaxExpansionLength(int value);
    // Get static field: static private readonly System.Byte* ignorableFlags
    static uint8_t* _get_ignorableFlags();
    // Set static field: static private readonly System.Byte* ignorableFlags
    static void _set_ignorableFlags(uint8_t* value);
    // Get static field: static private readonly System.Byte* categories
    static uint8_t* _get_categories();
    // Set static field: static private readonly System.Byte* categories
    static void _set_categories(uint8_t* value);
    // Get static field: static private readonly System.Byte* level1
    static uint8_t* _get_level1();
    // Set static field: static private readonly System.Byte* level1
    static void _set_level1(uint8_t* value);
    // Get static field: static private readonly System.Byte* level2
    static uint8_t* _get_level2();
    // Set static field: static private readonly System.Byte* level2
    static void _set_level2(uint8_t* value);
    // Get static field: static private readonly System.Byte* level3
    static uint8_t* _get_level3();
    // Set static field: static private readonly System.Byte* level3
    static void _set_level3(uint8_t* value);
    // Get static field: static private System.Byte* cjkCHScategory
    static uint8_t* _get_cjkCHScategory();
    // Set static field: static private System.Byte* cjkCHScategory
    static void _set_cjkCHScategory(uint8_t* value);
    // Get static field: static private System.Byte* cjkCHTcategory
    static uint8_t* _get_cjkCHTcategory();
    // Set static field: static private System.Byte* cjkCHTcategory
    static void _set_cjkCHTcategory(uint8_t* value);
    // Get static field: static private System.Byte* cjkJAcategory
    static uint8_t* _get_cjkJAcategory();
    // Set static field: static private System.Byte* cjkJAcategory
    static void _set_cjkJAcategory(uint8_t* value);
    // Get static field: static private System.Byte* cjkKOcategory
    static uint8_t* _get_cjkKOcategory();
    // Set static field: static private System.Byte* cjkKOcategory
    static void _set_cjkKOcategory(uint8_t* value);
    // Get static field: static private System.Byte* cjkCHSlv1
    static uint8_t* _get_cjkCHSlv1();
    // Set static field: static private System.Byte* cjkCHSlv1
    static void _set_cjkCHSlv1(uint8_t* value);
    // Get static field: static private System.Byte* cjkCHTlv1
    static uint8_t* _get_cjkCHTlv1();
    // Set static field: static private System.Byte* cjkCHTlv1
    static void _set_cjkCHTlv1(uint8_t* value);
    // Get static field: static private System.Byte* cjkJAlv1
    static uint8_t* _get_cjkJAlv1();
    // Set static field: static private System.Byte* cjkJAlv1
    static void _set_cjkJAlv1(uint8_t* value);
    // Get static field: static private System.Byte* cjkKOlv1
    static uint8_t* _get_cjkKOlv1();
    // Set static field: static private System.Byte* cjkKOlv1
    static void _set_cjkKOlv1(uint8_t* value);
    // Get static field: static private System.Byte* cjkKOlv2
    static uint8_t* _get_cjkKOlv2();
    // Set static field: static private System.Byte* cjkKOlv2
    static void _set_cjkKOlv2(uint8_t* value);
    // Get static field: static private readonly System.Char[] tailoringArr
    static ::ArrayW<::Il2CppChar> _get_tailoringArr();
    // Set static field: static private readonly System.Char[] tailoringArr
    static void _set_tailoringArr(::ArrayW<::Il2CppChar> value);
    // Get static field: static private readonly Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos
    static ::ArrayW<::Mono::Globalization::Unicode::TailoringInfo*> _get_tailoringInfos();
    // Set static field: static private readonly Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos
    static void _set_tailoringInfos(::ArrayW<::Mono::Globalization::Unicode::TailoringInfo*> value);
    // Get static field: static private System.Object forLock
    static ::Il2CppObject* _get_forLock();
    // Set static field: static private System.Object forLock
    static void _set_forLock(::Il2CppObject* value);
    // Get static field: static public readonly System.Boolean isReady
    static bool _get_isReady();
    // Set static field: static public readonly System.Boolean isReady
    static void _set_isReady(bool value);
    // static public System.Boolean get_IsReady()
    // Offset: 0x1F4A7E8
    static bool get_IsReady();
    // static private System.Void .cctor()
    // Offset: 0x1F4A8FC
    static void _cctor();
    // static public Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(System.Int32 lcid)
    // Offset: 0x1F49688
    static ::Mono::Globalization::Unicode::TailoringInfo* GetTailoringInfo(int lcid);
    // static public System.Void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals)
    // Offset: 0x1F497B4
    static void BuildTailoringTables(::System::Globalization::CultureInfo* culture, ::Mono::Globalization::Unicode::TailoringInfo* t, ByRef<::ArrayW<::Mono::Globalization::Unicode::Contraction*>> contractions, ByRef<::ArrayW<::Mono::Globalization::Unicode::Level2Map*>> diacriticals);
    // static private System.Void SetCJKReferences(System.String name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref System.Byte* catTable, ref System.Byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref System.Byte* lv2Table)
    // Offset: 0x1F49D84
    static void SetCJKReferences(::StringW name, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> cjkIndexer, ByRef<uint8_t*> catTable, ByRef<uint8_t*> lv1Table, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> lv2Indexer, ByRef<uint8_t*> lv2Table);
    // static public System.Byte Category(System.Int32 cp)
    // Offset: 0x1F4A014
    static uint8_t Category(int cp);
    // static public System.Byte Level1(System.Int32 cp)
    // Offset: 0x1F4A0CC
    static uint8_t Level1(int cp);
    // static public System.Byte Level2(System.Int32 cp)
    // Offset: 0x1F4A184
    static uint8_t Level2(int cp);
    // static public System.Byte Level3(System.Int32 cp)
    // Offset: 0x1F4A23C
    static uint8_t Level3(int cp);
    // static public System.Boolean IsIgnorable(System.Int32 cp, System.Byte flag)
    // Offset: 0x1F4A2F4
    static bool IsIgnorable(int cp, uint8_t flag);
    // static public System.Boolean IsIgnorableNonSpacing(System.Int32 cp)
    // Offset: 0x1F4A41C
    static bool IsIgnorableNonSpacing(int cp);
    // static public System.Int32 ToKanaTypeInsensitive(System.Int32 i)
    // Offset: 0x1F4A484
    static int ToKanaTypeInsensitive(int i);
    // static public System.Int32 ToWidthCompat(System.Int32 i)
    // Offset: 0x1F4A4A4
    static int ToWidthCompat(int i);
    // static public System.Boolean HasSpecialWeight(System.Char c)
    // Offset: 0x1F4A63C
    static bool HasSpecialWeight(::Il2CppChar c);
    // static public System.Boolean IsHalfWidthKana(System.Char c)
    // Offset: 0x1F4A6D0
    static bool IsHalfWidthKana(::Il2CppChar c);
    // static public System.Boolean IsHiragana(System.Char c)
    // Offset: 0x1F4A6E4
    static bool IsHiragana(::Il2CppChar c);
    // static public System.Boolean IsJapaneseSmallLetter(System.Char c)
    // Offset: 0x1F4A6FC
    static bool IsJapaneseSmallLetter(::Il2CppChar c);
    // static private System.IntPtr GetResource(System.String name)
    // Offset: 0x1F4A850
    static ::System::IntPtr GetResource(::StringW name);
    // static private System.UInt32 UInt32FromBytePtr(System.Byte* raw, System.UInt32 idx)
    // Offset: 0x1F4A8CC
    static uint UInt32FromBytePtr(uint8_t* raw, uint idx);
    // static public System.Void FillCJK(System.String culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref System.Byte* catTable, ref System.Byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref System.Byte* lv2Table)
    // Offset: 0x1F4AD78
    static void FillCJK(::StringW culture, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> cjkIndexer, ByRef<uint8_t*> catTable, ByRef<uint8_t*> lv1Table, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> lv2Indexer, ByRef<uint8_t*> lv2Table);
    // static private System.Void FillCJKCore(System.String culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref System.Byte* catTable, ref System.Byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref System.Byte* lv2Table)
    // Offset: 0x1F4AEC4
    static void FillCJKCore(::StringW culture, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> cjkIndexer, ByRef<uint8_t*> catTable, ByRef<uint8_t*> lv1Table, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*> cjkLv2Indexer, ByRef<uint8_t*> lv2Table);
  }; // Mono.Globalization.Unicode.MSCompatUnicodeTable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::get_IsReady
// Il2CppName: get_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::get_IsReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "get_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::GetTailoringInfo
// Il2CppName: GetTailoringInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Globalization::Unicode::TailoringInfo* (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::GetTailoringInfo)> {
  static const MethodInfo* get() {
    static auto* lcid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "GetTailoringInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lcid});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::BuildTailoringTables
// Il2CppName: BuildTailoringTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Globalization::CultureInfo*, ::Mono::Globalization::Unicode::TailoringInfo*, ByRef<::ArrayW<::Mono::Globalization::Unicode::Contraction*>>, ByRef<::ArrayW<::Mono::Globalization::Unicode::Level2Map*>>)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::BuildTailoringTables)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "TailoringInfo")->byval_arg;
    static auto* contractions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "Contraction"), 1)->this_arg;
    static auto* diacriticals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "Level2Map"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "BuildTailoringTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture, t, contractions, diacriticals});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::SetCJKReferences
// Il2CppName: SetCJKReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>, ByRef<uint8_t*>, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::SetCJKReferences)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cjkIndexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* catTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* lv1Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* lv2Indexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* lv2Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "SetCJKReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, cjkIndexer, catTable, lv1Table, lv2Indexer, lv2Table});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::Category
// Il2CppName: Category
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::Category)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "Category", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::Level1
// Il2CppName: Level1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::Level1)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "Level1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::Level2
// Il2CppName: Level2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::Level2)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "Level2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::Level3
// Il2CppName: Level3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::Level3)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "Level3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::IsIgnorable
// Il2CppName: IsIgnorable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, uint8_t)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::IsIgnorable)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "IsIgnorable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp, flag});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::IsIgnorableNonSpacing
// Il2CppName: IsIgnorableNonSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::IsIgnorableNonSpacing)> {
  static const MethodInfo* get() {
    static auto* cp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "IsIgnorableNonSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cp});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::ToKanaTypeInsensitive
// Il2CppName: ToKanaTypeInsensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::ToKanaTypeInsensitive)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "ToKanaTypeInsensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::ToWidthCompat
// Il2CppName: ToWidthCompat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::ToWidthCompat)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "ToWidthCompat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::HasSpecialWeight
// Il2CppName: HasSpecialWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::HasSpecialWeight)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "HasSpecialWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::IsHalfWidthKana
// Il2CppName: IsHalfWidthKana
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::IsHalfWidthKana)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "IsHalfWidthKana", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::IsHiragana
// Il2CppName: IsHiragana
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::IsHiragana)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "IsHiragana", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::IsJapaneseSmallLetter
// Il2CppName: IsJapaneseSmallLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::IsJapaneseSmallLetter)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "IsJapaneseSmallLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::GetResource
// Il2CppName: GetResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::GetResource)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "GetResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::UInt32FromBytePtr
// Il2CppName: UInt32FromBytePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint8_t*, uint)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::UInt32FromBytePtr)> {
  static const MethodInfo* get() {
    static auto* raw = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "UInt32FromBytePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raw, idx});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::FillCJK
// Il2CppName: FillCJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>, ByRef<uint8_t*>, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::FillCJK)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cjkIndexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* catTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* lv1Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* lv2Indexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* lv2Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "FillCJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture, cjkIndexer, catTable, lv1Table, lv2Indexer, lv2Table});
  }
};
// Writing MetadataGetter for method: Mono::Globalization::Unicode::MSCompatUnicodeTable::FillCJKCore
// Il2CppName: FillCJKCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>, ByRef<uint8_t*>, ByRef<::Mono::Globalization::Unicode::CodePointIndexer*>, ByRef<uint8_t*>)>(&Mono::Globalization::Unicode::MSCompatUnicodeTable::FillCJKCore)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cjkIndexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* catTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* lv1Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* cjkLv2Indexer = &::il2cpp_utils::GetClassFromName("Mono.Globalization.Unicode", "CodePointIndexer")->this_arg;
    static auto* lv2Table = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Globalization::Unicode::MSCompatUnicodeTable*), "FillCJKCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture, cjkIndexer, catTable, lv1Table, cjkLv2Indexer, lv2Table});
  }
};
