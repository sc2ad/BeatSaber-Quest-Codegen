// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticItem
  struct CosmeticsController_CosmeticItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::CosmeticsController_CosmeticItem, "GorillaNetworking", "CosmeticsController/CosmeticItem");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x32
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
  // [TokenAttribute] Offset: FFFFFFFF
  struct CosmeticsController_CosmeticItem/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String itemName
    // Size: 0x8
    // Offset: 0x0
    ::StringW itemName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String itemSlot
    // Size: 0x8
    // Offset: 0x8
    ::StringW itemSlot;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Sprite itemPicture
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Sprite* itemPicture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 cost
    // Size: 0x4
    // Offset: 0x20
    int cost;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cost and: bundledItems
    char __padding4[0x4] = {};
    // public System.String[] bundledItems
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> bundledItems;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean canTryOn
    // Size: 0x1
    // Offset: 0x30
    bool canTryOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bothHandsHoldable
    // Size: 0x1
    // Offset: 0x31
    bool bothHandsHoldable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: CosmeticsController_CosmeticItem
    constexpr CosmeticsController_CosmeticItem(::StringW itemName_ = {}, ::StringW itemSlot_ = {}, ::UnityEngine::Sprite* itemPicture_ = {}, ::StringW displayName_ = {}, int cost_ = {}, ::ArrayW<::StringW> bundledItems_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), bool canTryOn_ = {}, bool bothHandsHoldable_ = {}) noexcept : itemName{itemName_}, itemSlot{itemSlot_}, itemPicture{itemPicture_}, displayName{displayName_}, cost{cost_}, bundledItems{bundledItems_}, canTryOn{canTryOn_}, bothHandsHoldable{bothHandsHoldable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String itemName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemName();
    // Get instance field reference: public System.String itemSlot
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemSlot();
    // Get instance field reference: public UnityEngine.Sprite itemPicture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_itemPicture();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.Int32 cost
    [[deprecated("Use field access instead!")]] int& dyn_cost();
    // Get instance field reference: public System.String[] bundledItems
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_bundledItems();
    // Get instance field reference: public System.Boolean canTryOn
    [[deprecated("Use field access instead!")]] bool& dyn_canTryOn();
    // Get instance field reference: public System.Boolean bothHandsHoldable
    [[deprecated("Use field access instead!")]] bool& dyn_bothHandsHoldable();
  }; // GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
  #pragma pack(pop)
  static check_size<sizeof(CosmeticsController_CosmeticItem), 49 + sizeof(bool)> __GorillaNetworking_CosmeticsController_CosmeticItemSizeCheck;
  static_assert(sizeof(CosmeticsController_CosmeticItem) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
