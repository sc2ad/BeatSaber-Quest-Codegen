// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
#include "GorillaNetworking/CosmeticsController_CosmeticItem.hpp"
// Completed includes
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticSet
  struct CosmeticsController_CosmeticSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::CosmeticsController_CosmeticSet, "GorillaNetworking", "CosmeticsController/CosmeticSet");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x112
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticSet
  // [TokenAttribute] Offset: FFFFFFFF
  struct CosmeticsController_CosmeticSet/*, public ::System::ValueType*/ {
    public:
    public:
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem hat
    // Size: 0x32
    // Offset: 0x0
    ::GorillaNetworking::CosmeticsController_CosmeticItem hat;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    // Padding between fields: hat and: badge
    char __padding0[0x6] = {};
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem badge
    // Size: 0x32
    // Offset: 0x38
    ::GorillaNetworking::CosmeticsController_CosmeticItem badge;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    // Padding between fields: badge and: face
    char __padding1[0x6] = {};
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem face
    // Size: 0x32
    // Offset: 0x70
    ::GorillaNetworking::CosmeticsController_CosmeticItem face;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    // Padding between fields: face and: leftHandHold
    char __padding2[0x6] = {};
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem leftHandHold
    // Size: 0x32
    // Offset: 0xA8
    ::GorillaNetworking::CosmeticsController_CosmeticItem leftHandHold;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    // Padding between fields: leftHandHold and: rightHandHold
    char __padding3[0x6] = {};
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem rightHandHold
    // Size: 0x32
    // Offset: 0xE0
    ::GorillaNetworking::CosmeticsController_CosmeticItem rightHandHold;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    public:
    // Creating value type constructor for type: CosmeticsController_CosmeticSet
    constexpr CosmeticsController_CosmeticSet(::GorillaNetworking::CosmeticsController_CosmeticItem hat_ = {}, ::GorillaNetworking::CosmeticsController_CosmeticItem badge_ = {}, ::GorillaNetworking::CosmeticsController_CosmeticItem face_ = {}, ::GorillaNetworking::CosmeticsController_CosmeticItem leftHandHold_ = {}, ::GorillaNetworking::CosmeticsController_CosmeticItem rightHandHold_ = {}) noexcept : hat{hat_}, badge{badge_}, face{face_}, leftHandHold{leftHandHold_}, rightHandHold{rightHandHold_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem hat
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_hat();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem badge
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_badge();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem face
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_face();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem leftHandHold
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_leftHandHold();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem rightHandHold
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_rightHandHold();
  }; // GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticSet
  #pragma pack(pop)
  static check_size<sizeof(CosmeticsController_CosmeticSet), 224 + sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem)> __GorillaNetworking_CosmeticsController_CosmeticSetSizeCheck;
  static_assert(sizeof(CosmeticsController_CosmeticSet) == 0x112);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
