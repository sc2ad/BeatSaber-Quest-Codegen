// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAsset
  class TextAsset;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
  // Forward declaring type: GorillaNetworkJoinTrigger
  class GorillaNetworkJoinTrigger;
  // Forward declaring type: GorillaKeyboardButton
  class GorillaKeyboardButton;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaLevelScreen
  class GorillaLevelScreen;
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
  // Forward declaring type: ModeSelectButton
  class ModeSelectButton;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: GorillaSnapTurn
  class GorillaSnapTurn;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: ExecuteCloudScriptResult
  class ExecuteCloudScriptResult;
  // Forward declaring type: GetTimeResult
  class GetTimeResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaComputer
  class GorillaComputer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaComputer);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaComputer*, "GorillaNetworking", "GorillaComputer");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x238
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaComputer
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaComputer : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GorillaNetworking::GorillaComputer::ComputerState
    struct ComputerState;
    // Nested type: ::GorillaNetworking::GorillaComputer::$ButtonColorUpdate$d__78
    class $ButtonColorUpdate$d__78;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$c__DisplayClass125_0
    class $$c__DisplayClass125_0;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComputerState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ComputerState
      constexpr ComputerState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Startup
      static constexpr const int Startup = 0;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Startup
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Startup();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Startup
      static void _set_Startup(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Color
      static constexpr const int Color = 1;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Color
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Color();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Color
      static void _set_Color(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Name
      static constexpr const int Name = 2;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Name
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Name();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Name
      static void _set_Name(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Turn
      static constexpr const int Turn = 3;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Turn
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Turn();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Turn
      static void _set_Turn(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Mic
      static constexpr const int Mic = 4;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Mic
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Mic();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Mic
      static void _set_Mic(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Room
      static constexpr const int Room = 5;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Room
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Room();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Room
      static void _set_Room(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Queue
      static constexpr const int Queue = 6;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Queue
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Queue();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Queue
      static void _set_Queue(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Group
      static constexpr const int Group = 7;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Group
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Group();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Group
      static void _set_Group(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Voice
      static constexpr const int Voice = 8;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Voice
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Voice();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Voice
      static void _set_Voice(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Credits
      static constexpr const int Credits = 9;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Credits
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Credits();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Credits
      static void _set_Credits(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Visuals
      static constexpr const int Visuals = 10;
      // Get static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Visuals
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Visuals();
      // Set static field: static public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState Visuals
      static void _set_Visuals(::GorillaNetworking::GorillaComputer::ComputerState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState
    #pragma pack(pop)
    static check_size<sizeof(GorillaComputer::ComputerState), 0 + sizeof(int)> __GorillaNetworking_GorillaComputer_ComputerStateSizeCheck;
    static_assert(sizeof(GorillaComputer::ComputerState) == 0x4);
    public:
    // public System.Boolean tryGetTimeAgain
    // Size: 0x1
    // Offset: 0x20
    bool tryGetTimeAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tryGetTimeAgain and: unpressedMaterial
    char __padding0[0x7] = {};
    // public UnityEngine.Material unpressedMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* unpressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material pressedMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* pressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.String currentTextField
    // Size: 0x8
    // Offset: 0x38
    ::StringW currentTextField;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single buttonFadeTime
    // Size: 0x4
    // Offset: 0x40
    float buttonFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: buttonFadeTime and: offlineScoreboard
    char __padding4[0x4] = {};
    // public UnityEngine.UI.Text offlineScoreboard
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Text* offlineScoreboard;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text screenText
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* screenText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text functionSelectText
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Text* functionSelectText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text wallScreenText
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UI::Text* wallScreenText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text tutorialWallScreenText
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UI::Text* tutorialWallScreenText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text offlineVRRigNametagText
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UI::Text* offlineVRRigNametagText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.String versionText
    // Size: 0x8
    // Offset: 0x78
    ::StringW versionText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String versionMismatch
    // Size: 0x8
    // Offset: 0x80
    ::StringW versionMismatch;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String unableToConnect
    // Size: 0x8
    // Offset: 0x88
    ::StringW unableToConnect;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Material wrongVersionMaterial
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Material* wrongVersionMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer wallScreenRenderer
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::MeshRenderer* wallScreenRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer tutorialWallScreenRenderer
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::MeshRenderer* tutorialWallScreenRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer computerScreenRenderer
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::MeshRenderer* computerScreenRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer scoreboardRenderer
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::MeshRenderer* scoreboardRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public GorillaLevelScreen[] levelScreens
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::GlobalNamespace::GorillaLevelScreen*> levelScreens;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLevelScreen*>) == 0x8);
    // public System.Int64 startupMillis
    // Size: 0x8
    // Offset: 0xC0
    int64_t startupMillis;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public UnityEngine.UI.Text currentGameModeText
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::UI::Text* currentGameModeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.Int32 includeUpdatedServerSynchTest
    // Size: 0x4
    // Offset: 0xD0
    int includeUpdatedServerSynchTest;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: includeUpdatedServerSynchTest and: networkController
    char __padding22[0x4] = {};
    // public GorillaNetworking.PhotonNetworkController networkController
    // Size: 0x8
    // Offset: 0xD8
    ::GorillaNetworking::PhotonNetworkController* networkController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController*) == 0x8);
    // public System.Single updateCooldown
    // Size: 0x4
    // Offset: 0xE0
    float updateCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastUpdateTime
    // Size: 0x4
    // Offset: 0xE4
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isConnectedToMaster
    // Size: 0x1
    // Offset: 0xE8
    bool isConnectedToMaster;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnectedToMaster and: allowedMapsToJoin
    char __padding26[0x7] = {};
    // public System.String[] allowedMapsToJoin
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::StringW> allowedMapsToJoin;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState currentState
    // Size: 0x4
    // Offset: 0xF8
    ::GorillaNetworking::GorillaComputer::ComputerState currentState;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaComputer::ComputerState) == 0x4);
    // private System.Int32 usersBanned
    // Size: 0x4
    // Offset: 0xFC
    int usersBanned;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.UI.Text motdText
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UI::Text* motdText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.String lastMOTD
    // Size: 0x8
    // Offset: 0x108
    ::StringW lastMOTD;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Material updatedMOTDMaterial
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Material* updatedMOTDMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer motdRenderer
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::MeshRenderer* motdRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Single redValue
    // Size: 0x4
    // Offset: 0x120
    float redValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: redValue and: redText
    char __padding34[0x4] = {};
    // private System.String redText
    // Size: 0x8
    // Offset: 0x128
    ::StringW redText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single blueValue
    // Size: 0x4
    // Offset: 0x130
    float blueValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blueValue and: blueText
    char __padding36[0x4] = {};
    // private System.String blueText
    // Size: 0x8
    // Offset: 0x138
    ::StringW blueText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single greenValue
    // Size: 0x4
    // Offset: 0x140
    float greenValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: greenValue and: greenText
    char __padding38[0x4] = {};
    // private System.String greenText
    // Size: 0x8
    // Offset: 0x148
    ::StringW greenText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 colorCursorLine
    // Size: 0x4
    // Offset: 0x150
    int colorCursorLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: colorCursorLine and: savedName
    char __padding40[0x4] = {};
    // public System.String savedName
    // Size: 0x8
    // Offset: 0x158
    ::StringW savedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String currentName
    // Size: 0x8
    // Offset: 0x160
    ::StringW currentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String[] exactOneWeek
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::StringW> exactOneWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] anywhereOneWeek
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::StringW> anywhereOneWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] anywhereTwoWeek
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::StringW> anywhereTwoWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.TextAsset exactOneWeekFile
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::TextAsset* exactOneWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public UnityEngine.TextAsset anywhereOneWeekFile
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::TextAsset* anywhereOneWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public UnityEngine.TextAsset anywhereTwoWeekFile
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::TextAsset* anywhereTwoWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public System.String roomToJoin
    // Size: 0x8
    // Offset: 0x198
    ::StringW roomToJoin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean roomFull
    // Size: 0x1
    // Offset: 0x1A0
    bool roomFull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean roomNotAllowed
    // Size: 0x1
    // Offset: 0x1A1
    bool roomNotAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: roomNotAllowed and: turnValue
    char __padding51[0x2] = {};
    // private System.Int32 turnValue
    // Size: 0x4
    // Offset: 0x1A4
    int turnValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String turnType
    // Size: 0x8
    // Offset: 0x1A8
    ::StringW turnType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn gorillaTurn
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn* gorillaTurn;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*) == 0x8);
    // public System.String pttType
    // Size: 0x8
    // Offset: 0x1B8
    ::StringW pttType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String currentQueue
    // Size: 0x8
    // Offset: 0x1C0
    ::StringW currentQueue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean allowedInCompetitive
    // Size: 0x1
    // Offset: 0x1C8
    bool allowedInCompetitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowedInCompetitive and: groupMapJoin
    char __padding57[0x7] = {};
    // public System.String groupMapJoin
    // Size: 0x8
    // Offset: 0x1D0
    ::StringW groupMapJoin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 groupMapJoinIndex
    // Size: 0x4
    // Offset: 0x1D8
    int groupMapJoinIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: groupMapJoinIndex and: friendJoinCollider
    char __padding59[0x4] = {};
    // public GorillaFriendCollider friendJoinCollider
    // Size: 0x8
    // Offset: 0x1E0
    ::GlobalNamespace::GorillaFriendCollider* friendJoinCollider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaFriendCollider*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger caveMapTrigger
    // Size: 0x8
    // Offset: 0x1E8
    ::GorillaNetworking::GorillaNetworkJoinTrigger* caveMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger forestMapTrigger
    // Size: 0x8
    // Offset: 0x1F0
    ::GorillaNetworking::GorillaNetworkJoinTrigger* forestMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger canyonMapTrigger
    // Size: 0x8
    // Offset: 0x1F8
    ::GorillaNetworking::GorillaNetworkJoinTrigger* canyonMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger cityMapTrigger
    // Size: 0x8
    // Offset: 0x200
    ::GorillaNetworking::GorillaNetworkJoinTrigger* cityMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger mountainMapTrigger
    // Size: 0x8
    // Offset: 0x208
    ::GorillaNetworking::GorillaNetworkJoinTrigger* mountainMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public System.String voiceChatOn
    // Size: 0x8
    // Offset: 0x210
    ::StringW voiceChatOn;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public ModeSelectButton[] modeSelectButtons
    // Size: 0x8
    // Offset: 0x218
    ::ArrayW<::GlobalNamespace::ModeSelectButton*> modeSelectButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ModeSelectButton*>) == 0x8);
    // public System.String currentGameMode
    // Size: 0x8
    // Offset: 0x220
    ::StringW currentGameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean disableParticles
    // Size: 0x1
    // Offset: 0x228
    bool disableParticles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableParticles and: instrumentVolume
    char __padding69[0x3] = {};
    // public System.Single instrumentVolume
    // Size: 0x4
    // Offset: 0x22C
    float instrumentVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Material[] updatedMaterials
    // Size: 0x8
    // Offset: 0x230
    ::ArrayW<::UnityEngine::Material*> updatedMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    public:
    // Get static field: static public GorillaNetworking.GorillaComputer instance
    static ::GorillaNetworking::GorillaComputer* _get_instance();
    // Set static field: static public GorillaNetworking.GorillaComputer instance
    static void _set_instance(::GorillaNetworking::GorillaComputer* value);
    // Get instance field reference: public System.Boolean tryGetTimeAgain
    [[deprecated("Use field access instead!")]] bool& dyn_tryGetTimeAgain();
    // Get instance field reference: public UnityEngine.Material unpressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_unpressedMaterial();
    // Get instance field reference: public UnityEngine.Material pressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pressedMaterial();
    // Get instance field reference: public System.String currentTextField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentTextField();
    // Get instance field reference: public System.Single buttonFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_buttonFadeTime();
    // Get instance field reference: public UnityEngine.UI.Text offlineScoreboard
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_offlineScoreboard();
    // Get instance field reference: public UnityEngine.UI.Text screenText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_screenText();
    // Get instance field reference: public UnityEngine.UI.Text functionSelectText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_functionSelectText();
    // Get instance field reference: public UnityEngine.UI.Text wallScreenText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_wallScreenText();
    // Get instance field reference: public UnityEngine.UI.Text tutorialWallScreenText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_tutorialWallScreenText();
    // Get instance field reference: public UnityEngine.UI.Text offlineVRRigNametagText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_offlineVRRigNametagText();
    // Get instance field reference: public System.String versionText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_versionText();
    // Get instance field reference: public System.String versionMismatch
    [[deprecated("Use field access instead!")]] ::StringW& dyn_versionMismatch();
    // Get instance field reference: public System.String unableToConnect
    [[deprecated("Use field access instead!")]] ::StringW& dyn_unableToConnect();
    // Get instance field reference: public UnityEngine.Material wrongVersionMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_wrongVersionMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer wallScreenRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_wallScreenRenderer();
    // Get instance field reference: public UnityEngine.MeshRenderer tutorialWallScreenRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_tutorialWallScreenRenderer();
    // Get instance field reference: public UnityEngine.MeshRenderer computerScreenRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_computerScreenRenderer();
    // Get instance field reference: public UnityEngine.MeshRenderer scoreboardRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_scoreboardRenderer();
    // Get instance field reference: public GorillaLevelScreen[] levelScreens
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& dyn_levelScreens();
    // Get instance field reference: public System.Int64 startupMillis
    [[deprecated("Use field access instead!")]] int64_t& dyn_startupMillis();
    // Get instance field reference: public UnityEngine.UI.Text currentGameModeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_currentGameModeText();
    // Get instance field reference: public System.Int32 includeUpdatedServerSynchTest
    [[deprecated("Use field access instead!")]] int& dyn_includeUpdatedServerSynchTest();
    // Get instance field reference: public GorillaNetworking.PhotonNetworkController networkController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& dyn_networkController();
    // Get instance field reference: public System.Single updateCooldown
    [[deprecated("Use field access instead!")]] float& dyn_updateCooldown();
    // Get instance field reference: public System.Single lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_lastUpdateTime();
    // Get instance field reference: public System.Boolean isConnectedToMaster
    [[deprecated("Use field access instead!")]] bool& dyn_isConnectedToMaster();
    // Get instance field reference: public System.String[] allowedMapsToJoin
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_allowedMapsToJoin();
    // Get instance field reference: public GorillaNetworking.GorillaComputer/GorillaNetworking.ComputerState currentState
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaComputer::ComputerState& dyn_currentState();
    // Get instance field reference: private System.Int32 usersBanned
    [[deprecated("Use field access instead!")]] int& dyn_usersBanned();
    // Get instance field reference: public UnityEngine.UI.Text motdText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_motdText();
    // Get instance field reference: private System.String lastMOTD
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lastMOTD();
    // Get instance field reference: public UnityEngine.Material updatedMOTDMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_updatedMOTDMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer motdRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_motdRenderer();
    // Get instance field reference: private System.Single redValue
    [[deprecated("Use field access instead!")]] float& dyn_redValue();
    // Get instance field reference: private System.String redText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_redText();
    // Get instance field reference: private System.Single blueValue
    [[deprecated("Use field access instead!")]] float& dyn_blueValue();
    // Get instance field reference: private System.String blueText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_blueText();
    // Get instance field reference: private System.Single greenValue
    [[deprecated("Use field access instead!")]] float& dyn_greenValue();
    // Get instance field reference: private System.String greenText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_greenText();
    // Get instance field reference: private System.Int32 colorCursorLine
    [[deprecated("Use field access instead!")]] int& dyn_colorCursorLine();
    // Get instance field reference: public System.String savedName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_savedName();
    // Get instance field reference: public System.String currentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentName();
    // Get instance field reference: private System.String[] exactOneWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_exactOneWeek();
    // Get instance field reference: private System.String[] anywhereOneWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_anywhereOneWeek();
    // Get instance field reference: private System.String[] anywhereTwoWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_anywhereTwoWeek();
    // Get instance field reference: public UnityEngine.TextAsset exactOneWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_exactOneWeekFile();
    // Get instance field reference: public UnityEngine.TextAsset anywhereOneWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_anywhereOneWeekFile();
    // Get instance field reference: public UnityEngine.TextAsset anywhereTwoWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_anywhereTwoWeekFile();
    // Get instance field reference: public System.String roomToJoin
    [[deprecated("Use field access instead!")]] ::StringW& dyn_roomToJoin();
    // Get instance field reference: public System.Boolean roomFull
    [[deprecated("Use field access instead!")]] bool& dyn_roomFull();
    // Get instance field reference: public System.Boolean roomNotAllowed
    [[deprecated("Use field access instead!")]] bool& dyn_roomNotAllowed();
    // Get instance field reference: private System.Int32 turnValue
    [[deprecated("Use field access instead!")]] int& dyn_turnValue();
    // Get instance field reference: private System.String turnType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_turnType();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn gorillaTurn
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*& dyn_gorillaTurn();
    // Get instance field reference: public System.String pttType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_pttType();
    // Get instance field reference: public System.String currentQueue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentQueue();
    // Get instance field reference: public System.Boolean allowedInCompetitive
    [[deprecated("Use field access instead!")]] bool& dyn_allowedInCompetitive();
    // Get instance field reference: public System.String groupMapJoin
    [[deprecated("Use field access instead!")]] ::StringW& dyn_groupMapJoin();
    // Get instance field reference: public System.Int32 groupMapJoinIndex
    [[deprecated("Use field access instead!")]] int& dyn_groupMapJoinIndex();
    // Get instance field reference: public GorillaFriendCollider friendJoinCollider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaFriendCollider*& dyn_friendJoinCollider();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger caveMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_caveMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger forestMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_forestMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger canyonMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_canyonMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger cityMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_cityMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger mountainMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_mountainMapTrigger();
    // Get instance field reference: public System.String voiceChatOn
    [[deprecated("Use field access instead!")]] ::StringW& dyn_voiceChatOn();
    // Get instance field reference: public ModeSelectButton[] modeSelectButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ModeSelectButton*>& dyn_modeSelectButtons();
    // Get instance field reference: public System.String currentGameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentGameMode();
    // Get instance field reference: public System.Boolean disableParticles
    [[deprecated("Use field access instead!")]] bool& dyn_disableParticles();
    // Get instance field reference: public System.Single instrumentVolume
    [[deprecated("Use field access instead!")]] float& dyn_instrumentVolume();
    // Get instance field reference: public UnityEngine.Material[] updatedMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_updatedMaterials();
    // public System.Void .ctor()
    // Offset: 0xDC95A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaComputer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaComputer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaComputer*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xDC3DB8
    void Awake();
    // private System.Void Update()
    // Offset: 0xDC5470
    void Update();
    // public System.Void OnConnectedToMasterStuff()
    // Offset: 0xDC54C8
    void OnConnectedToMasterStuff();
    // public System.Void PressButton(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC59A4
    void PressButton(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Collections.IEnumerator ButtonColorUpdate(GorillaNetworking.GorillaKeyboardButton button)
    // Offset: 0xDC71DC
    ::System::Collections::IEnumerator* ButtonColorUpdate(::GorillaNetworking::GorillaKeyboardButton* button);
    // private System.Void InitializeStartupState()
    // Offset: 0xDC5074
    void InitializeStartupState();
    // private System.Void InitializeRoomState()
    // Offset: 0xDC4F6C
    void InitializeRoomState();
    // private System.Void InitializeColorState()
    // Offset: 0xDC4CC8
    void InitializeColorState();
    // private System.Void InitializeNameState()
    // Offset: 0xDC4DB0
    void InitializeNameState();
    // private System.Void InitializeTurnState()
    // Offset: 0xDC4F70
    void InitializeTurnState();
    // private System.Void InitializeMicState()
    // Offset: 0xDC5148
    void InitializeMicState();
    // private System.Void InitializeQueueState()
    // Offset: 0xDC5078
    void InitializeQueueState();
    // private System.Void InitializeGroupState()
    // Offset: 0xDC51AC
    void InitializeGroupState();
    // private System.Void InitializeVoiceState()
    // Offset: 0xDC5240
    void InitializeVoiceState();
    // private System.Void InitializeGameMode()
    // Offset: 0xDC52A4
    void InitializeGameMode();
    // private System.Void InitializeVisualsState()
    // Offset: 0xDC5380
    void InitializeVisualsState();
    // private System.Void SwitchToColorState()
    // Offset: 0xDC735C
    void SwitchToColorState();
    // private System.Void SwitchToRoomState()
    // Offset: 0xDC7444
    void SwitchToRoomState();
    // private System.Void SwitchToNameState()
    // Offset: 0xDC7450
    void SwitchToNameState();
    // private System.Void SwitchToTurnState()
    // Offset: 0xDC745C
    void SwitchToTurnState();
    // private System.Void SwitchToMicState()
    // Offset: 0xDC7468
    void SwitchToMicState();
    // private System.Void SwitchToQueueState()
    // Offset: 0xDC7474
    void SwitchToQueueState();
    // private System.Void SwitchToGroupState()
    // Offset: 0xDC7480
    void SwitchToGroupState();
    // private System.Void SwitchToVoiceState()
    // Offset: 0xDC748C
    void SwitchToVoiceState();
    // private System.Void SwitchToCreditsState()
    // Offset: 0xDC7498
    void SwitchToCreditsState();
    // private System.Void SwitchToVisualsState()
    // Offset: 0xDC74A4
    void SwitchToVisualsState();
    // private System.Void ProcessStartupState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC5B34
    void ProcessStartupState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessColorState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC5B68
    void ProcessColorState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessNameState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6258
    void ProcessNameState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessRoomState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC5FD4
    void ProcessRoomState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessTurnState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6650
    void ProcessTurnState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessMicState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC68B4
    void ProcessMicState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessQueueState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC69FC
    void ProcessQueueState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessGroupState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6B4C
    void ProcessGroupState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessVoiceState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6E04
    void ProcessVoiceState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessVisualsState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6FD0
    void ProcessVisualsState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // private System.Void ProcessCreditsState(GorillaNetworking.GorillaKeyboardButton buttonPressed)
    // Offset: 0xDC6F24
    void ProcessCreditsState(::GorillaNetworking::GorillaKeyboardButton* buttonPressed);
    // public System.Void UpdateScreen()
    // Offset: 0xDC3F6C
    void UpdateScreen();
    // private System.Void UpdateFunctionScreen()
    // Offset: 0xDC7C9C
    void UpdateFunctionScreen();
    // private System.Void OnReturnCurrentVersion(PlayFab.ClientModels.ExecuteCloudScriptResult result)
    // Offset: 0xDC8190
    void OnReturnCurrentVersion(::PlayFab::ClientModels::ExecuteCloudScriptResult* result);
    // private System.Boolean CheckAutoBanList(System.String nameToCheck, System.Boolean forRoom)
    // Offset: 0xDC74B0
    bool CheckAutoBanList(::StringW nameToCheck, bool forRoom);
    // public System.Boolean CheckAutoBanListForName(System.String nameToCheck)
    // Offset: 0xDC88D0
    bool CheckAutoBanListForName(::StringW nameToCheck);
    // private System.Void BanMe(System.Int32 hours, System.String nameToCheck, System.Boolean forRoom)
    // Offset: 0xDC8764
    void BanMe(int hours, ::StringW nameToCheck, bool forRoom);
    // private System.Void OnReturnBan(PlayFab.ClientModels.ExecuteCloudScriptResult result)
    // Offset: 0xDC8B88
    void OnReturnBan(::PlayFab::ClientModels::ExecuteCloudScriptResult* result);
    // public System.Void GeneralFailureMessage(System.String failMessage)
    // Offset: 0xDC8540
    void GeneralFailureMessage(::StringW failMessage);
    // static private System.Void OnErrorShared(PlayFab.PlayFabError error)
    // Offset: 0xDC8B90
    static void OnErrorShared(::PlayFab::PlayFabError* error);
    // private System.Void GetCurrentTime()
    // Offset: 0xDC56BC
    void GetCurrentTime();
    // private System.Void OnGetTimeSuccess(PlayFab.ClientModels.GetTimeResult result)
    // Offset: 0xDC930C
    void OnGetTimeSuccess(::PlayFab::ClientModels::GetTimeResult* result);
    // private System.Void OnGetTimeFailure(PlayFab.PlayFabError error)
    // Offset: 0xDC93EC
    void OnGetTimeFailure(::PlayFab::PlayFabError* error);
    // public System.Void OnModeSelectButtonPress(System.String gameMode)
    // Offset: 0xDC7258
    void OnModeSelectButtonPress(::StringW gameMode);
    // public System.Void OnGroupJoinButtonPress(System.Int32 mapJoinIndex, GorillaFriendCollider chosenFriendJoinCollider)
    // Offset: 0xDC778C
    void OnGroupJoinButtonPress(int mapJoinIndex, ::GlobalNamespace::GorillaFriendCollider* chosenFriendJoinCollider);
    // public System.Void SaveModAccountData()
    // Offset: 0xDC57C8
    void SaveModAccountData();
    // public System.Void CompQueueUnlockButtonPress()
    // Offset: 0xDC9540
    void CompQueueUnlockButtonPress();
  }; // GorillaNetworking.GorillaComputer
  #pragma pack(pop)
  static check_size<sizeof(GorillaComputer), 560 + sizeof(::ArrayW<::UnityEngine::Material*>)> __GorillaNetworking_GorillaComputerSizeCheck;
  static_assert(sizeof(GorillaComputer) == 0x238);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaComputer::ComputerState, "GorillaNetworking", "GorillaComputer/ComputerState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnConnectedToMasterStuff
// Il2CppName: OnConnectedToMasterStuff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::OnConnectedToMasterStuff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnConnectedToMasterStuff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::PressButton
// Il2CppName: PressButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::PressButton)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "PressButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ButtonColorUpdate
// Il2CppName: ButtonColorUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ButtonColorUpdate)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ButtonColorUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeStartupState
// Il2CppName: InitializeStartupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeStartupState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeStartupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeRoomState
// Il2CppName: InitializeRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeRoomState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeColorState
// Il2CppName: InitializeColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeColorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeNameState
// Il2CppName: InitializeNameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeNameState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeNameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeTurnState
// Il2CppName: InitializeTurnState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeTurnState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeTurnState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeMicState
// Il2CppName: InitializeMicState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeMicState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeMicState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeQueueState
// Il2CppName: InitializeQueueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeQueueState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeQueueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeGroupState
// Il2CppName: InitializeGroupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeGroupState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeGroupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeVoiceState
// Il2CppName: InitializeVoiceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeVoiceState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeVoiceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeGameMode
// Il2CppName: InitializeGameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeGameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeGameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeVisualsState
// Il2CppName: InitializeVisualsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeVisualsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeVisualsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToColorState
// Il2CppName: SwitchToColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToColorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToRoomState
// Il2CppName: SwitchToRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToRoomState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToNameState
// Il2CppName: SwitchToNameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToNameState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToNameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToTurnState
// Il2CppName: SwitchToTurnState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToTurnState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToTurnState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToMicState
// Il2CppName: SwitchToMicState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToMicState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToMicState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToQueueState
// Il2CppName: SwitchToQueueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToQueueState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToQueueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToGroupState
// Il2CppName: SwitchToGroupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToGroupState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToGroupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToVoiceState
// Il2CppName: SwitchToVoiceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToVoiceState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToVoiceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToCreditsState
// Il2CppName: SwitchToCreditsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToCreditsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToCreditsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToVisualsState
// Il2CppName: SwitchToVisualsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToVisualsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToVisualsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessStartupState
// Il2CppName: ProcessStartupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessStartupState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessStartupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessColorState
// Il2CppName: ProcessColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessColorState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessNameState
// Il2CppName: ProcessNameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessNameState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessNameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessRoomState
// Il2CppName: ProcessRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessRoomState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessTurnState
// Il2CppName: ProcessTurnState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessTurnState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessTurnState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessMicState
// Il2CppName: ProcessMicState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessMicState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessMicState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessQueueState
// Il2CppName: ProcessQueueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessQueueState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessQueueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessGroupState
// Il2CppName: ProcessGroupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessGroupState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessGroupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessVoiceState
// Il2CppName: ProcessVoiceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessVoiceState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessVoiceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessVisualsState
// Il2CppName: ProcessVisualsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessVisualsState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessVisualsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessCreditsState
// Il2CppName: ProcessCreditsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardButton*)>(&GorillaNetworking::GorillaComputer::ProcessCreditsState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessCreditsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateScreen
// Il2CppName: UpdateScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::UpdateScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateFunctionScreen
// Il2CppName: UpdateFunctionScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::UpdateFunctionScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateFunctionScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnReturnCurrentVersion
// Il2CppName: OnReturnCurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::ClientModels::ExecuteCloudScriptResult*)>(&GorillaNetworking::GorillaComputer::OnReturnCurrentVersion)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "ExecuteCloudScriptResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnReturnCurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckAutoBanList
// Il2CppName: CheckAutoBanList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::GorillaComputer::*)(::StringW, bool)>(&GorillaNetworking::GorillaComputer::CheckAutoBanList)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forRoom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckAutoBanList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck, forRoom});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckAutoBanListForName
// Il2CppName: CheckAutoBanListForName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::CheckAutoBanListForName)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckAutoBanListForName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::BanMe
// Il2CppName: BanMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int, ::StringW, bool)>(&GorillaNetworking::GorillaComputer::BanMe)> {
  static const MethodInfo* get() {
    static auto* hours = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forRoom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "BanMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hours, nameToCheck, forRoom});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnReturnBan
// Il2CppName: OnReturnBan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::ClientModels::ExecuteCloudScriptResult*)>(&GorillaNetworking::GorillaComputer::OnReturnBan)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "ExecuteCloudScriptResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnReturnBan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GeneralFailureMessage
// Il2CppName: GeneralFailureMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::GeneralFailureMessage)> {
  static const MethodInfo* get() {
    static auto* failMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GeneralFailureMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failMessage});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnErrorShared
// Il2CppName: OnErrorShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::GorillaComputer::OnErrorShared)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnErrorShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetCurrentTime
// Il2CppName: GetCurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::GetCurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetCurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGetTimeSuccess
// Il2CppName: OnGetTimeSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::ClientModels::GetTimeResult*)>(&GorillaNetworking::GorillaComputer::OnGetTimeSuccess)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetTimeResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGetTimeSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGetTimeFailure
// Il2CppName: OnGetTimeFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::GorillaComputer::OnGetTimeFailure)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGetTimeFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnModeSelectButtonPress
// Il2CppName: OnModeSelectButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::OnModeSelectButtonPress)> {
  static const MethodInfo* get() {
    static auto* gameMode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnModeSelectButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameMode});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGroupJoinButtonPress
// Il2CppName: OnGroupJoinButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int, ::GlobalNamespace::GorillaFriendCollider*)>(&GorillaNetworking::GorillaComputer::OnGroupJoinButtonPress)> {
  static const MethodInfo* get() {
    static auto* mapJoinIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* chosenFriendJoinCollider = &::il2cpp_utils::GetClassFromName("", "GorillaFriendCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGroupJoinButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapJoinIndex, chosenFriendJoinCollider});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SaveModAccountData
// Il2CppName: SaveModAccountData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SaveModAccountData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SaveModAccountData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CompQueueUnlockButtonPress
// Il2CppName: CompQueueUnlockButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::CompQueueUnlockButtonPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CompQueueUnlockButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
