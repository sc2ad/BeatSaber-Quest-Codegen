// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaLevelScreen
  class GorillaLevelScreen;
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaNetworkJoinTrigger
  class GorillaNetworkJoinTrigger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaNetworkJoinTrigger);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaNetworkJoinTrigger*, "GorillaNetworking", "GorillaNetworkJoinTrigger");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaNetworkJoinTrigger
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaNetworkJoinTrigger : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    public:
    // public UnityEngine.GameObject[] makeSureThisIsDisabled
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::GameObject*> makeSureThisIsDisabled;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] makeSureThisIsEnabled
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> makeSureThisIsEnabled;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.String gameModeName
    // Size: 0x8
    // Offset: 0x30
    ::StringW gameModeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.PhotonNetworkController photonNetworkController
    // Size: 0x8
    // Offset: 0x38
    ::GorillaNetworking::PhotonNetworkController* photonNetworkController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController*) == 0x8);
    // public System.String componentTypeToAdd
    // Size: 0x8
    // Offset: 0x40
    ::StringW componentTypeToAdd;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject componentTarget
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* componentTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public GorillaLevelScreen[] joinScreens
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::GorillaLevelScreen*> joinScreens;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLevelScreen*>) == 0x8);
    // public GorillaLevelScreen[] leaveScreens
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::GlobalNamespace::GorillaLevelScreen*> leaveScreens;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLevelScreen*>) == 0x8);
    // public GorillaFriendCollider myCollider
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::GorillaFriendCollider* myCollider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaFriendCollider*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject[] makeSureThisIsDisabled
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_makeSureThisIsDisabled();
    // Get instance field reference: public UnityEngine.GameObject[] makeSureThisIsEnabled
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_makeSureThisIsEnabled();
    // Get instance field reference: public System.String gameModeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameModeName();
    // Get instance field reference: public GorillaNetworking.PhotonNetworkController photonNetworkController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& dyn_photonNetworkController();
    // Get instance field reference: public System.String componentTypeToAdd
    [[deprecated("Use field access instead!")]] ::StringW& dyn_componentTypeToAdd();
    // Get instance field reference: public UnityEngine.GameObject componentTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_componentTarget();
    // Get instance field reference: public GorillaLevelScreen[] joinScreens
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& dyn_joinScreens();
    // Get instance field reference: public GorillaLevelScreen[] leaveScreens
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& dyn_leaveScreens();
    // Get instance field reference: public GorillaFriendCollider myCollider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaFriendCollider*& dyn_myCollider();
    // public System.Void UpdateScreens()
    // Offset: 0xC73D08
    void UpdateScreens();
    // public System.Void .ctor()
    // Offset: 0xC73E08
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaNetworkJoinTrigger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaNetworkJoinTrigger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaNetworkJoinTrigger*, creationType>()));
    }
    // public override System.Void OnBoxTriggered()
    // Offset: 0xC73C5C
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::OnBoxTriggered()
    void OnBoxTriggered();
  }; // GorillaNetworking.GorillaNetworkJoinTrigger
  #pragma pack(pop)
  static check_size<sizeof(GorillaNetworkJoinTrigger), 96 + sizeof(::GlobalNamespace::GorillaFriendCollider*)> __GorillaNetworking_GorillaNetworkJoinTriggerSizeCheck;
  static_assert(sizeof(GorillaNetworkJoinTrigger) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaNetworkJoinTrigger::UpdateScreens
// Il2CppName: UpdateScreens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaNetworkJoinTrigger::*)()>(&GorillaNetworking::GorillaNetworkJoinTrigger::UpdateScreens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaNetworkJoinTrigger*), "UpdateScreens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaNetworkJoinTrigger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::GorillaNetworkJoinTrigger::OnBoxTriggered
// Il2CppName: OnBoxTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaNetworkJoinTrigger::*)()>(&GorillaNetworking::GorillaNetworkJoinTrigger::OnBoxTriggered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaNetworkJoinTrigger*), "OnBoxTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
