// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaComputer
  class GorillaComputer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaKeyboardButton
  class GorillaKeyboardButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaKeyboardButton);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaKeyboardButton*, "GorillaNetworking", "GorillaKeyboardButton");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaKeyboardButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaKeyboardButton : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    public:
    // public System.String characterString
    // Size: 0x8
    // Offset: 0x20
    ::StringW characterString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.GorillaComputer computer
    // Size: 0x8
    // Offset: 0x28
    ::GorillaNetworking::GorillaComputer* computer;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaComputer*) == 0x8);
    // public System.Single pressTime
    // Size: 0x4
    // Offset: 0x30
    float pressTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean functionKey
    // Size: 0x1
    // Offset: 0x34
    bool functionKey;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testClick
    // Size: 0x1
    // Offset: 0x35
    bool testClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean repeatTestClick
    // Size: 0x1
    // Offset: 0x36
    bool repeatTestClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: repeatTestClick and: repeatCooldown
    char __padding5[0x1] = {};
    // public System.Single repeatCooldown
    // Size: 0x4
    // Offset: 0x38
    float repeatCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastTestClick
    // Size: 0x4
    // Offset: 0x3C
    float lastTestClick;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.String characterString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterString();
    // Get instance field reference: public GorillaNetworking.GorillaComputer computer
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaComputer*& dyn_computer();
    // Get instance field reference: public System.Single pressTime
    [[deprecated("Use field access instead!")]] float& dyn_pressTime();
    // Get instance field reference: public System.Boolean functionKey
    [[deprecated("Use field access instead!")]] bool& dyn_functionKey();
    // Get instance field reference: public System.Boolean testClick
    [[deprecated("Use field access instead!")]] bool& dyn_testClick();
    // Get instance field reference: public System.Boolean repeatTestClick
    [[deprecated("Use field access instead!")]] bool& dyn_repeatTestClick();
    // Get instance field reference: public System.Single repeatCooldown
    [[deprecated("Use field access instead!")]] float& dyn_repeatCooldown();
    // Get instance field reference: private System.Single lastTestClick
    [[deprecated("Use field access instead!")]] float& dyn_lastTestClick();
    // private System.Void Start()
    // Offset: 0xC73490
    void Start();
    // public System.Void Update()
    // Offset: 0xC734F0
    void Update();
    // private System.Void OnTriggerEnter(UnityEngine.Collider collider)
    // Offset: 0xC7356C
    void OnTriggerEnter(::UnityEngine::Collider* collider);
    // public System.Void .ctor()
    // Offset: 0xC739E0
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaKeyboardButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaKeyboardButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaKeyboardButton*, creationType>()));
    }
  }; // GorillaNetworking.GorillaKeyboardButton
  #pragma pack(pop)
  static check_size<sizeof(GorillaKeyboardButton), 60 + sizeof(float)> __GorillaNetworking_GorillaKeyboardButtonSizeCheck;
  static_assert(sizeof(GorillaKeyboardButton) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)()>(&GorillaNetworking::GorillaKeyboardButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)()>(&GorillaNetworking::GorillaKeyboardButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)(::UnityEngine::Collider*)>(&GorillaNetworking::GorillaKeyboardButton::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
