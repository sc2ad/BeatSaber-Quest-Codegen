// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PlayFabAuthenticator
  class PlayFabAuthenticator;
  // Forward declaring type: GorillaNetworkJoinTrigger
  class GorillaNetworkJoinTrigger;
  // Skipping declaration: ConnectionState because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: DisconnectCause
  struct DisconnectCause;
  // Forward declaring type: FriendInfo
  class FriendInfo;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::PhotonNetworkController);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PhotonNetworkController*, "GorillaNetworking", "PhotonNetworkController");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x131
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.PhotonNetworkController
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonNetworkController : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GorillaNetworking::PhotonNetworkController::ConnectionState
    struct ConnectionState;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::ConnectionEvent
    struct ConnectionEvent;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$DisableOnStart$d__53
    class $DisableOnStart$d__53;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$SearchForFriendToJoin$d__90
    class $SearchForFriendToJoin$d__90;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$UpdatePlayerCount$d__94
    class $UpdatePlayerCount$d__94;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState Initialization
      static constexpr const int Initialization = 0;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState Initialization
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_Initialization();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState Initialization
      static void _set_Initialization(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState WrongVersion
      static constexpr const int WrongVersion = 1;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState WrongVersion
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_WrongVersion();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState WrongVersion
      static void _set_WrongVersion(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DeterminingPingsAndPlayerCount
      static constexpr const int DeterminingPingsAndPlayerCount = 2;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DeterminingPingsAndPlayerCount
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_DeterminingPingsAndPlayerCount();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DeterminingPingsAndPlayerCount
      static void _set_DeterminingPingsAndPlayerCount(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState ConnectedAndWaiting
      static constexpr const int ConnectedAndWaiting = 3;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState ConnectedAndWaiting
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_ConnectedAndWaiting();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState ConnectedAndWaiting
      static void _set_ConnectedAndWaiting(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DisconnectingFromRoom
      static constexpr const int DisconnectingFromRoom = 4;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DisconnectingFromRoom
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_DisconnectingFromRoom();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState DisconnectingFromRoom
      static void _set_DisconnectingFromRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningPublicRoom
      static constexpr const int JoiningPublicRoom = 5;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningPublicRoom
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_JoiningPublicRoom();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningPublicRoom
      static void _set_JoiningPublicRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningSpecificRoom
      static constexpr const int JoiningSpecificRoom = 6;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningSpecificRoom
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_JoiningSpecificRoom();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningSpecificRoom
      static void _set_JoiningSpecificRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningFriend
      static constexpr const int JoiningFriend = 7;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningFriend
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_JoiningFriend();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState JoiningFriend
      static void _set_JoiningFriend(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPrivateRoom
      static constexpr const int InPrivateRoom = 8;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPrivateRoom
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_InPrivateRoom();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPrivateRoom
      static void _set_InPrivateRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // static field const value: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPublicRoom
      static constexpr const int InPublicRoom = 9;
      // Get static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPublicRoom
      static ::GorillaNetworking::PhotonNetworkController::ConnectionState _get_InPublicRoom();
      // Set static field: static public GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState InPublicRoom
      static void _set_InPublicRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(PhotonNetworkController::ConnectionState), 0 + sizeof(int)> __GorillaNetworking_PhotonNetworkController_ConnectionStateSizeCheck;
    static_assert(sizeof(PhotonNetworkController::ConnectionState) == 0x4);
    public:
    // public System.Int32 incrementCounter
    // Size: 0x4
    // Offset: 0x20
    int incrementCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState currentState
    // Size: 0x4
    // Offset: 0x24
    ::GorillaNetworking::PhotonNetworkController::ConnectionState currentState;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController::ConnectionState) == 0x4);
    // public GorillaNetworking.PlayFabAuthenticator playFabAuthenticator
    // Size: 0x8
    // Offset: 0x28
    ::GorillaNetworking::PlayFabAuthenticator* playFabAuthenticator;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PlayFabAuthenticator*) == 0x8);
    // public System.String[] serverRegions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> serverRegions;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String _gameVersion
    // Size: 0x8
    // Offset: 0x38
    ::StringW gameVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean isPrivate
    // Size: 0x1
    // Offset: 0x40
    bool isPrivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPrivate and: customRoomID
    char __padding5[0x7] = {};
    // public System.String customRoomID
    // Size: 0x8
    // Offset: 0x48
    ::StringW customRoomID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject playerOffset
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* playerOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer[] offlineVRRig
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> offlineVRRig;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    // public System.Boolean attemptingToConnect
    // Size: 0x1
    // Offset: 0x60
    bool attemptingToConnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attemptingToConnect and: currentRegionIndex
    char __padding9[0x3] = {};
    // private System.Int32 currentRegionIndex
    // Size: 0x4
    // Offset: 0x64
    int currentRegionIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String currentGameType
    // Size: 0x8
    // Offset: 0x68
    ::StringW currentGameType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean wrongVersion
    // Size: 0x1
    // Offset: 0x70
    bool wrongVersion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean roomCosmeticsInitialized
    // Size: 0x1
    // Offset: 0x71
    bool roomCosmeticsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: roomCosmeticsInitialized and: photonVoiceObjectPrefab
    char __padding13[0x6] = {};
    // public UnityEngine.GameObject photonVoiceObjectPrefab
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* photonVoiceObjectPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> playerCosmeticsLookup
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::Dictionary_2<::StringW, bool>* playerCosmeticsLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, bool>*) == 0x8);
    // private System.Boolean pastFirstConnection
    // Size: 0x1
    // Offset: 0x88
    bool pastFirstConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pastFirstConnection and: lastHeadRightHandDistance
    char __padding16[0x3] = {};
    // private System.Single lastHeadRightHandDistance
    // Size: 0x4
    // Offset: 0x8C
    float lastHeadRightHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastHeadLeftHandDistance
    // Size: 0x4
    // Offset: 0x90
    float lastHeadLeftHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pauseTime
    // Size: 0x4
    // Offset: 0x94
    float pauseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single disconnectTime
    // Size: 0x4
    // Offset: 0x98
    float disconnectTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean disableAFKKick
    // Size: 0x1
    // Offset: 0x9C
    bool disableAFKKick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableAFKKick and: headRightHandDistance
    char __padding21[0x3] = {};
    // private System.Single headRightHandDistance
    // Size: 0x4
    // Offset: 0xA0
    float headRightHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single headLeftHandDistance
    // Size: 0x4
    // Offset: 0xA4
    float headLeftHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion headQuat
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Quaternion headQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion lastHeadQuat
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Quaternion lastHeadQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.GameObject[] disableOnStartup
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::GameObject*> disableOnStartup;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] enableOnStartup
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::UnityEngine::GameObject*> enableOnStartup;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.String roomCharacters
    // Size: 0x8
    // Offset: 0xD8
    ::StringW roomCharacters;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean updatedName
    // Size: 0x1
    // Offset: 0xE0
    bool updatedName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updatedName and: playersInRegion
    char __padding29[0x7] = {};
    // private System.Int32[] playersInRegion
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<int> playersInRegion;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32[] pingInRegion
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<int> pingInRegion;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Collections.Generic.List`1<System.String> friendIDList
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::StringW>* friendIDList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Boolean successfullyFoundFriend
    // Size: 0x1
    // Offset: 0x100
    bool successfullyFoundFriend;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: successfullyFoundFriend and: startingToLookForFriend
    char __padding33[0x3] = {};
    // private System.Single startingToLookForFriend
    // Size: 0x4
    // Offset: 0x104
    float startingToLookForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeToSpendLookingForFriend
    // Size: 0x4
    // Offset: 0x108
    float timeToSpendLookingForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean joiningWithFriend
    // Size: 0x1
    // Offset: 0x10C
    bool joiningWithFriend;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: joiningWithFriend and: friendToFollow
    char __padding36[0x3] = {};
    // private System.String friendToFollow
    // Size: 0x8
    // Offset: 0x110
    ::StringW friendToFollow;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isRoomFull
    // Size: 0x1
    // Offset: 0x118
    bool isRoomFull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean doesRoomExist
    // Size: 0x1
    // Offset: 0x119
    bool doesRoomExist;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean createRoom
    // Size: 0x1
    // Offset: 0x11A
    bool createRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: createRoom and: privateTrigger
    char __padding40[0x5] = {};
    // public GorillaNetworking.GorillaNetworkJoinTrigger privateTrigger
    // Size: 0x8
    // Offset: 0x120
    ::GorillaNetworking::GorillaNetworkJoinTrigger* privateTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger currentJoinTrigger
    // Size: 0x8
    // Offset: 0x128
    ::GorillaNetworking::GorillaNetworkJoinTrigger* currentJoinTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public System.Boolean allowedInPubRoom
    // Size: 0x1
    // Offset: 0x130
    bool allowedInPubRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public GorillaNetworking.PhotonNetworkController Instance
    static ::GorillaNetworking::PhotonNetworkController* _get_Instance();
    // Set static field: static public GorillaNetworking.PhotonNetworkController Instance
    static void _set_Instance(::GorillaNetworking::PhotonNetworkController* value);
    // Get instance field reference: public System.Int32 incrementCounter
    [[deprecated("Use field access instead!")]] int& dyn_incrementCounter();
    // Get instance field reference: private GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState currentState
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController::ConnectionState& dyn_currentState();
    // Get instance field reference: public GorillaNetworking.PlayFabAuthenticator playFabAuthenticator
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PlayFabAuthenticator*& dyn_playFabAuthenticator();
    // Get instance field reference: public System.String[] serverRegions
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_serverRegions();
    // Get instance field reference: private System.String _gameVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn__gameVersion();
    // Get instance field reference: public System.Boolean isPrivate
    [[deprecated("Use field access instead!")]] bool& dyn_isPrivate();
    // Get instance field reference: public System.String customRoomID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_customRoomID();
    // Get instance field reference: public UnityEngine.GameObject playerOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerOffset();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer[] offlineVRRig
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_offlineVRRig();
    // Get instance field reference: public System.Boolean attemptingToConnect
    [[deprecated("Use field access instead!")]] bool& dyn_attemptingToConnect();
    // Get instance field reference: private System.Int32 currentRegionIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentRegionIndex();
    // Get instance field reference: public System.String currentGameType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentGameType();
    // Get instance field reference: public System.Boolean wrongVersion
    [[deprecated("Use field access instead!")]] bool& dyn_wrongVersion();
    // Get instance field reference: public System.Boolean roomCosmeticsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_roomCosmeticsInitialized();
    // Get instance field reference: public UnityEngine.GameObject photonVoiceObjectPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_photonVoiceObjectPrefab();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> playerCosmeticsLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, bool>*& dyn_playerCosmeticsLookup();
    // Get instance field reference: private System.Boolean pastFirstConnection
    [[deprecated("Use field access instead!")]] bool& dyn_pastFirstConnection();
    // Get instance field reference: private System.Single lastHeadRightHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_lastHeadRightHandDistance();
    // Get instance field reference: private System.Single lastHeadLeftHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_lastHeadLeftHandDistance();
    // Get instance field reference: private System.Single pauseTime
    [[deprecated("Use field access instead!")]] float& dyn_pauseTime();
    // Get instance field reference: private System.Single disconnectTime
    [[deprecated("Use field access instead!")]] float& dyn_disconnectTime();
    // Get instance field reference: public System.Boolean disableAFKKick
    [[deprecated("Use field access instead!")]] bool& dyn_disableAFKKick();
    // Get instance field reference: private System.Single headRightHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_headRightHandDistance();
    // Get instance field reference: private System.Single headLeftHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_headLeftHandDistance();
    // Get instance field reference: private UnityEngine.Quaternion headQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headQuat();
    // Get instance field reference: private UnityEngine.Quaternion lastHeadQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastHeadQuat();
    // Get instance field reference: public UnityEngine.GameObject[] disableOnStartup
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_disableOnStartup();
    // Get instance field reference: public UnityEngine.GameObject[] enableOnStartup
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_enableOnStartup();
    // Get instance field reference: private System.String roomCharacters
    [[deprecated("Use field access instead!")]] ::StringW& dyn_roomCharacters();
    // Get instance field reference: public System.Boolean updatedName
    [[deprecated("Use field access instead!")]] bool& dyn_updatedName();
    // Get instance field reference: private System.Int32[] playersInRegion
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_playersInRegion();
    // Get instance field reference: private System.Int32[] pingInRegion
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_pingInRegion();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> friendIDList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_friendIDList();
    // Get instance field reference: private System.Boolean successfullyFoundFriend
    [[deprecated("Use field access instead!")]] bool& dyn_successfullyFoundFriend();
    // Get instance field reference: private System.Single startingToLookForFriend
    [[deprecated("Use field access instead!")]] float& dyn_startingToLookForFriend();
    // Get instance field reference: private System.Single timeToSpendLookingForFriend
    [[deprecated("Use field access instead!")]] float& dyn_timeToSpendLookingForFriend();
    // Get instance field reference: private System.Boolean joiningWithFriend
    [[deprecated("Use field access instead!")]] bool& dyn_joiningWithFriend();
    // Get instance field reference: private System.String friendToFollow
    [[deprecated("Use field access instead!")]] ::StringW& dyn_friendToFollow();
    // Get instance field reference: private System.Boolean isRoomFull
    [[deprecated("Use field access instead!")]] bool& dyn_isRoomFull();
    // Get instance field reference: private System.Boolean doesRoomExist
    [[deprecated("Use field access instead!")]] bool& dyn_doesRoomExist();
    // Get instance field reference: private System.Boolean createRoom
    [[deprecated("Use field access instead!")]] bool& dyn_createRoom();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger privateTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_privateTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger currentJoinTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_currentJoinTrigger();
    // Get instance field reference: public System.Boolean allowedInPubRoom
    [[deprecated("Use field access instead!")]] bool& dyn_allowedInPubRoom();
    // public System.String get_gameVersion()
    // Offset: 0xC73E18
    ::StringW get_gameVersion();
    // public System.Void set_gameVersion(System.String value)
    // Offset: 0xC73E20
    void set_gameVersion(::StringW value);
    // public System.Void .ctor()
    // Offset: 0xC782B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonNetworkController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::PhotonNetworkController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonNetworkController*, creationType>()));
    }
    // public System.Void InitiateConnection()
    // Offset: 0xC73E70
    void InitiateConnection();
    // public System.Void Awake()
    // Offset: 0xC73EC0
    void Awake();
    // public System.Void Start()
    // Offset: 0xC7401C
    void Start();
    // private System.Collections.IEnumerator DisableOnStart()
    // Offset: 0xC740D0
    ::System::Collections::IEnumerator* DisableOnStart();
    // public System.Void FixedUpdate()
    // Offset: 0xC7416C
    void FixedUpdate();
    // private System.Void ProcessInitializationState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC7487C
    void ProcessInitializationState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessDeterminingPingsAndPlayerCountState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC74AE4
    void ProcessDeterminingPingsAndPlayerCountState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessConnectedAndWaitingState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC7514C
    void ProcessConnectedAndWaitingState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessDisconnectingFromRoomState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC75268
    void ProcessDisconnectingFromRoomState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessJoiningPublicRoomState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC75398
    void ProcessJoiningPublicRoomState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessJoiningSpecificRoomState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC75DEC
    void ProcessJoiningSpecificRoomState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessJoiningFriendState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC76788
    void ProcessJoiningFriendState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessInPrivateRoomState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC76BF8
    void ProcessInPrivateRoomState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessInPublicRoomState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC77054
    void ProcessInPublicRoomState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessWrongVersionState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC77228
    void ProcessWrongVersionState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void ProcessState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC73E78
    void ProcessState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // private System.Void InvalidState(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionEvent connectionEvent)
    // Offset: 0xC74AE0
    void InvalidState(::GorillaNetworking::PhotonNetworkController::ConnectionEvent connectionEvent);
    // public System.Void AttemptToJoinPublicRoom(GorillaNetworking.GorillaNetworkJoinTrigger triggeredTrigger)
    // Offset: 0xC73CF8
    void AttemptToJoinPublicRoom(::GorillaNetworking::GorillaNetworkJoinTrigger* triggeredTrigger);
    // public System.Void AttemptToJoinSpecificRoom(System.String roomID)
    // Offset: 0xC7722C
    void AttemptToJoinSpecificRoom(::StringW roomID);
    // private System.Void JoinPublicRoom(System.Boolean joinWithFriends)
    // Offset: 0xC756D0
    void JoinPublicRoom(bool joinWithFriends);
    // private System.Void JoinSpecificRoom()
    // Offset: 0xC759BC
    void JoinSpecificRoom();
    // private System.Void DisconnectCleanup()
    // Offset: 0xC76D5C
    void DisconnectCleanup();
    // private System.Void CreatePublicRoom(System.Boolean joinWithFriends)
    // Offset: 0xC75AF0
    void CreatePublicRoom(bool joinWithFriends);
    // private System.Void CreatePrivateRoom()
    // Offset: 0xC765B4
    void CreatePrivateRoom();
    // public System.Void ConnectToRegion(System.String region)
    // Offset: 0xC74A60
    void ConnectToRegion(::StringW region);
    // public System.Void AttemptJoinPublicWithFriends(GorillaNetworking.GorillaNetworkJoinTrigger triggeredTrigger)
    // Offset: 0xC77E40
    void AttemptJoinPublicWithFriends(::GorillaNetworking::GorillaNetworkJoinTrigger* triggeredTrigger);
    // public System.Void AttemptToFollowFriendIntoPub(System.String userIDToFollow)
    // Offset: 0xC77E54
    void AttemptToFollowFriendIntoPub(::StringW userIDToFollow);
    // public System.Void AttemptDisconnect()
    // Offset: 0xC77E64
    void AttemptDisconnect();
    // private System.Void DisconnectFromRoom(GorillaNetworking.PhotonNetworkController/GorillaNetworking.ConnectionState newState)
    // Offset: 0xC7565C
    void DisconnectFromRoom(::GorillaNetworking::PhotonNetworkController::ConnectionState newState);
    // public System.Void WrongVersion()
    // Offset: 0xC77E94
    void WrongVersion();
    // public System.Void OnApplicationQuit()
    // Offset: 0xC77EA4
    void OnApplicationQuit();
    // private System.String ReturnRoomName(System.String currentGameMode)
    // Offset: 0xC77D7C
    ::StringW ReturnRoomName(::StringW currentGameMode);
    // public System.Byte GetRoomSize(System.String gameModeName)
    // Offset: 0xC77424
    uint8_t GetRoomSize(::StringW gameModeName);
    // public System.Void StartSearchingForFriend(System.String userID)
    // Offset: 0xC76BB0
    void StartSearchingForFriend(::StringW userID);
    // private System.Collections.IEnumerator SearchForFriendToJoin(System.String userID)
    // Offset: 0xC77F5C
    ::System::Collections::IEnumerator* SearchForFriendToJoin(::StringW userID);
    // private System.String GetRegionWithLowestPing()
    // Offset: 0xC74EEC
    ::StringW GetRegionWithLowestPing();
    // public System.Int32 TotalUsers()
    // Offset: 0xC7821C
    int TotalUsers();
    // private System.Collections.IEnumerator UpdatePlayerCount(System.Boolean leaving)
    // Offset: 0xC77C6C
    ::System::Collections::IEnumerator* UpdatePlayerCount(bool leaving);
    // public override System.Void OnConnectedToMaster()
    // Offset: 0xC77494
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnConnectedToMaster()
    void OnConnectedToMaster();
    // public override System.Void OnJoinedRoom()
    // Offset: 0xC7749C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnJoinRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0xC77CDC
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinRoomFailed(System.Int16 returnCode, System.String message)
    void OnJoinRoomFailed(int16_t returnCode, ::StringW message);
    // public override System.Void OnJoinRandomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0xC77D74
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinRandomFailed(System.Int16 returnCode, System.String message)
    void OnJoinRandomFailed(int16_t returnCode, ::StringW message);
    // public override System.Void OnCreateRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0xC77E38
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnCreateRoomFailed(System.Int16 returnCode, System.String message)
    void OnCreateRoomFailed(int16_t returnCode, ::StringW message);
    // public override System.Void OnDisconnected(Photon.Realtime.DisconnectCause cause)
    // Offset: 0xC77E6C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisconnected(Photon.Realtime.DisconnectCause cause)
    void OnDisconnected(::Photon::Realtime::DisconnectCause cause);
    // public override System.Void OnFriendListUpdate(System.Collections.Generic.List`1<Photon.Realtime.FriendInfo> friendList)
    // Offset: 0xC78004
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnFriendListUpdate(System.Collections.Generic.List`1<Photon.Realtime.FriendInfo> friendList)
    void OnFriendListUpdate(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>* friendList);
  }; // GorillaNetworking.PhotonNetworkController
  #pragma pack(pop)
  static check_size<sizeof(PhotonNetworkController), 304 + sizeof(bool)> __GorillaNetworking_PhotonNetworkControllerSizeCheck;
  static_assert(sizeof(PhotonNetworkController) == 0x131);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PhotonNetworkController::ConnectionState, "GorillaNetworking", "PhotonNetworkController/ConnectionState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::get_gameVersion
// Il2CppName: get_gameVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::get_gameVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "get_gameVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::set_gameVersion
// Il2CppName: set_gameVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::set_gameVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "set_gameVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::InitiateConnection
// Il2CppName: InitiateConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::InitiateConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "InitiateConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DisableOnStart
// Il2CppName: DisableOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::DisableOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DisableOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessInitializationState
// Il2CppName: ProcessInitializationState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessInitializationState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessInitializationState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessDeterminingPingsAndPlayerCountState
// Il2CppName: ProcessDeterminingPingsAndPlayerCountState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessDeterminingPingsAndPlayerCountState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessDeterminingPingsAndPlayerCountState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessConnectedAndWaitingState
// Il2CppName: ProcessConnectedAndWaitingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessConnectedAndWaitingState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessConnectedAndWaitingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessDisconnectingFromRoomState
// Il2CppName: ProcessDisconnectingFromRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessDisconnectingFromRoomState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessDisconnectingFromRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessJoiningPublicRoomState
// Il2CppName: ProcessJoiningPublicRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessJoiningPublicRoomState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessJoiningPublicRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessJoiningSpecificRoomState
// Il2CppName: ProcessJoiningSpecificRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessJoiningSpecificRoomState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessJoiningSpecificRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessJoiningFriendState
// Il2CppName: ProcessJoiningFriendState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessJoiningFriendState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessJoiningFriendState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessInPrivateRoomState
// Il2CppName: ProcessInPrivateRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessInPrivateRoomState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessInPrivateRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessInPublicRoomState
// Il2CppName: ProcessInPublicRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessInPublicRoomState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessInPublicRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessWrongVersionState
// Il2CppName: ProcessWrongVersionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessWrongVersionState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessWrongVersionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ProcessState
// Il2CppName: ProcessState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::ProcessState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ProcessState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::InvalidState
// Il2CppName: InvalidState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionEvent)>(&GorillaNetworking::PhotonNetworkController::InvalidState)> {
  static const MethodInfo* get() {
    static auto* connectionEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "InvalidState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionEvent});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoom
// Il2CppName: AttemptToJoinPublicRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::GorillaNetworkJoinTrigger*)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoom)> {
  static const MethodInfo* get() {
    static auto* triggeredTrigger = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaNetworkJoinTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinPublicRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggeredTrigger});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoom
// Il2CppName: AttemptToJoinSpecificRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoom)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinSpecificRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::JoinPublicRoom
// Il2CppName: JoinPublicRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(bool)>(&GorillaNetworking::PhotonNetworkController::JoinPublicRoom)> {
  static const MethodInfo* get() {
    static auto* joinWithFriends = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "JoinPublicRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joinWithFriends});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::JoinSpecificRoom
// Il2CppName: JoinSpecificRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::JoinSpecificRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "JoinSpecificRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DisconnectCleanup
// Il2CppName: DisconnectCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::DisconnectCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DisconnectCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::CreatePublicRoom
// Il2CppName: CreatePublicRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(bool)>(&GorillaNetworking::PhotonNetworkController::CreatePublicRoom)> {
  static const MethodInfo* get() {
    static auto* joinWithFriends = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "CreatePublicRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joinWithFriends});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::CreatePrivateRoom
// Il2CppName: CreatePrivateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::CreatePrivateRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "CreatePrivateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ConnectToRegion
// Il2CppName: ConnectToRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::ConnectToRegion)> {
  static const MethodInfo* get() {
    static auto* region = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ConnectToRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{region});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptJoinPublicWithFriends
// Il2CppName: AttemptJoinPublicWithFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::GorillaNetworkJoinTrigger*)>(&GorillaNetworking::PhotonNetworkController::AttemptJoinPublicWithFriends)> {
  static const MethodInfo* get() {
    static auto* triggeredTrigger = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaNetworkJoinTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptJoinPublicWithFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggeredTrigger});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToFollowFriendIntoPub
// Il2CppName: AttemptToFollowFriendIntoPub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::AttemptToFollowFriendIntoPub)> {
  static const MethodInfo* get() {
    static auto* userIDToFollow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToFollowFriendIntoPub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userIDToFollow});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptDisconnect
// Il2CppName: AttemptDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::AttemptDisconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DisconnectFromRoom
// Il2CppName: DisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::PhotonNetworkController::ConnectionState)>(&GorillaNetworking::PhotonNetworkController::DisconnectFromRoom)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PhotonNetworkController/ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::WrongVersion
// Il2CppName: WrongVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::WrongVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "WrongVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ReturnRoomName
// Il2CppName: ReturnRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::ReturnRoomName)> {
  static const MethodInfo* get() {
    static auto* currentGameMode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ReturnRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentGameMode});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::GetRoomSize
// Il2CppName: GetRoomSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::GetRoomSize)> {
  static const MethodInfo* get() {
    static auto* gameModeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "GetRoomSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameModeName});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::StartSearchingForFriend
// Il2CppName: StartSearchingForFriend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::StartSearchingForFriend)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "StartSearchingForFriend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::SearchForFriendToJoin
// Il2CppName: SearchForFriendToJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::SearchForFriendToJoin)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "SearchForFriendToJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::GetRegionWithLowestPing
// Il2CppName: GetRegionWithLowestPing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::GetRegionWithLowestPing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "GetRegionWithLowestPing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::TotalUsers
// Il2CppName: TotalUsers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::TotalUsers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "TotalUsers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::UpdatePlayerCount
// Il2CppName: UpdatePlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PhotonNetworkController::*)(bool)>(&GorillaNetworking::PhotonNetworkController::UpdatePlayerCount)> {
  static const MethodInfo* get() {
    static auto* leaving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "UpdatePlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaving});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnConnectedToMaster
// Il2CppName: OnConnectedToMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnConnectedToMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnConnectedToMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnJoinRoomFailed
// Il2CppName: OnJoinRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(int16_t, ::StringW)>(&GorillaNetworking::PhotonNetworkController::OnJoinRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnJoinRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnJoinRandomFailed
// Il2CppName: OnJoinRandomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(int16_t, ::StringW)>(&GorillaNetworking::PhotonNetworkController::OnJoinRandomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnJoinRandomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnCreateRoomFailed
// Il2CppName: OnCreateRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(int16_t, ::StringW)>(&GorillaNetworking::PhotonNetworkController::OnCreateRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnCreateRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::Photon::Realtime::DisconnectCause)>(&GorillaNetworking::PhotonNetworkController::OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* cause = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "DisconnectCause")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cause});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnFriendListUpdate
// Il2CppName: OnFriendListUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>*)>(&GorillaNetworking::PhotonNetworkController::OnFriendListUpdate)> {
  static const MethodInfo* get() {
    static auto* friendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "FriendInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnFriendListUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendList});
  }
};
