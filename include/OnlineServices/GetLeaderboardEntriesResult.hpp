// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: LeaderboardEntryData
  class LeaderboardEntryData;
}
// Completed forward declares
// Type namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: GetLeaderboardEntriesResult
  struct GetLeaderboardEntriesResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OnlineServices::GetLeaderboardEntriesResult, "OnlineServices", "GetLeaderboardEntriesResult");
// Type namespace: OnlineServices
namespace OnlineServices {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OnlineServices.GetLeaderboardEntriesResult
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct GetLeaderboardEntriesResult/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Boolean isError
    // Size: 0x1
    // Offset: 0x0
    bool isError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isError and: leaderboardEntries
    char __padding0[0x7] = {};
    // public readonly OnlineServices.LeaderboardEntryData[] leaderboardEntries
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::OnlineServices::LeaderboardEntryData*> leaderboardEntries;
    // Field size check
    static_assert(sizeof(::ArrayW<::OnlineServices::LeaderboardEntryData*>) == 0x8);
    // public readonly System.Int32 referencePlayerScoreIndex
    // Size: 0x4
    // Offset: 0x10
    int referencePlayerScoreIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GetLeaderboardEntriesResult
    constexpr GetLeaderboardEntriesResult(bool isError_ = {}, ::ArrayW<::OnlineServices::LeaderboardEntryData*> leaderboardEntries_ = ::ArrayW<::OnlineServices::LeaderboardEntryData*>(static_cast<void*>(nullptr)), int referencePlayerScoreIndex_ = {}) noexcept : isError{isError_}, leaderboardEntries{leaderboardEntries_}, referencePlayerScoreIndex{referencePlayerScoreIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Boolean isError
    [[deprecated("Use field access instead!")]] bool& dyn_isError();
    // Get instance field reference: public readonly OnlineServices.LeaderboardEntryData[] leaderboardEntries
    [[deprecated("Use field access instead!")]] ::ArrayW<::OnlineServices::LeaderboardEntryData*>& dyn_leaderboardEntries();
    // Get instance field reference: public readonly System.Int32 referencePlayerScoreIndex
    [[deprecated("Use field access instead!")]] int& dyn_referencePlayerScoreIndex();
    // static public OnlineServices.GetLeaderboardEntriesResult get_resultWithError()
    // Offset: 0x134D844
    static ::OnlineServices::GetLeaderboardEntriesResult get_resultWithError();
    // public System.Void .ctor(System.Boolean isError, OnlineServices.LeaderboardEntryData[] leaderboardEntries, System.Int32 referencePlayerScoreIndex)
    // Offset: 0x134D830
    // ABORTED: conflicts with another method.  GetLeaderboardEntriesResult(bool isError, ::ArrayW<::OnlineServices::LeaderboardEntryData*> leaderboardEntries, int referencePlayerScoreIndex);
  }; // OnlineServices.GetLeaderboardEntriesResult
  #pragma pack(pop)
  static check_size<sizeof(GetLeaderboardEntriesResult), 16 + sizeof(int)> __OnlineServices_GetLeaderboardEntriesResultSizeCheck;
  static_assert(sizeof(GetLeaderboardEntriesResult) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OnlineServices::GetLeaderboardEntriesResult::get_resultWithError
// Il2CppName: get_resultWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OnlineServices::GetLeaderboardEntriesResult (*)()>(&OnlineServices::GetLeaderboardEntriesResult::get_resultWithError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnlineServices::GetLeaderboardEntriesResult), "get_resultWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OnlineServices::GetLeaderboardEntriesResult::GetLeaderboardEntriesResult
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
