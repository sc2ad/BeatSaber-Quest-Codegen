// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: POpusCodec.Enums.Bandwidth
#include "POpusCodec/Enums/Bandwidth.hpp"
// Including type: Photon.Voice.FrameBuffer
#include "Photon/Voice/FrameBuffer.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: POpusCodec.Enums.SamplingRate
#include "POpusCodec/Enums/SamplingRate.hpp"
// Including type: POpusCodec.Enums.Channels
#include "POpusCodec/Enums/Channels.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: POpusCodec
namespace POpusCodec {
  // Forward declaring type: OpusDecoder`1<T>
  template<typename T>
  class OpusDecoder_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::POpusCodec::OpusDecoder_1, "POpusCodec", "OpusDecoder`1");
// Type namespace: POpusCodec
namespace POpusCodec {
  // WARNING Size may be invalid!
  // Autogenerated type: POpusCodec.OpusDecoder`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class OpusDecoder_1 : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean TisFloat
    // Size: 0x1
    // Offset: 0x0
    bool TisFloat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 sizeofT
    // Size: 0x4
    // Offset: 0x0
    int sizeofT;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.IntPtr _handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Int32 _channelCount
    // Size: 0x4
    // Offset: 0x0
    int channelCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Nullable`1<POpusCodec.Enums.Bandwidth> _previousPacketBandwidth
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::Nullable_1<::POpusCodec::Enums::Bandwidth> previousPacketBandwidth;
    // private T[] buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private Photon.Voice.FrameBuffer prevPacketData
    // Size: 0x32
    // Offset: 0x0
    ::Photon::Voice::FrameBuffer prevPacketData;
    // Field size check
    static_assert(sizeof(::Photon::Voice::FrameBuffer) == 0x32);
    // private System.Boolean prevPacketInvalid
    // Size: 0x1
    // Offset: 0x0
    bool prevPacketInvalid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Boolean UseInbandFEC
    static bool _get_UseInbandFEC() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_get_UseInbandFEC");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "UseInbandFEC"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Boolean UseInbandFEC
    static void _set_UseInbandFEC(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_set_UseInbandFEC");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "UseInbandFEC", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 MaxFrameSize
    static int _get_MaxFrameSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_get_MaxFrameSize");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "MaxFrameSize"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 MaxFrameSize
    static void _set_MaxFrameSize(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_set_MaxFrameSize");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "MaxFrameSize", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly T[] EmptyBuffer
    static ::ArrayW<T> _get_EmptyBuffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_get_EmptyBuffer");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "EmptyBuffer"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly T[] EmptyBuffer
    static void _set_EmptyBuffer(::ArrayW<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::_set_EmptyBuffer");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), "EmptyBuffer", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean TisFloat
    [[deprecated("Use field access instead!")]] bool& dyn_TisFloat() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn_TisFloat");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TisFloat"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 sizeofT
    [[deprecated("Use field access instead!")]] int& dyn_sizeofT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn_sizeofT");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeofT"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.IntPtr _handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__handle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn__handle");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handle"))->offset;
      return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _channelCount
    [[deprecated("Use field access instead!")]] int& dyn__channelCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn__channelCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channelCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Nullable`1<POpusCodec.Enums.Bandwidth> _previousPacketBandwidth
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::POpusCodec::Enums::Bandwidth>& dyn__previousPacketBandwidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn__previousPacketBandwidth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previousPacketBandwidth"))->offset;
      return *reinterpret_cast<::System::Nullable_1<::POpusCodec::Enums::Bandwidth>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn_buffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buffer"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.FrameBuffer prevPacketData
    [[deprecated("Use field access instead!")]] ::Photon::Voice::FrameBuffer& dyn_prevPacketData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn_prevPacketData");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevPacketData"))->offset;
      return *reinterpret_cast<::Photon::Voice::FrameBuffer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean prevPacketInvalid
    [[deprecated("Use field access instead!")]] bool& dyn_prevPacketInvalid() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::dyn_prevPacketInvalid");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevPacketInvalid"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Nullable`1<POpusCodec.Enums.Bandwidth> get_PreviousPacketBandwidth()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Nullable_1<::POpusCodec::Enums::Bandwidth> get_PreviousPacketBandwidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::get_PreviousPacketBandwidth");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousPacketBandwidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::POpusCodec::Enums::Bandwidth>, false>(this, ___internal__method);
    }
    // public System.Void .ctor(POpusCodec.Enums.SamplingRate outputSamplingRateHz, POpusCodec.Enums.Channels numChannels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpusDecoder_1<T>* New_ctor(::POpusCodec::Enums::SamplingRate outputSamplingRateHz, ::POpusCodec::Enums::Channels numChannels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpusDecoder_1<T>*, creationType>(outputSamplingRateHz, numChannels)));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OpusDecoder_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public T[] DecodePacket(ref Photon.Voice.FrameBuffer packetData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> DecodePacket(ByRef<::Photon::Voice::FrameBuffer> packetData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::DecodePacket");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetData)})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method, byref(packetData));
    }
    // public T[] DecodeEndOfStream()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> DecodeEndOfStream() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::DecodeEndOfStream");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodeEndOfStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusDecoder_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::POpusCodec::OpusDecoder_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // POpusCodec.OpusDecoder`1
  // Could not write size check! Type: POpusCodec.OpusDecoder`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
