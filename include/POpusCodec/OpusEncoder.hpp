// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: POpusCodec.Enums.SamplingRate
#include "POpusCodec/Enums/SamplingRate.hpp"
// Including type: POpusCodec.Enums.Channels
#include "POpusCodec/Enums/Channels.hpp"
// Including type: POpusCodec.Enums.Delay
#include "POpusCodec/Enums/Delay.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
// Including type: POpusCodec.Enums.OpusApplicationType
#include "POpusCodec/Enums/OpusApplicationType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: POpusCodec::Enums
namespace POpusCodec::Enums {
  // Forward declaring type: Bandwidth
  struct Bandwidth;
  // Forward declaring type: Complexity
  struct Complexity;
  // Forward declaring type: SignalHint
  struct SignalHint;
  // Forward declaring type: ForceChannels
  struct ForceChannels;
}
// Completed forward declares
// Type namespace: POpusCodec
namespace POpusCodec {
  // Forward declaring type: OpusEncoder
  class OpusEncoder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::POpusCodec::OpusEncoder);
DEFINE_IL2CPP_ARG_TYPE(::POpusCodec::OpusEncoder*, "POpusCodec", "OpusEncoder");
// Type namespace: POpusCodec
namespace POpusCodec {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: POpusCodec.OpusEncoder
  // [TokenAttribute] Offset: FFFFFFFF
  class OpusEncoder : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.IntPtr _handle
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Int32 _frameSizePerChannel
    // Size: 0x4
    // Offset: 0x18
    int frameSizePerChannel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private POpusCodec.Enums.SamplingRate _inputSamplingRate
    // Size: 0x4
    // Offset: 0x1C
    ::POpusCodec::Enums::SamplingRate inputSamplingRate;
    // Field size check
    static_assert(sizeof(::POpusCodec::Enums::SamplingRate) == 0x4);
    // private POpusCodec.Enums.Channels _inputChannels
    // Size: 0x4
    // Offset: 0x20
    ::POpusCodec::Enums::Channels inputChannels;
    // Field size check
    static_assert(sizeof(::POpusCodec::Enums::Channels) == 0x4);
    // Padding between fields: inputChannels and: writePacket
    char __padding3[0x4] = {};
    // private readonly System.Byte[] writePacket
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> writePacket;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private POpusCodec.Enums.Delay _encoderDelay
    // Size: 0x4
    // Offset: 0x30
    ::POpusCodec::Enums::Delay encoderDelay;
    // Field size check
    static_assert(sizeof(::POpusCodec::Enums::Delay) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static public System.Int32 BitrateMax
    static constexpr const int BitrateMax = -1;
    // Get static field: static public System.Int32 BitrateMax
    static int _get_BitrateMax();
    // Set static field: static public System.Int32 BitrateMax
    static void _set_BitrateMax(int value);
    // static field const value: static private System.Int32 RecommendedMaxPacketSize
    static constexpr const int RecommendedMaxPacketSize = 4000;
    // Get static field: static private System.Int32 RecommendedMaxPacketSize
    static int _get_RecommendedMaxPacketSize();
    // Set static field: static private System.Int32 RecommendedMaxPacketSize
    static void _set_RecommendedMaxPacketSize(int value);
    // Get static field: static private readonly System.ArraySegment`1<System.Byte> EmptyBuffer
    static ::System::ArraySegment_1<uint8_t> _get_EmptyBuffer();
    // Set static field: static private readonly System.ArraySegment`1<System.Byte> EmptyBuffer
    static void _set_EmptyBuffer(::System::ArraySegment_1<uint8_t> value);
    // Get instance field reference: private System.IntPtr _handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__handle();
    // Get instance field reference: private System.Int32 _frameSizePerChannel
    [[deprecated("Use field access instead!")]] int& dyn__frameSizePerChannel();
    // Get instance field reference: private POpusCodec.Enums.SamplingRate _inputSamplingRate
    [[deprecated("Use field access instead!")]] ::POpusCodec::Enums::SamplingRate& dyn__inputSamplingRate();
    // Get instance field reference: private POpusCodec.Enums.Channels _inputChannels
    [[deprecated("Use field access instead!")]] ::POpusCodec::Enums::Channels& dyn__inputChannels();
    // Get instance field reference: private readonly System.Byte[] writePacket
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_writePacket();
    // Get instance field reference: private POpusCodec.Enums.Delay _encoderDelay
    [[deprecated("Use field access instead!")]] ::POpusCodec::Enums::Delay& dyn__encoderDelay();
    // public POpusCodec.Enums.SamplingRate get_InputSamplingRate()
    // Offset: 0x115CC38
    ::POpusCodec::Enums::SamplingRate get_InputSamplingRate();
    // public POpusCodec.Enums.Channels get_InputChannels()
    // Offset: 0x115CC40
    ::POpusCodec::Enums::Channels get_InputChannels();
    // public POpusCodec.Enums.Delay get_EncoderDelay()
    // Offset: 0x115CD4C
    ::POpusCodec::Enums::Delay get_EncoderDelay();
    // public System.Void set_EncoderDelay(POpusCodec.Enums.Delay value)
    // Offset: 0x115CC48
    void set_EncoderDelay(::POpusCodec::Enums::Delay value);
    // public System.Int32 get_FrameSizePerChannel()
    // Offset: 0x115CD54
    int get_FrameSizePerChannel();
    // public System.Int32 get_Bitrate()
    // Offset: 0x115CD5C
    int get_Bitrate();
    // public System.Void set_Bitrate(System.Int32 value)
    // Offset: 0x115CE24
    void set_Bitrate(int value);
    // public POpusCodec.Enums.Bandwidth get_MaxBandwidth()
    // Offset: 0x115CEE4
    ::POpusCodec::Enums::Bandwidth get_MaxBandwidth();
    // public System.Void set_MaxBandwidth(POpusCodec.Enums.Bandwidth value)
    // Offset: 0x115CEF0
    void set_MaxBandwidth(::POpusCodec::Enums::Bandwidth value);
    // public POpusCodec.Enums.Complexity get_Complexity()
    // Offset: 0x115CF00
    ::POpusCodec::Enums::Complexity get_Complexity();
    // public System.Void set_Complexity(POpusCodec.Enums.Complexity value)
    // Offset: 0x115CF0C
    void set_Complexity(::POpusCodec::Enums::Complexity value);
    // public System.Int32 get_ExpectedPacketLossPercentage()
    // Offset: 0x115CF1C
    int get_ExpectedPacketLossPercentage();
    // public System.Void set_ExpectedPacketLossPercentage(System.Int32 value)
    // Offset: 0x115CF28
    void set_ExpectedPacketLossPercentage(int value);
    // public POpusCodec.Enums.SignalHint get_SignalHint()
    // Offset: 0x115CF38
    ::POpusCodec::Enums::SignalHint get_SignalHint();
    // public System.Void set_SignalHint(POpusCodec.Enums.SignalHint value)
    // Offset: 0x115CF44
    void set_SignalHint(::POpusCodec::Enums::SignalHint value);
    // public POpusCodec.Enums.ForceChannels get_ForceChannels()
    // Offset: 0x115CF54
    ::POpusCodec::Enums::ForceChannels get_ForceChannels();
    // public System.Void set_ForceChannels(POpusCodec.Enums.ForceChannels value)
    // Offset: 0x115CF60
    void set_ForceChannels(::POpusCodec::Enums::ForceChannels value);
    // public System.Boolean get_UseInbandFEC()
    // Offset: 0x115CF70
    bool get_UseInbandFEC();
    // public System.Void set_UseInbandFEC(System.Boolean value)
    // Offset: 0x115CF94
    void set_UseInbandFEC(bool value);
    // public System.Int32 get_PacketLossPercentage()
    // Offset: 0x115CFA4
    int get_PacketLossPercentage();
    // public System.Void set_PacketLossPercentage(System.Int32 value)
    // Offset: 0x115CFB0
    void set_PacketLossPercentage(int value);
    // public System.Boolean get_UseUnconstrainedVBR()
    // Offset: 0x115CFC0
    bool get_UseUnconstrainedVBR();
    // public System.Void set_UseUnconstrainedVBR(System.Boolean value)
    // Offset: 0x115CFE4
    void set_UseUnconstrainedVBR(bool value);
    // public System.Boolean get_DtxEnabled()
    // Offset: 0x115CFF8
    bool get_DtxEnabled();
    // public System.Void set_DtxEnabled(System.Boolean value)
    // Offset: 0x115D01C
    void set_DtxEnabled(bool value);
    // public System.Void .ctor(POpusCodec.Enums.SamplingRate inputSamplingRateHz, POpusCodec.Enums.Channels numChannels, System.Int32 bitrate, POpusCodec.Enums.OpusApplicationType applicationType, POpusCodec.Enums.Delay encoderDelay)
    // Offset: 0x115D02C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpusEncoder* New_ctor(::POpusCodec::Enums::SamplingRate inputSamplingRateHz, ::POpusCodec::Enums::Channels numChannels, int bitrate, ::POpusCodec::Enums::OpusApplicationType applicationType, ::POpusCodec::Enums::Delay encoderDelay) {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::OpusEncoder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpusEncoder*, creationType>(inputSamplingRateHz, numChannels, bitrate, applicationType, encoderDelay)));
    }
    // static private System.Void .cctor()
    // Offset: 0x115D994
    static void _cctor();
    // public System.ArraySegment`1<System.Byte> Encode(System.Single[] pcmSamples)
    // Offset: 0x115D56C
    ::System::ArraySegment_1<uint8_t> Encode(::ArrayW<float> pcmSamples);
    // public System.ArraySegment`1<System.Byte> Encode(System.Int16[] pcmSamples)
    // Offset: 0x115D71C
    ::System::ArraySegment_1<uint8_t> Encode(::ArrayW<int16_t> pcmSamples);
    // public System.Void Dispose()
    // Offset: 0x115D8CC
    void Dispose();
  }; // POpusCodec.OpusEncoder
  #pragma pack(pop)
  static check_size<sizeof(OpusEncoder), 48 + sizeof(::POpusCodec::Enums::Delay)> __POpusCodec_OpusEncoderSizeCheck;
  static_assert(sizeof(OpusEncoder) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_InputSamplingRate
// Il2CppName: get_InputSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_InputSamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_InputSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_InputChannels
// Il2CppName: get_InputChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::Channels (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_InputChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_InputChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_EncoderDelay
// Il2CppName: get_EncoderDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::Delay (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_EncoderDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_EncoderDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_EncoderDelay
// Il2CppName: set_EncoderDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(::POpusCodec::Enums::Delay)>(&POpusCodec::OpusEncoder::set_EncoderDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Delay")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_EncoderDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_FrameSizePerChannel
// Il2CppName: get_FrameSizePerChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_FrameSizePerChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_FrameSizePerChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_Bitrate
// Il2CppName: get_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_Bitrate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_Bitrate
// Il2CppName: set_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(int)>(&POpusCodec::OpusEncoder::set_Bitrate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_MaxBandwidth
// Il2CppName: get_MaxBandwidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::Bandwidth (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_MaxBandwidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_MaxBandwidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_MaxBandwidth
// Il2CppName: set_MaxBandwidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(::POpusCodec::Enums::Bandwidth)>(&POpusCodec::OpusEncoder::set_MaxBandwidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Bandwidth")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_MaxBandwidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_Complexity
// Il2CppName: get_Complexity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::Complexity (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_Complexity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_Complexity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_Complexity
// Il2CppName: set_Complexity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(::POpusCodec::Enums::Complexity)>(&POpusCodec::OpusEncoder::set_Complexity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Complexity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_Complexity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_ExpectedPacketLossPercentage
// Il2CppName: get_ExpectedPacketLossPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_ExpectedPacketLossPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_ExpectedPacketLossPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_ExpectedPacketLossPercentage
// Il2CppName: set_ExpectedPacketLossPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(int)>(&POpusCodec::OpusEncoder::set_ExpectedPacketLossPercentage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_ExpectedPacketLossPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_SignalHint
// Il2CppName: get_SignalHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SignalHint (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_SignalHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_SignalHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_SignalHint
// Il2CppName: set_SignalHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(::POpusCodec::Enums::SignalHint)>(&POpusCodec::OpusEncoder::set_SignalHint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SignalHint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_SignalHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_ForceChannels
// Il2CppName: get_ForceChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::ForceChannels (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_ForceChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_ForceChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_ForceChannels
// Il2CppName: set_ForceChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(::POpusCodec::Enums::ForceChannels)>(&POpusCodec::OpusEncoder::set_ForceChannels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "ForceChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_ForceChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_UseInbandFEC
// Il2CppName: get_UseInbandFEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_UseInbandFEC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_UseInbandFEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_UseInbandFEC
// Il2CppName: set_UseInbandFEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(bool)>(&POpusCodec::OpusEncoder::set_UseInbandFEC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_UseInbandFEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_PacketLossPercentage
// Il2CppName: get_PacketLossPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_PacketLossPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_PacketLossPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_PacketLossPercentage
// Il2CppName: set_PacketLossPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(int)>(&POpusCodec::OpusEncoder::set_PacketLossPercentage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_PacketLossPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_UseUnconstrainedVBR
// Il2CppName: get_UseUnconstrainedVBR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_UseUnconstrainedVBR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_UseUnconstrainedVBR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_UseUnconstrainedVBR
// Il2CppName: set_UseUnconstrainedVBR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(bool)>(&POpusCodec::OpusEncoder::set_UseUnconstrainedVBR)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_UseUnconstrainedVBR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::get_DtxEnabled
// Il2CppName: get_DtxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::get_DtxEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "get_DtxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::set_DtxEnabled
// Il2CppName: set_DtxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)(bool)>(&POpusCodec::OpusEncoder::set_DtxEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "set_DtxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&POpusCodec::OpusEncoder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint8_t> (POpusCodec::OpusEncoder::*)(::ArrayW<float>)>(&POpusCodec::OpusEncoder::Encode)> {
  static const MethodInfo* get() {
    static auto* pcmSamples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmSamples});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint8_t> (POpusCodec::OpusEncoder::*)(::ArrayW<int16_t>)>(&POpusCodec::OpusEncoder::Encode)> {
  static const MethodInfo* get() {
    static auto* pcmSamples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmSamples});
  }
};
// Writing MetadataGetter for method: POpusCodec::OpusEncoder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (POpusCodec::OpusEncoder::*)()>(&POpusCodec::OpusEncoder::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::OpusEncoder*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
