// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: POpusCodec::Enums
namespace POpusCodec::Enums {
  // Forward declaring type: Channels
  struct Channels;
  // Forward declaring type: OpusStatusCode
  struct OpusStatusCode;
  // Forward declaring type: SamplingRate
  struct SamplingRate;
  // Forward declaring type: OpusApplicationType
  struct OpusApplicationType;
  // Forward declaring type: OpusCtlSetRequest
  struct OpusCtlSetRequest;
  // Forward declaring type: OpusCtlGetRequest
  struct OpusCtlGetRequest;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: FrameBuffer
  struct FrameBuffer;
}
// Completed forward declares
// Type namespace: POpusCodec
namespace POpusCodec {
  // Forward declaring type: Wrapper
  class Wrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::POpusCodec::Wrapper);
DEFINE_IL2CPP_ARG_TYPE(::POpusCodec::Wrapper*, "POpusCodec", "Wrapper");
// Type namespace: POpusCodec
namespace POpusCodec {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: POpusCodec.Wrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class Wrapper : public ::Il2CppObject {
    public:
    // static field const value: static private System.String lib_name
    static constexpr const char* lib_name = "opus_egpv";
    // Get static field: static private System.String lib_name
    static ::StringW _get_lib_name();
    // Set static field: static private System.String lib_name
    static void _set_lib_name(::StringW value);
    // static field const value: static private System.String ctl_entry_point_set
    static constexpr const char* ctl_entry_point_set = "";
    // Get static field: static private System.String ctl_entry_point_set
    static ::StringW _get_ctl_entry_point_set();
    // Set static field: static private System.String ctl_entry_point_set
    static void _set_ctl_entry_point_set(::StringW value);
    // static field const value: static private System.String ctl_entry_point_get
    static constexpr const char* ctl_entry_point_get = "";
    // Get static field: static private System.String ctl_entry_point_get
    static ::StringW _get_ctl_entry_point_get();
    // Set static field: static private System.String ctl_entry_point_get
    static void _set_ctl_entry_point_get(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x115EACC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Wrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::POpusCodec::Wrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Wrapper*, creationType>()));
    }
    // static private System.Int32 opus_encoder_get_size(POpusCodec.Enums.Channels channels)
    // Offset: 0x115DB08
    static int opus_encoder_get_size(::POpusCodec::Enums::Channels channels);
    // static private POpusCodec.Enums.OpusStatusCode opus_encoder_init(System.IntPtr st, POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels, POpusCodec.Enums.OpusApplicationType application)
    // Offset: 0x115DB88
    static ::POpusCodec::Enums::OpusStatusCode opus_encoder_init(::System::IntPtr st, ::POpusCodec::Enums::SamplingRate Fs, ::POpusCodec::Enums::Channels channels, ::POpusCodec::Enums::OpusApplicationType application);
    // static public System.IntPtr opus_get_version_string()
    // Offset: 0x115DA98
    static ::System::IntPtr opus_get_version_string();
    // static private System.Int32 opus_encode(System.IntPtr st, System.Int16[] pcm, System.Int32 frame_size, System.Byte[] data, System.Int32 max_data_bytes)
    // Offset: 0x115DC30
    static int opus_encode(::System::IntPtr st, ::ArrayW<int16_t> pcm, int frame_size, ::ArrayW<uint8_t> data, int max_data_bytes);
    // static private System.Int32 opus_encode_float(System.IntPtr st, System.Single[] pcm, System.Int32 frame_size, System.Byte[] data, System.Int32 max_data_bytes)
    // Offset: 0x115DCF0
    static int opus_encode_float(::System::IntPtr st, ::ArrayW<float> pcm, int frame_size, ::ArrayW<uint8_t> data, int max_data_bytes);
    // static private System.Int32 opus_encoder_ctl_set(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)
    // Offset: 0x115DDB0
    static int opus_encoder_ctl_set(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlSetRequest request, int value);
    // static private System.Int32 opus_encoder_ctl_get(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request, ref System.Int32 value)
    // Offset: 0x115DE44
    static int opus_encoder_ctl_get(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlGetRequest request, ByRef<int> value);
    // static private System.Int32 opus_decoder_ctl_set(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)
    // Offset: 0x115DEDC
    static int opus_decoder_ctl_set(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlSetRequest request, int value);
    // static private System.Int32 opus_decoder_ctl_get(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request, ref System.Int32 value)
    // Offset: 0x115DF70
    static int opus_decoder_ctl_get(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlGetRequest request, ByRef<int> value);
    // static private System.Int32 opus_decoder_get_size(POpusCodec.Enums.Channels channels)
    // Offset: 0x115E008
    static int opus_decoder_get_size(::POpusCodec::Enums::Channels channels);
    // static private POpusCodec.Enums.OpusStatusCode opus_decoder_init(System.IntPtr st, POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels)
    // Offset: 0x115E088
    static ::POpusCodec::Enums::OpusStatusCode opus_decoder_init(::System::IntPtr st, ::POpusCodec::Enums::SamplingRate Fs, ::POpusCodec::Enums::Channels channels);
    // static private System.Int32 opus_decode(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Int16[] pcm, System.Int32 frame_size, System.Int32 decode_fec)
    // Offset: 0x115E120
    static int opus_decode(::System::IntPtr st, ::System::IntPtr data, int len, ::ArrayW<int16_t> pcm, int frame_size, int decode_fec);
    // static private System.Int32 opus_decode_float(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Single[] pcm, System.Int32 frame_size, System.Int32 decode_fec)
    // Offset: 0x115E1E8
    static int opus_decode_float(::System::IntPtr st, ::System::IntPtr data, int len, ::ArrayW<float> pcm, int frame_size, int decode_fec);
    // static public System.Int32 opus_packet_get_bandwidth(System.IntPtr data)
    // Offset: 0x115E2B0
    static int opus_packet_get_bandwidth(::System::IntPtr data);
    // static public System.Int32 opus_packet_get_nb_channels(System.Byte[] data)
    // Offset: 0x115E330
    static int opus_packet_get_nb_channels(::ArrayW<uint8_t> data);
    // static private System.IntPtr opus_strerror(POpusCodec.Enums.OpusStatusCode error)
    // Offset: 0x115E3B8
    static ::System::IntPtr opus_strerror(::POpusCodec::Enums::OpusStatusCode error);
    // static public System.IntPtr opus_encoder_create(POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels, POpusCodec.Enums.OpusApplicationType application)
    // Offset: 0x115D3A4
    static ::System::IntPtr opus_encoder_create(::POpusCodec::Enums::SamplingRate Fs, ::POpusCodec::Enums::Channels channels, ::POpusCodec::Enums::OpusApplicationType application);
    // static public System.Int32 opus_encode(System.IntPtr st, System.Int16[] pcm, System.Int32 frame_size, System.Byte[] data)
    // Offset: 0x115D7E8
    static int opus_encode(::System::IntPtr st, ::ArrayW<int16_t> pcm, int frame_size, ::ArrayW<uint8_t> data);
    // static public System.Int32 opus_encode(System.IntPtr st, System.Single[] pcm, System.Int32 frame_size, System.Byte[] data)
    // Offset: 0x115D638
    static int opus_encode(::System::IntPtr st, ::ArrayW<float> pcm, int frame_size, ::ArrayW<uint8_t> data);
    // static public System.Void opus_encoder_destroy(System.IntPtr st)
    // Offset: 0x115D92C
    static void opus_encoder_destroy(::System::IntPtr st);
    // static public System.Int32 get_opus_encoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request)
    // Offset: 0x115CD68
    static int get_opus_encoder_ctl(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlGetRequest request);
    // static public System.Void set_opus_encoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)
    // Offset: 0x115CE34
    static void set_opus_encoder_ctl(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlSetRequest request, int value);
    // static public System.Int32 get_opus_decoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request)
    // Offset: 0x115E4FC
    static int get_opus_decoder_ctl(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlGetRequest request);
    // static public System.Void set_opus_decoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)
    // Offset: 0x115E5B8
    static void set_opus_decoder_ctl(::System::IntPtr st, ::POpusCodec::Enums::OpusCtlSetRequest request, int value);
    // static public System.IntPtr opus_decoder_create(POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels)
    // Offset: 0x115E668
    static ::System::IntPtr opus_decoder_create(::POpusCodec::Enums::SamplingRate Fs, ::POpusCodec::Enums::Channels channels);
    // static public System.Void opus_decoder_destroy(System.IntPtr st)
    // Offset: 0x115E7A4
    static void opus_decoder_destroy(::System::IntPtr st);
    // static public System.Int32 opus_decode(System.IntPtr st, Photon.Voice.FrameBuffer data, System.Int16[] pcm, System.Int32 decode_fec, System.Int32 channels)
    // Offset: 0x115E80C
    static int opus_decode(::System::IntPtr st, ::Photon::Voice::FrameBuffer data, ::ArrayW<int16_t> pcm, int decode_fec, int channels);
    // static public System.Int32 opus_decode(System.IntPtr st, Photon.Voice.FrameBuffer data, System.Single[] pcm, System.Int32 decode_fec, System.Int32 channels)
    // Offset: 0x115E9C4
    static int opus_decode(::System::IntPtr st, ::Photon::Voice::FrameBuffer data, ::ArrayW<float> pcm, int decode_fec, int channels);
    // static private System.Void HandleStatusCode(POpusCodec.Enums.OpusStatusCode statusCode)
    // Offset: 0x115E438
    static void HandleStatusCode(::POpusCodec::Enums::OpusStatusCode statusCode);
  }; // POpusCodec.Wrapper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: POpusCodec::Wrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_get_size
// Il2CppName: opus_encoder_get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::POpusCodec::Enums::Channels)>(&POpusCodec::Wrapper::opus_encoder_get_size)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_init
// Il2CppName: opus_encoder_init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::OpusStatusCode (*)(::System::IntPtr, ::POpusCodec::Enums::SamplingRate, ::POpusCodec::Enums::Channels, ::POpusCodec::Enums::OpusApplicationType)>(&POpusCodec::Wrapper::opus_encoder_init)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* Fs = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    static auto* application = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusApplicationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, Fs, channels, application});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_get_version_string
// Il2CppName: opus_get_version_string
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&POpusCodec::Wrapper::opus_get_version_string)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_get_version_string", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encode
// Il2CppName: opus_encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<int16_t>, int, ::ArrayW<uint8_t>, int)>(&POpusCodec::Wrapper::opus_encode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* max_data_bytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, pcm, frame_size, data, max_data_bytes});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encode_float
// Il2CppName: opus_encode_float
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<float>, int, ::ArrayW<uint8_t>, int)>(&POpusCodec::Wrapper::opus_encode_float)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* max_data_bytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encode_float", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, pcm, frame_size, data, max_data_bytes});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_ctl_set
// Il2CppName: opus_encoder_ctl_set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlSetRequest, int)>(&POpusCodec::Wrapper::opus_encoder_ctl_set)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlSetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_ctl_set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_ctl_get
// Il2CppName: opus_encoder_ctl_get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlGetRequest, ByRef<int>)>(&POpusCodec::Wrapper::opus_encoder_ctl_get)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlGetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_ctl_get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_ctl_set
// Il2CppName: opus_decoder_ctl_set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlSetRequest, int)>(&POpusCodec::Wrapper::opus_decoder_ctl_set)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlSetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_ctl_set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_ctl_get
// Il2CppName: opus_decoder_ctl_get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlGetRequest, ByRef<int>)>(&POpusCodec::Wrapper::opus_decoder_ctl_get)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlGetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_ctl_get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_get_size
// Il2CppName: opus_decoder_get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::POpusCodec::Enums::Channels)>(&POpusCodec::Wrapper::opus_decoder_get_size)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_init
// Il2CppName: opus_decoder_init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::OpusStatusCode (*)(::System::IntPtr, ::POpusCodec::Enums::SamplingRate, ::POpusCodec::Enums::Channels)>(&POpusCodec::Wrapper::opus_decoder_init)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* Fs = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, Fs, channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decode
// Il2CppName: opus_decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::System::IntPtr, int, ::ArrayW<int16_t>, int, int)>(&POpusCodec::Wrapper::opus_decode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* decode_fec = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, data, len, pcm, frame_size, decode_fec});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decode_float
// Il2CppName: opus_decode_float
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::System::IntPtr, int, ::ArrayW<float>, int, int)>(&POpusCodec::Wrapper::opus_decode_float)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* decode_fec = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decode_float", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, data, len, pcm, frame_size, decode_fec});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_packet_get_bandwidth
// Il2CppName: opus_packet_get_bandwidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&POpusCodec::Wrapper::opus_packet_get_bandwidth)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_packet_get_bandwidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_packet_get_nb_channels
// Il2CppName: opus_packet_get_nb_channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>)>(&POpusCodec::Wrapper::opus_packet_get_nb_channels)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_packet_get_nb_channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_strerror
// Il2CppName: opus_strerror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::POpusCodec::Enums::OpusStatusCode)>(&POpusCodec::Wrapper::opus_strerror)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_strerror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_create
// Il2CppName: opus_encoder_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::POpusCodec::Enums::SamplingRate, ::POpusCodec::Enums::Channels, ::POpusCodec::Enums::OpusApplicationType)>(&POpusCodec::Wrapper::opus_encoder_create)> {
  static const MethodInfo* get() {
    static auto* Fs = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    static auto* application = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusApplicationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Fs, channels, application});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encode
// Il2CppName: opus_encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<int16_t>, int, ::ArrayW<uint8_t>)>(&POpusCodec::Wrapper::opus_encode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, pcm, frame_size, data});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encode
// Il2CppName: opus_encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<float>, int, ::ArrayW<uint8_t>)>(&POpusCodec::Wrapper::opus_encode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* frame_size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, pcm, frame_size, data});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_encoder_destroy
// Il2CppName: opus_encoder_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&POpusCodec::Wrapper::opus_encoder_destroy)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_encoder_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::get_opus_encoder_ctl
// Il2CppName: get_opus_encoder_ctl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlGetRequest)>(&POpusCodec::Wrapper::get_opus_encoder_ctl)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlGetRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "get_opus_encoder_ctl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::set_opus_encoder_ctl
// Il2CppName: set_opus_encoder_ctl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlSetRequest, int)>(&POpusCodec::Wrapper::set_opus_encoder_ctl)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlSetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "set_opus_encoder_ctl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::get_opus_decoder_ctl
// Il2CppName: get_opus_decoder_ctl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlGetRequest)>(&POpusCodec::Wrapper::get_opus_decoder_ctl)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlGetRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "get_opus_decoder_ctl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::set_opus_decoder_ctl
// Il2CppName: set_opus_decoder_ctl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::POpusCodec::Enums::OpusCtlSetRequest, int)>(&POpusCodec::Wrapper::set_opus_decoder_ctl)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusCtlSetRequest")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "set_opus_decoder_ctl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, request, value});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_create
// Il2CppName: opus_decoder_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::POpusCodec::Enums::SamplingRate, ::POpusCodec::Enums::Channels)>(&POpusCodec::Wrapper::opus_decoder_create)> {
  static const MethodInfo* get() {
    static auto* Fs = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "Channels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Fs, channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decoder_destroy
// Il2CppName: opus_decoder_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&POpusCodec::Wrapper::opus_decoder_destroy)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decoder_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decode
// Il2CppName: opus_decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::Photon::Voice::FrameBuffer, ::ArrayW<int16_t>, int, int)>(&POpusCodec::Wrapper::opus_decode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* decode_fec = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, data, pcm, decode_fec, channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::opus_decode
// Il2CppName: opus_decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::Photon::Voice::FrameBuffer, ::ArrayW<float>, int, int)>(&POpusCodec::Wrapper::opus_decode)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->byval_arg;
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* decode_fec = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "opus_decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, data, pcm, decode_fec, channels});
  }
};
// Writing MetadataGetter for method: POpusCodec::Wrapper::HandleStatusCode
// Il2CppName: HandleStatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::POpusCodec::Enums::OpusStatusCode)>(&POpusCodec::Wrapper::HandleStatusCode)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "OpusStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(POpusCodec::Wrapper*), "HandleStatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode});
  }
};
