// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OVR
namespace OVR {
  // Forward declaring type: SoundGroup
  class SoundGroup;
  // Forward declaring type: SoundFX
  class SoundFX;
  // Forward declaring type: SoundEmitter
  class SoundEmitter;
  // Forward declaring type: MixerSnapshot
  class MixerSnapshot;
  // Forward declaring type: EmitterChannel
  struct EmitterChannel;
  // Forward declaring type: SoundPriority
  struct SoundPriority;
}
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixer
  class AudioMixer;
  // Forward declaring type: AudioMixerGroup
  class AudioMixerGroup;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FastList`1<T>
  template<typename T>
  class FastList_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: OVR
namespace OVR {
  // Forward declaring type: AudioManager
  class AudioManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OVR::AudioManager);
DEFINE_IL2CPP_ARG_TYPE(::OVR::AudioManager*, "OVR", "AudioManager");
// Type namespace: OVR
namespace OVR {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: OVR.AudioManager
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::OVR::AudioManager::Fade
    struct Fade;
    // Nested type: ::OVR::AudioManager::$$c__DisplayClass77_0
    class $$c__DisplayClass77_0;
    // Nested type: ::OVR::AudioManager::$$c
    class $$c;
    public:
    // [TooltipAttribute] Offset: 0x994CD8
    // public System.Boolean makePersistent
    // Size: 0x1
    // Offset: 0x18
    bool makePersistent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x994D10
    // public System.Boolean enableSpatializedAudio
    // Size: 0x1
    // Offset: 0x19
    bool enableSpatializedAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x994D48
    // public System.Boolean enableSpatializedFastOverride
    // Size: 0x1
    // Offset: 0x1A
    bool enableSpatializedFastOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableSpatializedFastOverride and: audioMixer
    char __padding2[0x5] = {};
    // [TooltipAttribute] Offset: 0x994D80
    // public UnityEngine.Audio.AudioMixer audioMixer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Audio::AudioMixer* audioMixer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixer*) == 0x8);
    // [TooltipAttribute] Offset: 0x994DB8
    // public UnityEngine.Audio.AudioMixerGroup defaultMixerGroup
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Audio::AudioMixerGroup* defaultMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // [TooltipAttribute] Offset: 0x994DF0
    // public UnityEngine.Audio.AudioMixerGroup reservedMixerGroup
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Audio::AudioMixerGroup* reservedMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // [TooltipAttribute] Offset: 0x994E28
    // public UnityEngine.Audio.AudioMixerGroup voiceChatMixerGroup
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Audio::AudioMixerGroup* voiceChatMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // [TooltipAttribute] Offset: 0x994E60
    // public System.Boolean verboseLogging
    // Size: 0x1
    // Offset: 0x40
    bool verboseLogging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: verboseLogging and: maxSoundEmitters
    char __padding7[0x3] = {};
    // [TooltipAttribute] Offset: 0x994E98
    // public System.Int32 maxSoundEmitters
    // Size: 0x4
    // Offset: 0x44
    int maxSoundEmitters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x994ED0
    // public System.Single volumeSoundFX
    // Size: 0x4
    // Offset: 0x48
    float volumeSoundFX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x994F08
    // public System.Single soundFxFadeSecs
    // Size: 0x4
    // Offset: 0x4C
    float soundFxFadeSecs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single audioMinFallOffDistance
    // Size: 0x4
    // Offset: 0x50
    float audioMinFallOffDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single audioMaxFallOffDistance
    // Size: 0x4
    // Offset: 0x54
    float audioMaxFallOffDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVR.SoundGroup[] soundGroupings
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::OVR::SoundGroup*> soundGroupings;
    // Field size check
    static_assert(sizeof(::ArrayW<::OVR::SoundGroup*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,OVR.SoundFX> soundFXCache
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::StringW, ::OVR::SoundFX*>* soundFXCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::OVR::SoundFX*>*) == 0x8);
    // private System.Single audioMaxFallOffDistanceSqr
    // Size: 0x4
    // Offset: 0x68
    float audioMaxFallOffDistanceSqr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: audioMaxFallOffDistanceSqr and: soundEmitters
    char __padding15[0x4] = {};
    // private OVR.SoundEmitter[] soundEmitters
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::OVR::SoundEmitter*> soundEmitters;
    // Field size check
    static_assert(sizeof(::ArrayW<::OVR::SoundEmitter*>) == 0x8);
    // private FastList`1<OVR.SoundEmitter> playingEmitters
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>* playingEmitters;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>*) == 0x8);
    // private FastList`1<OVR.SoundEmitter> nextFreeEmitters
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>* nextFreeEmitters;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>*) == 0x8);
    // private OVR.MixerSnapshot currentSnapshot
    // Size: 0x8
    // Offset: 0x88
    ::OVR::MixerSnapshot* currentSnapshot;
    // Field size check
    static_assert(sizeof(::OVR::MixerSnapshot*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private OVR.AudioManager theAudioManager
    static ::OVR::AudioManager* _get_theAudioManager();
    // Set static field: static private OVR.AudioManager theAudioManager
    static void _set_theAudioManager(::OVR::AudioManager* value);
    // Get static field: static private FastList`1<System.String> names
    static ::GlobalNamespace::FastList_1<::StringW>* _get_names();
    // Set static field: static private FastList`1<System.String> names
    static void _set_names(::GlobalNamespace::FastList_1<::StringW>* value);
    // Get static field: static private System.String[] defaultSound
    static ::ArrayW<::StringW> _get_defaultSound();
    // Set static field: static private System.String[] defaultSound
    static void _set_defaultSound(::ArrayW<::StringW> value);
    // Get static field: static private OVR.SoundFX nullSound
    static ::OVR::SoundFX* _get_nullSound();
    // Set static field: static private OVR.SoundFX nullSound
    static void _set_nullSound(::OVR::SoundFX* value);
    // Get static field: static private System.Boolean hideWarnings
    static bool _get_hideWarnings();
    // Set static field: static private System.Boolean hideWarnings
    static void _set_hideWarnings(bool value);
    // Get static field: static private UnityEngine.GameObject soundEmitterParent
    static ::UnityEngine::GameObject* _get_soundEmitterParent();
    // Set static field: static private UnityEngine.GameObject soundEmitterParent
    static void _set_soundEmitterParent(::UnityEngine::GameObject* value);
    // Get static field: static private UnityEngine.Transform staticListenerPosition
    static ::UnityEngine::Transform* _get_staticListenerPosition();
    // Set static field: static private UnityEngine.Transform staticListenerPosition
    static void _set_staticListenerPosition(::UnityEngine::Transform* value);
    // Get static field: static private System.Boolean showPlayingEmitterCount
    static bool _get_showPlayingEmitterCount();
    // Set static field: static private System.Boolean showPlayingEmitterCount
    static void _set_showPlayingEmitterCount(bool value);
    // Get static field: static private System.Boolean forceShowEmitterCount
    static bool _get_forceShowEmitterCount();
    // Set static field: static private System.Boolean forceShowEmitterCount
    static void _set_forceShowEmitterCount(bool value);
    // Get static field: static private System.Boolean soundEnabled
    static bool _get_soundEnabled();
    // Set static field: static private System.Boolean soundEnabled
    static void _set_soundEnabled(bool value);
    // Get static field: static private readonly UnityEngine.AnimationCurve defaultReverbZoneMix
    static ::UnityEngine::AnimationCurve* _get_defaultReverbZoneMix();
    // Set static field: static private readonly UnityEngine.AnimationCurve defaultReverbZoneMix
    static void _set_defaultReverbZoneMix(::UnityEngine::AnimationCurve* value);
    // Get instance field reference: public System.Boolean makePersistent
    [[deprecated("Use field access instead!")]] bool& dyn_makePersistent();
    // Get instance field reference: public System.Boolean enableSpatializedAudio
    [[deprecated("Use field access instead!")]] bool& dyn_enableSpatializedAudio();
    // Get instance field reference: public System.Boolean enableSpatializedFastOverride
    [[deprecated("Use field access instead!")]] bool& dyn_enableSpatializedFastOverride();
    // Get instance field reference: public UnityEngine.Audio.AudioMixer audioMixer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixer*& dyn_audioMixer();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup defaultMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_defaultMixerGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup reservedMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_reservedMixerGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup voiceChatMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_voiceChatMixerGroup();
    // Get instance field reference: public System.Boolean verboseLogging
    [[deprecated("Use field access instead!")]] bool& dyn_verboseLogging();
    // Get instance field reference: public System.Int32 maxSoundEmitters
    [[deprecated("Use field access instead!")]] int& dyn_maxSoundEmitters();
    // Get instance field reference: public System.Single volumeSoundFX
    [[deprecated("Use field access instead!")]] float& dyn_volumeSoundFX();
    // Get instance field reference: public System.Single soundFxFadeSecs
    [[deprecated("Use field access instead!")]] float& dyn_soundFxFadeSecs();
    // Get instance field reference: public System.Single audioMinFallOffDistance
    [[deprecated("Use field access instead!")]] float& dyn_audioMinFallOffDistance();
    // Get instance field reference: public System.Single audioMaxFallOffDistance
    [[deprecated("Use field access instead!")]] float& dyn_audioMaxFallOffDistance();
    // Get instance field reference: public OVR.SoundGroup[] soundGroupings
    [[deprecated("Use field access instead!")]] ::ArrayW<::OVR::SoundGroup*>& dyn_soundGroupings();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,OVR.SoundFX> soundFXCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::OVR::SoundFX*>*& dyn_soundFXCache();
    // Get instance field reference: private System.Single audioMaxFallOffDistanceSqr
    [[deprecated("Use field access instead!")]] float& dyn_audioMaxFallOffDistanceSqr();
    // Get instance field reference: private OVR.SoundEmitter[] soundEmitters
    [[deprecated("Use field access instead!")]] ::ArrayW<::OVR::SoundEmitter*>& dyn_soundEmitters();
    // Get instance field reference: private FastList`1<OVR.SoundEmitter> playingEmitters
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>*& dyn_playingEmitters();
    // Get instance field reference: private FastList`1<OVR.SoundEmitter> nextFreeEmitters
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FastList_1<::OVR::SoundEmitter*>*& dyn_nextFreeEmitters();
    // Get instance field reference: private OVR.MixerSnapshot currentSnapshot
    [[deprecated("Use field access instead!")]] ::OVR::MixerSnapshot*& dyn_currentSnapshot();
    // static public System.Boolean get_enableSpatialization()
    // Offset: 0x138DAC0
    static bool get_enableSpatialization();
    // static public OVR.AudioManager get_Instance()
    // Offset: 0x138DBA0
    static ::OVR::AudioManager* get_Instance();
    // static public System.Single get_NearFallOff()
    // Offset: 0x138DC08
    static float get_NearFallOff();
    // static public System.Single get_FarFallOff()
    // Offset: 0x138DC7C
    static float get_FarFallOff();
    // static public UnityEngine.Audio.AudioMixerGroup get_EmitterGroup()
    // Offset: 0x138DCF0
    static ::UnityEngine::Audio::AudioMixerGroup* get_EmitterGroup();
    // static public UnityEngine.Audio.AudioMixerGroup get_ReservedGroup()
    // Offset: 0x138DD64
    static ::UnityEngine::Audio::AudioMixerGroup* get_ReservedGroup();
    // static public UnityEngine.Audio.AudioMixerGroup get_VoipGroup()
    // Offset: 0x138DDD8
    static ::UnityEngine::Audio::AudioMixerGroup* get_VoipGroup();
    // static public System.Boolean get_SoundEnabled()
    // Offset: 0x138FB54
    static bool get_SoundEnabled();
    // public System.Void .ctor()
    // Offset: 0x13934CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OVR::AudioManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x139359C
    static void _cctor();
    // private System.Void Awake()
    // Offset: 0x138DE4C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x138E074
    void OnDestroy();
    // private System.Void Init()
    // Offset: 0x138DE50
    void Init();
    // private System.Void Update()
    // Offset: 0x138ECC4
    void Update();
    // private System.Void RebuildSoundFXCache()
    // Offset: 0x138E1CC
    void RebuildSoundFXCache();
    // static public OVR.SoundFX FindSoundFX(System.String name, System.Boolean rebuildCache)
    // Offset: 0x138F2F0
    static ::OVR::SoundFX* FindSoundFX(::StringW name, bool rebuildCache);
    // static private System.Boolean FindAudioManager()
    // Offset: 0x138F470
    static bool FindAudioManager();
    // static public UnityEngine.GameObject GetGameObject()
    // Offset: 0x138F60C
    static ::UnityEngine::GameObject* GetGameObject();
    // static public System.String NameMinusGroup(System.String name)
    // Offset: 0x138F70C
    static ::StringW NameMinusGroup(::StringW name);
    // static public System.String[] GetSoundFXNames(System.String currentValue, out System.Int32 currentIdx)
    // Offset: 0x138F79C
    static ::ArrayW<::StringW> GetSoundFXNames(::StringW currentValue, ByRef<int> currentIdx);
    // static private System.Int32 CalculateMaxEmittersSize()
    // Offset: 0x138FBBC
    static int CalculateMaxEmittersSize();
    // static private System.Boolean ValidateEmitterIndex(System.Int32 index)
    // Offset: 0x138FC34
    static bool ValidateEmitterIndex(int index);
    // private System.Void InitializeSoundSystem()
    // Offset: 0x138E618
    void InitializeSoundSystem();
    // private System.Void UpdateFreeEmitters()
    // Offset: 0x138ECC8
    void UpdateFreeEmitters();
    // private System.String Fmt(System.Int32 count)
    // Offset: 0x138FD78
    ::StringW Fmt(int count);
    // private System.String FmtFree(System.Int32 count)
    // Offset: 0x138FE7C
    ::StringW FmtFree(int count);
    // private System.Void OnPreSceneLoad()
    // Offset: 0x138FF84
    void OnPreSceneLoad();
    // private System.Void ResetFreeEmitters()
    // Offset: 0x138FCAC
    void ResetFreeEmitters();
    // static public System.Void FadeOutSoundChannel(System.Int32 channel, System.Single delaySecs, System.Single fadeTime)
    // Offset: 0x13900B8
    static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime);
    // static public System.Boolean StopSound(System.Int32 idx, System.Boolean fadeOut, System.Boolean stopReserved)
    // Offset: 0x1390174
    static bool StopSound(int idx, bool fadeOut, bool stopReserved);
    // static public System.Void FadeInSound(System.Int32 idx, System.Single fadeTime, System.Single volume)
    // Offset: 0x1390294
    static void FadeInSound(int idx, float fadeTime, float volume);
    // static public System.Void FadeInSound(System.Int32 idx, System.Single fadeTime)
    // Offset: 0x138D7D4
    static void FadeInSound(int idx, float fadeTime);
    // static public System.Void FadeOutSound(System.Int32 idx, System.Single fadeTime)
    // Offset: 0x138D94C
    static void FadeOutSound(int idx, float fadeTime);
    // static public System.Void StopAllSounds(System.Boolean fadeOut, System.Boolean stopReserved)
    // Offset: 0x1390350
    static void StopAllSounds(bool fadeOut, bool stopReserved);
    // public System.Void MuteAllSounds(System.Boolean mute, System.Boolean muteReserved)
    // Offset: 0x139041C
    void MuteAllSounds(bool mute, bool muteReserved);
    // public System.Void UnMuteAllSounds(System.Boolean unmute, System.Boolean unmuteReserved)
    // Offset: 0x13904B0
    void UnMuteAllSounds(bool unmute, bool unmuteReserved);
    // static public System.Single GetEmitterEndTime(System.Int32 idx)
    // Offset: 0x1390574
    static float GetEmitterEndTime(int idx);
    // static public System.Single SetEmitterTime(System.Int32 idx, System.Single time)
    // Offset: 0x1390618
    static float SetEmitterTime(int idx, float time);
    // static public System.Int32 PlaySound(UnityEngine.AudioClip clip, System.Single volume, OVR.EmitterChannel src, System.Single delay, System.Single pitchVariance, System.Boolean loop)
    // Offset: 0x13906D4
    static int PlaySound(::UnityEngine::AudioClip* clip, float volume, ::OVR::EmitterChannel src, float delay, float pitchVariance, bool loop);
    // static private System.Int32 FindFreeEmitter(OVR.EmitterChannel src, OVR.SoundPriority priority)
    // Offset: 0x13911C4
    static int FindFreeEmitter(::OVR::EmitterChannel src, ::OVR::SoundPriority priority);
    // static public System.Int32 PlaySound(OVR.SoundFX soundFX, OVR.EmitterChannel src, System.Single delay)
    // Offset: 0x1391880
    static int PlaySound(::OVR::SoundFX* soundFX, ::OVR::EmitterChannel src, float delay);
    // static public System.Int32 PlaySoundAt(UnityEngine.Vector3 position, OVR.SoundFX soundFX, OVR.EmitterChannel src, System.Single delay, System.Single volumeOverride, System.Single pitchMultiplier)
    // Offset: 0x1391A60
    static int PlaySoundAt(::UnityEngine::Vector3 position, ::OVR::SoundFX* soundFX, ::OVR::EmitterChannel src, float delay, float volumeOverride, float pitchMultiplier);
    // static public System.Int32 PlayRandomSoundAt(UnityEngine.Vector3 position, UnityEngine.AudioClip[] clips, System.Single volume, OVR.EmitterChannel src, System.Single delay, System.Single pitch, System.Boolean loop)
    // Offset: 0x139259C
    static int PlayRandomSoundAt(::UnityEngine::Vector3 position, ::ArrayW<::UnityEngine::AudioClip*> clips, float volume, ::OVR::EmitterChannel src, float delay, float pitch, bool loop);
    // static public System.Int32 PlaySoundAt(UnityEngine.Vector3 position, UnityEngine.AudioClip clip, System.Single volume, OVR.EmitterChannel src, System.Single delay, System.Single pitch, System.Boolean loop)
    // Offset: 0x13908DC
    static int PlaySoundAt(::UnityEngine::Vector3 position, ::UnityEngine::AudioClip* clip, float volume, ::OVR::EmitterChannel src, float delay, float pitch, bool loop);
    // static public System.Void SetOnFinished(System.Int32 emitterIdx, System.Action onFinished)
    // Offset: 0x13926BC
    static void SetOnFinished(int emitterIdx, ::System::Action* onFinished);
    // static public System.Void SetOnFinished(System.Int32 emitterIdx, System.Action`1<System.Object> onFinished, System.Object obj)
    // Offset: 0x1392790
    static void SetOnFinished(int emitterIdx, ::System::Action_1<::Il2CppObject*>* onFinished, ::Il2CppObject* obj);
    // static public System.Void AttachSoundToParent(System.Int32 idx, UnityEngine.Transform parent)
    // Offset: 0x1392880
    static void AttachSoundToParent(int idx, ::UnityEngine::Transform* parent);
    // static public System.Void DetachSoundFromParent(System.Int32 idx)
    // Offset: 0x1392B40
    static void DetachSoundFromParent(int idx);
    // static public System.Void DetachSoundsFromParent(OVR.SoundEmitter[] emitters, System.Boolean stopSounds)
    // Offset: 0x1392C88
    static void DetachSoundsFromParent(::ArrayW<::OVR::SoundEmitter*> emitters, bool stopSounds);
    // static public System.Void SetEmitterMixerGroup(System.Int32 idx, UnityEngine.Audio.AudioMixerGroup mixerGroup)
    // Offset: 0x1392DB0
    static void SetEmitterMixerGroup(int idx, ::UnityEngine::Audio::AudioMixerGroup* mixerGroup);
    // static public OVR.MixerSnapshot GetActiveSnapshot()
    // Offset: 0x1392ED4
    static ::OVR::MixerSnapshot* GetActiveSnapshot();
    // static public System.Void SetCurrentSnapshot(OVR.MixerSnapshot mixerSnapshot)
    // Offset: 0x1392FAC
    static void SetCurrentSnapshot(::OVR::MixerSnapshot* mixerSnapshot);
    // static public System.Void BlendWithCurrentSnapshot(OVR.MixerSnapshot blendSnapshot, System.Single weight, System.Single blendTime)
    // Offset: 0x13930E0
    static void BlendWithCurrentSnapshot(::OVR::MixerSnapshot* blendSnapshot, float weight, float blendTime);
  }; // OVR.AudioManager
  #pragma pack(pop)
  static check_size<sizeof(AudioManager), 136 + sizeof(::OVR::MixerSnapshot*)> __OVR_AudioManagerSizeCheck;
  static_assert(sizeof(AudioManager) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OVR::AudioManager::get_enableSpatialization
// Il2CppName: get_enableSpatialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVR::AudioManager::get_enableSpatialization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_enableSpatialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OVR::AudioManager* (*)()>(&OVR::AudioManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_NearFallOff
// Il2CppName: get_NearFallOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&OVR::AudioManager::get_NearFallOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_NearFallOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_FarFallOff
// Il2CppName: get_FarFallOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&OVR::AudioManager::get_FarFallOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_FarFallOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_EmitterGroup
// Il2CppName: get_EmitterGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Audio::AudioMixerGroup* (*)()>(&OVR::AudioManager::get_EmitterGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_EmitterGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_ReservedGroup
// Il2CppName: get_ReservedGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Audio::AudioMixerGroup* (*)()>(&OVR::AudioManager::get_ReservedGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_ReservedGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_VoipGroup
// Il2CppName: get_VoipGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Audio::AudioMixerGroup* (*)()>(&OVR::AudioManager::get_VoipGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_VoipGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::get_SoundEnabled
// Il2CppName: get_SoundEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVR::AudioManager::get_SoundEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "get_SoundEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OVR::AudioManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVR::AudioManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::RebuildSoundFXCache
// Il2CppName: RebuildSoundFXCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::RebuildSoundFXCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "RebuildSoundFXCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FindSoundFX
// Il2CppName: FindSoundFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OVR::SoundFX* (*)(::StringW, bool)>(&OVR::AudioManager::FindSoundFX)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rebuildCache = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FindSoundFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, rebuildCache});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FindAudioManager
// Il2CppName: FindAudioManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVR::AudioManager::FindAudioManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FindAudioManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::GetGameObject
// Il2CppName: GetGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)()>(&OVR::AudioManager::GetGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "GetGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::NameMinusGroup
// Il2CppName: NameMinusGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&OVR::AudioManager::NameMinusGroup)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "NameMinusGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::GetSoundFXNames
// Il2CppName: GetSoundFXNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::StringW, ByRef<int>)>(&OVR::AudioManager::GetSoundFXNames)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* currentIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "GetSoundFXNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, currentIdx});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::CalculateMaxEmittersSize
// Il2CppName: CalculateMaxEmittersSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&OVR::AudioManager::CalculateMaxEmittersSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "CalculateMaxEmittersSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::ValidateEmitterIndex
// Il2CppName: ValidateEmitterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&OVR::AudioManager::ValidateEmitterIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "ValidateEmitterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::InitializeSoundSystem
// Il2CppName: InitializeSoundSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::InitializeSoundSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "InitializeSoundSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::UpdateFreeEmitters
// Il2CppName: UpdateFreeEmitters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::UpdateFreeEmitters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "UpdateFreeEmitters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::Fmt
// Il2CppName: Fmt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (OVR::AudioManager::*)(int)>(&OVR::AudioManager::Fmt)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "Fmt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FmtFree
// Il2CppName: FmtFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (OVR::AudioManager::*)(int)>(&OVR::AudioManager::FmtFree)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FmtFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::OnPreSceneLoad
// Il2CppName: OnPreSceneLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::OnPreSceneLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "OnPreSceneLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::ResetFreeEmitters
// Il2CppName: ResetFreeEmitters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)()>(&OVR::AudioManager::ResetFreeEmitters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "ResetFreeEmitters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FadeOutSoundChannel
// Il2CppName: FadeOutSoundChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, float)>(&OVR::AudioManager::FadeOutSoundChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* delaySecs = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FadeOutSoundChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, delaySecs, fadeTime});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::StopSound
// Il2CppName: StopSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, bool, bool)>(&OVR::AudioManager::StopSound)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeOut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stopReserved = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "StopSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, fadeOut, stopReserved});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FadeInSound
// Il2CppName: FadeInSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, float)>(&OVR::AudioManager::FadeInSound)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FadeInSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, fadeTime, volume});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FadeInSound
// Il2CppName: FadeInSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float)>(&OVR::AudioManager::FadeInSound)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FadeInSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, fadeTime});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FadeOutSound
// Il2CppName: FadeOutSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float)>(&OVR::AudioManager::FadeOutSound)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FadeOutSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, fadeTime});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::StopAllSounds
// Il2CppName: StopAllSounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, bool)>(&OVR::AudioManager::StopAllSounds)> {
  static const MethodInfo* get() {
    static auto* fadeOut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stopReserved = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "StopAllSounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeOut, stopReserved});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::MuteAllSounds
// Il2CppName: MuteAllSounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)(bool, bool)>(&OVR::AudioManager::MuteAllSounds)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* muteReserved = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "MuteAllSounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute, muteReserved});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::UnMuteAllSounds
// Il2CppName: UnMuteAllSounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVR::AudioManager::*)(bool, bool)>(&OVR::AudioManager::UnMuteAllSounds)> {
  static const MethodInfo* get() {
    static auto* unmute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* unmuteReserved = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "UnMuteAllSounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unmute, unmuteReserved});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::GetEmitterEndTime
// Il2CppName: GetEmitterEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&OVR::AudioManager::GetEmitterEndTime)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "GetEmitterEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::SetEmitterTime
// Il2CppName: SetEmitterTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, float)>(&OVR::AudioManager::SetEmitterTime)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "SetEmitterTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, time});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::PlaySound
// Il2CppName: PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::AudioClip*, float, ::OVR::EmitterChannel, float, float, bool)>(&OVR::AudioManager::PlaySound)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pitchVariance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, volume, src, delay, pitchVariance, loop});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::FindFreeEmitter
// Il2CppName: FindFreeEmitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::OVR::EmitterChannel, ::OVR::SoundPriority)>(&OVR::AudioManager::FindFreeEmitter)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("OVR", "SoundPriority")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "FindFreeEmitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, priority});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::PlaySound
// Il2CppName: PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::OVR::SoundFX*, ::OVR::EmitterChannel, float)>(&OVR::AudioManager::PlaySound)> {
  static const MethodInfo* get() {
    static auto* soundFX = &::il2cpp_utils::GetClassFromName("OVR", "SoundFX")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundFX, src, delay});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::PlaySoundAt
// Il2CppName: PlaySoundAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector3, ::OVR::SoundFX*, ::OVR::EmitterChannel, float, float, float)>(&OVR::AudioManager::PlaySoundAt)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* soundFX = &::il2cpp_utils::GetClassFromName("OVR", "SoundFX")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* volumeOverride = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pitchMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "PlaySoundAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, soundFX, src, delay, volumeOverride, pitchMultiplier});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::PlayRandomSoundAt
// Il2CppName: PlayRandomSoundAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::AudioClip*>, float, ::OVR::EmitterChannel, float, float, bool)>(&OVR::AudioManager::PlayRandomSoundAt)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* clips = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip"), 1)->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "PlayRandomSoundAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, clips, volume, src, delay, pitch, loop});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::PlaySoundAt
// Il2CppName: PlaySoundAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector3, ::UnityEngine::AudioClip*, float, ::OVR::EmitterChannel, float, float, bool)>(&OVR::AudioManager::PlaySoundAt)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("OVR", "EmitterChannel")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "PlaySoundAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, clip, volume, src, delay, pitch, loop});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::SetOnFinished
// Il2CppName: SetOnFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::System::Action*)>(&OVR::AudioManager::SetOnFinished)> {
  static const MethodInfo* get() {
    static auto* emitterIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onFinished = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "SetOnFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emitterIdx, onFinished});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::SetOnFinished
// Il2CppName: SetOnFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::System::Action_1<::Il2CppObject*>*, ::Il2CppObject*)>(&OVR::AudioManager::SetOnFinished)> {
  static const MethodInfo* get() {
    static auto* emitterIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onFinished = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "SetOnFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emitterIdx, onFinished, obj});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::AttachSoundToParent
// Il2CppName: AttachSoundToParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::UnityEngine::Transform*)>(&OVR::AudioManager::AttachSoundToParent)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "AttachSoundToParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, parent});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::DetachSoundFromParent
// Il2CppName: DetachSoundFromParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&OVR::AudioManager::DetachSoundFromParent)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "DetachSoundFromParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::DetachSoundsFromParent
// Il2CppName: DetachSoundsFromParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::OVR::SoundEmitter*>, bool)>(&OVR::AudioManager::DetachSoundsFromParent)> {
  static const MethodInfo* get() {
    static auto* emitters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("OVR", "SoundEmitter"), 1)->byval_arg;
    static auto* stopSounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "DetachSoundsFromParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emitters, stopSounds});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::SetEmitterMixerGroup
// Il2CppName: SetEmitterMixerGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::UnityEngine::Audio::AudioMixerGroup*)>(&OVR::AudioManager::SetEmitterMixerGroup)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mixerGroup = &::il2cpp_utils::GetClassFromName("UnityEngine.Audio", "AudioMixerGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "SetEmitterMixerGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, mixerGroup});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::GetActiveSnapshot
// Il2CppName: GetActiveSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OVR::MixerSnapshot* (*)()>(&OVR::AudioManager::GetActiveSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "GetActiveSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::SetCurrentSnapshot
// Il2CppName: SetCurrentSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::OVR::MixerSnapshot*)>(&OVR::AudioManager::SetCurrentSnapshot)> {
  static const MethodInfo* get() {
    static auto* mixerSnapshot = &::il2cpp_utils::GetClassFromName("OVR", "MixerSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "SetCurrentSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mixerSnapshot});
  }
};
// Writing MetadataGetter for method: OVR::AudioManager::BlendWithCurrentSnapshot
// Il2CppName: BlendWithCurrentSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::OVR::MixerSnapshot*, float, float)>(&OVR::AudioManager::BlendWithCurrentSnapshot)> {
  static const MethodInfo* get() {
    static auto* blendSnapshot = &::il2cpp_utils::GetClassFromName("OVR", "MixerSnapshot")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blendTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OVR::AudioManager*), "BlendWithCurrentSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendSnapshot, weight, blendTime});
  }
};
