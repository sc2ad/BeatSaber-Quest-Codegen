// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: Ionic.Crc
namespace Ionic::Crc {
  // Forward declaring type: CRC32
  class CRC32;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Crc::CRC32);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Crc::CRC32*, "Ionic.Crc", "CRC32");
// Type namespace: Ionic.Crc
namespace Ionic::Crc {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Crc.CRC32
  // [TokenAttribute] Offset: FFFFFFFF
  // [GuidAttribute] Offset: 973BD8
  // [ComVisibleAttribute] Offset: 973BD8
  // [ClassInterfaceAttribute] Offset: 973BD8
  class CRC32 : public ::Il2CppObject {
    public:
    public:
    // private System.UInt32 dwPolynomial
    // Size: 0x4
    // Offset: 0x10
    uint dwPolynomial;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: dwPolynomial and: TotalBytesRead
    char __padding0[0x4] = {};
    // private System.Int64 _TotalBytesRead
    // Size: 0x8
    // Offset: 0x18
    int64_t TotalBytesRead;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean reverseBits
    // Size: 0x1
    // Offset: 0x20
    bool reverseBits;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reverseBits and: crc32Table
    char __padding2[0x7] = {};
    // private System.UInt32[] crc32Table
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint> crc32Table;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.UInt32 _register
    // Size: 0x4
    // Offset: 0x30
    uint _register;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // static field const value: static private System.Int32 BUFFER_SIZE
    static constexpr const int BUFFER_SIZE = 8192;
    // Get static field: static private System.Int32 BUFFER_SIZE
    static int _get_BUFFER_SIZE();
    // Set static field: static private System.Int32 BUFFER_SIZE
    static void _set_BUFFER_SIZE(int value);
    // Get instance field reference: private System.UInt32 dwPolynomial
    [[deprecated("Use field access instead!")]] uint& dyn_dwPolynomial();
    // Get instance field reference: private System.Int64 _TotalBytesRead
    [[deprecated("Use field access instead!")]] int64_t& dyn__TotalBytesRead();
    // Get instance field reference: private System.Boolean reverseBits
    [[deprecated("Use field access instead!")]] bool& dyn_reverseBits();
    // Get instance field reference: private System.UInt32[] crc32Table
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_crc32Table();
    // Get instance field reference: private System.UInt32 _register
    [[deprecated("Use field access instead!")]] uint& dyn__register();
    // public System.Int64 get_TotalBytesRead()
    // Offset: 0x1888904
    int64_t get_TotalBytesRead();
    // public System.Int32 get_Crc32Result()
    // Offset: 0x188890C
    int get_Crc32Result();
    // public System.Void .ctor()
    // Offset: 0x1889138
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CRC32* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CRC32::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CRC32*, creationType>()));
    }
    // public System.Void .ctor(System.Boolean reverseBits)
    // Offset: 0x1889178
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CRC32* New_ctor(bool reverseBits) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CRC32::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CRC32*, creationType>(reverseBits)));
    }
    // public System.Void .ctor(System.Int32 polynomial, System.Boolean reverseBits)
    // Offset: 0x18891C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CRC32* New_ctor(int polynomial, bool reverseBits) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CRC32::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CRC32*, creationType>(polynomial, reverseBits)));
    }
    // public System.Int32 GetCrc32(System.IO.Stream input)
    // Offset: 0x1888918
    int GetCrc32(::System::IO::Stream* input);
    // public System.Int32 GetCrc32AndCopy(System.IO.Stream input, System.IO.Stream output)
    // Offset: 0x1888920
    int GetCrc32AndCopy(::System::IO::Stream* input, ::System::IO::Stream* output);
    // public System.Int32 ComputeCrc32(System.Int32 W, System.Byte B)
    // Offset: 0x1888C0C
    int ComputeCrc32(int W, uint8_t B);
    // System.Int32 _InternalComputeCrc32(System.UInt32 W, System.Byte B)
    // Offset: 0x1888C10
    int _InternalComputeCrc32(uint W, uint8_t B);
    // public System.Void SlurpBlock(System.Byte[] block, System.Int32 offset, System.Int32 count)
    // Offset: 0x1888AA8
    void SlurpBlock(::ArrayW<uint8_t> block, int offset, int count);
    // public System.Void UpdateCRC(System.Byte b)
    // Offset: 0x1888C58
    void UpdateCRC(uint8_t b);
    // public System.Void UpdateCRC(System.Byte b, System.Int32 n)
    // Offset: 0x1888CDC
    void UpdateCRC(uint8_t b, int n);
    // static private System.UInt32 ReverseBits(System.UInt32 data)
    // Offset: 0x1888D74
    static uint ReverseBits(uint data);
    // static private System.Byte ReverseBits(System.Byte data)
    // Offset: 0x1888D7C
    static uint8_t ReverseBits(uint8_t data);
    // private System.Void GenerateLookupTable()
    // Offset: 0x1888DC8
    void GenerateLookupTable();
    // private System.UInt32 gf2_matrix_times(System.UInt32[] matrix, System.UInt32 vec)
    // Offset: 0x1888F08
    uint gf2_matrix_times(::ArrayW<uint> matrix, uint vec);
    // private System.Void gf2_matrix_square(System.UInt32[] square, System.UInt32[] mat)
    // Offset: 0x1888F68
    void gf2_matrix_square(::ArrayW<uint> square, ::ArrayW<uint> mat);
    // public System.Void Combine(System.Int32 crc, System.Int32 length)
    // Offset: 0x1888FE4
    void Combine(int crc, int length);
    // public System.Void Reset()
    // Offset: 0x188920C
    void Reset();
  }; // Ionic.Crc.CRC32
  #pragma pack(pop)
  static check_size<sizeof(CRC32), 48 + sizeof(uint)> __Ionic_Crc_CRC32SizeCheck;
  static_assert(sizeof(CRC32) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Crc::CRC32::get_TotalBytesRead
// Il2CppName: get_TotalBytesRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Crc::CRC32::*)()>(&Ionic::Crc::CRC32::get_TotalBytesRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "get_TotalBytesRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::get_Crc32Result
// Il2CppName: get_Crc32Result
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CRC32::*)()>(&Ionic::Crc::CRC32::get_Crc32Result)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "get_Crc32Result", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CRC32::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CRC32::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CRC32::GetCrc32
// Il2CppName: GetCrc32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CRC32::*)(::System::IO::Stream*)>(&Ionic::Crc::CRC32::GetCrc32)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "GetCrc32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::GetCrc32AndCopy
// Il2CppName: GetCrc32AndCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CRC32::*)(::System::IO::Stream*, ::System::IO::Stream*)>(&Ionic::Crc::CRC32::GetCrc32AndCopy)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "GetCrc32AndCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::ComputeCrc32
// Il2CppName: ComputeCrc32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CRC32::*)(int, uint8_t)>(&Ionic::Crc::CRC32::ComputeCrc32)> {
  static const MethodInfo* get() {
    static auto* W = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "ComputeCrc32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{W, B});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::_InternalComputeCrc32
// Il2CppName: _InternalComputeCrc32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CRC32::*)(uint, uint8_t)>(&Ionic::Crc::CRC32::_InternalComputeCrc32)> {
  static const MethodInfo* get() {
    static auto* W = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "_InternalComputeCrc32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{W, B});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::SlurpBlock
// Il2CppName: SlurpBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Crc::CRC32::SlurpBlock)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "SlurpBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::UpdateCRC
// Il2CppName: UpdateCRC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)(uint8_t)>(&Ionic::Crc::CRC32::UpdateCRC)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "UpdateCRC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::UpdateCRC
// Il2CppName: UpdateCRC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)(uint8_t, int)>(&Ionic::Crc::CRC32::UpdateCRC)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "UpdateCRC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, n});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::ReverseBits
// Il2CppName: ReverseBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&Ionic::Crc::CRC32::ReverseBits)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "ReverseBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::ReverseBits
// Il2CppName: ReverseBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t)>(&Ionic::Crc::CRC32::ReverseBits)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "ReverseBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::GenerateLookupTable
// Il2CppName: GenerateLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)()>(&Ionic::Crc::CRC32::GenerateLookupTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "GenerateLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::gf2_matrix_times
// Il2CppName: gf2_matrix_times
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Ionic::Crc::CRC32::*)(::ArrayW<uint>, uint)>(&Ionic::Crc::CRC32::gf2_matrix_times)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* vec = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "gf2_matrix_times", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, vec});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::gf2_matrix_square
// Il2CppName: gf2_matrix_square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)(::ArrayW<uint>, ::ArrayW<uint>)>(&Ionic::Crc::CRC32::gf2_matrix_square)> {
  static const MethodInfo* get() {
    static auto* square = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* mat = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "gf2_matrix_square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{square, mat});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::Combine
// Il2CppName: Combine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)(int, int)>(&Ionic::Crc::CRC32::Combine)> {
  static const MethodInfo* get() {
    static auto* crc = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "Combine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{crc, length});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CRC32::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CRC32::*)()>(&Ionic::Crc::CRC32::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CRC32*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
