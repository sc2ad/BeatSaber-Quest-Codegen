// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Crc
namespace Ionic::Crc {
  // Forward declaring type: CRC32
  class CRC32;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Ionic.Crc
namespace Ionic::Crc {
  // Forward declaring type: CrcCalculatorStream
  class CrcCalculatorStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Crc::CrcCalculatorStream);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Crc::CrcCalculatorStream*, "Ionic.Crc", "CrcCalculatorStream");
// Type namespace: Ionic.Crc
namespace Ionic::Crc {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Crc.CrcCalculatorStream
  // [TokenAttribute] Offset: FFFFFFFF
  class CrcCalculatorStream : public ::System::IO::Stream {
    public:
    public:
    // System.IO.Stream _innerStream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* innerStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private Ionic.Crc.CRC32 _Crc32
    // Size: 0x8
    // Offset: 0x30
    ::Ionic::Crc::CRC32* Crc32;
    // Field size check
    static_assert(sizeof(::Ionic::Crc::CRC32*) == 0x8);
    // private System.Int64 _lengthLimit
    // Size: 0x8
    // Offset: 0x38
    int64_t lengthLimit;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean _leaveOpen
    // Size: 0x1
    // Offset: 0x40
    bool leaveOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int64 UnsetLengthLimit
    static int64_t _get_UnsetLengthLimit();
    // Set static field: static private readonly System.Int64 UnsetLengthLimit
    static void _set_UnsetLengthLimit(int64_t value);
    // Get instance field reference: System.IO.Stream _innerStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__innerStream();
    // Get instance field reference: private Ionic.Crc.CRC32 _Crc32
    [[deprecated("Use field access instead!")]] ::Ionic::Crc::CRC32*& dyn__Crc32();
    // Get instance field reference: private System.Int64 _lengthLimit
    [[deprecated("Use field access instead!")]] int64_t& dyn__lengthLimit();
    // Get instance field reference: private System.Boolean _leaveOpen
    [[deprecated("Use field access instead!")]] bool& dyn__leaveOpen();
    // public System.Int64 get_TotalBytesSlurped()
    // Offset: 0x1889624
    int64_t get_TotalBytesSlurped();
    // public System.Int32 get_Crc()
    // Offset: 0x1889640
    int get_Crc();
    // public System.Boolean get_LeaveOpen()
    // Offset: 0x1889660
    bool get_LeaveOpen();
    // public System.Void set_LeaveOpen(System.Boolean value)
    // Offset: 0x1889668
    void set_LeaveOpen(bool value);
    // public System.Void .ctor(System.IO.Stream stream)
    // Offset: 0x1889218
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(::System::IO::Stream* stream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(stream)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Boolean leaveOpen)
    // Offset: 0x1889384
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(::System::IO::Stream* stream, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(stream, leaveOpen)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Int64 length)
    // Offset: 0x1889410
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(::System::IO::Stream* stream, int64_t length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(stream, length)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Int64 length, System.Boolean leaveOpen)
    // Offset: 0x18894B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(::System::IO::Stream* stream, int64_t length, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(stream, length, leaveOpen)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Int64 length, System.Boolean leaveOpen, Ionic.Crc.CRC32 crc32)
    // Offset: 0x188956C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(::System::IO::Stream* stream, int64_t length, bool leaveOpen, ::Ionic::Crc::CRC32* crc32) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(stream, length, leaveOpen, crc32)));
    }
    // private System.Void .ctor(System.Boolean leaveOpen, System.Int64 length, System.IO.Stream stream, Ionic.Crc.CRC32 crc32)
    // Offset: 0x18892A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrcCalculatorStream* New_ctor(bool leaveOpen, int64_t length, ::System::IO::Stream* stream, ::Ionic::Crc::CRC32* crc32) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Crc::CrcCalculatorStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrcCalculatorStream*, creationType>(leaveOpen, length, stream, crc32)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1889AA4
    static void _cctor();
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x1889A44
    void System_IDisposable_Dispose();
    // public override System.Boolean get_CanRead()
    // Offset: 0x18897F4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1889814
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x188981C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x1889860
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x1889908
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1889924
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1889674
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1889780
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Void Flush()
    // Offset: 0x188983C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x1889984
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x18899E4
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Void Close()
    // Offset: 0x1889A54
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Close()
    void Close();
  }; // Ionic.Crc.CrcCalculatorStream
  #pragma pack(pop)
  static check_size<sizeof(CrcCalculatorStream), 64 + sizeof(bool)> __Ionic_Crc_CrcCalculatorStreamSizeCheck;
  static_assert(sizeof(CrcCalculatorStream) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_TotalBytesSlurped
// Il2CppName: get_TotalBytesSlurped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_TotalBytesSlurped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_TotalBytesSlurped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_Crc
// Il2CppName: get_Crc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_Crc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_Crc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_LeaveOpen
// Il2CppName: get_LeaveOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_LeaveOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_LeaveOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::set_LeaveOpen
// Il2CppName: set_LeaveOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)(bool)>(&Ionic::Crc::CrcCalculatorStream::set_LeaveOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "set_LeaveOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Ionic::Crc::CrcCalculatorStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)(int64_t)>(&Ionic::Crc::CrcCalculatorStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Crc::CrcCalculatorStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Crc::CrcCalculatorStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Crc::CrcCalculatorStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Crc::CrcCalculatorStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Ionic::Crc::CrcCalculatorStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)(int64_t)>(&Ionic::Crc::CrcCalculatorStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Crc::CrcCalculatorStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Crc::CrcCalculatorStream::*)()>(&Ionic::Crc::CrcCalculatorStream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Crc::CrcCalculatorStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
