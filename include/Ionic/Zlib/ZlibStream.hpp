// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Ionic.Zlib.CompressionMode
#include "Ionic/Zlib/CompressionMode.hpp"
// Including type: Ionic.Zlib.CompressionLevel
#include "Ionic/Zlib/CompressionLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ZlibBaseStream
  class ZlibBaseStream;
  // Forward declaring type: FlushType
  struct FlushType;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ZlibStream
  class ZlibStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::ZlibStream);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::ZlibStream*, "Ionic.Zlib", "ZlibStream");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.ZlibStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ZlibStream : public ::System::IO::Stream {
    public:
    public:
    // Ionic.Zlib.ZlibBaseStream _baseStream
    // Size: 0x8
    // Offset: 0x28
    ::Ionic::Zlib::ZlibBaseStream* baseStream;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::ZlibBaseStream*) == 0x8);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x30
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: Ionic.Zlib.ZlibBaseStream _baseStream
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::ZlibBaseStream*& dyn__baseStream();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // public Ionic.Zlib.FlushType get_FlushMode()
    // Offset: 0xB5C394
    ::Ionic::Zlib::FlushType get_FlushMode();
    // public System.Void set_FlushMode(Ionic.Zlib.FlushType value)
    // Offset: 0xB5C3B0
    void set_FlushMode(::Ionic::Zlib::FlushType value);
    // public System.Int32 get_BufferSize()
    // Offset: 0xB5C450
    int get_BufferSize();
    // public System.Void set_BufferSize(System.Int32 value)
    // Offset: 0xB5C46C
    void set_BufferSize(int value);
    // public System.Int64 get_TotalIn()
    // Offset: 0xB5C5CC
    int64_t get_TotalIn();
    // public System.Int64 get_TotalOut()
    // Offset: 0xB5C5F4
    int64_t get_TotalOut();
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionMode mode)
    // Offset: 0xB5C2B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionMode mode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibStream*, creationType>(stream, mode)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionMode mode, Ionic.Zlib.CompressionLevel level)
    // Offset: 0xB5C380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionMode mode, ::Ionic::Zlib::CompressionLevel level) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibStream*, creationType>(stream, mode, level)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionMode mode, System.Boolean leaveOpen)
    // Offset: 0xB5C388
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionMode mode, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibStream*, creationType>(stream, mode, leaveOpen)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionMode mode, Ionic.Zlib.CompressionLevel level, System.Boolean leaveOpen)
    // Offset: 0xB5C2C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionMode mode, ::Ionic::Zlib::CompressionLevel level, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibStream*, creationType>(stream, mode, level, leaveOpen)));
    }
    // static public System.Byte[] CompressString(System.String s)
    // Offset: 0xB5CBF8
    static ::ArrayW<uint8_t> CompressString(::StringW s);
    // static public System.Byte[] CompressBuffer(System.Byte[] b)
    // Offset: 0xB5CD74
    static ::ArrayW<uint8_t> CompressBuffer(::ArrayW<uint8_t> b);
    // static public System.String UncompressString(System.Byte[] compressed)
    // Offset: 0xB5CEF0
    static ::StringW UncompressString(::ArrayW<uint8_t> compressed);
    // static public System.Byte[] UncompressBuffer(System.Byte[] compressed)
    // Offset: 0xB5D050
    static ::ArrayW<uint8_t> UncompressBuffer(::ArrayW<uint8_t> compressed);
    // public override System.Boolean get_CanRead()
    // Offset: 0xB5C6B8
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0xB5C758
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0xB5C760
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0xB5C89C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0xB5C8FC
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0xB5C950
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0xB5C61C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Void Flush()
    // Offset: 0xB5C800
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xB5C9B0
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0xB5CA74
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0xB5CAD4
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xB5CB34
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
  }; // Ionic.Zlib.ZlibStream
  #pragma pack(pop)
  static check_size<sizeof(ZlibStream), 48 + sizeof(bool)> __Ionic_Zlib_ZlibStreamSizeCheck;
  static_assert(sizeof(ZlibStream) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_FlushMode
// Il2CppName: get_FlushMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Ionic::Zlib::FlushType (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_FlushMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_FlushMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::set_FlushMode
// Il2CppName: set_FlushMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(::Ionic::Zlib::FlushType)>(&Ionic::Zlib::ZlibStream::set_FlushMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "set_FlushMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::set_BufferSize
// Il2CppName: set_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(int)>(&Ionic::Zlib::ZlibStream::set_BufferSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "set_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_TotalIn
// Il2CppName: get_TotalIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_TotalIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_TotalIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_TotalOut
// Il2CppName: get_TotalOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_TotalOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_TotalOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::CompressString
// Il2CppName: CompressString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&Ionic::Zlib::ZlibStream::CompressString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "CompressString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::CompressBuffer
// Il2CppName: CompressBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::ZlibStream::CompressBuffer)> {
  static const MethodInfo* get() {
    static auto* b = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "CompressBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::UncompressString
// Il2CppName: UncompressString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::ZlibStream::UncompressString)> {
  static const MethodInfo* get() {
    static auto* compressed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "UncompressString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{compressed});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::UncompressBuffer
// Il2CppName: UncompressBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::ZlibStream::UncompressBuffer)> {
  static const MethodInfo* get() {
    static auto* compressed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "UncompressBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{compressed});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(int64_t)>(&Ionic::Zlib::ZlibStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(bool)>(&Ionic::Zlib::ZlibStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)()>(&Ionic::Zlib::ZlibStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::ZlibStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ZlibStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Ionic::Zlib::ZlibStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(int64_t)>(&Ionic::Zlib::ZlibStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::ZlibStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
