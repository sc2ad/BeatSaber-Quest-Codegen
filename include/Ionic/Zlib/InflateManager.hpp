// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ZlibCodec
  class ZlibCodec;
  // Forward declaring type: InflateBlocks
  class InflateBlocks;
  // Forward declaring type: FlushType
  struct FlushType;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: InflateManager
  class InflateManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::InflateManager);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::InflateManager*, "Ionic.Zlib", "InflateManager");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.InflateManager
  // [TokenAttribute] Offset: FFFFFFFF
  class InflateManager : public ::Il2CppObject {
    public:
    // Nested type: ::Ionic::Zlib::InflateManager::InflateManagerMode
    struct InflateManagerMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct InflateManagerMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InflateManagerMode
      constexpr InflateManagerMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode METHOD
      static constexpr const int METHOD = 0;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode METHOD
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_METHOD();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode METHOD
      static void _set_METHOD(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode FLAG
      static constexpr const int FLAG = 1;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode FLAG
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_FLAG();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode FLAG
      static void _set_FLAG(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT4
      static constexpr const int DICT4 = 2;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT4
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DICT4();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT4
      static void _set_DICT4(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT3
      static constexpr const int DICT3 = 3;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT3
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DICT3();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT3
      static void _set_DICT3(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT2
      static constexpr const int DICT2 = 4;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT2
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DICT2();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT2
      static void _set_DICT2(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT1
      static constexpr const int DICT1 = 5;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT1
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DICT1();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT1
      static void _set_DICT1(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT0
      static constexpr const int DICT0 = 6;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT0
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DICT0();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DICT0
      static void _set_DICT0(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BLOCKS
      static constexpr const int BLOCKS = 7;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BLOCKS
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_BLOCKS();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BLOCKS
      static void _set_BLOCKS(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK4
      static constexpr const int CHECK4 = 8;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK4
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_CHECK4();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK4
      static void _set_CHECK4(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK3
      static constexpr const int CHECK3 = 9;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK3
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_CHECK3();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK3
      static void _set_CHECK3(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK2
      static constexpr const int CHECK2 = 10;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK2
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_CHECK2();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK2
      static void _set_CHECK2(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK1
      static constexpr const int CHECK1 = 11;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK1
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_CHECK1();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode CHECK1
      static void _set_CHECK1(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DONE
      static constexpr const int DONE = 12;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DONE
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_DONE();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode DONE
      static void _set_DONE(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // static field const value: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BAD
      static constexpr const int BAD = 13;
      // Get static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BAD
      static ::Ionic::Zlib::InflateManager::InflateManagerMode _get_BAD();
      // Set static field: static public Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode BAD
      static void _set_BAD(::Ionic::Zlib::InflateManager::InflateManagerMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode
    #pragma pack(pop)
    static check_size<sizeof(InflateManager::InflateManagerMode), 0 + sizeof(int)> __Ionic_Zlib_InflateManager_InflateManagerModeSizeCheck;
    static_assert(sizeof(InflateManager::InflateManagerMode) == 0x4);
    public:
    // private Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode mode
    // Size: 0x4
    // Offset: 0x10
    ::Ionic::Zlib::InflateManager::InflateManagerMode mode;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::InflateManager::InflateManagerMode) == 0x4);
    // Padding between fields: mode and: codec
    char __padding0[0x4] = {};
    // Ionic.Zlib.ZlibCodec _codec
    // Size: 0x8
    // Offset: 0x18
    ::Ionic::Zlib::ZlibCodec* codec;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::ZlibCodec*) == 0x8);
    // System.Int32 method
    // Size: 0x4
    // Offset: 0x20
    int method;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.UInt32 computedCheck
    // Size: 0x4
    // Offset: 0x24
    uint computedCheck;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 expectedCheck
    // Size: 0x4
    // Offset: 0x28
    uint expectedCheck;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.Int32 marker
    // Size: 0x4
    // Offset: 0x2C
    int marker;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _handleRfc1950HeaderBytes
    // Size: 0x1
    // Offset: 0x30
    bool handleRfc1950HeaderBytes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: handleRfc1950HeaderBytes and: wbits
    char __padding6[0x3] = {};
    // System.Int32 wbits
    // Size: 0x4
    // Offset: 0x34
    int wbits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Ionic.Zlib.InflateBlocks blocks
    // Size: 0x8
    // Offset: 0x38
    ::Ionic::Zlib::InflateBlocks* blocks;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::InflateBlocks*) == 0x8);
    public:
    // static field const value: static private System.Int32 PRESET_DICT
    static constexpr const int PRESET_DICT = 32;
    // Get static field: static private System.Int32 PRESET_DICT
    static int _get_PRESET_DICT();
    // Set static field: static private System.Int32 PRESET_DICT
    static void _set_PRESET_DICT(int value);
    // static field const value: static private System.Int32 Z_DEFLATED
    static constexpr const int Z_DEFLATED = 8;
    // Get static field: static private System.Int32 Z_DEFLATED
    static int _get_Z_DEFLATED();
    // Set static field: static private System.Int32 Z_DEFLATED
    static void _set_Z_DEFLATED(int value);
    // Get static field: static private readonly System.Byte[] mark
    static ::ArrayW<uint8_t> _get_mark();
    // Set static field: static private readonly System.Byte[] mark
    static void _set_mark(::ArrayW<uint8_t> value);
    // Get instance field reference: private Ionic.Zlib.InflateManager/Ionic.Zlib.InflateManagerMode mode
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::InflateManager::InflateManagerMode& dyn_mode();
    // Get instance field reference: Ionic.Zlib.ZlibCodec _codec
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::ZlibCodec*& dyn__codec();
    // Get instance field reference: System.Int32 method
    [[deprecated("Use field access instead!")]] int& dyn_method();
    // Get instance field reference: System.UInt32 computedCheck
    [[deprecated("Use field access instead!")]] uint& dyn_computedCheck();
    // Get instance field reference: System.UInt32 expectedCheck
    [[deprecated("Use field access instead!")]] uint& dyn_expectedCheck();
    // Get instance field reference: System.Int32 marker
    [[deprecated("Use field access instead!")]] int& dyn_marker();
    // Get instance field reference: private System.Boolean _handleRfc1950HeaderBytes
    [[deprecated("Use field access instead!")]] bool& dyn__handleRfc1950HeaderBytes();
    // Get instance field reference: System.Int32 wbits
    [[deprecated("Use field access instead!")]] int& dyn_wbits();
    // Get instance field reference: Ionic.Zlib.InflateBlocks blocks
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::InflateBlocks*& dyn_blocks();
    // System.Boolean get_HandleRfc1950HeaderBytes()
    // Offset: 0x18964B8
    bool get_HandleRfc1950HeaderBytes();
    // System.Void set_HandleRfc1950HeaderBytes(System.Boolean value)
    // Offset: 0x18964C0
    void set_HandleRfc1950HeaderBytes(bool value);
    // public System.Void .ctor()
    // Offset: 0x18964CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InflateManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::InflateManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InflateManager*, creationType>()));
    }
    // public System.Void .ctor(System.Boolean expectRfc1950HeaderBytes)
    // Offset: 0x18964DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InflateManager* New_ctor(bool expectRfc1950HeaderBytes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::InflateManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InflateManager*, creationType>(expectRfc1950HeaderBytes)));
    }
    // static private System.Void .cctor()
    // Offset: 0x189731C
    static void _cctor();
    // System.Int32 Reset()
    // Offset: 0x1896514
    int Reset();
    // System.Int32 End()
    // Offset: 0x189656C
    int End();
    // System.Int32 Initialize(Ionic.Zlib.ZlibCodec codec, System.Int32 w)
    // Offset: 0x18965A4
    int Initialize(::Ionic::Zlib::ZlibCodec* codec, int w);
    // System.Int32 Inflate(Ionic.Zlib.FlushType flush)
    // Offset: 0x18966A8
    int Inflate(::Ionic::Zlib::FlushType flush);
    // System.Int32 SetDictionary(System.Byte[] dictionary)
    // Offset: 0x1896F58
    int SetDictionary(::ArrayW<uint8_t> dictionary);
    // System.Int32 Sync()
    // Offset: 0x18970F0
    int Sync();
    // System.Int32 SyncPoint(Ionic.Zlib.ZlibCodec z)
    // Offset: 0x18972F8
    int SyncPoint(::Ionic::Zlib::ZlibCodec* z);
  }; // Ionic.Zlib.InflateManager
  #pragma pack(pop)
  static check_size<sizeof(InflateManager), 56 + sizeof(::Ionic::Zlib::InflateBlocks*)> __Ionic_Zlib_InflateManagerSizeCheck;
  static_assert(sizeof(InflateManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::InflateManager::InflateManagerMode, "Ionic.Zlib", "InflateManager/InflateManagerMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::get_HandleRfc1950HeaderBytes
// Il2CppName: get_HandleRfc1950HeaderBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::InflateManager::*)()>(&Ionic::Zlib::InflateManager::get_HandleRfc1950HeaderBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "get_HandleRfc1950HeaderBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::set_HandleRfc1950HeaderBytes
// Il2CppName: set_HandleRfc1950HeaderBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::InflateManager::*)(bool)>(&Ionic::Zlib::InflateManager::set_HandleRfc1950HeaderBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "set_HandleRfc1950HeaderBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Ionic::Zlib::InflateManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)()>(&Ionic::Zlib::InflateManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::End
// Il2CppName: End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)()>(&Ionic::Zlib::InflateManager::End)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)(::Ionic::Zlib::ZlibCodec*, int)>(&Ionic::Zlib::InflateManager::Initialize)> {
  static const MethodInfo* get() {
    static auto* codec = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codec, w});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::Inflate
// Il2CppName: Inflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)(::Ionic::Zlib::FlushType)>(&Ionic::Zlib::InflateManager::Inflate)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "Inflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::SetDictionary
// Il2CppName: SetDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::InflateManager::SetDictionary)> {
  static const MethodInfo* get() {
    static auto* dictionary = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "SetDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dictionary});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::Sync
// Il2CppName: Sync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)()>(&Ionic::Zlib::InflateManager::Sync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "Sync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateManager::SyncPoint
// Il2CppName: SyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateManager::*)(::Ionic::Zlib::ZlibCodec*)>(&Ionic::Zlib::InflateManager::SyncPoint)> {
  static const MethodInfo* get() {
    static auto* z = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateManager*), "SyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{z});
  }
};
