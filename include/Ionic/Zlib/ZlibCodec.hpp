// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Ionic.Zlib.CompressionLevel
#include "Ionic/Zlib/CompressionLevel.hpp"
// Including type: Ionic.Zlib.CompressionStrategy
#include "Ionic/Zlib/CompressionStrategy.hpp"
// Including type: Ionic.Zlib.CompressionMode
#include "Ionic/Zlib/CompressionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: DeflateManager
  class DeflateManager;
  // Forward declaring type: InflateManager
  class InflateManager;
  // Forward declaring type: FlushType
  struct FlushType;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ZlibCodec
  class ZlibCodec;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::ZlibCodec);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::ZlibCodec*, "Ionic.Zlib", "ZlibCodec");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.ZlibCodec
  // [TokenAttribute] Offset: FFFFFFFF
  // [GuidAttribute] Offset: 973B74
  // [ComVisibleAttribute] Offset: 973B74
  // [ClassInterfaceAttribute] Offset: 973B74
  class ZlibCodec : public ::Il2CppObject {
    public:
    public:
    // public System.Byte[] InputBuffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> InputBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Int32 NextIn
    // Size: 0x4
    // Offset: 0x18
    int NextIn;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 AvailableBytesIn
    // Size: 0x4
    // Offset: 0x1C
    int AvailableBytesIn;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int64 TotalBytesIn
    // Size: 0x8
    // Offset: 0x20
    int64_t TotalBytesIn;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Byte[] OutputBuffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> OutputBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Int32 NextOut
    // Size: 0x4
    // Offset: 0x30
    int NextOut;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 AvailableBytesOut
    // Size: 0x4
    // Offset: 0x34
    int AvailableBytesOut;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int64 TotalBytesOut
    // Size: 0x8
    // Offset: 0x38
    int64_t TotalBytesOut;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.String Message
    // Size: 0x8
    // Offset: 0x40
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // Ionic.Zlib.DeflateManager dstate
    // Size: 0x8
    // Offset: 0x48
    ::Ionic::Zlib::DeflateManager* dstate;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::DeflateManager*) == 0x8);
    // Ionic.Zlib.InflateManager istate
    // Size: 0x8
    // Offset: 0x50
    ::Ionic::Zlib::InflateManager* istate;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::InflateManager*) == 0x8);
    // System.UInt32 _Adler32
    // Size: 0x4
    // Offset: 0x58
    uint Adler32;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public Ionic.Zlib.CompressionLevel CompressLevel
    // Size: 0x4
    // Offset: 0x5C
    ::Ionic::Zlib::CompressionLevel CompressLevel;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::CompressionLevel) == 0x4);
    // public System.Int32 WindowBits
    // Size: 0x4
    // Offset: 0x60
    int WindowBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Ionic.Zlib.CompressionStrategy Strategy
    // Size: 0x4
    // Offset: 0x64
    ::Ionic::Zlib::CompressionStrategy Strategy;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::CompressionStrategy) == 0x4);
    public:
    // Get instance field reference: public System.Byte[] InputBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_InputBuffer();
    // Get instance field reference: public System.Int32 NextIn
    [[deprecated("Use field access instead!")]] int& dyn_NextIn();
    // Get instance field reference: public System.Int32 AvailableBytesIn
    [[deprecated("Use field access instead!")]] int& dyn_AvailableBytesIn();
    // Get instance field reference: public System.Int64 TotalBytesIn
    [[deprecated("Use field access instead!")]] int64_t& dyn_TotalBytesIn();
    // Get instance field reference: public System.Byte[] OutputBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_OutputBuffer();
    // Get instance field reference: public System.Int32 NextOut
    [[deprecated("Use field access instead!")]] int& dyn_NextOut();
    // Get instance field reference: public System.Int32 AvailableBytesOut
    [[deprecated("Use field access instead!")]] int& dyn_AvailableBytesOut();
    // Get instance field reference: public System.Int64 TotalBytesOut
    [[deprecated("Use field access instead!")]] int64_t& dyn_TotalBytesOut();
    // Get instance field reference: public System.String Message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Message();
    // Get instance field reference: Ionic.Zlib.DeflateManager dstate
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::DeflateManager*& dyn_dstate();
    // Get instance field reference: Ionic.Zlib.InflateManager istate
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::InflateManager*& dyn_istate();
    // Get instance field reference: System.UInt32 _Adler32
    [[deprecated("Use field access instead!")]] uint& dyn__Adler32();
    // Get instance field reference: public Ionic.Zlib.CompressionLevel CompressLevel
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::CompressionLevel& dyn_CompressLevel();
    // Get instance field reference: public System.Int32 WindowBits
    [[deprecated("Use field access instead!")]] int& dyn_WindowBits();
    // Get instance field reference: public Ionic.Zlib.CompressionStrategy Strategy
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::CompressionStrategy& dyn_Strategy();
    // public System.Int32 get_Adler32()
    // Offset: 0x189B29C
    int get_Adler32();
    // public System.Void .ctor()
    // Offset: 0x1898274
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibCodec* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibCodec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibCodec*, creationType>()));
    }
    // public System.Void .ctor(Ionic.Zlib.CompressionMode mode)
    // Offset: 0x189B2A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZlibCodec* New_ctor(::Ionic::Zlib::CompressionMode mode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ZlibCodec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZlibCodec*, creationType>(mode)));
    }
    // public System.Int32 InitializeInflate()
    // Offset: 0x189B390
    int InitializeInflate();
    // public System.Int32 InitializeInflate(System.Boolean expectRfc1950Header)
    // Offset: 0x1899D50
    int InitializeInflate(bool expectRfc1950Header);
    // public System.Int32 InitializeInflate(System.Int32 windowBits)
    // Offset: 0x189B3B0
    int InitializeInflate(int windowBits);
    // public System.Int32 InitializeInflate(System.Int32 windowBits, System.Boolean expectRfc1950Header)
    // Offset: 0x189B3D0
    int InitializeInflate(int windowBits, bool expectRfc1950Header);
    // public System.Int32 Inflate(Ionic.Zlib.FlushType flush)
    // Offset: 0x189A050
    int Inflate(::Ionic::Zlib::FlushType flush);
    // public System.Int32 EndInflate()
    // Offset: 0x189A690
    int EndInflate();
    // public System.Int32 SyncInflate()
    // Offset: 0x189B4B4
    int SyncInflate();
    // public System.Int32 InitializeDeflate()
    // Offset: 0x189B374
    int InitializeDeflate();
    // public System.Int32 InitializeDeflate(Ionic.Zlib.CompressionLevel level)
    // Offset: 0x189B610
    int InitializeDeflate(::Ionic::Zlib::CompressionLevel level);
    // public System.Int32 InitializeDeflate(Ionic.Zlib.CompressionLevel level, System.Boolean wantRfc1950Header)
    // Offset: 0x1898288
    int InitializeDeflate(::Ionic::Zlib::CompressionLevel level, bool wantRfc1950Header);
    // public System.Int32 InitializeDeflate(Ionic.Zlib.CompressionLevel level, System.Int32 bits)
    // Offset: 0x189B630
    int InitializeDeflate(::Ionic::Zlib::CompressionLevel level, int bits);
    // public System.Int32 InitializeDeflate(Ionic.Zlib.CompressionLevel level, System.Int32 bits, System.Boolean wantRfc1950Header)
    // Offset: 0x189B650
    int InitializeDeflate(::Ionic::Zlib::CompressionLevel level, int bits, bool wantRfc1950Header);
    // private System.Int32 _InternalInitializeDeflate(System.Boolean wantRfc1950Header)
    // Offset: 0x189B538
    int _InternalInitializeDeflate(bool wantRfc1950Header);
    // public System.Int32 Deflate(Ionic.Zlib.FlushType flush)
    // Offset: 0x188E5A4
    int Deflate(::Ionic::Zlib::FlushType flush);
    // public System.Int32 EndDeflate()
    // Offset: 0x18982A8
    int EndDeflate();
    // public System.Void ResetDeflate()
    // Offset: 0x1898C10
    void ResetDeflate();
    // public System.Int32 SetDeflateParams(Ionic.Zlib.CompressionLevel level, Ionic.Zlib.CompressionStrategy strategy)
    // Offset: 0x189B670
    int SetDeflateParams(::Ionic::Zlib::CompressionLevel level, ::Ionic::Zlib::CompressionStrategy strategy);
    // public System.Int32 SetDictionary(System.Byte[] dictionary)
    // Offset: 0x189B70C
    int SetDictionary(::ArrayW<uint8_t> dictionary);
    // System.Void flush_pending()
    // Offset: 0x188C630
    void flush_pending();
    // System.Int32 read_buf(System.Byte[] buf, System.Int32 start, System.Int32 size)
    // Offset: 0x188CCE0
    int read_buf(::ArrayW<uint8_t> buf, int start, int size);
  }; // Ionic.Zlib.ZlibCodec
  #pragma pack(pop)
  static check_size<sizeof(ZlibCodec), 100 + sizeof(::Ionic::Zlib::CompressionStrategy)> __Ionic_Zlib_ZlibCodecSizeCheck;
  static_assert(sizeof(ZlibCodec) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::get_Adler32
// Il2CppName: get_Adler32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::get_Adler32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "get_Adler32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeInflate
// Il2CppName: InitializeInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::InitializeInflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeInflate
// Il2CppName: InitializeInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(bool)>(&Ionic::Zlib::ZlibCodec::InitializeInflate)> {
  static const MethodInfo* get() {
    static auto* expectRfc1950Header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expectRfc1950Header});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeInflate
// Il2CppName: InitializeInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(int)>(&Ionic::Zlib::ZlibCodec::InitializeInflate)> {
  static const MethodInfo* get() {
    static auto* windowBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowBits});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeInflate
// Il2CppName: InitializeInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(int, bool)>(&Ionic::Zlib::ZlibCodec::InitializeInflate)> {
  static const MethodInfo* get() {
    static auto* windowBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expectRfc1950Header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowBits, expectRfc1950Header});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::Inflate
// Il2CppName: Inflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::FlushType)>(&Ionic::Zlib::ZlibCodec::Inflate)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "Inflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::EndInflate
// Il2CppName: EndInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::EndInflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "EndInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::SyncInflate
// Il2CppName: SyncInflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::SyncInflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "SyncInflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeDeflate
// Il2CppName: InitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::InitializeDeflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeDeflate
// Il2CppName: InitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::CompressionLevel)>(&Ionic::Zlib::ZlibCodec::InitializeDeflate)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeDeflate
// Il2CppName: InitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::CompressionLevel, bool)>(&Ionic::Zlib::ZlibCodec::InitializeDeflate)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* wantRfc1950Header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, wantRfc1950Header});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeDeflate
// Il2CppName: InitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::CompressionLevel, int)>(&Ionic::Zlib::ZlibCodec::InitializeDeflate)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, bits});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::InitializeDeflate
// Il2CppName: InitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::CompressionLevel, int, bool)>(&Ionic::Zlib::ZlibCodec::InitializeDeflate)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wantRfc1950Header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "InitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, bits, wantRfc1950Header});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::_InternalInitializeDeflate
// Il2CppName: _InternalInitializeDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(bool)>(&Ionic::Zlib::ZlibCodec::_InternalInitializeDeflate)> {
  static const MethodInfo* get() {
    static auto* wantRfc1950Header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "_InternalInitializeDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wantRfc1950Header});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::Deflate
// Il2CppName: Deflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::FlushType)>(&Ionic::Zlib::ZlibCodec::Deflate)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "Deflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::EndDeflate
// Il2CppName: EndDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::EndDeflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "EndDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::ResetDeflate
// Il2CppName: ResetDeflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::ResetDeflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "ResetDeflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::SetDeflateParams
// Il2CppName: SetDeflateParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::Ionic::Zlib::CompressionLevel, ::Ionic::Zlib::CompressionStrategy)>(&Ionic::Zlib::ZlibCodec::SetDeflateParams)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* strategy = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "SetDeflateParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, strategy});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::SetDictionary
// Il2CppName: SetDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::ZlibCodec::SetDictionary)> {
  static const MethodInfo* get() {
    static auto* dictionary = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "SetDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dictionary});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::flush_pending
// Il2CppName: flush_pending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ZlibCodec::*)()>(&Ionic::Zlib::ZlibCodec::flush_pending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "flush_pending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ZlibCodec::read_buf
// Il2CppName: read_buf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ZlibCodec::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::ZlibCodec::read_buf)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ZlibCodec*), "read_buf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, start, size});
  }
};
