// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Ionic.Zlib.CompressionLevel
#include "Ionic/Zlib/CompressionLevel.hpp"
// Including type: Ionic.Zlib.CompressionStrategy
#include "Ionic/Zlib/CompressionStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: WorkItem
  class WorkItem;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Forward declaring namespace: Ionic::Crc
namespace Ionic::Crc {
  // Forward declaring type: CRC32
  class CRC32;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ParallelDeflateOutputStream
  class ParallelDeflateOutputStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::ParallelDeflateOutputStream);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::ParallelDeflateOutputStream*, "Ionic.Zlib", "ParallelDeflateOutputStream");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.ParallelDeflateOutputStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ParallelDeflateOutputStream : public ::System::IO::Stream {
    public:
    // Nested type: ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits
    struct TraceBits;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct TraceBits/*, public ::System::Enum*/ {
      public:
      public:
      // public System.UInt32 value__
      // Size: 0x4
      // Offset: 0x0
      uint value;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: TraceBits
      constexpr TraceBits(uint value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint
      constexpr operator uint() const noexcept {
        return value;
      }
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits None
      static constexpr const uint None = 0u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits None
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_None();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits None
      static void _set_None(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits NotUsed1
      static constexpr const uint NotUsed1 = 1u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits NotUsed1
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_NotUsed1();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits NotUsed1
      static void _set_NotUsed1(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitLock
      static constexpr const uint EmitLock = 2u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitLock
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitLock();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitLock
      static void _set_EmitLock(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitEnter
      static constexpr const uint EmitEnter = 4u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitEnter
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitEnter();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitEnter
      static void _set_EmitEnter(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitBegin
      static constexpr const uint EmitBegin = 8u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitBegin
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitBegin();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitBegin
      static void _set_EmitBegin(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitDone
      static constexpr const uint EmitDone = 16u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitDone
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitDone();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitDone
      static void _set_EmitDone(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitSkip
      static constexpr const uint EmitSkip = 32u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitSkip
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitSkip();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitSkip
      static void _set_EmitSkip(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitAll
      static constexpr const uint EmitAll = 58u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitAll
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_EmitAll();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits EmitAll
      static void _set_EmitAll(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Flush
      static constexpr const uint Flush = 64u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Flush
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Flush();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Flush
      static void _set_Flush(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Lifecycle
      static constexpr const uint Lifecycle = 128u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Lifecycle
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Lifecycle();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Lifecycle
      static void _set_Lifecycle(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Session
      static constexpr const uint Session = 256u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Session
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Session();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Session
      static void _set_Session(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Synch
      static constexpr const uint Synch = 512u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Synch
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Synch();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Synch
      static void _set_Synch(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Instance
      static constexpr const uint Instance = 1024u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Instance
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Instance();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Instance
      static void _set_Instance(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Compress
      static constexpr const uint Compress = 2048u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Compress
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Compress();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Compress
      static void _set_Compress(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Write
      static constexpr const uint Write = 4096u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Write
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_Write();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits Write
      static void _set_Write(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteEnter
      static constexpr const uint WriteEnter = 8192u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteEnter
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_WriteEnter();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteEnter
      static void _set_WriteEnter(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteTake
      static constexpr const uint WriteTake = 16384u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteTake
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_WriteTake();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits WriteTake
      static void _set_WriteTake(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // static field const value: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits All
      static constexpr const uint All = 4294967295u;
      // Get static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits All
      static ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits _get_All();
      // Set static field: static public Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits All
      static void _set_All(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value);
      // Get instance field reference: public System.UInt32 value__
      [[deprecated("Use field access instead!")]] uint& dyn_value__();
    }; // Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits
    #pragma pack(pop)
    static check_size<sizeof(ParallelDeflateOutputStream::TraceBits), 0 + sizeof(uint)> __Ionic_Zlib_ParallelDeflateOutputStream_TraceBitsSizeCheck;
    static_assert(sizeof(ParallelDeflateOutputStream::TraceBits) == 0x4);
    public:
    // private System.Collections.Generic.List`1<Ionic.Zlib.WorkItem> _pool
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Ionic::Zlib::WorkItem*>* pool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Ionic::Zlib::WorkItem*>*) == 0x8);
    // private System.Boolean _leaveOpen
    // Size: 0x1
    // Offset: 0x30
    bool leaveOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean emitting
    // Size: 0x1
    // Offset: 0x31
    bool emitting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: emitting and: outStream
    char __padding2[0x6] = {};
    // private System.IO.Stream _outStream
    // Size: 0x8
    // Offset: 0x38
    ::System::IO::Stream* outStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Int32 _maxBufferPairs
    // Size: 0x4
    // Offset: 0x40
    int maxBufferPairs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bufferSize
    // Size: 0x4
    // Offset: 0x44
    int bufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.AutoResetEvent _newlyCompressedBlob
    // Size: 0x8
    // Offset: 0x48
    ::System::Threading::AutoResetEvent* newlyCompressedBlob;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private System.Object _outputLock
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* outputLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean _isClosed
    // Size: 0x1
    // Offset: 0x58
    bool isClosed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _firstWriteDone
    // Size: 0x1
    // Offset: 0x59
    bool firstWriteDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstWriteDone and: currentlyFilling
    char __padding9[0x2] = {};
    // private System.Int32 _currentlyFilling
    // Size: 0x4
    // Offset: 0x5C
    int currentlyFilling;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastFilled
    // Size: 0x4
    // Offset: 0x60
    int lastFilled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastWritten
    // Size: 0x4
    // Offset: 0x64
    int lastWritten;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _latestCompressed
    // Size: 0x4
    // Offset: 0x68
    int latestCompressed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _Crc32
    // Size: 0x4
    // Offset: 0x6C
    int Crc32;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Ionic.Crc.CRC32 _runningCrc
    // Size: 0x8
    // Offset: 0x70
    ::Ionic::Crc::CRC32* runningCrc;
    // Field size check
    static_assert(sizeof(::Ionic::Crc::CRC32*) == 0x8);
    // private System.Object _latestLock
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppObject* latestLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Collections.Generic.Queue`1<System.Int32> _toWrite
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::Queue_1<int>* toWrite;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<int>*) == 0x8);
    // private System.Collections.Generic.Queue`1<System.Int32> _toFill
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Queue_1<int>* toFill;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<int>*) == 0x8);
    // private System.Int64 _totalBytesProcessed
    // Size: 0x8
    // Offset: 0x90
    int64_t totalBytesProcessed;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private Ionic.Zlib.CompressionLevel _compressLevel
    // Size: 0x4
    // Offset: 0x98
    ::Ionic::Zlib::CompressionLevel compressLevel;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::CompressionLevel) == 0x4);
    // Padding between fields: compressLevel and: pendingException
    char __padding20[0x4] = {};
    // private System.Exception _pendingException
    // Size: 0x8
    // Offset: 0xA0
    ::System::Exception* pendingException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Boolean _handlingException
    // Size: 0x1
    // Offset: 0xA8
    bool handlingException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: handlingException and: eLock
    char __padding22[0x7] = {};
    // private System.Object _eLock
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppObject* eLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits _DesiredTrace
    // Size: 0x4
    // Offset: 0xB8
    ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits DesiredTrace;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits) == 0x4);
    // private Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
    // Size: 0x4
    // Offset: 0xBC
    ::Ionic::Zlib::CompressionStrategy Strategy;
    // Field size check
    static_assert(sizeof(::Ionic::Zlib::CompressionStrategy) == 0x4);
    public:
    // Get static field: static private readonly System.Int32 IO_BUFFER_SIZE_DEFAULT
    static int _get_IO_BUFFER_SIZE_DEFAULT();
    // Set static field: static private readonly System.Int32 IO_BUFFER_SIZE_DEFAULT
    static void _set_IO_BUFFER_SIZE_DEFAULT(int value);
    // Get static field: static private readonly System.Int32 BufferPairsPerCore
    static int _get_BufferPairsPerCore();
    // Set static field: static private readonly System.Int32 BufferPairsPerCore
    static void _set_BufferPairsPerCore(int value);
    // Get instance field reference: private System.Collections.Generic.List`1<Ionic.Zlib.WorkItem> _pool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Ionic::Zlib::WorkItem*>*& dyn__pool();
    // Get instance field reference: private System.Boolean _leaveOpen
    [[deprecated("Use field access instead!")]] bool& dyn__leaveOpen();
    // Get instance field reference: private System.Boolean emitting
    [[deprecated("Use field access instead!")]] bool& dyn_emitting();
    // Get instance field reference: private System.IO.Stream _outStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__outStream();
    // Get instance field reference: private System.Int32 _maxBufferPairs
    [[deprecated("Use field access instead!")]] int& dyn__maxBufferPairs();
    // Get instance field reference: private System.Int32 _bufferSize
    [[deprecated("Use field access instead!")]] int& dyn__bufferSize();
    // Get instance field reference: private System.Threading.AutoResetEvent _newlyCompressedBlob
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn__newlyCompressedBlob();
    // Get instance field reference: private System.Object _outputLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__outputLock();
    // Get instance field reference: private System.Boolean _isClosed
    [[deprecated("Use field access instead!")]] bool& dyn__isClosed();
    // Get instance field reference: private System.Boolean _firstWriteDone
    [[deprecated("Use field access instead!")]] bool& dyn__firstWriteDone();
    // Get instance field reference: private System.Int32 _currentlyFilling
    [[deprecated("Use field access instead!")]] int& dyn__currentlyFilling();
    // Get instance field reference: private System.Int32 _lastFilled
    [[deprecated("Use field access instead!")]] int& dyn__lastFilled();
    // Get instance field reference: private System.Int32 _lastWritten
    [[deprecated("Use field access instead!")]] int& dyn__lastWritten();
    // Get instance field reference: private System.Int32 _latestCompressed
    [[deprecated("Use field access instead!")]] int& dyn__latestCompressed();
    // Get instance field reference: private System.Int32 _Crc32
    [[deprecated("Use field access instead!")]] int& dyn__Crc32();
    // Get instance field reference: private Ionic.Crc.CRC32 _runningCrc
    [[deprecated("Use field access instead!")]] ::Ionic::Crc::CRC32*& dyn__runningCrc();
    // Get instance field reference: private System.Object _latestLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__latestLock();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Int32> _toWrite
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& dyn__toWrite();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Int32> _toFill
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& dyn__toFill();
    // Get instance field reference: private System.Int64 _totalBytesProcessed
    [[deprecated("Use field access instead!")]] int64_t& dyn__totalBytesProcessed();
    // Get instance field reference: private Ionic.Zlib.CompressionLevel _compressLevel
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::CompressionLevel& dyn__compressLevel();
    // Get instance field reference: private System.Exception _pendingException
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__pendingException();
    // Get instance field reference: private System.Boolean _handlingException
    [[deprecated("Use field access instead!")]] bool& dyn__handlingException();
    // Get instance field reference: private System.Object _eLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__eLock();
    // Get instance field reference: private Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits _DesiredTrace
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits& dyn__DesiredTrace();
    // Get instance field reference: private Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
    [[deprecated("Use field access instead!")]] ::Ionic::Zlib::CompressionStrategy& dyn_$Strategy$k__BackingField();
    // public Ionic.Zlib.CompressionStrategy get_Strategy()
    // Offset: 0x1897738
    ::Ionic::Zlib::CompressionStrategy get_Strategy();
    // private System.Void set_Strategy(Ionic.Zlib.CompressionStrategy value)
    // Offset: 0x1897740
    void set_Strategy(::Ionic::Zlib::CompressionStrategy value);
    // public System.Int32 get_MaxBufferPairs()
    // Offset: 0x1897748
    int get_MaxBufferPairs();
    // public System.Void set_MaxBufferPairs(System.Int32 value)
    // Offset: 0x1897698
    void set_MaxBufferPairs(int value);
    // public System.Int32 get_BufferSize()
    // Offset: 0x1897750
    int get_BufferSize();
    // public System.Void set_BufferSize(System.Int32 value)
    // Offset: 0x1897758
    void set_BufferSize(int value);
    // public System.Int32 get_Crc32()
    // Offset: 0x18977F8
    int get_Crc32();
    // public System.Int64 get_BytesProcessed()
    // Offset: 0x1897800
    int64_t get_BytesProcessed();
    // public System.Void .ctor(System.IO.Stream stream)
    // Offset: 0x1897500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelDeflateOutputStream* New_ctor(::System::IO::Stream* stream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ParallelDeflateOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelDeflateOutputStream*, creationType>(stream)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionLevel level)
    // Offset: 0x189766C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelDeflateOutputStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionLevel level) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ParallelDeflateOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelDeflateOutputStream*, creationType>(stream, level)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Boolean leaveOpen)
    // Offset: 0x1897678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelDeflateOutputStream* New_ctor(::System::IO::Stream* stream, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ParallelDeflateOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelDeflateOutputStream*, creationType>(stream, leaveOpen)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionLevel level, System.Boolean leaveOpen)
    // Offset: 0x1897688
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelDeflateOutputStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionLevel level, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ParallelDeflateOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelDeflateOutputStream*, creationType>(stream, level, leaveOpen)));
    }
    // public System.Void .ctor(System.IO.Stream stream, Ionic.Zlib.CompressionLevel level, Ionic.Zlib.CompressionStrategy strategy, System.Boolean leaveOpen)
    // Offset: 0x1897510
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelDeflateOutputStream* New_ctor(::System::IO::Stream* stream, ::Ionic::Zlib::CompressionLevel level, ::Ionic::Zlib::CompressionStrategy strategy, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::ParallelDeflateOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelDeflateOutputStream*, creationType>(stream, level, strategy, leaveOpen)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1899030
    static void _cctor();
    // private System.Void _InitializePoolOfWorkItems()
    // Offset: 0x1897808
    void _InitializePoolOfWorkItems();
    // private System.Void _FlushFinish()
    // Offset: 0x18980F4
    void _FlushFinish();
    // private System.Void _Flush(System.Boolean lastInput)
    // Offset: 0x1898334
    void _Flush(bool lastInput);
    // public System.Void Dispose()
    // Offset: 0x1898978
    void Dispose();
    // public System.Void Reset(System.IO.Stream stream)
    // Offset: 0x18989C8
    void Reset(::System::IO::Stream* stream);
    // private System.Void EmitPendingBuffers(System.Boolean doAll, System.Boolean mustWait)
    // Offset: 0x1897DAC
    void EmitPendingBuffers(bool doAll, bool mustWait);
    // private System.Void _DeflateOne(System.Object wi)
    // Offset: 0x1898448
    void _DeflateOne(::Il2CppObject* wi);
    // private System.Boolean DeflateOneSegment(Ionic.Zlib.WorkItem workitem)
    // Offset: 0x1898B84
    bool DeflateOneSegment(::Ionic::Zlib::WorkItem* workitem);
    // private System.Void TraceOutput(Ionic.Zlib.ParallelDeflateOutputStream/Ionic.Zlib.TraceBits bits, System.String format, params System.Object[] varParams)
    // Offset: 0x1898C94
    void TraceOutput(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits bits, ::StringW format, ::ArrayW<::Il2CppObject*> varParams);
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1898E00
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanRead()
    // Offset: 0x1898E08
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1898E10
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x1898E30
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x1898E90
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1898EB0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1897B4C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Void Flush()
    // Offset: 0x1898824
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Void Close()
    // Offset: 0x18988B8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Close()
    void Close();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x18989BC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1898F10
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x1898F70
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x1898FD0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
  }; // Ionic.Zlib.ParallelDeflateOutputStream
  #pragma pack(pop)
  static check_size<sizeof(ParallelDeflateOutputStream), 188 + sizeof(::Ionic::Zlib::CompressionStrategy)> __Ionic_Zlib_ParallelDeflateOutputStreamSizeCheck;
  static_assert(sizeof(ParallelDeflateOutputStream) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits, "Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_Strategy
// Il2CppName: get_Strategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Ionic::Zlib::CompressionStrategy (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_Strategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_Strategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::set_Strategy
// Il2CppName: set_Strategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(::Ionic::Zlib::CompressionStrategy)>(&Ionic::Zlib::ParallelDeflateOutputStream::set_Strategy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "CompressionStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "set_Strategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_MaxBufferPairs
// Il2CppName: get_MaxBufferPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_MaxBufferPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_MaxBufferPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::set_MaxBufferPairs
// Il2CppName: set_MaxBufferPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(int)>(&Ionic::Zlib::ParallelDeflateOutputStream::set_MaxBufferPairs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "set_MaxBufferPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::set_BufferSize
// Il2CppName: set_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(int)>(&Ionic::Zlib::ParallelDeflateOutputStream::set_BufferSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "set_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_Crc32
// Il2CppName: get_Crc32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_Crc32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_Crc32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_BytesProcessed
// Il2CppName: get_BytesProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_BytesProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_BytesProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::_InitializePoolOfWorkItems
// Il2CppName: _InitializePoolOfWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::_InitializePoolOfWorkItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "_InitializePoolOfWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::_FlushFinish
// Il2CppName: _FlushFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::_FlushFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "_FlushFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::_Flush
// Il2CppName: _Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(bool)>(&Ionic::Zlib::ParallelDeflateOutputStream::_Flush)> {
  static const MethodInfo* get() {
    static auto* lastInput = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "_Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastInput});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(::System::IO::Stream*)>(&Ionic::Zlib::ParallelDeflateOutputStream::Reset)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::EmitPendingBuffers
// Il2CppName: EmitPendingBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(bool, bool)>(&Ionic::Zlib::ParallelDeflateOutputStream::EmitPendingBuffers)> {
  static const MethodInfo* get() {
    static auto* doAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* mustWait = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "EmitPendingBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doAll, mustWait});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::_DeflateOne
// Il2CppName: _DeflateOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(::Il2CppObject*)>(&Ionic::Zlib::ParallelDeflateOutputStream::_DeflateOne)> {
  static const MethodInfo* get() {
    static auto* wi = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "_DeflateOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wi});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::DeflateOneSegment
// Il2CppName: DeflateOneSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ParallelDeflateOutputStream::*)(::Ionic::Zlib::WorkItem*)>(&Ionic::Zlib::ParallelDeflateOutputStream::DeflateOneSegment)> {
  static const MethodInfo* get() {
    static auto* workitem = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "WorkItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "DeflateOneSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{workitem});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::TraceOutput
// Il2CppName: TraceOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits, ::StringW, ::ArrayW<::Il2CppObject*>)>(&Ionic::Zlib::ParallelDeflateOutputStream::TraceOutput)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* varParams = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "TraceOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, format, varParams});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(int64_t)>(&Ionic::Zlib::ParallelDeflateOutputStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::ParallelDeflateOutputStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)()>(&Ionic::Zlib::ParallelDeflateOutputStream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(bool)>(&Ionic::Zlib::ParallelDeflateOutputStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::ParallelDeflateOutputStream::*)(::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::ParallelDeflateOutputStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Ionic::Zlib::ParallelDeflateOutputStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Ionic::Zlib::ParallelDeflateOutputStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::ParallelDeflateOutputStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::ParallelDeflateOutputStream::*)(int64_t)>(&Ionic::Zlib::ParallelDeflateOutputStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::ParallelDeflateOutputStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
