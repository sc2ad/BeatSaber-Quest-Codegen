// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: InflateBlocks
  class InflateBlocks;
  // Forward declaring type: ZlibCodec
  class ZlibCodec;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: InflateCodes
  class InflateCodes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::InflateCodes);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::InflateCodes*, "Ionic.Zlib", "InflateCodes");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.InflateCodes
  // [TokenAttribute] Offset: FFFFFFFF
  class InflateCodes : public ::Il2CppObject {
    public:
    public:
    // System.Int32 mode
    // Size: 0x4
    // Offset: 0x10
    int mode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 len
    // Size: 0x4
    // Offset: 0x14
    int len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32[] tree
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> tree;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 tree_index
    // Size: 0x4
    // Offset: 0x20
    int tree_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 need
    // Size: 0x4
    // Offset: 0x24
    int need;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lit
    // Size: 0x4
    // Offset: 0x28
    int lit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 bitsToGet
    // Size: 0x4
    // Offset: 0x2C
    int bitsToGet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 dist
    // Size: 0x4
    // Offset: 0x30
    int dist;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Byte lbits
    // Size: 0x1
    // Offset: 0x34
    uint8_t lbits;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte dbits
    // Size: 0x1
    // Offset: 0x35
    uint8_t dbits;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: dbits and: ltree
    char __padding9[0x2] = {};
    // System.Int32[] ltree
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> ltree;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 ltree_index
    // Size: 0x4
    // Offset: 0x40
    int ltree_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ltree_index and: dtree
    char __padding11[0x4] = {};
    // System.Int32[] dtree
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> dtree;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 dtree_index
    // Size: 0x4
    // Offset: 0x50
    int dtree_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Int32 START
    static constexpr const int START = 0;
    // Get static field: static private System.Int32 START
    static int _get_START();
    // Set static field: static private System.Int32 START
    static void _set_START(int value);
    // static field const value: static private System.Int32 LEN
    static constexpr const int LEN = 1;
    // Get static field: static private System.Int32 LEN
    static int _get_LEN();
    // Set static field: static private System.Int32 LEN
    static void _set_LEN(int value);
    // static field const value: static private System.Int32 LENEXT
    static constexpr const int LENEXT = 2;
    // Get static field: static private System.Int32 LENEXT
    static int _get_LENEXT();
    // Set static field: static private System.Int32 LENEXT
    static void _set_LENEXT(int value);
    // static field const value: static private System.Int32 DIST
    static constexpr const int DIST = 3;
    // Get static field: static private System.Int32 DIST
    static int _get_DIST();
    // Set static field: static private System.Int32 DIST
    static void _set_DIST(int value);
    // static field const value: static private System.Int32 DISTEXT
    static constexpr const int DISTEXT = 4;
    // Get static field: static private System.Int32 DISTEXT
    static int _get_DISTEXT();
    // Set static field: static private System.Int32 DISTEXT
    static void _set_DISTEXT(int value);
    // static field const value: static private System.Int32 COPY
    static constexpr const int COPY = 5;
    // Get static field: static private System.Int32 COPY
    static int _get_COPY();
    // Set static field: static private System.Int32 COPY
    static void _set_COPY(int value);
    // static field const value: static private System.Int32 LIT
    static constexpr const int LIT = 6;
    // Get static field: static private System.Int32 LIT
    static int _get_LIT();
    // Set static field: static private System.Int32 LIT
    static void _set_LIT(int value);
    // static field const value: static private System.Int32 WASH
    static constexpr const int WASH = 7;
    // Get static field: static private System.Int32 WASH
    static int _get_WASH();
    // Set static field: static private System.Int32 WASH
    static void _set_WASH(int value);
    // static field const value: static private System.Int32 END
    static constexpr const int END = 8;
    // Get static field: static private System.Int32 END
    static int _get_END();
    // Set static field: static private System.Int32 END
    static void _set_END(int value);
    // static field const value: static private System.Int32 BADCODE
    static constexpr const int BADCODE = 9;
    // Get static field: static private System.Int32 BADCODE
    static int _get_BADCODE();
    // Set static field: static private System.Int32 BADCODE
    static void _set_BADCODE(int value);
    // Get instance field reference: System.Int32 mode
    [[deprecated("Use field access instead!")]] int& dyn_mode();
    // Get instance field reference: System.Int32 len
    [[deprecated("Use field access instead!")]] int& dyn_len();
    // Get instance field reference: System.Int32[] tree
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_tree();
    // Get instance field reference: System.Int32 tree_index
    [[deprecated("Use field access instead!")]] int& dyn_tree_index();
    // Get instance field reference: System.Int32 need
    [[deprecated("Use field access instead!")]] int& dyn_need();
    // Get instance field reference: System.Int32 lit
    [[deprecated("Use field access instead!")]] int& dyn_lit();
    // Get instance field reference: System.Int32 bitsToGet
    [[deprecated("Use field access instead!")]] int& dyn_bitsToGet();
    // Get instance field reference: System.Int32 dist
    [[deprecated("Use field access instead!")]] int& dyn_dist();
    // Get instance field reference: System.Byte lbits
    [[deprecated("Use field access instead!")]] uint8_t& dyn_lbits();
    // Get instance field reference: System.Byte dbits
    [[deprecated("Use field access instead!")]] uint8_t& dyn_dbits();
    // Get instance field reference: System.Int32[] ltree
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_ltree();
    // Get instance field reference: System.Int32 ltree_index
    [[deprecated("Use field access instead!")]] int& dyn_ltree_index();
    // Get instance field reference: System.Int32[] dtree
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_dtree();
    // Get instance field reference: System.Int32 dtree_index
    [[deprecated("Use field access instead!")]] int& dyn_dtree_index();
    // System.Void .ctor()
    // Offset: 0x1893C80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InflateCodes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::InflateCodes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InflateCodes*, creationType>()));
    }
    // System.Void Init(System.Int32 bl, System.Int32 bd, System.Int32[] tl, System.Int32 tl_index, System.Int32[] td, System.Int32 td_index)
    // Offset: 0x1895120
    void Init(int bl, int bd, ::ArrayW<int> tl, int tl_index, ::ArrayW<int> td, int td_index);
    // System.Int32 Process(Ionic.Zlib.InflateBlocks blocks, System.Int32 r)
    // Offset: 0x1895144
    int Process(::Ionic::Zlib::InflateBlocks* blocks, int r);
    // System.Int32 InflateFast(System.Int32 bl, System.Int32 bd, System.Int32[] tl, System.Int32 tl_index, System.Int32[] td, System.Int32 td_index, Ionic.Zlib.InflateBlocks s, Ionic.Zlib.ZlibCodec z)
    // Offset: 0x1895B88
    int InflateFast(int bl, int bd, ::ArrayW<int> tl, int tl_index, ::ArrayW<int> td, int td_index, ::Ionic::Zlib::InflateBlocks* s, ::Ionic::Zlib::ZlibCodec* z);
  }; // Ionic.Zlib.InflateCodes
  #pragma pack(pop)
  static check_size<sizeof(InflateCodes), 80 + sizeof(int)> __Ionic_Zlib_InflateCodesSizeCheck;
  static_assert(sizeof(InflateCodes) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::InflateCodes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::InflateCodes::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::InflateCodes::*)(int, int, ::ArrayW<int>, int, ::ArrayW<int>, int)>(&Ionic::Zlib::InflateCodes::Init)> {
  static const MethodInfo* get() {
    static auto* bl = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tl_index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* td = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* td_index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateCodes*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bl, bd, tl, tl_index, td, td_index});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateCodes::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateCodes::*)(::Ionic::Zlib::InflateBlocks*, int)>(&Ionic::Zlib::InflateCodes::Process)> {
  static const MethodInfo* get() {
    static auto* blocks = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "InflateBlocks")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateCodes*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blocks, r});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InflateCodes::InflateFast
// Il2CppName: InflateFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InflateCodes::*)(int, int, ::ArrayW<int>, int, ::ArrayW<int>, int, ::Ionic::Zlib::InflateBlocks*, ::Ionic::Zlib::ZlibCodec*)>(&Ionic::Zlib::InflateCodes::InflateFast)> {
  static const MethodInfo* get() {
    static auto* bl = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tl_index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* td = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* td_index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "InflateBlocks")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InflateCodes*), "InflateFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bl, bd, tl, tl_index, td, td_index, s, z});
  }
};
