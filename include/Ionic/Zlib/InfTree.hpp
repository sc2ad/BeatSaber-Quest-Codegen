// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ionic::Zlib
namespace Ionic::Zlib {
  // Forward declaring type: ZlibCodec
  class ZlibCodec;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: InfTree
  class InfTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::InfTree);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::InfTree*, "Ionic.Zlib", "InfTree");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.InfTree
  // [TokenAttribute] Offset: FFFFFFFF
  class InfTree : public ::Il2CppObject {
    public:
    public:
    // System.Int32[] hn
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> hn;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] v
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> v;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] c
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> c;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] r
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> r;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] u
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> u;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] x
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> x;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // static field const value: static private System.Int32 MANY
    static constexpr const int MANY = 1440;
    // Get static field: static private System.Int32 MANY
    static int _get_MANY();
    // Set static field: static private System.Int32 MANY
    static void _set_MANY(int value);
    // static field const value: static private System.Int32 Z_OK
    static constexpr const int Z_OK = 0;
    // Get static field: static private System.Int32 Z_OK
    static int _get_Z_OK();
    // Set static field: static private System.Int32 Z_OK
    static void _set_Z_OK(int value);
    // static field const value: static private System.Int32 Z_STREAM_END
    static constexpr const int Z_STREAM_END = 1;
    // Get static field: static private System.Int32 Z_STREAM_END
    static int _get_Z_STREAM_END();
    // Set static field: static private System.Int32 Z_STREAM_END
    static void _set_Z_STREAM_END(int value);
    // static field const value: static private System.Int32 Z_NEED_DICT
    static constexpr const int Z_NEED_DICT = 2;
    // Get static field: static private System.Int32 Z_NEED_DICT
    static int _get_Z_NEED_DICT();
    // Set static field: static private System.Int32 Z_NEED_DICT
    static void _set_Z_NEED_DICT(int value);
    // static field const value: static private System.Int32 Z_ERRNO
    static constexpr const int Z_ERRNO = -1;
    // Get static field: static private System.Int32 Z_ERRNO
    static int _get_Z_ERRNO();
    // Set static field: static private System.Int32 Z_ERRNO
    static void _set_Z_ERRNO(int value);
    // static field const value: static private System.Int32 Z_STREAM_ERROR
    static constexpr const int Z_STREAM_ERROR = -2;
    // Get static field: static private System.Int32 Z_STREAM_ERROR
    static int _get_Z_STREAM_ERROR();
    // Set static field: static private System.Int32 Z_STREAM_ERROR
    static void _set_Z_STREAM_ERROR(int value);
    // static field const value: static private System.Int32 Z_DATA_ERROR
    static constexpr const int Z_DATA_ERROR = -3;
    // Get static field: static private System.Int32 Z_DATA_ERROR
    static int _get_Z_DATA_ERROR();
    // Set static field: static private System.Int32 Z_DATA_ERROR
    static void _set_Z_DATA_ERROR(int value);
    // static field const value: static private System.Int32 Z_MEM_ERROR
    static constexpr const int Z_MEM_ERROR = -4;
    // Get static field: static private System.Int32 Z_MEM_ERROR
    static int _get_Z_MEM_ERROR();
    // Set static field: static private System.Int32 Z_MEM_ERROR
    static void _set_Z_MEM_ERROR(int value);
    // static field const value: static private System.Int32 Z_BUF_ERROR
    static constexpr const int Z_BUF_ERROR = -5;
    // Get static field: static private System.Int32 Z_BUF_ERROR
    static int _get_Z_BUF_ERROR();
    // Set static field: static private System.Int32 Z_BUF_ERROR
    static void _set_Z_BUF_ERROR(int value);
    // static field const value: static private System.Int32 Z_VERSION_ERROR
    static constexpr const int Z_VERSION_ERROR = -6;
    // Get static field: static private System.Int32 Z_VERSION_ERROR
    static int _get_Z_VERSION_ERROR();
    // Set static field: static private System.Int32 Z_VERSION_ERROR
    static void _set_Z_VERSION_ERROR(int value);
    // static field const value: static System.Int32 fixed_bl
    static constexpr const int fixed_bl = 9;
    // Get static field: static System.Int32 fixed_bl
    static int _get_fixed_bl();
    // Set static field: static System.Int32 fixed_bl
    static void _set_fixed_bl(int value);
    // static field const value: static System.Int32 fixed_bd
    static constexpr const int fixed_bd = 5;
    // Get static field: static System.Int32 fixed_bd
    static int _get_fixed_bd();
    // Set static field: static System.Int32 fixed_bd
    static void _set_fixed_bd(int value);
    // Get static field: static readonly System.Int32[] fixed_tl
    static ::ArrayW<int> _get_fixed_tl();
    // Set static field: static readonly System.Int32[] fixed_tl
    static void _set_fixed_tl(::ArrayW<int> value);
    // Get static field: static readonly System.Int32[] fixed_td
    static ::ArrayW<int> _get_fixed_td();
    // Set static field: static readonly System.Int32[] fixed_td
    static void _set_fixed_td(::ArrayW<int> value);
    // Get static field: static readonly System.Int32[] cplens
    static ::ArrayW<int> _get_cplens();
    // Set static field: static readonly System.Int32[] cplens
    static void _set_cplens(::ArrayW<int> value);
    // Get static field: static readonly System.Int32[] cplext
    static ::ArrayW<int> _get_cplext();
    // Set static field: static readonly System.Int32[] cplext
    static void _set_cplext(::ArrayW<int> value);
    // Get static field: static readonly System.Int32[] cpdist
    static ::ArrayW<int> _get_cpdist();
    // Set static field: static readonly System.Int32[] cpdist
    static void _set_cpdist(::ArrayW<int> value);
    // Get static field: static readonly System.Int32[] cpdext
    static ::ArrayW<int> _get_cpdext();
    // Set static field: static readonly System.Int32[] cpdext
    static void _set_cpdext(::ArrayW<int> value);
    // static field const value: static System.Int32 BMAX
    static constexpr const int BMAX = 15;
    // Get static field: static System.Int32 BMAX
    static int _get_BMAX();
    // Set static field: static System.Int32 BMAX
    static void _set_BMAX(int value);
    // Get instance field reference: System.Int32[] hn
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_hn();
    // Get instance field reference: System.Int32[] v
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_v();
    // Get instance field reference: System.Int32[] c
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_c();
    // Get instance field reference: System.Int32[] r
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_r();
    // Get instance field reference: System.Int32[] u
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_u();
    // Get instance field reference: System.Int32[] x
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_x();
    // public System.Void .ctor()
    // Offset: 0x18939F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InfTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::InfTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InfTree*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1893A00
    static void _cctor();
    // private System.Int32 huft_build(System.Int32[] b, System.Int32 bindex, System.Int32 n, System.Int32 s, System.Int32[] d, System.Int32[] e, System.Int32[] t, System.Int32[] m, System.Int32[] hp, System.Int32[] hn, System.Int32[] v)
    // Offset: 0x1892B9C
    int huft_build(::ArrayW<int> b, int bindex, int n, int s, ::ArrayW<int> d, ::ArrayW<int> e, ::ArrayW<int> t, ::ArrayW<int> m, ::ArrayW<int> hp, ::ArrayW<int> hn, ::ArrayW<int> v);
    // System.Int32 inflate_trees_bits(System.Int32[] c, System.Int32[] bb, System.Int32[] tb, System.Int32[] hp, Ionic.Zlib.ZlibCodec z)
    // Offset: 0x18933F0
    int inflate_trees_bits(::ArrayW<int> c, ::ArrayW<int> bb, ::ArrayW<int> tb, ::ArrayW<int> hp, ::Ionic::Zlib::ZlibCodec* z);
    // System.Int32 inflate_trees_dynamic(System.Int32 nl, System.Int32 nd, System.Int32[] c, System.Int32[] bl, System.Int32[] bd, System.Int32[] tl, System.Int32[] td, System.Int32[] hp, Ionic.Zlib.ZlibCodec z)
    // Offset: 0x18936A4
    int inflate_trees_dynamic(int nl, int nd, ::ArrayW<int> c, ::ArrayW<int> bl, ::ArrayW<int> bd, ::ArrayW<int> tl, ::ArrayW<int> td, ::ArrayW<int> hp, ::Ionic::Zlib::ZlibCodec* z);
    // static System.Int32 inflate_trees_fixed(System.Int32[] bl, System.Int32[] bd, System.Int32[][] tl, System.Int32[][] td, Ionic.Zlib.ZlibCodec z)
    // Offset: 0x18938CC
    static int inflate_trees_fixed(::ArrayW<int> bl, ::ArrayW<int> bd, ::ArrayW<::ArrayW<int>> tl, ::ArrayW<::ArrayW<int>> td, ::Ionic::Zlib::ZlibCodec* z);
    // private System.Void initWorkArea(System.Int32 vsize)
    // Offset: 0x1893510
    void initWorkArea(int vsize);
  }; // Ionic.Zlib.InfTree
  #pragma pack(pop)
  static check_size<sizeof(InfTree), 56 + sizeof(::ArrayW<int>)> __Ionic_Zlib_InfTreeSizeCheck;
  static_assert(sizeof(InfTree) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Ionic::Zlib::InfTree::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::huft_build
// Il2CppName: huft_build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InfTree::*)(::ArrayW<int>, int, int, int, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>)>(&Ionic::Zlib::InfTree::huft_build)> {
  static const MethodInfo* get() {
    static auto* b = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* e = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* t = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* m = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hp = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hn = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* v = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), "huft_build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, bindex, n, s, d, e, t, m, hp, hn, v});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::inflate_trees_bits
// Il2CppName: inflate_trees_bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InfTree::*)(::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::Ionic::Zlib::ZlibCodec*)>(&Ionic::Zlib::InfTree::inflate_trees_bits)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hp = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), "inflate_trees_bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, bb, tb, hp, z});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::inflate_trees_dynamic
// Il2CppName: inflate_trees_dynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Ionic::Zlib::InfTree::*)(int, int, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>, ::Ionic::Zlib::ZlibCodec*)>(&Ionic::Zlib::InfTree::inflate_trees_dynamic)> {
  static const MethodInfo* get() {
    static auto* nl = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bd = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* td = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hp = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), "inflate_trees_dynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nl, nd, c, bl, bd, tl, td, hp, z});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::inflate_trees_fixed
// Il2CppName: inflate_trees_fixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>, ::ArrayW<int>, ::ArrayW<::ArrayW<int>>, ::ArrayW<::ArrayW<int>>, ::Ionic::Zlib::ZlibCodec*)>(&Ionic::Zlib::InfTree::inflate_trees_fixed)> {
  static const MethodInfo* get() {
    static auto* bl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bd = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tl = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)->byval_arg;
    static auto* td = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("Ionic.Zlib", "ZlibCodec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), "inflate_trees_fixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bl, bd, tl, td, z});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::InfTree::initWorkArea
// Il2CppName: initWorkArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ionic::Zlib::InfTree::*)(int)>(&Ionic::Zlib::InfTree::initWorkArea)> {
  static const MethodInfo* get() {
    static auto* vsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::InfTree*), "initWorkArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vsize});
  }
};
