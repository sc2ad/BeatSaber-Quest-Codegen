// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: StaticTree
  class StaticTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::StaticTree);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::StaticTree*, "Ionic.Zlib", "StaticTree");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.StaticTree
  // [TokenAttribute] Offset: FFFFFFFF
  class StaticTree : public ::Il2CppObject {
    public:
    public:
    // System.Int16[] treeCodes
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int16_t> treeCodes;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int32[] extraBits
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> extraBits;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 extraBase
    // Size: 0x4
    // Offset: 0x20
    int extraBase;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 elems
    // Size: 0x4
    // Offset: 0x24
    int elems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 maxLength
    // Size: 0x4
    // Offset: 0x28
    int maxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static readonly System.Int16[] lengthAndLiteralsTreeCodes
    static ::ArrayW<int16_t> _get_lengthAndLiteralsTreeCodes();
    // Set static field: static readonly System.Int16[] lengthAndLiteralsTreeCodes
    static void _set_lengthAndLiteralsTreeCodes(::ArrayW<int16_t> value);
    // Get static field: static readonly System.Int16[] distTreeCodes
    static ::ArrayW<int16_t> _get_distTreeCodes();
    // Set static field: static readonly System.Int16[] distTreeCodes
    static void _set_distTreeCodes(::ArrayW<int16_t> value);
    // Get static field: static readonly Ionic.Zlib.StaticTree Literals
    static ::Ionic::Zlib::StaticTree* _get_Literals();
    // Set static field: static readonly Ionic.Zlib.StaticTree Literals
    static void _set_Literals(::Ionic::Zlib::StaticTree* value);
    // Get static field: static readonly Ionic.Zlib.StaticTree Distances
    static ::Ionic::Zlib::StaticTree* _get_Distances();
    // Set static field: static readonly Ionic.Zlib.StaticTree Distances
    static void _set_Distances(::Ionic::Zlib::StaticTree* value);
    // Get static field: static readonly Ionic.Zlib.StaticTree BitLengths
    static ::Ionic::Zlib::StaticTree* _get_BitLengths();
    // Set static field: static readonly Ionic.Zlib.StaticTree BitLengths
    static void _set_BitLengths(::Ionic::Zlib::StaticTree* value);
    // Get instance field reference: System.Int16[] treeCodes
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_treeCodes();
    // Get instance field reference: System.Int32[] extraBits
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_extraBits();
    // Get instance field reference: System.Int32 extraBase
    [[deprecated("Use field access instead!")]] int& dyn_extraBase();
    // Get instance field reference: System.Int32 elems
    [[deprecated("Use field access instead!")]] int& dyn_elems();
    // Get instance field reference: System.Int32 maxLength
    [[deprecated("Use field access instead!")]] int& dyn_maxLength();
    // private System.Void .ctor(System.Int16[] treeCodes, System.Int32[] extraBits, System.Int32 extraBase, System.Int32 elems, System.Int32 maxLength)
    // Offset: 0x1899220
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StaticTree* New_ctor(::ArrayW<int16_t> treeCodes, ::ArrayW<int> extraBits, int extraBase, int elems, int maxLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::StaticTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StaticTree*, creationType>(treeCodes, extraBits, extraBase, elems, maxLength)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1899274
    static void _cctor();
  }; // Ionic.Zlib.StaticTree
  #pragma pack(pop)
  static check_size<sizeof(StaticTree), 40 + sizeof(int)> __Ionic_Zlib_StaticTreeSizeCheck;
  static_assert(sizeof(StaticTree) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::StaticTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::StaticTree::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Ionic::Zlib::StaticTree::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::StaticTree*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
