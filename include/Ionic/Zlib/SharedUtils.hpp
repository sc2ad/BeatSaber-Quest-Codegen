// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextReader
  class TextReader;
}
// Completed forward declares
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Forward declaring type: SharedUtils
  class SharedUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ionic::Zlib::SharedUtils);
DEFINE_IL2CPP_ARG_TYPE(::Ionic::Zlib::SharedUtils*, "Ionic.Zlib", "SharedUtils");
// Type namespace: Ionic.Zlib
namespace Ionic::Zlib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Ionic.Zlib.SharedUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SharedUtils : public ::Il2CppObject {
    public:
    // public System.Void .ctor()
    // Offset: 0x1899218
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SharedUtils* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ionic::Zlib::SharedUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SharedUtils*, creationType>()));
    }
    // static public System.Int32 URShift(System.Int32 number, System.Int32 bits)
    // Offset: 0x18933E8
    static int URShift(int number, int bits);
    // static public System.Int32 ReadInput(System.IO.TextReader sourceTextReader, System.Byte[] target, System.Int32 start, System.Int32 count)
    // Offset: 0x1899094
    static int ReadInput(::System::IO::TextReader* sourceTextReader, ::ArrayW<uint8_t> target, int start, int count);
    // static System.Byte[] ToByteArray(System.String sourceString)
    // Offset: 0x18991A0
    static ::ArrayW<uint8_t> ToByteArray(::StringW sourceString);
    // static System.Char[] ToCharArray(System.Byte[] byteArray)
    // Offset: 0x18991DC
    static ::ArrayW<::Il2CppChar> ToCharArray(::ArrayW<uint8_t> byteArray);
  }; // Ionic.Zlib.SharedUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ionic::Zlib::SharedUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ionic::Zlib::SharedUtils::URShift
// Il2CppName: URShift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Ionic::Zlib::SharedUtils::URShift)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::SharedUtils*), "URShift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, bits});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::SharedUtils::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::TextReader*, ::ArrayW<uint8_t>, int, int)>(&Ionic::Zlib::SharedUtils::ReadInput)> {
  static const MethodInfo* get() {
    static auto* sourceTextReader = &::il2cpp_utils::GetClassFromName("System.IO", "TextReader")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::SharedUtils*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceTextReader, target, start, count});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::SharedUtils::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&Ionic::Zlib::SharedUtils::ToByteArray)> {
  static const MethodInfo* get() {
    static auto* sourceString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::SharedUtils*), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceString});
  }
};
// Writing MetadataGetter for method: Ionic::Zlib::SharedUtils::ToCharArray
// Il2CppName: ToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (*)(::ArrayW<uint8_t>)>(&Ionic::Zlib::SharedUtils::ToCharArray)> {
  static const MethodInfo* get() {
    static auto* byteArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ionic::Zlib::SharedUtils*), "ToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{byteArray});
  }
};
