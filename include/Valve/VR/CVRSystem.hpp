// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.IVRSystem
#include "Valve/VR/IVRSystem.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: HmdMatrix44_t
  struct HmdMatrix44_t;
  // Forward declaring type: EVREye
  struct EVREye;
  // Forward declaring type: DistortionCoordinates_t
  struct DistortionCoordinates_t;
  // Skipping declaration: HmdMatrix34_t because it is already included!
  // Forward declaring type: ETextureType
  struct ETextureType;
  // Forward declaring type: ETrackingUniverseOrigin
  struct ETrackingUniverseOrigin;
  // Forward declaring type: ETrackedDeviceClass
  struct ETrackedDeviceClass;
  // Forward declaring type: EDeviceActivityLevel
  struct EDeviceActivityLevel;
  // Forward declaring type: ETrackedControllerRole
  struct ETrackedControllerRole;
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
  // Forward declaring type: ETrackedPropertyError
  struct ETrackedPropertyError;
  // Forward declaring type: VREvent_t
  struct VREvent_t;
  // Forward declaring type: EVREventType
  struct EVREventType;
  // Forward declaring type: HiddenAreaMesh_t
  struct HiddenAreaMesh_t;
  // Forward declaring type: EHiddenAreaMeshType
  struct EHiddenAreaMeshType;
  // Forward declaring type: VRControllerState_t
  struct VRControllerState_t;
  // Forward declaring type: EVRButtonId
  struct EVRButtonId;
  // Forward declaring type: EVRControllerAxisType
  struct EVRControllerAxisType;
  // Forward declaring type: EVRFirmwareError
  struct EVRFirmwareError;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::CVRSystem);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::CVRSystem*, "Valve.VR", "CVRSystem");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.CVRSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class CVRSystem : public ::Il2CppObject {
    public:
    // Nested type: ::Valve::VR::CVRSystem::_PollNextEventPacked
    class _PollNextEventPacked;
    // Nested type: ::Valve::VR::CVRSystem::PollNextEventUnion
    struct PollNextEventUnion;
    // Nested type: ::Valve::VR::CVRSystem::_GetControllerStatePacked
    class _GetControllerStatePacked;
    // Nested type: ::Valve::VR::CVRSystem::GetControllerStateUnion
    struct GetControllerStateUnion;
    // Nested type: ::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked
    class _GetControllerStateWithPosePacked;
    // Nested type: ::Valve::VR::CVRSystem::GetControllerStateWithPoseUnion
    struct GetControllerStateWithPoseUnion;
    public:
    // private Valve.VR.IVRSystem FnTable
    // Size: 0x178
    // Offset: 0x10
    ::Valve::VR::IVRSystem FnTable;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRSystem) == 0x178);
    public:
    // Creating conversion operator: operator ::Valve::VR::IVRSystem
    constexpr operator ::Valve::VR::IVRSystem() const noexcept {
      return FnTable;
    }
    // Get instance field reference: private Valve.VR.IVRSystem FnTable
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRSystem& dyn_FnTable();
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x1BE9D78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVRSystem* New_ctor(::System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVRSystem*, creationType>(pInterface)));
    }
    // public System.Void GetRecommendedRenderTargetSize(ref System.UInt32 pnWidth, ref System.UInt32 pnHeight)
    // Offset: 0x1BE9E80
    void GetRecommendedRenderTargetSize(ByRef<uint> pnWidth, ByRef<uint> pnHeight);
    // public Valve.VR.HmdMatrix44_t GetProjectionMatrix(Valve.VR.EVREye eEye, System.Single fNearZ, System.Single fFarZ)
    // Offset: 0x1BE9EA4
    ::Valve::VR::HmdMatrix44_t GetProjectionMatrix(::Valve::VR::EVREye eEye, float fNearZ, float fFarZ);
    // public System.Void GetProjectionRaw(Valve.VR.EVREye eEye, ref System.Single pfLeft, ref System.Single pfRight, ref System.Single pfTop, ref System.Single pfBottom)
    // Offset: 0x1BE9EC0
    void GetProjectionRaw(::Valve::VR::EVREye eEye, ByRef<float> pfLeft, ByRef<float> pfRight, ByRef<float> pfTop, ByRef<float> pfBottom);
    // public System.Boolean ComputeDistortion(Valve.VR.EVREye eEye, System.Single fU, System.Single fV, ref Valve.VR.DistortionCoordinates_t pDistortionCoordinates)
    // Offset: 0x1BE9EEC
    bool ComputeDistortion(::Valve::VR::EVREye eEye, float fU, float fV, ByRef<::Valve::VR::DistortionCoordinates_t> pDistortionCoordinates);
    // public Valve.VR.HmdMatrix34_t GetEyeToHeadTransform(Valve.VR.EVREye eEye)
    // Offset: 0x1BE9F08
    ::Valve::VR::HmdMatrix34_t GetEyeToHeadTransform(::Valve::VR::EVREye eEye);
    // public System.Boolean GetTimeSinceLastVsync(ref System.Single pfSecondsSinceLastVsync, ref System.UInt64 pulFrameCounter)
    // Offset: 0x1BE9F24
    bool GetTimeSinceLastVsync(ByRef<float> pfSecondsSinceLastVsync, ByRef<uint64_t> pulFrameCounter);
    // public System.Int32 GetD3D9AdapterIndex()
    // Offset: 0x1BE9F48
    int GetD3D9AdapterIndex();
    // public System.Void GetDXGIOutputInfo(ref System.Int32 pnAdapterIndex)
    // Offset: 0x1BE9F64
    void GetDXGIOutputInfo(ByRef<int> pnAdapterIndex);
    // public System.Void GetOutputDevice(ref System.UInt64 pnDevice, Valve.VR.ETextureType textureType, System.IntPtr pInstance)
    // Offset: 0x1BE9F84
    void GetOutputDevice(ByRef<uint64_t> pnDevice, ::Valve::VR::ETextureType textureType, ::System::IntPtr pInstance);
    // public System.Boolean IsDisplayOnDesktop()
    // Offset: 0x1BE9FA4
    bool IsDisplayOnDesktop();
    // public System.Boolean SetDisplayVisibility(System.Boolean bIsVisibleOnDesktop)
    // Offset: 0x1BE9FC0
    bool SetDisplayVisibility(bool bIsVisibleOnDesktop);
    // public System.Void GetDeviceToAbsoluteTrackingPose(Valve.VR.ETrackingUniverseOrigin eOrigin, System.Single fPredictedSecondsToPhotonsFromNow, Valve.VR.TrackedDevicePose_t[] pTrackedDevicePoseArray)
    // Offset: 0x1BE9FE0
    void GetDeviceToAbsoluteTrackingPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::ArrayW<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePoseArray);
    // public System.Void ResetSeatedZeroPose()
    // Offset: 0x1BEA008
    void ResetSeatedZeroPose();
    // public Valve.VR.HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
    // Offset: 0x1BEA024
    ::Valve::VR::HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose();
    // public Valve.VR.HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
    // Offset: 0x1BEA040
    ::Valve::VR::HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose();
    // public System.UInt32 GetSortedTrackedDeviceIndicesOfClass(Valve.VR.ETrackedDeviceClass eTrackedDeviceClass, System.UInt32[] punTrackedDeviceIndexArray, System.UInt32 unRelativeToTrackedDeviceIndex)
    // Offset: 0x1BEA05C
    uint GetSortedTrackedDeviceIndicesOfClass(::Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::ArrayW<uint> punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex);
    // public Valve.VR.EDeviceActivityLevel GetTrackedDeviceActivityLevel(System.UInt32 unDeviceId)
    // Offset: 0x1BEA088
    ::Valve::VR::EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId);
    // public System.Void ApplyTransform(ref Valve.VR.TrackedDevicePose_t pOutputPose, ref Valve.VR.TrackedDevicePose_t pTrackedDevicePose, ref Valve.VR.HmdMatrix34_t pTransform)
    // Offset: 0x1BEA0A4
    void ApplyTransform(ByRef<::Valve::VR::TrackedDevicePose_t> pOutputPose, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose, ByRef<::Valve::VR::HmdMatrix34_t> pTransform);
    // public System.UInt32 GetTrackedDeviceIndexForControllerRole(Valve.VR.ETrackedControllerRole unDeviceType)
    // Offset: 0x1BEA0C0
    uint GetTrackedDeviceIndexForControllerRole(::Valve::VR::ETrackedControllerRole unDeviceType);
    // public Valve.VR.ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(System.UInt32 unDeviceIndex)
    // Offset: 0x1BEA0DC
    ::Valve::VR::ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);
    // public Valve.VR.ETrackedDeviceClass GetTrackedDeviceClass(System.UInt32 unDeviceIndex)
    // Offset: 0x1BEA0F8
    ::Valve::VR::ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex);
    // public System.Boolean IsTrackedDeviceConnected(System.UInt32 unDeviceIndex)
    // Offset: 0x1BEA114
    bool IsTrackedDeviceConnected(uint unDeviceIndex);
    // public System.Boolean GetBoolTrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA130
    bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.Single GetFloatTrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA14C
    float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.Int32 GetInt32TrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA168
    int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.UInt64 GetUint64TrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA184
    uint64_t GetUint64TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public Valve.VR.HmdMatrix34_t GetMatrix34TrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA1A0
    ::Valve::VR::HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.UInt32 GetArrayTrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, System.UInt32 propType, System.IntPtr pBuffer, System.UInt32 unBufferSize, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA1BC
    uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, uint propType, ::System::IntPtr pBuffer, uint unBufferSize, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.UInt32 GetStringTrackedDeviceProperty(System.UInt32 unDeviceIndex, Valve.VR.ETrackedDeviceProperty prop, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize, ref Valve.VR.ETrackedPropertyError pError)
    // Offset: 0x1BEA1D8
    uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::ETrackedPropertyError> pError);
    // public System.String GetPropErrorNameFromEnum(Valve.VR.ETrackedPropertyError error)
    // Offset: 0x1BEA1F4
    ::StringW GetPropErrorNameFromEnum(::Valve::VR::ETrackedPropertyError error);
    // public System.Boolean PollNextEvent(ref Valve.VR.VREvent_t pEvent, System.UInt32 uncbVREvent)
    // Offset: 0x1BEA288
    bool PollNextEvent(ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent);
    // public System.Boolean PollNextEventWithPose(Valve.VR.ETrackingUniverseOrigin eOrigin, ref Valve.VR.VREvent_t pEvent, System.UInt32 uncbVREvent, ref Valve.VR.TrackedDevicePose_t pTrackedDevicePose)
    // Offset: 0x1BEA670
    bool PollNextEventWithPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose);
    // public System.String GetEventTypeNameFromEnum(Valve.VR.EVREventType eType)
    // Offset: 0x1BEA68C
    ::StringW GetEventTypeNameFromEnum(::Valve::VR::EVREventType eType);
    // public Valve.VR.HiddenAreaMesh_t GetHiddenAreaMesh(Valve.VR.EVREye eEye, Valve.VR.EHiddenAreaMeshType type)
    // Offset: 0x1BEA720
    ::Valve::VR::HiddenAreaMesh_t GetHiddenAreaMesh(::Valve::VR::EVREye eEye, ::Valve::VR::EHiddenAreaMeshType type);
    // public System.Boolean GetControllerState(System.UInt32 unControllerDeviceIndex, ref Valve.VR.VRControllerState_t pControllerState, System.UInt32 unControllerStateSize)
    // Offset: 0x1BEA73C
    bool GetControllerState(uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t> pControllerState, uint unControllerStateSize);
    // public System.Boolean GetControllerStateWithPose(Valve.VR.ETrackingUniverseOrigin eOrigin, System.UInt32 unControllerDeviceIndex, ref Valve.VR.VRControllerState_t pControllerState, System.UInt32 unControllerStateSize, ref Valve.VR.TrackedDevicePose_t pTrackedDevicePose)
    // Offset: 0x1BEAB70
    bool GetControllerStateWithPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t> pControllerState, uint unControllerStateSize, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose);
    // public System.Void TriggerHapticPulse(System.UInt32 unControllerDeviceIndex, System.UInt32 unAxisId, System.Char usDurationMicroSec)
    // Offset: 0x1BEB01C
    void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec);
    // public System.String GetButtonIdNameFromEnum(Valve.VR.EVRButtonId eButtonId)
    // Offset: 0x1BEB038
    ::StringW GetButtonIdNameFromEnum(::Valve::VR::EVRButtonId eButtonId);
    // public System.String GetControllerAxisTypeNameFromEnum(Valve.VR.EVRControllerAxisType eAxisType)
    // Offset: 0x1BEB0CC
    ::StringW GetControllerAxisTypeNameFromEnum(::Valve::VR::EVRControllerAxisType eAxisType);
    // public System.Boolean IsInputAvailable()
    // Offset: 0x1BEB160
    bool IsInputAvailable();
    // public System.Boolean IsSteamVRDrawingControllers()
    // Offset: 0x1BEB17C
    bool IsSteamVRDrawingControllers();
    // public System.Boolean ShouldApplicationPause()
    // Offset: 0x1BEB198
    bool ShouldApplicationPause();
    // public System.Boolean ShouldApplicationReduceRenderingWork()
    // Offset: 0x1BEB1B4
    bool ShouldApplicationReduceRenderingWork();
    // public System.UInt32 DriverDebugRequest(System.UInt32 unDeviceIndex, System.String pchRequest, System.Text.StringBuilder pchResponseBuffer, System.UInt32 unResponseBufferSize)
    // Offset: 0x1BEB1D0
    uint DriverDebugRequest(uint unDeviceIndex, ::StringW pchRequest, ::System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize);
    // public Valve.VR.EVRFirmwareError PerformFirmwareUpdate(System.UInt32 unDeviceIndex)
    // Offset: 0x1BEB1EC
    ::Valve::VR::EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex);
    // public System.Void AcknowledgeQuit_Exiting()
    // Offset: 0x1BEB208
    void AcknowledgeQuit_Exiting();
    // public System.Void AcknowledgeQuit_UserPrompt()
    // Offset: 0x1BEB224
    void AcknowledgeQuit_UserPrompt();
  }; // Valve.VR.CVRSystem
  #pragma pack(pop)
  static check_size<sizeof(CVRSystem), 16 + sizeof(::Valve::VR::IVRSystem)> __Valve_VR_CVRSystemSizeCheck;
  static_assert(sizeof(CVRSystem) == 0x188);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::CVRSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetRecommendedRenderTargetSize
// Il2CppName: GetRecommendedRenderTargetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(ByRef<uint>, ByRef<uint>)>(&Valve::VR::CVRSystem::GetRecommendedRenderTargetSize)> {
  static const MethodInfo* get() {
    static auto* pnWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pnHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pnWidth, pnHeight});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetProjectionMatrix
// Il2CppName: GetProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HmdMatrix44_t (Valve::VR::CVRSystem::*)(::Valve::VR::EVREye, float, float)>(&Valve::VR::CVRSystem::GetProjectionMatrix)> {
  static const MethodInfo* get() {
    static auto* eEye = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREye")->byval_arg;
    static auto* fNearZ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fFarZ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eEye, fNearZ, fFarZ});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetProjectionRaw
// Il2CppName: GetProjectionRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(::Valve::VR::EVREye, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>)>(&Valve::VR::CVRSystem::GetProjectionRaw)> {
  static const MethodInfo* get() {
    static auto* eEye = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREye")->byval_arg;
    static auto* pfLeft = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfRight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfTop = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfBottom = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetProjectionRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eEye, pfLeft, pfRight, pfTop, pfBottom});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::ComputeDistortion
// Il2CppName: ComputeDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(::Valve::VR::EVREye, float, float, ByRef<::Valve::VR::DistortionCoordinates_t>)>(&Valve::VR::CVRSystem::ComputeDistortion)> {
  static const MethodInfo* get() {
    static auto* eEye = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREye")->byval_arg;
    static auto* fU = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fV = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pDistortionCoordinates = &::il2cpp_utils::GetClassFromName("Valve.VR", "DistortionCoordinates_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "ComputeDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eEye, fU, fV, pDistortionCoordinates});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetEyeToHeadTransform
// Il2CppName: GetEyeToHeadTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HmdMatrix34_t (Valve::VR::CVRSystem::*)(::Valve::VR::EVREye)>(&Valve::VR::CVRSystem::GetEyeToHeadTransform)> {
  static const MethodInfo* get() {
    static auto* eEye = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetEyeToHeadTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eEye});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetTimeSinceLastVsync
// Il2CppName: GetTimeSinceLastVsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(ByRef<float>, ByRef<uint64_t>)>(&Valve::VR::CVRSystem::GetTimeSinceLastVsync)> {
  static const MethodInfo* get() {
    static auto* pfSecondsSinceLastVsync = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pulFrameCounter = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetTimeSinceLastVsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pfSecondsSinceLastVsync, pulFrameCounter});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetD3D9AdapterIndex
// Il2CppName: GetD3D9AdapterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::GetD3D9AdapterIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetD3D9AdapterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetDXGIOutputInfo
// Il2CppName: GetDXGIOutputInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(ByRef<int>)>(&Valve::VR::CVRSystem::GetDXGIOutputInfo)> {
  static const MethodInfo* get() {
    static auto* pnAdapterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetDXGIOutputInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pnAdapterIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetOutputDevice
// Il2CppName: GetOutputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(ByRef<uint64_t>, ::Valve::VR::ETextureType, ::System::IntPtr)>(&Valve::VR::CVRSystem::GetOutputDevice)> {
  static const MethodInfo* get() {
    static auto* pnDevice = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* textureType = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETextureType")->byval_arg;
    static auto* pInstance = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetOutputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pnDevice, textureType, pInstance});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::IsDisplayOnDesktop
// Il2CppName: IsDisplayOnDesktop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::IsDisplayOnDesktop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "IsDisplayOnDesktop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::SetDisplayVisibility
// Il2CppName: SetDisplayVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(bool)>(&Valve::VR::CVRSystem::SetDisplayVisibility)> {
  static const MethodInfo* get() {
    static auto* bIsVisibleOnDesktop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "SetDisplayVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsVisibleOnDesktop});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose
// Il2CppName: GetDeviceToAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackingUniverseOrigin, float, ::ArrayW<::Valve::VR::TrackedDevicePose_t>)>(&Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose)> {
  static const MethodInfo* get() {
    static auto* eOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* fPredictedSecondsToPhotonsFromNow = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pTrackedDevicePoseArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::ResetSeatedZeroPose
// Il2CppName: ResetSeatedZeroPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::ResetSeatedZeroPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "ResetSeatedZeroPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose
// Il2CppName: GetSeatedZeroPoseToStandingAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HmdMatrix34_t (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose
// Il2CppName: GetRawZeroPoseToStandingAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HmdMatrix34_t (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass
// Il2CppName: GetSortedTrackedDeviceIndicesOfClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackedDeviceClass, ::ArrayW<uint>, uint)>(&Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass)> {
  static const MethodInfo* get() {
    static auto* eTrackedDeviceClass = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceClass")->byval_arg;
    static auto* punTrackedDeviceIndexArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* unRelativeToTrackedDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel
// Il2CppName: GetTrackedDeviceActivityLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EDeviceActivityLevel (Valve::VR::CVRSystem::*)(uint)>(&Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel)> {
  static const MethodInfo* get() {
    static auto* unDeviceId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceId});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::ApplyTransform
// Il2CppName: ApplyTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(ByRef<::Valve::VR::TrackedDevicePose_t>, ByRef<::Valve::VR::TrackedDevicePose_t>, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVRSystem::ApplyTransform)> {
  static const MethodInfo* get() {
    static auto* pOutputPose = &::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t")->this_arg;
    static auto* pTrackedDevicePose = &::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t")->this_arg;
    static auto* pTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "ApplyTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pOutputPose, pTrackedDevicePose, pTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole
// Il2CppName: GetTrackedDeviceIndexForControllerRole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackedControllerRole)>(&Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole)> {
  static const MethodInfo* get() {
    static auto* unDeviceType = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedControllerRole")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceType});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex
// Il2CppName: GetControllerRoleForTrackedDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::ETrackedControllerRole (Valve::VR::CVRSystem::*)(uint)>(&Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetTrackedDeviceClass
// Il2CppName: GetTrackedDeviceClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::ETrackedDeviceClass (Valve::VR::CVRSystem::*)(uint)>(&Valve::VR::CVRSystem::GetTrackedDeviceClass)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetTrackedDeviceClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::IsTrackedDeviceConnected
// Il2CppName: IsTrackedDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(uint)>(&Valve::VR::CVRSystem::IsTrackedDeviceConnected)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "IsTrackedDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty
// Il2CppName: GetBoolTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty
// Il2CppName: GetFloatTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty
// Il2CppName: GetInt32TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty
// Il2CppName: GetUint64TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty
// Il2CppName: GetMatrix34TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HmdMatrix34_t (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty
// Il2CppName: GetArrayTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, uint, ::System::IntPtr, uint, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* propType = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetStringTrackedDeviceProperty
// Il2CppName: GetStringTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVRSystem::*)(uint, ::Valve::VR::ETrackedDeviceProperty, ::System::Text::StringBuilder*, uint, ByRef<::Valve::VR::ETrackedPropertyError>)>(&Valve::VR::CVRSystem::GetStringTrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* pchValue = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, prop, pchValue, unBufferSize, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetPropErrorNameFromEnum
// Il2CppName: GetPropErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackedPropertyError)>(&Valve::VR::CVRSystem::GetPropErrorNameFromEnum)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedPropertyError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::PollNextEvent
// Il2CppName: PollNextEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(ByRef<::Valve::VR::VREvent_t>, uint)>(&Valve::VR::CVRSystem::PollNextEvent)> {
  static const MethodInfo* get() {
    static auto* pEvent = &::il2cpp_utils::GetClassFromName("Valve.VR", "VREvent_t")->this_arg;
    static auto* uncbVREvent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "PollNextEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pEvent, uncbVREvent});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::PollNextEventWithPose
// Il2CppName: PollNextEventWithPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackingUniverseOrigin, ByRef<::Valve::VR::VREvent_t>, uint, ByRef<::Valve::VR::TrackedDevicePose_t>)>(&Valve::VR::CVRSystem::PollNextEventWithPose)> {
  static const MethodInfo* get() {
    static auto* eOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* pEvent = &::il2cpp_utils::GetClassFromName("Valve.VR", "VREvent_t")->this_arg;
    static auto* uncbVREvent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pTrackedDevicePose = &::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "PollNextEventWithPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrigin, pEvent, uncbVREvent, pTrackedDevicePose});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetEventTypeNameFromEnum
// Il2CppName: GetEventTypeNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::CVRSystem::*)(::Valve::VR::EVREventType)>(&Valve::VR::CVRSystem::GetEventTypeNameFromEnum)> {
  static const MethodInfo* get() {
    static auto* eType = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eType});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetHiddenAreaMesh
// Il2CppName: GetHiddenAreaMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::HiddenAreaMesh_t (Valve::VR::CVRSystem::*)(::Valve::VR::EVREye, ::Valve::VR::EHiddenAreaMeshType)>(&Valve::VR::CVRSystem::GetHiddenAreaMesh)> {
  static const MethodInfo* get() {
    static auto* eEye = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVREye")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Valve.VR", "EHiddenAreaMeshType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetHiddenAreaMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eEye, type});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(uint, ByRef<::Valve::VR::VRControllerState_t>, uint)>(&Valve::VR::CVRSystem::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* unControllerDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pControllerState = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRControllerState_t")->this_arg;
    static auto* unControllerStateSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unControllerDeviceIndex, pControllerState, unControllerStateSize});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetControllerStateWithPose
// Il2CppName: GetControllerStateWithPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)(::Valve::VR::ETrackingUniverseOrigin, uint, ByRef<::Valve::VR::VRControllerState_t>, uint, ByRef<::Valve::VR::TrackedDevicePose_t>)>(&Valve::VR::CVRSystem::GetControllerStateWithPose)> {
  static const MethodInfo* get() {
    static auto* eOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* unControllerDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pControllerState = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRControllerState_t")->this_arg;
    static auto* unControllerStateSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pTrackedDevicePose = &::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetControllerStateWithPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)(uint, uint, ::Il2CppChar)>(&Valve::VR::CVRSystem::TriggerHapticPulse)> {
  static const MethodInfo* get() {
    static auto* unControllerDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* unAxisId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* usDurationMicroSec = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unControllerDeviceIndex, unAxisId, usDurationMicroSec});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetButtonIdNameFromEnum
// Il2CppName: GetButtonIdNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::CVRSystem::*)(::Valve::VR::EVRButtonId)>(&Valve::VR::CVRSystem::GetButtonIdNameFromEnum)> {
  static const MethodInfo* get() {
    static auto* eButtonId = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eButtonId});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum
// Il2CppName: GetControllerAxisTypeNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::CVRSystem::*)(::Valve::VR::EVRControllerAxisType)>(&Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum)> {
  static const MethodInfo* get() {
    static auto* eAxisType = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRControllerAxisType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eAxisType});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::IsInputAvailable
// Il2CppName: IsInputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::IsInputAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "IsInputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::IsSteamVRDrawingControllers
// Il2CppName: IsSteamVRDrawingControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::IsSteamVRDrawingControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::ShouldApplicationPause
// Il2CppName: ShouldApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::ShouldApplicationPause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "ShouldApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork
// Il2CppName: ShouldApplicationReduceRenderingWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::DriverDebugRequest
// Il2CppName: DriverDebugRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVRSystem::*)(uint, ::StringW, ::System::Text::StringBuilder*, uint)>(&Valve::VR::CVRSystem::DriverDebugRequest)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchRequest = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchResponseBuffer = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unResponseBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "DriverDebugRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::PerformFirmwareUpdate
// Il2CppName: PerformFirmwareUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVRFirmwareError (Valve::VR::CVRSystem::*)(uint)>(&Valve::VR::CVRSystem::PerformFirmwareUpdate)> {
  static const MethodInfo* get() {
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "PerformFirmwareUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unDeviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::AcknowledgeQuit_Exiting
// Il2CppName: AcknowledgeQuit_Exiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::AcknowledgeQuit_Exiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt
// Il2CppName: AcknowledgeQuit_UserPrompt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVRSystem::*)()>(&Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVRSystem*), "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
