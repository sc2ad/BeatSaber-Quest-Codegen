// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.IVROverlay
#include "Valve/VR/IVROverlay.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: EVROverlayError
  struct EVROverlayError;
  // Forward declaring type: VROverlayFlags
  struct VROverlayFlags;
  // Forward declaring type: EColorSpace
  struct EColorSpace;
  // Forward declaring type: VRTextureBounds_t
  struct VRTextureBounds_t;
  // Forward declaring type: HmdColor_t
  struct HmdColor_t;
  // Forward declaring type: VROverlayTransformType
  struct VROverlayTransformType;
  // Forward declaring type: ETrackingUniverseOrigin
  struct ETrackingUniverseOrigin;
  // Forward declaring type: HmdMatrix34_t
  struct HmdMatrix34_t;
  // Forward declaring type: HmdVector2_t
  struct HmdVector2_t;
  // Forward declaring type: VREvent_t
  struct VREvent_t;
  // Forward declaring type: VROverlayInputMethod
  struct VROverlayInputMethod;
  // Forward declaring type: VROverlayIntersectionParams_t
  struct VROverlayIntersectionParams_t;
  // Forward declaring type: VROverlayIntersectionResults_t
  struct VROverlayIntersectionResults_t;
  // Forward declaring type: EOverlayDirection
  struct EOverlayDirection;
  // Forward declaring type: EDualAnalogWhich
  struct EDualAnalogWhich;
  // Forward declaring type: Texture_t
  struct Texture_t;
  // Forward declaring type: ETextureType
  struct ETextureType;
  // Forward declaring type: HmdRect2_t
  struct HmdRect2_t;
  // Forward declaring type: VROverlayIntersectionMaskPrimitive_t
  struct VROverlayIntersectionMaskPrimitive_t;
  // Forward declaring type: VRMessageOverlayResponse
  struct VRMessageOverlayResponse;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: CVROverlay
  class CVROverlay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::CVROverlay);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::CVROverlay*, "Valve.VR", "CVROverlay");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x2A0
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.CVROverlay
  // [TokenAttribute] Offset: FFFFFFFF
  class CVROverlay : public ::Il2CppObject {
    public:
    // Nested type: ::Valve::VR::CVROverlay::_PollNextOverlayEventPacked
    class _PollNextOverlayEventPacked;
    // Nested type: ::Valve::VR::CVROverlay::PollNextOverlayEventUnion
    struct PollNextOverlayEventUnion;
    public:
    // private Valve.VR.IVROverlay FnTable
    // Size: 0x290
    // Offset: 0x10
    ::Valve::VR::IVROverlay FnTable;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVROverlay) == 0x290);
    public:
    // Creating conversion operator: operator ::Valve::VR::IVROverlay
    constexpr operator ::Valve::VR::IVROverlay() const noexcept {
      return FnTable;
    }
    // Get instance field reference: private Valve.VR.IVROverlay FnTable
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVROverlay& dyn_FnTable();
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x1C75BB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVROverlay* New_ctor(::System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVROverlay*, creationType>(pInterface)));
    }
    // public Valve.VR.EVROverlayError FindOverlay(System.String pchOverlayKey, ref System.UInt64 pOverlayHandle)
    // Offset: 0x1C75CB8
    ::Valve::VR::EVROverlayError FindOverlay(::StringW pchOverlayKey, ByRef<uint64_t> pOverlayHandle);
    // public Valve.VR.EVROverlayError CreateOverlay(System.String pchOverlayKey, System.String pchOverlayName, ref System.UInt64 pOverlayHandle)
    // Offset: 0x1C75CD8
    ::Valve::VR::EVROverlayError CreateOverlay(::StringW pchOverlayKey, ::StringW pchOverlayName, ByRef<uint64_t> pOverlayHandle);
    // public Valve.VR.EVROverlayError DestroyOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C75CF8
    ::Valve::VR::EVROverlayError DestroyOverlay(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError SetHighQualityOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C75D14
    ::Valve::VR::EVROverlayError SetHighQualityOverlay(uint64_t ulOverlayHandle);
    // public System.UInt64 GetHighQualityOverlay()
    // Offset: 0x1C75D30
    uint64_t GetHighQualityOverlay();
    // public System.UInt32 GetOverlayKey(System.UInt64 ulOverlayHandle, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize, ref Valve.VR.EVROverlayError pError)
    // Offset: 0x1C75D4C
    uint GetOverlayKey(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError);
    // public System.UInt32 GetOverlayName(System.UInt64 ulOverlayHandle, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize, ref Valve.VR.EVROverlayError pError)
    // Offset: 0x1C75D68
    uint GetOverlayName(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError);
    // public Valve.VR.EVROverlayError SetOverlayName(System.UInt64 ulOverlayHandle, System.String pchName)
    // Offset: 0x1C75D84
    ::Valve::VR::EVROverlayError SetOverlayName(uint64_t ulOverlayHandle, ::StringW pchName);
    // public Valve.VR.EVROverlayError GetOverlayImageData(System.UInt64 ulOverlayHandle, System.IntPtr pvBuffer, System.UInt32 unBufferSize, ref System.UInt32 punWidth, ref System.UInt32 punHeight)
    // Offset: 0x1C75DA0
    ::Valve::VR::EVROverlayError GetOverlayImageData(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unBufferSize, ByRef<uint> punWidth, ByRef<uint> punHeight);
    // public System.String GetOverlayErrorNameFromEnum(Valve.VR.EVROverlayError error)
    // Offset: 0x1C75DC4
    ::StringW GetOverlayErrorNameFromEnum(::Valve::VR::EVROverlayError error);
    // public Valve.VR.EVROverlayError SetOverlayRenderingPid(System.UInt64 ulOverlayHandle, System.UInt32 unPID)
    // Offset: 0x1C75E58
    ::Valve::VR::EVROverlayError SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID);
    // public System.UInt32 GetOverlayRenderingPid(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C75E74
    uint GetOverlayRenderingPid(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError SetOverlayFlag(System.UInt64 ulOverlayHandle, Valve.VR.VROverlayFlags eOverlayFlag, System.Boolean bEnabled)
    // Offset: 0x1C75E90
    ::Valve::VR::EVROverlayError SetOverlayFlag(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled);
    // public Valve.VR.EVROverlayError GetOverlayFlag(System.UInt64 ulOverlayHandle, Valve.VR.VROverlayFlags eOverlayFlag, ref System.Boolean pbEnabled)
    // Offset: 0x1C75EB0
    ::Valve::VR::EVROverlayError GetOverlayFlag(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, ByRef<bool> pbEnabled);
    // public Valve.VR.EVROverlayError SetOverlayColor(System.UInt64 ulOverlayHandle, System.Single fRed, System.Single fGreen, System.Single fBlue)
    // Offset: 0x1C75ED0
    ::Valve::VR::EVROverlayError SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
    // public Valve.VR.EVROverlayError GetOverlayColor(System.UInt64 ulOverlayHandle, ref System.Single pfRed, ref System.Single pfGreen, ref System.Single pfBlue)
    // Offset: 0x1C75EEC
    ::Valve::VR::EVROverlayError GetOverlayColor(uint64_t ulOverlayHandle, ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue);
    // public Valve.VR.EVROverlayError SetOverlayAlpha(System.UInt64 ulOverlayHandle, System.Single fAlpha)
    // Offset: 0x1C75F14
    ::Valve::VR::EVROverlayError SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha);
    // public Valve.VR.EVROverlayError GetOverlayAlpha(System.UInt64 ulOverlayHandle, ref System.Single pfAlpha)
    // Offset: 0x1C75F30
    ::Valve::VR::EVROverlayError GetOverlayAlpha(uint64_t ulOverlayHandle, ByRef<float> pfAlpha);
    // public Valve.VR.EVROverlayError SetOverlayTexelAspect(System.UInt64 ulOverlayHandle, System.Single fTexelAspect)
    // Offset: 0x1C75F50
    ::Valve::VR::EVROverlayError SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect);
    // public Valve.VR.EVROverlayError GetOverlayTexelAspect(System.UInt64 ulOverlayHandle, ref System.Single pfTexelAspect)
    // Offset: 0x1C75F6C
    ::Valve::VR::EVROverlayError GetOverlayTexelAspect(uint64_t ulOverlayHandle, ByRef<float> pfTexelAspect);
    // public Valve.VR.EVROverlayError SetOverlaySortOrder(System.UInt64 ulOverlayHandle, System.UInt32 unSortOrder)
    // Offset: 0x1C75F8C
    ::Valve::VR::EVROverlayError SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder);
    // public Valve.VR.EVROverlayError GetOverlaySortOrder(System.UInt64 ulOverlayHandle, ref System.UInt32 punSortOrder)
    // Offset: 0x1C75FA8
    ::Valve::VR::EVROverlayError GetOverlaySortOrder(uint64_t ulOverlayHandle, ByRef<uint> punSortOrder);
    // public Valve.VR.EVROverlayError SetOverlayWidthInMeters(System.UInt64 ulOverlayHandle, System.Single fWidthInMeters)
    // Offset: 0x1C75FC8
    ::Valve::VR::EVROverlayError SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters);
    // public Valve.VR.EVROverlayError GetOverlayWidthInMeters(System.UInt64 ulOverlayHandle, ref System.Single pfWidthInMeters)
    // Offset: 0x1C75FE4
    ::Valve::VR::EVROverlayError GetOverlayWidthInMeters(uint64_t ulOverlayHandle, ByRef<float> pfWidthInMeters);
    // public Valve.VR.EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(System.UInt64 ulOverlayHandle, System.Single fMinDistanceInMeters, System.Single fMaxDistanceInMeters)
    // Offset: 0x1C76004
    ::Valve::VR::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
    // public Valve.VR.EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(System.UInt64 ulOverlayHandle, ref System.Single pfMinDistanceInMeters, ref System.Single pfMaxDistanceInMeters)
    // Offset: 0x1C76020
    ::Valve::VR::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters);
    // public Valve.VR.EVROverlayError SetOverlayTextureColorSpace(System.UInt64 ulOverlayHandle, Valve.VR.EColorSpace eTextureColorSpace)
    // Offset: 0x1C76044
    ::Valve::VR::EVROverlayError SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, ::Valve::VR::EColorSpace eTextureColorSpace);
    // public Valve.VR.EVROverlayError GetOverlayTextureColorSpace(System.UInt64 ulOverlayHandle, ref Valve.VR.EColorSpace peTextureColorSpace)
    // Offset: 0x1C76060
    ::Valve::VR::EVROverlayError GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, ByRef<::Valve::VR::EColorSpace> peTextureColorSpace);
    // public Valve.VR.EVROverlayError SetOverlayTextureBounds(System.UInt64 ulOverlayHandle, ref Valve.VR.VRTextureBounds_t pOverlayTextureBounds)
    // Offset: 0x1C7607C
    ::Valve::VR::EVROverlayError SetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds);
    // public Valve.VR.EVROverlayError GetOverlayTextureBounds(System.UInt64 ulOverlayHandle, ref Valve.VR.VRTextureBounds_t pOverlayTextureBounds)
    // Offset: 0x1C76098
    ::Valve::VR::EVROverlayError GetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds);
    // public System.UInt32 GetOverlayRenderModel(System.UInt64 ulOverlayHandle, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize, ref Valve.VR.HmdColor_t pColor, ref Valve.VR.EVROverlayError pError)
    // Offset: 0x1C760B4
    uint GetOverlayRenderModel(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::HmdColor_t> pColor, ByRef<::Valve::VR::EVROverlayError> pError);
    // public Valve.VR.EVROverlayError SetOverlayRenderModel(System.UInt64 ulOverlayHandle, System.String pchRenderModel, ref Valve.VR.HmdColor_t pColor)
    // Offset: 0x1C760D0
    ::Valve::VR::EVROverlayError SetOverlayRenderModel(uint64_t ulOverlayHandle, ::StringW pchRenderModel, ByRef<::Valve::VR::HmdColor_t> pColor);
    // public Valve.VR.EVROverlayError GetOverlayTransformType(System.UInt64 ulOverlayHandle, ref Valve.VR.VROverlayTransformType peTransformType)
    // Offset: 0x1C760EC
    ::Valve::VR::EVROverlayError GetOverlayTransformType(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayTransformType> peTransformType);
    // public Valve.VR.EVROverlayError SetOverlayTransformAbsolute(System.UInt64 ulOverlayHandle, Valve.VR.ETrackingUniverseOrigin eTrackingOrigin, ref Valve.VR.HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
    // Offset: 0x1C76108
    ::Valve::VR::EVROverlayError SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform);
    // public Valve.VR.EVROverlayError GetOverlayTransformAbsolute(System.UInt64 ulOverlayHandle, ref Valve.VR.ETrackingUniverseOrigin peTrackingOrigin, ref Valve.VR.HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
    // Offset: 0x1C76124
    ::Valve::VR::EVROverlayError GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, ByRef<::Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform);
    // public Valve.VR.EVROverlayError SetOverlayTransformTrackedDeviceRelative(System.UInt64 ulOverlayHandle, System.UInt32 unTrackedDevice, ref Valve.VR.HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
    // Offset: 0x1C76140
    ::Valve::VR::EVROverlayError SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform);
    // public Valve.VR.EVROverlayError GetOverlayTransformTrackedDeviceRelative(System.UInt64 ulOverlayHandle, ref System.UInt32 punTrackedDevice, ref Valve.VR.HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
    // Offset: 0x1C7615C
    ::Valve::VR::EVROverlayError GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, ByRef<uint> punTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform);
    // public Valve.VR.EVROverlayError SetOverlayTransformTrackedDeviceComponent(System.UInt64 ulOverlayHandle, System.UInt32 unDeviceIndex, System.String pchComponentName)
    // Offset: 0x1C7617C
    ::Valve::VR::EVROverlayError SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::StringW pchComponentName);
    // public Valve.VR.EVROverlayError GetOverlayTransformTrackedDeviceComponent(System.UInt64 ulOverlayHandle, ref System.UInt32 punDeviceIndex, System.Text.StringBuilder pchComponentName, System.UInt32 unComponentNameSize)
    // Offset: 0x1C76198
    ::Valve::VR::EVROverlayError GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, ByRef<uint> punDeviceIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameSize);
    // public Valve.VR.EVROverlayError GetOverlayTransformOverlayRelative(System.UInt64 ulOverlayHandle, ref System.UInt64 ulOverlayHandleParent, ref Valve.VR.HmdMatrix34_t pmatParentOverlayToOverlayTransform)
    // Offset: 0x1C761B8
    ::Valve::VR::EVROverlayError GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, ByRef<uint64_t> ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform);
    // public Valve.VR.EVROverlayError SetOverlayTransformOverlayRelative(System.UInt64 ulOverlayHandle, System.UInt64 ulOverlayHandleParent, ref Valve.VR.HmdMatrix34_t pmatParentOverlayToOverlayTransform)
    // Offset: 0x1C761D8
    ::Valve::VR::EVROverlayError SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform);
    // public Valve.VR.EVROverlayError ShowOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C761F4
    ::Valve::VR::EVROverlayError ShowOverlay(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError HideOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C76210
    ::Valve::VR::EVROverlayError HideOverlay(uint64_t ulOverlayHandle);
    // public System.Boolean IsOverlayVisible(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C7622C
    bool IsOverlayVisible(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError GetTransformForOverlayCoordinates(System.UInt64 ulOverlayHandle, Valve.VR.ETrackingUniverseOrigin eTrackingOrigin, Valve.VR.HmdVector2_t coordinatesInOverlay, ref Valve.VR.HmdMatrix34_t pmatTransform)
    // Offset: 0x1C76248
    ::Valve::VR::EVROverlayError GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ::Valve::VR::HmdVector2_t coordinatesInOverlay, ByRef<::Valve::VR::HmdMatrix34_t> pmatTransform);
    // public System.Boolean PollNextOverlayEvent(System.UInt64 ulOverlayHandle, ref Valve.VR.VREvent_t pEvent, System.UInt32 uncbVREvent)
    // Offset: 0x1C76264
    bool PollNextOverlayEvent(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent);
    // public Valve.VR.EVROverlayError GetOverlayInputMethod(System.UInt64 ulOverlayHandle, ref Valve.VR.VROverlayInputMethod peInputMethod)
    // Offset: 0x1C76680
    ::Valve::VR::EVROverlayError GetOverlayInputMethod(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayInputMethod> peInputMethod);
    // public Valve.VR.EVROverlayError SetOverlayInputMethod(System.UInt64 ulOverlayHandle, Valve.VR.VROverlayInputMethod eInputMethod)
    // Offset: 0x1C7669C
    ::Valve::VR::EVROverlayError SetOverlayInputMethod(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayInputMethod eInputMethod);
    // public Valve.VR.EVROverlayError GetOverlayMouseScale(System.UInt64 ulOverlayHandle, ref Valve.VR.HmdVector2_t pvecMouseScale)
    // Offset: 0x1C766B8
    ::Valve::VR::EVROverlayError GetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale);
    // public Valve.VR.EVROverlayError SetOverlayMouseScale(System.UInt64 ulOverlayHandle, ref Valve.VR.HmdVector2_t pvecMouseScale)
    // Offset: 0x1C766D4
    ::Valve::VR::EVROverlayError SetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale);
    // public System.Boolean ComputeOverlayIntersection(System.UInt64 ulOverlayHandle, ref Valve.VR.VROverlayIntersectionParams_t pParams, ref Valve.VR.VROverlayIntersectionResults_t pResults)
    // Offset: 0x1C766F0
    bool ComputeOverlayIntersection(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<::Valve::VR::VROverlayIntersectionResults_t> pResults);
    // public System.Boolean IsHoverTargetOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C7670C
    bool IsHoverTargetOverlay(uint64_t ulOverlayHandle);
    // public System.UInt64 GetGamepadFocusOverlay()
    // Offset: 0x1C76728
    uint64_t GetGamepadFocusOverlay();
    // public Valve.VR.EVROverlayError SetGamepadFocusOverlay(System.UInt64 ulNewFocusOverlay)
    // Offset: 0x1C76744
    ::Valve::VR::EVROverlayError SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay);
    // public Valve.VR.EVROverlayError SetOverlayNeighbor(Valve.VR.EOverlayDirection eDirection, System.UInt64 ulFrom, System.UInt64 ulTo)
    // Offset: 0x1C76760
    ::Valve::VR::EVROverlayError SetOverlayNeighbor(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo);
    // public Valve.VR.EVROverlayError MoveGamepadFocusToNeighbor(Valve.VR.EOverlayDirection eDirection, System.UInt64 ulFrom)
    // Offset: 0x1C7677C
    ::Valve::VR::EVROverlayError MoveGamepadFocusToNeighbor(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom);
    // public Valve.VR.EVROverlayError SetOverlayDualAnalogTransform(System.UInt64 ulOverlay, Valve.VR.EDualAnalogWhich eWhich, System.IntPtr vCenter, System.Single fRadius)
    // Offset: 0x1C76798
    ::Valve::VR::EVROverlayError SetOverlayDualAnalogTransform(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ::System::IntPtr vCenter, float fRadius);
    // public Valve.VR.EVROverlayError GetOverlayDualAnalogTransform(System.UInt64 ulOverlay, Valve.VR.EDualAnalogWhich eWhich, ref Valve.VR.HmdVector2_t pvCenter, ref System.Single pfRadius)
    // Offset: 0x1C767B4
    ::Valve::VR::EVROverlayError GetOverlayDualAnalogTransform(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius);
    // public Valve.VR.EVROverlayError SetOverlayTexture(System.UInt64 ulOverlayHandle, ref Valve.VR.Texture_t pTexture)
    // Offset: 0x1C767D4
    ::Valve::VR::EVROverlayError SetOverlayTexture(uint64_t ulOverlayHandle, ByRef<::Valve::VR::Texture_t> pTexture);
    // public Valve.VR.EVROverlayError ClearOverlayTexture(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C767F0
    ::Valve::VR::EVROverlayError ClearOverlayTexture(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError SetOverlayRaw(System.UInt64 ulOverlayHandle, System.IntPtr pvBuffer, System.UInt32 unWidth, System.UInt32 unHeight, System.UInt32 unDepth)
    // Offset: 0x1C7680C
    ::Valve::VR::EVROverlayError SetOverlayRaw(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);
    // public Valve.VR.EVROverlayError SetOverlayFromFile(System.UInt64 ulOverlayHandle, System.String pchFilePath)
    // Offset: 0x1C76828
    ::Valve::VR::EVROverlayError SetOverlayFromFile(uint64_t ulOverlayHandle, ::StringW pchFilePath);
    // public Valve.VR.EVROverlayError GetOverlayTexture(System.UInt64 ulOverlayHandle, ref System.IntPtr pNativeTextureHandle, System.IntPtr pNativeTextureRef, ref System.UInt32 pWidth, ref System.UInt32 pHeight, ref System.UInt32 pNativeFormat, ref Valve.VR.ETextureType pAPIType, ref Valve.VR.EColorSpace pColorSpace, ref Valve.VR.VRTextureBounds_t pTextureBounds)
    // Offset: 0x1C76844
    ::Valve::VR::EVROverlayError GetOverlayTexture(uint64_t ulOverlayHandle, ByRef<::System::IntPtr> pNativeTextureHandle, ::System::IntPtr pNativeTextureRef, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<::Valve::VR::ETextureType> pAPIType, ByRef<::Valve::VR::EColorSpace> pColorSpace, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds);
    // public Valve.VR.EVROverlayError ReleaseNativeOverlayHandle(System.UInt64 ulOverlayHandle, System.IntPtr pNativeTextureHandle)
    // Offset: 0x1C76878
    ::Valve::VR::EVROverlayError ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, ::System::IntPtr pNativeTextureHandle);
    // public Valve.VR.EVROverlayError GetOverlayTextureSize(System.UInt64 ulOverlayHandle, ref System.UInt32 pWidth, ref System.UInt32 pHeight)
    // Offset: 0x1C76894
    ::Valve::VR::EVROverlayError GetOverlayTextureSize(uint64_t ulOverlayHandle, ByRef<uint> pWidth, ByRef<uint> pHeight);
    // public Valve.VR.EVROverlayError CreateDashboardOverlay(System.String pchOverlayKey, System.String pchOverlayFriendlyName, ref System.UInt64 pMainHandle, ref System.UInt64 pThumbnailHandle)
    // Offset: 0x1C768B8
    ::Valve::VR::EVROverlayError CreateDashboardOverlay(::StringW pchOverlayKey, ::StringW pchOverlayFriendlyName, ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle);
    // public System.Boolean IsDashboardVisible()
    // Offset: 0x1C768DC
    bool IsDashboardVisible();
    // public System.Boolean IsActiveDashboardOverlay(System.UInt64 ulOverlayHandle)
    // Offset: 0x1C768F8
    bool IsActiveDashboardOverlay(uint64_t ulOverlayHandle);
    // public Valve.VR.EVROverlayError SetDashboardOverlaySceneProcess(System.UInt64 ulOverlayHandle, System.UInt32 unProcessId)
    // Offset: 0x1C76914
    ::Valve::VR::EVROverlayError SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId);
    // public Valve.VR.EVROverlayError GetDashboardOverlaySceneProcess(System.UInt64 ulOverlayHandle, ref System.UInt32 punProcessId)
    // Offset: 0x1C76930
    ::Valve::VR::EVROverlayError GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, ByRef<uint> punProcessId);
    // public System.Void ShowDashboard(System.String pchOverlayToShow)
    // Offset: 0x1C76950
    void ShowDashboard(::StringW pchOverlayToShow);
    // public System.UInt32 GetPrimaryDashboardDevice()
    // Offset: 0x1C7696C
    uint GetPrimaryDashboardDevice();
    // public Valve.VR.EVROverlayError ShowKeyboard(System.Int32 eInputMode, System.Int32 eLineInputMode, System.String pchDescription, System.UInt32 unCharMax, System.String pchExistingText, System.Boolean bUseMinimalMode, System.UInt64 uUserValue)
    // Offset: 0x1C76988
    ::Valve::VR::EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
    // public Valve.VR.EVROverlayError ShowKeyboardForOverlay(System.UInt64 ulOverlayHandle, System.Int32 eInputMode, System.Int32 eLineInputMode, System.String pchDescription, System.UInt32 unCharMax, System.String pchExistingText, System.Boolean bUseMinimalMode, System.UInt64 uUserValue)
    // Offset: 0x1C769AC
    ::Valve::VR::EVROverlayError ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
    // public System.UInt32 GetKeyboardText(System.Text.StringBuilder pchText, System.UInt32 cchText)
    // Offset: 0x1C769D4
    uint GetKeyboardText(::System::Text::StringBuilder* pchText, uint cchText);
    // public System.Void HideKeyboard()
    // Offset: 0x1C769F0
    void HideKeyboard();
    // public System.Void SetKeyboardTransformAbsolute(Valve.VR.ETrackingUniverseOrigin eTrackingOrigin, ref Valve.VR.HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
    // Offset: 0x1C76A0C
    void SetKeyboardTransformAbsolute(::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform);
    // public System.Void SetKeyboardPositionForOverlay(System.UInt64 ulOverlayHandle, Valve.VR.HmdRect2_t avoidRect)
    // Offset: 0x1C76A28
    void SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, ::Valve::VR::HmdRect2_t avoidRect);
    // public Valve.VR.EVROverlayError SetOverlayIntersectionMask(System.UInt64 ulOverlayHandle, ref Valve.VR.VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, System.UInt32 unNumMaskPrimitives, System.UInt32 unPrimitiveSize)
    // Offset: 0x1C76A44
    ::Valve::VR::EVROverlayError SetOverlayIntersectionMask(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);
    // public Valve.VR.EVROverlayError GetOverlayFlags(System.UInt64 ulOverlayHandle, ref System.UInt32 pFlags)
    // Offset: 0x1C76A60
    ::Valve::VR::EVROverlayError GetOverlayFlags(uint64_t ulOverlayHandle, ByRef<uint> pFlags);
    // public Valve.VR.VRMessageOverlayResponse ShowMessageOverlay(System.String pchText, System.String pchCaption, System.String pchButton0Text, System.String pchButton1Text, System.String pchButton2Text, System.String pchButton3Text)
    // Offset: 0x1C76A80
    ::Valve::VR::VRMessageOverlayResponse ShowMessageOverlay(::StringW pchText, ::StringW pchCaption, ::StringW pchButton0Text, ::StringW pchButton1Text, ::StringW pchButton2Text, ::StringW pchButton3Text);
    // public System.Void CloseMessageOverlay()
    // Offset: 0x1C76A9C
    void CloseMessageOverlay();
  }; // Valve.VR.CVROverlay
  #pragma pack(pop)
  static check_size<sizeof(CVROverlay), 16 + sizeof(::Valve::VR::IVROverlay)> __Valve_VR_CVROverlaySizeCheck;
  static_assert(sizeof(CVROverlay) == 0x2A0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::CVROverlay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::CVROverlay::FindOverlay
// Il2CppName: FindOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(::StringW, ByRef<uint64_t>)>(&Valve::VR::CVROverlay::FindOverlay)> {
  static const MethodInfo* get() {
    static auto* pchOverlayKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "FindOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchOverlayKey, pOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::CreateOverlay
// Il2CppName: CreateOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(::StringW, ::StringW, ByRef<uint64_t>)>(&Valve::VR::CVROverlay::CreateOverlay)> {
  static const MethodInfo* get() {
    static auto* pchOverlayKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchOverlayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "CreateOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchOverlayKey, pchOverlayName, pOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::DestroyOverlay
// Il2CppName: DestroyOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::DestroyOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "DestroyOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetHighQualityOverlay
// Il2CppName: SetHighQualityOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::SetHighQualityOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetHighQualityOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetHighQualityOverlay
// Il2CppName: GetHighQualityOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::GetHighQualityOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetHighQualityOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayKey
// Il2CppName: GetOverlayKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)(uint64_t, ::System::Text::StringBuilder*, uint, ByRef<::Valve::VR::EVROverlayError>)>(&Valve::VR::CVROverlay::GetOverlayKey)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchValue = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVROverlayError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchValue, unBufferSize, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayName
// Il2CppName: GetOverlayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)(uint64_t, ::System::Text::StringBuilder*, uint, ByRef<::Valve::VR::EVROverlayError>)>(&Valve::VR::CVROverlay::GetOverlayName)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchValue = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVROverlayError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchValue, unBufferSize, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayName
// Il2CppName: SetOverlayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::StringW)>(&Valve::VR::CVROverlay::SetOverlayName)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchName});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayImageData
// Il2CppName: GetOverlayImageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::System::IntPtr, uint, ByRef<uint>, ByRef<uint>)>(&Valve::VR::CVROverlay::GetOverlayImageData)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pvBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* punWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* punHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayImageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum
// Il2CppName: GetOverlayErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::CVROverlay::*)(::Valve::VR::EVROverlayError)>(&Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVROverlayError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayRenderingPid
// Il2CppName: SetOverlayRenderingPid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint)>(&Valve::VR::CVROverlay::SetOverlayRenderingPid)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unPID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayRenderingPid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, unPID});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayRenderingPid
// Il2CppName: GetOverlayRenderingPid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::GetOverlayRenderingPid)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayRenderingPid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayFlag
// Il2CppName: SetOverlayFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::VROverlayFlags, bool)>(&Valve::VR::CVROverlay::SetOverlayFlag)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eOverlayFlag = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayFlags")->byval_arg;
    static auto* bEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eOverlayFlag, bEnabled});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayFlag
// Il2CppName: GetOverlayFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::VROverlayFlags, ByRef<bool>)>(&Valve::VR::CVROverlay::GetOverlayFlag)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eOverlayFlag = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayFlags")->byval_arg;
    static auto* pbEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eOverlayFlag, pbEnabled});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayColor
// Il2CppName: SetOverlayColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, float, float, float)>(&Valve::VR::CVROverlay::SetOverlayColor)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fRed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fGreen = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fBlue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, fRed, fGreen, fBlue});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayColor
// Il2CppName: GetOverlayColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<float>, ByRef<float>, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayColor)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pfRed = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfGreen = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfBlue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pfRed, pfGreen, pfBlue});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayAlpha
// Il2CppName: SetOverlayAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, float)>(&Valve::VR::CVROverlay::SetOverlayAlpha)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fAlpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, fAlpha});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayAlpha
// Il2CppName: GetOverlayAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayAlpha)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pfAlpha = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pfAlpha});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTexelAspect
// Il2CppName: SetOverlayTexelAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, float)>(&Valve::VR::CVROverlay::SetOverlayTexelAspect)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fTexelAspect = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTexelAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, fTexelAspect});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTexelAspect
// Il2CppName: GetOverlayTexelAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayTexelAspect)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pfTexelAspect = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTexelAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pfTexelAspect});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlaySortOrder
// Il2CppName: SetOverlaySortOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint)>(&Valve::VR::CVROverlay::SetOverlaySortOrder)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unSortOrder = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlaySortOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, unSortOrder});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlaySortOrder
// Il2CppName: GetOverlaySortOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>)>(&Valve::VR::CVROverlay::GetOverlaySortOrder)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* punSortOrder = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlaySortOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, punSortOrder});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayWidthInMeters
// Il2CppName: SetOverlayWidthInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, float)>(&Valve::VR::CVROverlay::SetOverlayWidthInMeters)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fWidthInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayWidthInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, fWidthInMeters});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayWidthInMeters
// Il2CppName: GetOverlayWidthInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayWidthInMeters)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pfWidthInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayWidthInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pfWidthInMeters});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters
// Il2CppName: SetOverlayAutoCurveDistanceRangeInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, float, float)>(&Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fMinDistanceInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fMaxDistanceInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters
// Il2CppName: GetOverlayAutoCurveDistanceRangeInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<float>, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pfMinDistanceInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* pfMaxDistanceInMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTextureColorSpace
// Il2CppName: SetOverlayTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::EColorSpace)>(&Valve::VR::CVROverlay::SetOverlayTextureColorSpace)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eTextureColorSpace = &::il2cpp_utils::GetClassFromName("Valve.VR", "EColorSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eTextureColorSpace});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTextureColorSpace
// Il2CppName: GetOverlayTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::EColorSpace>)>(&Valve::VR::CVROverlay::GetOverlayTextureColorSpace)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* peTextureColorSpace = &::il2cpp_utils::GetClassFromName("Valve.VR", "EColorSpace")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, peTextureColorSpace});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTextureBounds
// Il2CppName: SetOverlayTextureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VRTextureBounds_t>)>(&Valve::VR::CVROverlay::SetOverlayTextureBounds)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pOverlayTextureBounds = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRTextureBounds_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTextureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pOverlayTextureBounds});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTextureBounds
// Il2CppName: GetOverlayTextureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VRTextureBounds_t>)>(&Valve::VR::CVROverlay::GetOverlayTextureBounds)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pOverlayTextureBounds = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRTextureBounds_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTextureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pOverlayTextureBounds});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayRenderModel
// Il2CppName: GetOverlayRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)(uint64_t, ::System::Text::StringBuilder*, uint, ByRef<::Valve::VR::HmdColor_t>, ByRef<::Valve::VR::EVROverlayError>)>(&Valve::VR::CVROverlay::GetOverlayRenderModel)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchValue = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pColor = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdColor_t")->this_arg;
    static auto* pError = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVROverlayError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchValue, unBufferSize, pColor, pError});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayRenderModel
// Il2CppName: SetOverlayRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::StringW, ByRef<::Valve::VR::HmdColor_t>)>(&Valve::VR::CVROverlay::SetOverlayRenderModel)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchRenderModel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pColor = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdColor_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchRenderModel, pColor});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTransformType
// Il2CppName: GetOverlayTransformType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VROverlayTransformType>)>(&Valve::VR::CVROverlay::GetOverlayTransformType)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* peTransformType = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayTransformType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTransformType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, peTransformType});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTransformAbsolute
// Il2CppName: SetOverlayTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::ETrackingUniverseOrigin, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::SetOverlayTransformAbsolute)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eTrackingOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* pmatTrackingOriginToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTransformAbsolute
// Il2CppName: GetOverlayTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::ETrackingUniverseOrigin>, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::GetOverlayTransformAbsolute)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* peTrackingOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->this_arg;
    static auto* pmatTrackingOriginToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative
// Il2CppName: SetOverlayTransformTrackedDeviceRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unTrackedDevice = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pmatTrackedDeviceToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative
// Il2CppName: GetOverlayTransformTrackedDeviceRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* punTrackedDevice = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pmatTrackedDeviceToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent
// Il2CppName: SetOverlayTransformTrackedDeviceComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint, ::StringW)>(&Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchComponentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, unDeviceIndex, pchComponentName});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent
// Il2CppName: GetOverlayTransformTrackedDeviceComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>, ::System::Text::StringBuilder*, uint)>(&Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* punDeviceIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pchComponentName = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unComponentNameSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative
// Il2CppName: GetOverlayTransformOverlayRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint64_t>, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* ulOverlayHandleParent = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* pmatParentOverlayToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative
// Il2CppName: SetOverlayTransformOverlayRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint64_t, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* ulOverlayHandleParent = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pmatParentOverlayToOverlayTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ShowOverlay
// Il2CppName: ShowOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::ShowOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ShowOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::HideOverlay
// Il2CppName: HideOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::HideOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "HideOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::IsOverlayVisible
// Il2CppName: IsOverlayVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::IsOverlayVisible)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "IsOverlayVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetTransformForOverlayCoordinates
// Il2CppName: GetTransformForOverlayCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::ETrackingUniverseOrigin, ::Valve::VR::HmdVector2_t, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::GetTransformForOverlayCoordinates)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eTrackingOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* coordinatesInOverlay = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdVector2_t")->byval_arg;
    static auto* pmatTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::PollNextOverlayEvent
// Il2CppName: PollNextOverlayEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VREvent_t>, uint)>(&Valve::VR::CVROverlay::PollNextOverlayEvent)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pEvent = &::il2cpp_utils::GetClassFromName("Valve.VR", "VREvent_t")->this_arg;
    static auto* uncbVREvent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "PollNextOverlayEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pEvent, uncbVREvent});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayInputMethod
// Il2CppName: GetOverlayInputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VROverlayInputMethod>)>(&Valve::VR::CVROverlay::GetOverlayInputMethod)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* peInputMethod = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayInputMethod")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayInputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, peInputMethod});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayInputMethod
// Il2CppName: SetOverlayInputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::VROverlayInputMethod)>(&Valve::VR::CVROverlay::SetOverlayInputMethod)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eInputMethod = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayInputMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayInputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eInputMethod});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayMouseScale
// Il2CppName: GetOverlayMouseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::HmdVector2_t>)>(&Valve::VR::CVROverlay::GetOverlayMouseScale)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pvecMouseScale = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdVector2_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayMouseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pvecMouseScale});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayMouseScale
// Il2CppName: SetOverlayMouseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::HmdVector2_t>)>(&Valve::VR::CVROverlay::SetOverlayMouseScale)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pvecMouseScale = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdVector2_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayMouseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pvecMouseScale});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ComputeOverlayIntersection
// Il2CppName: ComputeOverlayIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VROverlayIntersectionParams_t>, ByRef<::Valve::VR::VROverlayIntersectionResults_t>)>(&Valve::VR::CVROverlay::ComputeOverlayIntersection)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pParams = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayIntersectionParams_t")->this_arg;
    static auto* pResults = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayIntersectionResults_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ComputeOverlayIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pParams, pResults});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::IsHoverTargetOverlay
// Il2CppName: IsHoverTargetOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::IsHoverTargetOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "IsHoverTargetOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetGamepadFocusOverlay
// Il2CppName: GetGamepadFocusOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::GetGamepadFocusOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetGamepadFocusOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetGamepadFocusOverlay
// Il2CppName: SetGamepadFocusOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::SetGamepadFocusOverlay)> {
  static const MethodInfo* get() {
    static auto* ulNewFocusOverlay = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetGamepadFocusOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulNewFocusOverlay});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayNeighbor
// Il2CppName: SetOverlayNeighbor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(::Valve::VR::EOverlayDirection, uint64_t, uint64_t)>(&Valve::VR::CVROverlay::SetOverlayNeighbor)> {
  static const MethodInfo* get() {
    static auto* eDirection = &::il2cpp_utils::GetClassFromName("Valve.VR", "EOverlayDirection")->byval_arg;
    static auto* ulFrom = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* ulTo = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayNeighbor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eDirection, ulFrom, ulTo});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor
// Il2CppName: MoveGamepadFocusToNeighbor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(::Valve::VR::EOverlayDirection, uint64_t)>(&Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor)> {
  static const MethodInfo* get() {
    static auto* eDirection = &::il2cpp_utils::GetClassFromName("Valve.VR", "EOverlayDirection")->byval_arg;
    static auto* ulFrom = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eDirection, ulFrom});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayDualAnalogTransform
// Il2CppName: SetOverlayDualAnalogTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::EDualAnalogWhich, ::System::IntPtr, float)>(&Valve::VR::CVROverlay::SetOverlayDualAnalogTransform)> {
  static const MethodInfo* get() {
    static auto* ulOverlay = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eWhich = &::il2cpp_utils::GetClassFromName("Valve.VR", "EDualAnalogWhich")->byval_arg;
    static auto* vCenter = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* fRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlay, eWhich, vCenter, fRadius});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayDualAnalogTransform
// Il2CppName: GetOverlayDualAnalogTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::EDualAnalogWhich, ByRef<::Valve::VR::HmdVector2_t>, ByRef<float>)>(&Valve::VR::CVROverlay::GetOverlayDualAnalogTransform)> {
  static const MethodInfo* get() {
    static auto* ulOverlay = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eWhich = &::il2cpp_utils::GetClassFromName("Valve.VR", "EDualAnalogWhich")->byval_arg;
    static auto* pvCenter = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdVector2_t")->this_arg;
    static auto* pfRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlay, eWhich, pvCenter, pfRadius});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayTexture
// Il2CppName: SetOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::Texture_t>)>(&Valve::VR::CVROverlay::SetOverlayTexture)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pTexture = &::il2cpp_utils::GetClassFromName("Valve.VR", "Texture_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pTexture});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ClearOverlayTexture
// Il2CppName: ClearOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::ClearOverlayTexture)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ClearOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayRaw
// Il2CppName: SetOverlayRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::System::IntPtr, uint, uint, uint)>(&Valve::VR::CVROverlay::SetOverlayRaw)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pvBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* unWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* unHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* unDepth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayFromFile
// Il2CppName: SetOverlayFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::StringW)>(&Valve::VR::CVROverlay::SetOverlayFromFile)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pchFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pchFilePath});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTexture
// Il2CppName: GetOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::System::IntPtr>, ::System::IntPtr, ByRef<uint>, ByRef<uint>, ByRef<uint>, ByRef<::Valve::VR::ETextureType>, ByRef<::Valve::VR::EColorSpace>, ByRef<::Valve::VR::VRTextureBounds_t>)>(&Valve::VR::CVROverlay::GetOverlayTexture)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pNativeTextureHandle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* pNativeTextureRef = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pNativeFormat = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pAPIType = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETextureType")->this_arg;
    static auto* pColorSpace = &::il2cpp_utils::GetClassFromName("Valve.VR", "EColorSpace")->this_arg;
    static auto* pTextureBounds = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRTextureBounds_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ReleaseNativeOverlayHandle
// Il2CppName: ReleaseNativeOverlayHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ::System::IntPtr)>(&Valve::VR::CVROverlay::ReleaseNativeOverlayHandle)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pNativeTextureHandle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pNativeTextureHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayTextureSize
// Il2CppName: GetOverlayTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>, ByRef<uint>)>(&Valve::VR::CVROverlay::GetOverlayTextureSize)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pWidth, pHeight});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::CreateDashboardOverlay
// Il2CppName: CreateDashboardOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(::StringW, ::StringW, ByRef<uint64_t>, ByRef<uint64_t>)>(&Valve::VR::CVROverlay::CreateDashboardOverlay)> {
  static const MethodInfo* get() {
    static auto* pchOverlayKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchOverlayFriendlyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pMainHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* pThumbnailHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "CreateDashboardOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::IsDashboardVisible
// Il2CppName: IsDashboardVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::IsDashboardVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "IsDashboardVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::IsActiveDashboardOverlay
// Il2CppName: IsActiveDashboardOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::CVROverlay::*)(uint64_t)>(&Valve::VR::CVROverlay::IsActiveDashboardOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "IsActiveDashboardOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess
// Il2CppName: SetDashboardOverlaySceneProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, uint)>(&Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unProcessId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, unProcessId});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess
// Il2CppName: GetDashboardOverlaySceneProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>)>(&Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* punProcessId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, punProcessId});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ShowDashboard
// Il2CppName: ShowDashboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVROverlay::*)(::StringW)>(&Valve::VR::CVROverlay::ShowDashboard)> {
  static const MethodInfo* get() {
    static auto* pchOverlayToShow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ShowDashboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchOverlayToShow});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetPrimaryDashboardDevice
// Il2CppName: GetPrimaryDashboardDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::GetPrimaryDashboardDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ShowKeyboard
// Il2CppName: ShowKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(int, int, ::StringW, uint, ::StringW, bool, uint64_t)>(&Valve::VR::CVROverlay::ShowKeyboard)> {
  static const MethodInfo* get() {
    static auto* eInputMode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eLineInputMode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pchDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* unCharMax = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchExistingText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bUseMinimalMode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uUserValue = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ShowKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ShowKeyboardForOverlay
// Il2CppName: ShowKeyboardForOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, int, int, ::StringW, uint, ::StringW, bool, uint64_t)>(&Valve::VR::CVROverlay::ShowKeyboardForOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* eInputMode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eLineInputMode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pchDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* unCharMax = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchExistingText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bUseMinimalMode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uUserValue = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ShowKeyboardForOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetKeyboardText
// Il2CppName: GetKeyboardText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Valve::VR::CVROverlay::*)(::System::Text::StringBuilder*, uint)>(&Valve::VR::CVROverlay::GetKeyboardText)> {
  static const MethodInfo* get() {
    static auto* pchText = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* cchText = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetKeyboardText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchText, cchText});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::HideKeyboard
// Il2CppName: HideKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::HideKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "HideKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetKeyboardTransformAbsolute
// Il2CppName: SetKeyboardTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVROverlay::*)(::Valve::VR::ETrackingUniverseOrigin, ByRef<::Valve::VR::HmdMatrix34_t>)>(&Valve::VR::CVROverlay::SetKeyboardTransformAbsolute)> {
  static const MethodInfo* get() {
    static auto* eTrackingOrigin = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackingUniverseOrigin")->byval_arg;
    static auto* pmatTrackingOriginToKeyboardTransform = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eTrackingOrigin, pmatTrackingOriginToKeyboardTransform});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetKeyboardPositionForOverlay
// Il2CppName: SetKeyboardPositionForOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVROverlay::*)(uint64_t, ::Valve::VR::HmdRect2_t)>(&Valve::VR::CVROverlay::SetKeyboardPositionForOverlay)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* avoidRect = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdRect2_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, avoidRect});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::SetOverlayIntersectionMask
// Il2CppName: SetOverlayIntersectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t>, uint, uint)>(&Valve::VR::CVROverlay::SetOverlayIntersectionMask)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pMaskPrimitives = &::il2cpp_utils::GetClassFromName("Valve.VR", "VROverlayIntersectionMaskPrimitive_t")->this_arg;
    static auto* unNumMaskPrimitives = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* unPrimitiveSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "SetOverlayIntersectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::GetOverlayFlags
// Il2CppName: GetOverlayFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVROverlayError (Valve::VR::CVROverlay::*)(uint64_t, ByRef<uint>)>(&Valve::VR::CVROverlay::GetOverlayFlags)> {
  static const MethodInfo* get() {
    static auto* ulOverlayHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pFlags = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "GetOverlayFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulOverlayHandle, pFlags});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::ShowMessageOverlay
// Il2CppName: ShowMessageOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::VRMessageOverlayResponse (Valve::VR::CVROverlay::*)(::StringW, ::StringW, ::StringW, ::StringW, ::StringW, ::StringW)>(&Valve::VR::CVROverlay::ShowMessageOverlay)> {
  static const MethodInfo* get() {
    static auto* pchText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchCaption = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchButton0Text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchButton1Text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchButton2Text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchButton3Text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "ShowMessageOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text});
  }
};
// Writing MetadataGetter for method: Valve::VR::CVROverlay::CloseMessageOverlay
// Il2CppName: CloseMessageOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::CVROverlay::*)()>(&Valve::VR::CVROverlay::CloseMessageOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::CVROverlay*), "CloseMessageOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
