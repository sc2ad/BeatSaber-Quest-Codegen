// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRChaperone
  class CVRChaperone;
  // Forward declaring type: CVRChaperoneSetup
  class CVRChaperoneSetup;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: CVRRenderModels
  class CVRRenderModels;
  // Forward declaring type: CVRExtendedDisplay
  class CVRExtendedDisplay;
  // Forward declaring type: CVRSettings
  class CVRSettings;
  // Forward declaring type: CVRApplications
  class CVRApplications;
  // Forward declaring type: CVRScreenshots
  class CVRScreenshots;
  // Forward declaring type: CVRTrackedCamera
  class CVRTrackedCamera;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::OpenVR::COpenVRContext);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::OpenVR::COpenVRContext*, "Valve.VR", "OpenVR/COpenVRContext");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.OpenVR/Valve.VR.COpenVRContext
  // [TokenAttribute] Offset: FFFFFFFF
  class OpenVR::COpenVRContext : public ::Il2CppObject {
    public:
    public:
    // private Valve.VR.CVRSystem m_pVRSystem
    // Size: 0x8
    // Offset: 0x10
    ::Valve::VR::CVRSystem* m_pVRSystem;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRSystem*) == 0x8);
    // private Valve.VR.CVRChaperone m_pVRChaperone
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::CVRChaperone* m_pVRChaperone;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRChaperone*) == 0x8);
    // private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::CVRChaperoneSetup* m_pVRChaperoneSetup;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRChaperoneSetup*) == 0x8);
    // private Valve.VR.CVRCompositor m_pVRCompositor
    // Size: 0x8
    // Offset: 0x28
    ::Valve::VR::CVRCompositor* m_pVRCompositor;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRCompositor*) == 0x8);
    // private Valve.VR.CVROverlay m_pVROverlay
    // Size: 0x8
    // Offset: 0x30
    ::Valve::VR::CVROverlay* m_pVROverlay;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVROverlay*) == 0x8);
    // private Valve.VR.CVRRenderModels m_pVRRenderModels
    // Size: 0x8
    // Offset: 0x38
    ::Valve::VR::CVRRenderModels* m_pVRRenderModels;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRRenderModels*) == 0x8);
    // private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    // Size: 0x8
    // Offset: 0x40
    ::Valve::VR::CVRExtendedDisplay* m_pVRExtendedDisplay;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRExtendedDisplay*) == 0x8);
    // private Valve.VR.CVRSettings m_pVRSettings
    // Size: 0x8
    // Offset: 0x48
    ::Valve::VR::CVRSettings* m_pVRSettings;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRSettings*) == 0x8);
    // private Valve.VR.CVRApplications m_pVRApplications
    // Size: 0x8
    // Offset: 0x50
    ::Valve::VR::CVRApplications* m_pVRApplications;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRApplications*) == 0x8);
    // private Valve.VR.CVRScreenshots m_pVRScreenshots
    // Size: 0x8
    // Offset: 0x58
    ::Valve::VR::CVRScreenshots* m_pVRScreenshots;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRScreenshots*) == 0x8);
    // private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    // Size: 0x8
    // Offset: 0x60
    ::Valve::VR::CVRTrackedCamera* m_pVRTrackedCamera;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRTrackedCamera*) == 0x8);
    public:
    // Get instance field reference: private Valve.VR.CVRSystem m_pVRSystem
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRSystem*& dyn_m_pVRSystem();
    // Get instance field reference: private Valve.VR.CVRChaperone m_pVRChaperone
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperone*& dyn_m_pVRChaperone();
    // Get instance field reference: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperoneSetup*& dyn_m_pVRChaperoneSetup();
    // Get instance field reference: private Valve.VR.CVRCompositor m_pVRCompositor
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRCompositor*& dyn_m_pVRCompositor();
    // Get instance field reference: private Valve.VR.CVROverlay m_pVROverlay
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVROverlay*& dyn_m_pVROverlay();
    // Get instance field reference: private Valve.VR.CVRRenderModels m_pVRRenderModels
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRRenderModels*& dyn_m_pVRRenderModels();
    // Get instance field reference: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRExtendedDisplay*& dyn_m_pVRExtendedDisplay();
    // Get instance field reference: private Valve.VR.CVRSettings m_pVRSettings
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRSettings*& dyn_m_pVRSettings();
    // Get instance field reference: private Valve.VR.CVRApplications m_pVRApplications
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRApplications*& dyn_m_pVRApplications();
    // Get instance field reference: private Valve.VR.CVRScreenshots m_pVRScreenshots
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRScreenshots*& dyn_m_pVRScreenshots();
    // Get instance field reference: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRTrackedCamera*& dyn_m_pVRTrackedCamera();
    // public System.Void .ctor()
    // Offset: 0x2AB64B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpenVR::COpenVRContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpenVR::COpenVRContext*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x2AB64E0
    void Clear();
    // private System.Void CheckClear()
    // Offset: 0x2AB6500
    void CheckClear();
    // public Valve.VR.CVRSystem VRSystem()
    // Offset: 0x2AB663C
    ::Valve::VR::CVRSystem* VRSystem();
    // public Valve.VR.CVRChaperone VRChaperone()
    // Offset: 0x2AB67A4
    ::Valve::VR::CVRChaperone* VRChaperone();
    // public Valve.VR.CVRChaperoneSetup VRChaperoneSetup()
    // Offset: 0x2AB6864
    ::Valve::VR::CVRChaperoneSetup* VRChaperoneSetup();
    // public Valve.VR.CVRCompositor VRCompositor()
    // Offset: 0x2AB6924
    ::Valve::VR::CVRCompositor* VRCompositor();
    // public Valve.VR.CVROverlay VROverlay()
    // Offset: 0x2AB69E4
    ::Valve::VR::CVROverlay* VROverlay();
    // public Valve.VR.CVRRenderModels VRRenderModels()
    // Offset: 0x2AB6AA4
    ::Valve::VR::CVRRenderModels* VRRenderModels();
    // public Valve.VR.CVRExtendedDisplay VRExtendedDisplay()
    // Offset: 0x2AB6B64
    ::Valve::VR::CVRExtendedDisplay* VRExtendedDisplay();
    // public Valve.VR.CVRSettings VRSettings()
    // Offset: 0x2AB6C24
    ::Valve::VR::CVRSettings* VRSettings();
    // public Valve.VR.CVRApplications VRApplications()
    // Offset: 0x2AB6CE4
    ::Valve::VR::CVRApplications* VRApplications();
    // public Valve.VR.CVRScreenshots VRScreenshots()
    // Offset: 0x2AB6DA4
    ::Valve::VR::CVRScreenshots* VRScreenshots();
    // public Valve.VR.CVRTrackedCamera VRTrackedCamera()
    // Offset: 0x2AB6E64
    ::Valve::VR::CVRTrackedCamera* VRTrackedCamera();
  }; // Valve.VR.OpenVR/Valve.VR.COpenVRContext
  #pragma pack(pop)
  static check_size<sizeof(OpenVR::COpenVRContext), 96 + sizeof(::Valve::VR::CVRTrackedCamera*)> __Valve_VR_OpenVR_COpenVRContextSizeCheck;
  static_assert(sizeof(OpenVR::COpenVRContext) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::CheckClear
// Il2CppName: CheckClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::CheckClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "CheckClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRSystem
// Il2CppName: VRSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRSystem* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRChaperone
// Il2CppName: VRChaperone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRChaperone* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRChaperone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRChaperone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup
// Il2CppName: VRChaperoneSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRChaperoneSetup* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRChaperoneSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRCompositor
// Il2CppName: VRCompositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRCompositor* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRCompositor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRCompositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VROverlay
// Il2CppName: VROverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVROverlay* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VROverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VROverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRRenderModels
// Il2CppName: VRRenderModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRRenderModels* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRRenderModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRRenderModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay
// Il2CppName: VRExtendedDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRExtendedDisplay* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRExtendedDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRSettings
// Il2CppName: VRSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRSettings* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRApplications
// Il2CppName: VRApplications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRApplications* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRApplications)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRApplications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRScreenshots
// Il2CppName: VRScreenshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRScreenshots* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRScreenshots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRScreenshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera
// Il2CppName: VRTrackedCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRTrackedCamera* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRTrackedCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
