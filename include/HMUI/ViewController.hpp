// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: ContainerViewController
  class ContainerViewController;
  // Forward declaring type: Screen
  class Screen;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseRaycaster
  class BaseRaycaster;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ViewController
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: EE12BC
  // [RequireComponent] Offset: EE12BC
  // [RequireComponent] Offset: EE12BC
  class ViewController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::ViewController::DidActivateDelegate
    class DidActivateDelegate;
    // Nested type: HMUI::ViewController::DidDeactivateDelegate
    class DidDeactivateDelegate;
    // Nested type: HMUI::ViewController::AnimationType
    struct AnimationType;
    // Nested type: HMUI::ViewController::AnimationDirection
    struct AnimationDirection;
    // Nested type: HMUI::ViewController::$PresentViewControllerCoroutine$d__58
    class $PresentViewControllerCoroutine$d__58;
    // Nested type: HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60
    class $ReplaceViewControllerCoroutine$d__60;
    // Nested type: HMUI::ViewController::$DismissViewControllerCoroutine$d__62
    class $DismissViewControllerCoroutine$d__62;
    // [CompilerGeneratedAttribute] Offset: 0xEE2760
    // private HMUI.ViewController/DidActivateDelegate didActivateEvent
    // Size: 0x8
    // Offset: 0x18
    HMUI::ViewController::DidActivateDelegate* didActivateEvent;
    // Field size check
    static_assert(sizeof(HMUI::ViewController::DidActivateDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEE2770
    // private HMUI.ViewController/DidDeactivateDelegate didDeactivateEvent
    // Size: 0x8
    // Offset: 0x20
    HMUI::ViewController::DidDeactivateDelegate* didDeactivateEvent;
    // Field size check
    static_assert(sizeof(HMUI::ViewController::DidDeactivateDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEE2780
    // private HMUI.ButtonBinder <buttonBinder>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // private HMUI.ContainerViewController _containerViewController
    // Size: 0x8
    // Offset: 0x30
    HMUI::ContainerViewController* containerViewController;
    // Field size check
    static_assert(sizeof(HMUI::ContainerViewController*) == 0x8);
    // private HMUI.ViewController _parentViewController
    // Size: 0x8
    // Offset: 0x38
    HMUI::ViewController* parentViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _childViewController
    // Size: 0x8
    // Offset: 0x40
    HMUI::ViewController* childViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.Screen _screen
    // Size: 0x8
    // Offset: 0x48
    HMUI::Screen* screen;
    // Field size check
    static_assert(sizeof(HMUI::Screen*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.CanvasGroup _canvasGroup
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::CanvasGroup* canvasGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // private System.Boolean _wasActivatedBefore
    // Size: 0x1
    // Offset: 0x60
    bool wasActivatedBefore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isActivated
    // Size: 0x1
    // Offset: 0x61
    bool isActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInTransition
    // Size: 0x1
    // Offset: 0x62
    bool isInTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInTransition and: graphicRaycaster
    char __padding11[0x5] = {};
    // private UnityEngine.EventSystems.BaseRaycaster _graphicRaycaster
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::EventSystems::BaseRaycaster* graphicRaycaster;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::BaseRaycaster*) == 0x8);
    // Creating value type constructor for type: ViewController
    ViewController(HMUI::ViewController::DidActivateDelegate* didActivateEvent_ = {}, HMUI::ViewController::DidDeactivateDelegate* didDeactivateEvent_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}, HMUI::ContainerViewController* containerViewController_ = {}, HMUI::ViewController* parentViewController_ = {}, HMUI::ViewController* childViewController_ = {}, HMUI::Screen* screen_ = {}, UnityEngine::RectTransform* rectTransform_ = {}, UnityEngine::CanvasGroup* canvasGroup_ = {}, bool wasActivatedBefore_ = {}, bool isActivated_ = {}, bool isInTransition_ = {}, UnityEngine::EventSystems::BaseRaycaster* graphicRaycaster_ = {}) noexcept : didActivateEvent{didActivateEvent_}, didDeactivateEvent{didDeactivateEvent_}, buttonBinder{buttonBinder_}, containerViewController{containerViewController_}, parentViewController{parentViewController_}, childViewController{childViewController_}, screen{screen_}, rectTransform{rectTransform_}, canvasGroup{canvasGroup_}, wasActivatedBefore{wasActivatedBefore_}, isActivated{isActivated_}, isInTransition{isInTransition_}, graphicRaycaster{graphicRaycaster_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kTransitionDuration
    static constexpr const float kTransitionDuration = 0.4;
    // Get static field: static public System.Single kTransitionDuration
    static float _get_kTransitionDuration();
    // Set static field: static public System.Single kTransitionDuration
    static void _set_kTransitionDuration(float value);
    // static field const value: static private System.Single kTransitionMoveOffset
    static constexpr const float kTransitionMoveOffset = 2;
    // Get static field: static private System.Single kTransitionMoveOffset
    static float _get_kTransitionMoveOffset();
    // Set static field: static private System.Single kTransitionMoveOffset
    static void _set_kTransitionMoveOffset(float value);
    // Get instance field reference: private HMUI.ViewController/DidActivateDelegate didActivateEvent
    HMUI::ViewController::DidActivateDelegate*& dyn_didActivateEvent();
    // Get instance field reference: private HMUI.ViewController/DidDeactivateDelegate didDeactivateEvent
    HMUI::ViewController::DidDeactivateDelegate*& dyn_didDeactivateEvent();
    // Get instance field reference: private HMUI.ButtonBinder <buttonBinder>k__BackingField
    HMUI::ButtonBinder*& dyn_$buttonBinder$k__BackingField();
    // Get instance field reference: private HMUI.ContainerViewController _containerViewController
    HMUI::ContainerViewController*& dyn__containerViewController();
    // Get instance field reference: private HMUI.ViewController _parentViewController
    HMUI::ViewController*& dyn__parentViewController();
    // Get instance field reference: private HMUI.ViewController _childViewController
    HMUI::ViewController*& dyn__childViewController();
    // Get instance field reference: private HMUI.Screen _screen
    HMUI::Screen*& dyn__screen();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private UnityEngine.CanvasGroup _canvasGroup
    UnityEngine::CanvasGroup*& dyn__canvasGroup();
    // Get instance field reference: private System.Boolean _wasActivatedBefore
    bool& dyn__wasActivatedBefore();
    // Get instance field reference: private System.Boolean _isActivated
    bool& dyn__isActivated();
    // Get instance field reference: private System.Boolean _isInTransition
    bool& dyn__isInTransition();
    // Get instance field reference: private UnityEngine.EventSystems.BaseRaycaster _graphicRaycaster
    UnityEngine::EventSystems::BaseRaycaster*& dyn__graphicRaycaster();
    // public HMUI.ContainerViewController get_containerViewController()
    // Offset: 0x1422CC4
    HMUI::ContainerViewController* get_containerViewController();
    // public HMUI.Screen get_screen()
    // Offset: 0x1422CCC
    HMUI::Screen* get_screen();
    // public HMUI.ViewController get_parentViewController()
    // Offset: 0x1422CD4
    HMUI::ViewController* get_parentViewController();
    // public HMUI.ViewController get_childViewController()
    // Offset: 0x1422CDC
    HMUI::ViewController* get_childViewController();
    // public System.Boolean get_isInViewControllerHierarchy()
    // Offset: 0x1422CE4
    bool get_isInViewControllerHierarchy();
    // public System.Boolean get_isActivated()
    // Offset: 0x1422D54
    bool get_isActivated();
    // public System.Boolean get_wasActivatedBefore()
    // Offset: 0x1422D5C
    bool get_wasActivatedBefore();
    // public System.Boolean get_isInTransition()
    // Offset: 0x1422D64
    bool get_isInTransition();
    // public System.Void set_isInTransition(System.Boolean value)
    // Offset: 0x1422D6C
    void set_isInTransition(bool value);
    // public System.Boolean get_enableUserInteractions()
    // Offset: 0x1422D78
    bool get_enableUserInteractions();
    // public System.Void set_enableUserInteractions(System.Boolean value)
    // Offset: 0x141D58C
    void set_enableUserInteractions(bool value);
    // public System.Void add_didActivateEvent(HMUI.ViewController/DidActivateDelegate value)
    // Offset: 0x1422E30
    void add_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value);
    // public System.Void remove_didActivateEvent(HMUI.ViewController/DidActivateDelegate value)
    // Offset: 0x1422ED4
    void remove_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value);
    // public System.Void add_didDeactivateEvent(HMUI.ViewController/DidDeactivateDelegate value)
    // Offset: 0x14122AC
    void add_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value);
    // public System.Void remove_didDeactivateEvent(HMUI.ViewController/DidDeactivateDelegate value)
    // Offset: 0x1411D34
    void remove_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value);
    // protected HMUI.ButtonBinder get_buttonBinder()
    // Offset: 0x1422F78
    HMUI::ButtonBinder* get_buttonBinder();
    // private System.Void set_buttonBinder(HMUI.ButtonBinder value)
    // Offset: 0x1422F80
    void set_buttonBinder(HMUI::ButtonBinder* value);
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x14131F4
    UnityEngine::RectTransform* get_rectTransform();
    // public UnityEngine.CanvasGroup get_canvasGroup()
    // Offset: 0x14155B0
    UnityEngine::CanvasGroup* get_canvasGroup();
    // private UnityEngine.EventSystems.BaseRaycaster get_graphicRaycaster()
    // Offset: 0x1422D98
    UnityEngine::EventSystems::BaseRaycaster* get_graphicRaycaster();
    // protected System.Void OnDestroy()
    // Offset: 0x1422F88
    void OnDestroy();
    // protected System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1422FE0
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1422FE4
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // public System.Void __Init(HMUI.Screen screen, HMUI.ViewController parentViewController, HMUI.ContainerViewController containerViewController)
    // Offset: 0x1422FE8
    void __Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController);
    // public System.Void __ResetViewController()
    // Offset: 0x1423104
    void __ResetViewController();
    // public System.Void __PresentViewController(HMUI.ViewController viewController, System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x14231D4
    void __PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // private System.Collections.IEnumerator PresentViewControllerCoroutine(HMUI.ViewController newViewController, System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x1423204
    System::Collections::IEnumerator* PresentViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // public System.Void __ReplaceViewController(HMUI.ViewController viewController, System.Action finishedCallback, HMUI.ViewController/AnimationType animationType, HMUI.ViewController/AnimationDirection animationDirection)
    // Offset: 0x14232A4
    void __ReplaceViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection);
    // private System.Collections.IEnumerator ReplaceViewControllerCoroutine(HMUI.ViewController newViewController, System.Action finishedCallback, HMUI.ViewController/AnimationType animationType, HMUI.ViewController/AnimationDirection animationDirection)
    // Offset: 0x14232D0
    System::Collections::IEnumerator* ReplaceViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection);
    // public System.Void __DismissViewController(System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x1423368
    void __DismissViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // private System.Collections.IEnumerator DismissViewControllerCoroutine(System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x1423398
    System::Collections::IEnumerator* DismissViewControllerCoroutine(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // public System.Void __Activate(System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1423434
    void __Activate(bool addedToHierarchy, bool screenSystemEnabling);
    // public System.Void __Deactivate(System.Boolean removedFromHierarchy, System.Boolean deactivateGameObject, System.Boolean screenSystemDisabling)
    // Offset: 0x1423500
    void __Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling);
    // public System.Void DeactivateGameObject()
    // Offset: 0x14235B4
    void DeactivateGameObject();
    // public System.Boolean IsViewControllerInHierarchy(HMUI.ViewController viewController)
    // Offset: 0x1423610
    bool IsViewControllerInHierarchy(HMUI::ViewController* viewController);
    // static public System.Void Log(System.String message)
    // Offset: 0x1423798
    static void Log(::Il2CppString* message);
    // public System.Void .ctor()
    // Offset: 0x14219FC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ViewController*, creationType>()));
    }
  }; // HMUI.ViewController
  #pragma pack(pop)
  static check_size<sizeof(ViewController), 104 + sizeof(UnityEngine::EventSystems::BaseRaycaster*)> __HMUI_ViewControllerSizeCheck;
  static_assert(sizeof(ViewController) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::ViewController*, "HMUI", "ViewController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::ViewController::get_containerViewController
// Il2CppName: get_containerViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ContainerViewController* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_containerViewController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_containerViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_screen
// Il2CppName: get_screen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::Screen* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_screen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_screen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_parentViewController
// Il2CppName: get_parentViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_parentViewController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_parentViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_childViewController
// Il2CppName: get_childViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_childViewController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_childViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_isInViewControllerHierarchy
// Il2CppName: get_isInViewControllerHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)()>(&HMUI::ViewController::get_isInViewControllerHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_isInViewControllerHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_isActivated
// Il2CppName: get_isActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)()>(&HMUI::ViewController::get_isActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_isActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_wasActivatedBefore
// Il2CppName: get_wasActivatedBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)()>(&HMUI::ViewController::get_wasActivatedBefore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_wasActivatedBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_isInTransition
// Il2CppName: get_isInTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)()>(&HMUI::ViewController::get_isInTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_isInTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::set_isInTransition
// Il2CppName: set_isInTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool)>(&HMUI::ViewController::set_isInTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "set_isInTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_enableUserInteractions
// Il2CppName: get_enableUserInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)()>(&HMUI::ViewController::get_enableUserInteractions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_enableUserInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::set_enableUserInteractions
// Il2CppName: set_enableUserInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool)>(&HMUI::ViewController::set_enableUserInteractions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "set_enableUserInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::add_didActivateEvent
// Il2CppName: add_didActivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController::DidActivateDelegate*)>(&HMUI::ViewController::add_didActivateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/DidActivateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "add_didActivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::remove_didActivateEvent
// Il2CppName: remove_didActivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController::DidActivateDelegate*)>(&HMUI::ViewController::remove_didActivateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/DidActivateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "remove_didActivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::add_didDeactivateEvent
// Il2CppName: add_didDeactivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController::DidDeactivateDelegate*)>(&HMUI::ViewController::add_didDeactivateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/DidDeactivateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "add_didDeactivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::remove_didDeactivateEvent
// Il2CppName: remove_didDeactivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController::DidDeactivateDelegate*)>(&HMUI::ViewController::remove_didDeactivateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/DidDeactivateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "remove_didDeactivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_buttonBinder
// Il2CppName: get_buttonBinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ButtonBinder* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_buttonBinder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_buttonBinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::set_buttonBinder
// Il2CppName: set_buttonBinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ButtonBinder*)>(&HMUI::ViewController::set_buttonBinder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ButtonBinder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "set_buttonBinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_rectTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_canvasGroup
// Il2CppName: get_canvasGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::CanvasGroup* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_canvasGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_canvasGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::get_graphicRaycaster
// Il2CppName: get_graphicRaycaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::BaseRaycaster* (HMUI::ViewController::*)()>(&HMUI::ViewController::get_graphicRaycaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "get_graphicRaycaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)()>(&HMUI::ViewController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool, bool, bool)>(&HMUI::ViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool, bool)>(&HMUI::ViewController::DidDeactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__Init
// Il2CppName: __Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::Screen*, HMUI::ViewController*, HMUI::ContainerViewController*)>(&HMUI::ViewController::__Init)> {
  static const MethodInfo* get() {
    static auto* screen = &::il2cpp_utils::GetClassFromName("HMUI", "Screen")->byval_arg;
    static auto* parentViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* containerViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ContainerViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screen, parentViewController, containerViewController});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__ResetViewController
// Il2CppName: __ResetViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)()>(&HMUI::ViewController::__ResetViewController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__ResetViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__PresentViewController
// Il2CppName: __PresentViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::ViewController::__PresentViewController)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__PresentViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::PresentViewControllerCoroutine
// Il2CppName: PresentViewControllerCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (HMUI::ViewController::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::ViewController::PresentViewControllerCoroutine)> {
  static const MethodInfo* get() {
    static auto* newViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "PresentViewControllerCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newViewController, finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__ReplaceViewController
// Il2CppName: __ReplaceViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationType, HMUI::ViewController::AnimationDirection)>(&HMUI::ViewController::__ReplaceViewController)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__ReplaceViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, finishedCallback, animationType, animationDirection});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::ReplaceViewControllerCoroutine
// Il2CppName: ReplaceViewControllerCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (HMUI::ViewController::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationType, HMUI::ViewController::AnimationDirection)>(&HMUI::ViewController::ReplaceViewControllerCoroutine)> {
  static const MethodInfo* get() {
    static auto* newViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "ReplaceViewControllerCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newViewController, finishedCallback, animationType, animationDirection});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__DismissViewController
// Il2CppName: __DismissViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::ViewController::__DismissViewController)> {
  static const MethodInfo* get() {
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__DismissViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::DismissViewControllerCoroutine
// Il2CppName: DismissViewControllerCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (HMUI::ViewController::*)(System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::ViewController::DismissViewControllerCoroutine)> {
  static const MethodInfo* get() {
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "DismissViewControllerCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__Activate
// Il2CppName: __Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool, bool)>(&HMUI::ViewController::__Activate)> {
  static const MethodInfo* get() {
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::__Deactivate
// Il2CppName: __Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)(bool, bool, bool)>(&HMUI::ViewController::__Deactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* deactivateGameObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "__Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, deactivateGameObject, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::DeactivateGameObject
// Il2CppName: DeactivateGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ViewController::*)()>(&HMUI::ViewController::DeactivateGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "DeactivateGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::IsViewControllerInHierarchy
// Il2CppName: IsViewControllerInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ViewController::*)(HMUI::ViewController*)>(&HMUI::ViewController::IsViewControllerInHierarchy)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "IsViewControllerInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HMUI::ViewController::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ViewController*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: HMUI::ViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
