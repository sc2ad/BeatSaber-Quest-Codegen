// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
  // Forward declaring type: FontStyles
  struct FontStyles;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: KeyCode
  struct KeyCode;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: UIKeyboard
  class UIKeyboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::UIKeyboard);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::UIKeyboard*, "HMUI", "UIKeyboard");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.UIKeyboard
  // [TokenAttribute] Offset: FFFFFFFF
  class UIKeyboard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HMUI::UIKeyboard::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    public:
    // private UnityEngine.UI.Button _okButton
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Button* okButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private System.Action okButtonWasPressedEvent
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* okButtonWasPressedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<System.Char> keyWasPressedEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::Il2CppChar>* keyWasPressedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Il2CppChar>*) == 0x8);
    // private System.Action deleteButtonWasPressedEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* deleteButtonWasPressedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x38
    ::HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(::HMUI::ButtonBinder*) == 0x8);
    // private System.Boolean _shouldCapitalize
    // Size: 0x1
    // Offset: 0x40
    bool shouldCapitalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldCapitalize and: letterBtnTexts
    char __padding5[0x7] = {};
    // private System.Collections.Generic.List`1<TMPro.TextMeshProUGUI> _letterBtnTexts
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>* letterBtnTexts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UI.Button _okButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__okButton();
    // Get instance field reference: private System.Action okButtonWasPressedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_okButtonWasPressedEvent();
    // Get instance field reference: private System.Action`1<System.Char> keyWasPressedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppChar>*& dyn_keyWasPressedEvent();
    // Get instance field reference: private System.Action deleteButtonWasPressedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_deleteButtonWasPressedEvent();
    // Get instance field reference: private readonly HMUI.ButtonBinder _buttonBinder
    [[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& dyn__buttonBinder();
    // Get instance field reference: private System.Boolean _shouldCapitalize
    [[deprecated("Use field access instead!")]] bool& dyn__shouldCapitalize();
    // Get instance field reference: private System.Collections.Generic.List`1<TMPro.TextMeshProUGUI> _letterBtnTexts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>*& dyn__letterBtnTexts();
    // public System.Void add_okButtonWasPressedEvent(System.Action value)
    // Offset: 0x2AFDCF0
    void add_okButtonWasPressedEvent(::System::Action* value);
    // public System.Void remove_okButtonWasPressedEvent(System.Action value)
    // Offset: 0x2AFDD94
    void remove_okButtonWasPressedEvent(::System::Action* value);
    // public System.Void add_keyWasPressedEvent(System.Action`1<System.Char> value)
    // Offset: 0x2AFDE38
    void add_keyWasPressedEvent(::System::Action_1<::Il2CppChar>* value);
    // public System.Void remove_keyWasPressedEvent(System.Action`1<System.Char> value)
    // Offset: 0x2AFDEDC
    void remove_keyWasPressedEvent(::System::Action_1<::Il2CppChar>* value);
    // public System.Void add_deleteButtonWasPressedEvent(System.Action value)
    // Offset: 0x2AFDF80
    void add_deleteButtonWasPressedEvent(::System::Action* value);
    // public System.Void remove_deleteButtonWasPressedEvent(System.Action value)
    // Offset: 0x2AFE024
    void remove_deleteButtonWasPressedEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x2AFE5AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIKeyboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIKeyboard*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x2AFE0C8
    void Awake();
    // private System.Void HandleKeyPress(UnityEngine.KeyCode keyCode)
    // Offset: 0x2AFE33C
    void HandleKeyPress(::UnityEngine::KeyCode keyCode);
    // private System.Void HandleCapsLockPressed()
    // Offset: 0x2AFE438
    void HandleCapsLockPressed();
    // private System.Void SetKeyboardCapitalization(System.Boolean capitalize)
    // Offset: 0x2AFE450
    void SetKeyboardCapitalization(bool capitalize);
    // private System.Boolean HasFontStyle(TMPro.TextMeshProUGUI text, TMPro.FontStyles style)
    // Offset: 0x2AFE580
    bool HasFontStyle(::TMPro::TextMeshProUGUI* text, ::TMPro::FontStyles style);
    // private System.Void OnEnable()
    // Offset: 0x2AFE5A0
    void OnEnable();
    // private System.Void <Awake>b__13_0()
    // Offset: 0x2AFE614
    void $Awake$b__13_0();
    // private System.Void <Awake>b__13_1()
    // Offset: 0x2AFE628
    void $Awake$b__13_1();
  }; // HMUI.UIKeyboard
  #pragma pack(pop)
  static check_size<sizeof(UIKeyboard), 72 + sizeof(::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>*)> __HMUI_UIKeyboardSizeCheck;
  static_assert(sizeof(UIKeyboard) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::UIKeyboard::add_okButtonWasPressedEvent
// Il2CppName: add_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action*)>(&HMUI::UIKeyboard::add_okButtonWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::remove_okButtonWasPressedEvent
// Il2CppName: remove_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action*)>(&HMUI::UIKeyboard::remove_okButtonWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::add_keyWasPressedEvent
// Il2CppName: add_keyWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action_1<::Il2CppChar>*)>(&HMUI::UIKeyboard::add_keyWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "add_keyWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::remove_keyWasPressedEvent
// Il2CppName: remove_keyWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action_1<::Il2CppChar>*)>(&HMUI::UIKeyboard::remove_keyWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "remove_keyWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::add_deleteButtonWasPressedEvent
// Il2CppName: add_deleteButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action*)>(&HMUI::UIKeyboard::add_deleteButtonWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "add_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::remove_deleteButtonWasPressedEvent
// Il2CppName: remove_deleteButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::System::Action*)>(&HMUI::UIKeyboard::remove_deleteButtonWasPressedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "remove_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::UIKeyboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)()>(&HMUI::UIKeyboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::HandleKeyPress
// Il2CppName: HandleKeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(::UnityEngine::KeyCode)>(&HMUI::UIKeyboard::HandleKeyPress)> {
  static const MethodInfo* get() {
    static auto* keyCode = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "HandleKeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyCode});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::HandleCapsLockPressed
// Il2CppName: HandleCapsLockPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)()>(&HMUI::UIKeyboard::HandleCapsLockPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "HandleCapsLockPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::SetKeyboardCapitalization
// Il2CppName: SetKeyboardCapitalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)(bool)>(&HMUI::UIKeyboard::SetKeyboardCapitalization)> {
  static const MethodInfo* get() {
    static auto* capitalize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "SetKeyboardCapitalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capitalize});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::HasFontStyle
// Il2CppName: HasFontStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::UIKeyboard::*)(::TMPro::TextMeshProUGUI*, ::TMPro::FontStyles)>(&HMUI::UIKeyboard::HasFontStyle)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("TMPro", "TextMeshProUGUI")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("TMPro", "FontStyles")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "HasFontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, style});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)()>(&HMUI::UIKeyboard::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::$Awake$b__13_0
// Il2CppName: <Awake>b__13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)()>(&HMUI::UIKeyboard::$Awake$b__13_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "<Awake>b__13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboard::$Awake$b__13_1
// Il2CppName: <Awake>b__13_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboard::*)()>(&HMUI::UIKeyboard::$Awake$b__13_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboard*), "<Awake>b__13_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
