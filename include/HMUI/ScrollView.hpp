// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: VerticalScrollIndicator
  class VerticalScrollIndicator;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: EventSystemListener
  class EventSystemListener;
  // Skipping declaration: ScrollDirection because it is already included!
  // Forward declaring type: ItemForFocussedScrolling
  class ItemForFocussedScrolling;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollView
  class ScrollView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::ScrollView);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ScrollView*, "HMUI", "ScrollView");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ScrollView
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 10C8E6C
  class ScrollView : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HMUI::ScrollView::ScrollType
    struct ScrollType;
    // Nested type: ::HMUI::ScrollView::ScrollDirection
    struct ScrollDirection;
    // Nested type: ::HMUI::ScrollView::ScrollViewDirection
    struct ScrollViewDirection;
    // Nested type: ::HMUI::ScrollView::$$c
    class $$c;
    // Nested type: ::HMUI::ScrollView::$$c__DisplayClass50_0
    class $$c__DisplayClass50_0;
    // Nested type: ::HMUI::ScrollView::$$c__DisplayClass51_0
    class $$c__DisplayClass51_0;
    // Nested type: ::HMUI::ScrollView::$$c__DisplayClass56_0
    class $$c__DisplayClass56_0;
    // Nested type: ::HMUI::ScrollView::$$c__DisplayClass56_1
    class $$c__DisplayClass56_1;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ScrollView/HMUI.ScrollType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScrollType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScrollType
      constexpr ScrollType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollType PageSize
      static constexpr const int PageSize = 0;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollType PageSize
      static ::HMUI::ScrollView::ScrollType _get_PageSize();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollType PageSize
      static void _set_PageSize(::HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollType FixedCellSize
      static constexpr const int FixedCellSize = 1;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollType FixedCellSize
      static ::HMUI::ScrollView::ScrollType _get_FixedCellSize();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollType FixedCellSize
      static void _set_FixedCellSize(::HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollType FocusItems
      static constexpr const int FocusItems = 2;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollType FocusItems
      static ::HMUI::ScrollView::ScrollType _get_FocusItems();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollType FocusItems
      static void _set_FocusItems(::HMUI::ScrollView::ScrollType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.ScrollView/HMUI.ScrollType
    #pragma pack(pop)
    static check_size<sizeof(ScrollView::ScrollType), 0 + sizeof(int)> __HMUI_ScrollView_ScrollTypeSizeCheck;
    static_assert(sizeof(ScrollView::ScrollType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ScrollView/HMUI.ScrollDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScrollDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScrollDirection
      constexpr ScrollDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollDirection None
      static constexpr const int None = 0;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection None
      static ::HMUI::ScrollView::ScrollDirection _get_None();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection None
      static void _set_None(::HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollDirection Up
      static constexpr const int Up = 1;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Up
      static ::HMUI::ScrollView::ScrollDirection _get_Up();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Up
      static void _set_Up(::HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollDirection Down
      static constexpr const int Down = 2;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Down
      static ::HMUI::ScrollView::ScrollDirection _get_Down();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Down
      static void _set_Down(::HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollDirection Left
      static constexpr const int Left = 3;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Left
      static ::HMUI::ScrollView::ScrollDirection _get_Left();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Left
      static void _set_Left(::HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollDirection Right
      static constexpr const int Right = 4;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Right
      static ::HMUI::ScrollView::ScrollDirection _get_Right();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Right
      static void _set_Right(::HMUI::ScrollView::ScrollDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.ScrollView/HMUI.ScrollDirection
    #pragma pack(pop)
    static check_size<sizeof(ScrollView::ScrollDirection), 0 + sizeof(int)> __HMUI_ScrollView_ScrollDirectionSizeCheck;
    static_assert(sizeof(ScrollView::ScrollDirection) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ScrollView/HMUI.ScrollViewDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScrollViewDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScrollViewDirection
      constexpr ScrollViewDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollViewDirection Vertical
      static constexpr const int Vertical = 0;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Vertical
      static ::HMUI::ScrollView::ScrollViewDirection _get_Vertical();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Vertical
      static void _set_Vertical(::HMUI::ScrollView::ScrollViewDirection value);
      // static field const value: static public HMUI.ScrollView/HMUI.ScrollViewDirection Horizontal
      static constexpr const int Horizontal = 1;
      // Get static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Horizontal
      static ::HMUI::ScrollView::ScrollViewDirection _get_Horizontal();
      // Set static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Horizontal
      static void _set_Horizontal(::HMUI::ScrollView::ScrollViewDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.ScrollView/HMUI.ScrollViewDirection
    #pragma pack(pop)
    static check_size<sizeof(ScrollView::ScrollViewDirection), 0 + sizeof(int)> __HMUI_ScrollView_ScrollViewDirectionSizeCheck;
    static_assert(sizeof(ScrollView::ScrollViewDirection) == 0x4);
    public:
    // private UnityEngine.RectTransform _viewport
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* viewport;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _contentRectTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* contentRectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // [SpaceAttribute] Offset: 0x10CA9F4
    // private HMUI.ScrollView/HMUI.ScrollViewDirection _scrollViewDirection
    // Size: 0x4
    // Offset: 0x28
    ::HMUI::ScrollView::ScrollViewDirection scrollViewDirection;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView::ScrollViewDirection) == 0x4);
    // Padding between fields: scrollViewDirection and: pageUpButton
    char __padding2[0x4] = {};
    // [SpaceAttribute] Offset: 0x10CAA2C
    // [NullAllowed] Offset: 0x10CAA2C
    // private UnityEngine.UI.Button _pageUpButton
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* pageUpButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // [NullAllowed] Offset: 0x10CAA74
    // private UnityEngine.UI.Button _pageDownButton
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Button* pageDownButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // [NullAllowed] Offset: 0x10CAAAC
    // private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    // Size: 0x8
    // Offset: 0x40
    ::HMUI::VerticalScrollIndicator* verticalScrollIndicator;
    // Field size check
    static_assert(sizeof(::HMUI::VerticalScrollIndicator*) == 0x8);
    // [SpaceAttribute] Offset: 0x10CAAE4
    // private System.Single _smooth
    // Size: 0x4
    // Offset: 0x48
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _joystickScrollSpeed
    // Size: 0x4
    // Offset: 0x4C
    float joystickScrollSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _joystickQuickSnapMaxTime
    // Size: 0x4
    // Offset: 0x50
    float joystickQuickSnapMaxTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x10CAB3C
    // public HMUI.ScrollView/HMUI.ScrollType _scrollType
    // Size: 0x4
    // Offset: 0x54
    ::HMUI::ScrollView::ScrollType scrollType;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView::ScrollType) == 0x4);
    // [SpaceAttribute] Offset: 0x10CAB4C
    // [DrawIfAttribute] Offset: 0x10CAB4C
    // public System.Single _fixedCellSize
    // Size: 0x4
    // Offset: 0x58
    float fixedCellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0x10CABF4
    // public System.Single _scrollItemRelativeThresholdPosition
    // Size: 0x4
    // Offset: 0x5C
    float scrollItemRelativeThresholdPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0x10CAC8C
    // public System.Single _pageStepNormalizedSize
    // Size: 0x4
    // Offset: 0x60
    float pageStepNormalizedSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: pageStepNormalizedSize and: platformHelper
    char __padding12[0x4] = {};
    // [InjectAttribute] Offset: 0x10CAD3C
    // private readonly IVRPlatformHelper _platformHelper
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::IVRPlatformHelper* platformHelper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private System.Action`1<System.Single> scrollPositionChangedEvent
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<float>* scrollPositionChangedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x78
    ::HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(::HMUI::ButtonBinder*) == 0x8);
    // private System.Single _destinationPos
    // Size: 0x4
    // Offset: 0x80
    float destinationPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: destinationPos and: scrollFocusPositions
    char __padding16[0x4] = {};
    // private System.Single[] _scrollFocusPositions
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<float> scrollFocusPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private HMUI.EventSystemListener _eventSystemListener
    // Size: 0x8
    // Offset: 0x90
    ::HMUI::EventSystemListener* eventSystemListener;
    // Field size check
    static_assert(sizeof(::HMUI::EventSystemListener*) == 0x8);
    // private HMUI.ScrollView/HMUI.ScrollDirection _lastJoystickScrollDirection
    // Size: 0x4
    // Offset: 0x98
    ::HMUI::ScrollView::ScrollDirection lastJoystickScrollDirection;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView::ScrollDirection) == 0x4);
    // private System.Single _joystickScrollStartTime
    // Size: 0x4
    // Offset: 0x9C
    float joystickScrollStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform _viewport
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__viewport();
    // Get instance field reference: private UnityEngine.RectTransform _contentRectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__contentRectTransform();
    // Get instance field reference: private HMUI.ScrollView/HMUI.ScrollViewDirection _scrollViewDirection
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView::ScrollViewDirection& dyn__scrollViewDirection();
    // Get instance field reference: private UnityEngine.UI.Button _pageUpButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__pageUpButton();
    // Get instance field reference: private UnityEngine.UI.Button _pageDownButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__pageDownButton();
    // Get instance field reference: private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    [[deprecated("Use field access instead!")]] ::HMUI::VerticalScrollIndicator*& dyn__verticalScrollIndicator();
    // Get instance field reference: private System.Single _smooth
    [[deprecated("Use field access instead!")]] float& dyn__smooth();
    // Get instance field reference: private System.Single _joystickScrollSpeed
    [[deprecated("Use field access instead!")]] float& dyn__joystickScrollSpeed();
    // Get instance field reference: private System.Single _joystickQuickSnapMaxTime
    [[deprecated("Use field access instead!")]] float& dyn__joystickQuickSnapMaxTime();
    // Get instance field reference: public HMUI.ScrollView/HMUI.ScrollType _scrollType
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView::ScrollType& dyn__scrollType();
    // Get instance field reference: public System.Single _fixedCellSize
    [[deprecated("Use field access instead!")]] float& dyn__fixedCellSize();
    // Get instance field reference: public System.Single _scrollItemRelativeThresholdPosition
    [[deprecated("Use field access instead!")]] float& dyn__scrollItemRelativeThresholdPosition();
    // Get instance field reference: public System.Single _pageStepNormalizedSize
    [[deprecated("Use field access instead!")]] float& dyn__pageStepNormalizedSize();
    // Get instance field reference: private readonly IVRPlatformHelper _platformHelper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& dyn__platformHelper();
    // Get instance field reference: private System.Action`1<System.Single> scrollPositionChangedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_scrollPositionChangedEvent();
    // Get instance field reference: private HMUI.ButtonBinder _buttonBinder
    [[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& dyn__buttonBinder();
    // Get instance field reference: private System.Single _destinationPos
    [[deprecated("Use field access instead!")]] float& dyn__destinationPos();
    // Get instance field reference: private System.Single[] _scrollFocusPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__scrollFocusPositions();
    // Get instance field reference: private HMUI.EventSystemListener _eventSystemListener
    [[deprecated("Use field access instead!")]] ::HMUI::EventSystemListener*& dyn__eventSystemListener();
    // Get instance field reference: private HMUI.ScrollView/HMUI.ScrollDirection _lastJoystickScrollDirection
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView::ScrollDirection& dyn__lastJoystickScrollDirection();
    // Get instance field reference: private System.Single _joystickScrollStartTime
    [[deprecated("Use field access instead!")]] float& dyn__joystickScrollStartTime();
    // public UnityEngine.RectTransform get_viewportTransform()
    // Offset: 0x16C9024
    ::UnityEngine::RectTransform* get_viewportTransform();
    // public UnityEngine.RectTransform get_contentTransform()
    // Offset: 0x16C902C
    ::UnityEngine::RectTransform* get_contentTransform();
    // public System.Single get_position()
    // Offset: 0x16C9034
    float get_position();
    // public System.Single get_scrollableSize()
    // Offset: 0x16C9070
    float get_scrollableSize();
    // private System.Single get_scrollPageSize()
    // Offset: 0x16C915C
    float get_scrollPageSize();
    // private System.Single get_contentSize()
    // Offset: 0x16C90FC
    float get_contentSize();
    // public System.Void add_scrollPositionChangedEvent(System.Action`1<System.Single> value)
    // Offset: 0x16C8EDC
    void add_scrollPositionChangedEvent(::System::Action_1<float>* value);
    // public System.Void remove_scrollPositionChangedEvent(System.Action`1<System.Single> value)
    // Offset: 0x16C8F80
    void remove_scrollPositionChangedEvent(::System::Action_1<float>* value);
    // public System.Void .ctor()
    // Offset: 0x16CAD68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScrollView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ScrollView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScrollView*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x16C91BC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x16C97F8
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x16C99D8
    void Update();
    // protected System.Void SetContentSize(System.Single contentSize)
    // Offset: 0x16C9C20
    void SetContentSize(float contentSize);
    // public System.Void UpdateContentSize()
    // Offset: 0x16C9624
    void UpdateContentSize();
    // public System.Void ScrollToEnd(System.Boolean animated)
    // Offset: 0x16C9E64
    void ScrollToEnd(bool animated);
    // public System.Void ScrollToWorldPosition(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Boolean animated)
    // Offset: 0x16C9EA8
    void ScrollToWorldPosition(::UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated);
    // public System.Void ScrollToWorldPositionIfOutsideArea(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Single relativeBoundaryStart, System.Single relativeBoundaryEnd, System.Boolean animated)
    // Offset: 0x16CA020
    void ScrollToWorldPositionIfOutsideArea(::UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated);
    // public System.Void ScrollTo(System.Single destinationPos, System.Boolean animated)
    // Offset: 0x16C8D9C
    void ScrollTo(float destinationPos, bool animated);
    // private UnityEngine.Vector2 WorldPositionToScrollViewPosition(UnityEngine.Vector3 worldPosition)
    // Offset: 0x16C9EF4
    ::UnityEngine::Vector2 WorldPositionToScrollViewPosition(::UnityEngine::Vector3 worldPosition);
    // private System.Void SetDestinationPos(System.Single value)
    // Offset: 0x16CA0D4
    void SetDestinationPos(float value);
    // private System.Void UpdateVerticalScrollIndicator(System.Single posY)
    // Offset: 0x16C9B5C
    void UpdateVerticalScrollIndicator(float posY);
    // private System.Void PageUpButtonPressed()
    // Offset: 0x16CA17C
    void PageUpButtonPressed();
    // private System.Void PageDownButtonPressed()
    // Offset: 0x16CA354
    void PageDownButtonPressed();
    // private System.Void RefreshButtons()
    // Offset: 0x16C96C4
    void RefreshButtons();
    // private System.Void HandlePointerDidEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x16CA55C
    void HandlePointerDidEnter(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandlePointerDidExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x16CA6FC
    void HandlePointerDidExit(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandleJoystickWasNotCenteredThisFrame(UnityEngine.Vector2 deltaPos)
    // Offset: 0x16CA89C
    void HandleJoystickWasNotCenteredThisFrame(::UnityEngine::Vector2 deltaPos);
    // private System.Void HandleJoystickWasCenteredThisFrame()
    // Offset: 0x16CA9F0
    void HandleJoystickWasCenteredThisFrame();
    // private HMUI.ScrollView/HMUI.ScrollDirection ResolveScrollDirection(UnityEngine.Vector2 deltaPos)
    // Offset: 0x16CA9A0
    ::HMUI::ScrollView::ScrollDirection ResolveScrollDirection(::UnityEngine::Vector2 deltaPos);
    // private System.Single <Awake>b__38_0(HMUI.ItemForFocussedScrolling item)
    // Offset: 0x16CAD98
    float $Awake$b__38_0(::HMUI::ItemForFocussedScrolling* item);
    // private System.Single <Awake>b__38_2(HMUI.ItemForFocussedScrolling item)
    // Offset: 0x16CADE0
    float $Awake$b__38_2(::HMUI::ItemForFocussedScrolling* item);
  }; // HMUI.ScrollView
  #pragma pack(pop)
  static check_size<sizeof(ScrollView), 156 + sizeof(float)> __HMUI_ScrollViewSizeCheck;
  static_assert(sizeof(ScrollView) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ScrollView::ScrollViewDirection, "HMUI", "ScrollView/ScrollViewDirection");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ScrollView::ScrollDirection, "HMUI", "ScrollView/ScrollDirection");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ScrollView::ScrollType, "HMUI", "ScrollView/ScrollType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::ScrollView::get_viewportTransform
// Il2CppName: get_viewportTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_viewportTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_viewportTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::get_contentTransform
// Il2CppName: get_contentTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_contentTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_contentTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::get_scrollableSize
// Il2CppName: get_scrollableSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_scrollableSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_scrollableSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::get_scrollPageSize
// Il2CppName: get_scrollPageSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_scrollPageSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_scrollPageSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::get_contentSize
// Il2CppName: get_contentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)()>(&HMUI::ScrollView::get_contentSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "get_contentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::add_scrollPositionChangedEvent
// Il2CppName: add_scrollPositionChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::System::Action_1<float>*)>(&HMUI::ScrollView::add_scrollPositionChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "add_scrollPositionChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::remove_scrollPositionChangedEvent
// Il2CppName: remove_scrollPositionChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::System::Action_1<float>*)>(&HMUI::ScrollView::remove_scrollPositionChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "remove_scrollPositionChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::ScrollView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::SetContentSize
// Il2CppName: SetContentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(float)>(&HMUI::ScrollView::SetContentSize)> {
  static const MethodInfo* get() {
    static auto* contentSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "SetContentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentSize});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::UpdateContentSize
// Il2CppName: UpdateContentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::UpdateContentSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "UpdateContentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::ScrollToEnd
// Il2CppName: ScrollToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(bool)>(&HMUI::ScrollView::ScrollToEnd)> {
  static const MethodInfo* get() {
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "ScrollToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animated});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::ScrollToWorldPosition
// Il2CppName: ScrollToWorldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::UnityEngine::Vector3, float, bool)>(&HMUI::ScrollView::ScrollToWorldPosition)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pageRelativePosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "ScrollToWorldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, pageRelativePosition, animated});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea
// Il2CppName: ScrollToWorldPositionIfOutsideArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::UnityEngine::Vector3, float, float, float, bool)>(&HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pageRelativePosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeBoundaryStart = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeBoundaryEnd = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "ScrollToWorldPositionIfOutsideArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, pageRelativePosition, relativeBoundaryStart, relativeBoundaryEnd, animated});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::ScrollTo
// Il2CppName: ScrollTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(float, bool)>(&HMUI::ScrollView::ScrollTo)> {
  static const MethodInfo* get() {
    static auto* destinationPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "ScrollTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destinationPos, animated});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::WorldPositionToScrollViewPosition
// Il2CppName: WorldPositionToScrollViewPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (HMUI::ScrollView::*)(::UnityEngine::Vector3)>(&HMUI::ScrollView::WorldPositionToScrollViewPosition)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "WorldPositionToScrollViewPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::SetDestinationPos
// Il2CppName: SetDestinationPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(float)>(&HMUI::ScrollView::SetDestinationPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "SetDestinationPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::UpdateVerticalScrollIndicator
// Il2CppName: UpdateVerticalScrollIndicator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(float)>(&HMUI::ScrollView::UpdateVerticalScrollIndicator)> {
  static const MethodInfo* get() {
    static auto* posY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "UpdateVerticalScrollIndicator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posY});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::PageUpButtonPressed
// Il2CppName: PageUpButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::PageUpButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "PageUpButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::PageDownButtonPressed
// Il2CppName: PageDownButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::PageDownButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "PageDownButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::RefreshButtons
// Il2CppName: RefreshButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::RefreshButtons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "RefreshButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::HandlePointerDidEnter
// Il2CppName: HandlePointerDidEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::UnityEngine::EventSystems::PointerEventData*)>(&HMUI::ScrollView::HandlePointerDidEnter)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "HandlePointerDidEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::HandlePointerDidExit
// Il2CppName: HandlePointerDidExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::UnityEngine::EventSystems::PointerEventData*)>(&HMUI::ScrollView::HandlePointerDidExit)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "HandlePointerDidExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame
// Il2CppName: HandleJoystickWasNotCenteredThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)(::UnityEngine::Vector2)>(&HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame)> {
  static const MethodInfo* get() {
    static auto* deltaPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "HandleJoystickWasNotCenteredThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaPos});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::HandleJoystickWasCenteredThisFrame
// Il2CppName: HandleJoystickWasCenteredThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollView::*)()>(&HMUI::ScrollView::HandleJoystickWasCenteredThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "HandleJoystickWasCenteredThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::ResolveScrollDirection
// Il2CppName: ResolveScrollDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::ScrollView::ScrollDirection (HMUI::ScrollView::*)(::UnityEngine::Vector2)>(&HMUI::ScrollView::ResolveScrollDirection)> {
  static const MethodInfo* get() {
    static auto* deltaPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "ResolveScrollDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaPos});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::$Awake$b__38_0
// Il2CppName: <Awake>b__38_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)(::HMUI::ItemForFocussedScrolling*)>(&HMUI::ScrollView::$Awake$b__38_0)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("HMUI", "ItemForFocussedScrolling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "<Awake>b__38_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: HMUI::ScrollView::$Awake$b__38_2
// Il2CppName: <Awake>b__38_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ScrollView::*)(::HMUI::ItemForFocussedScrolling*)>(&HMUI::ScrollView::$Awake$b__38_2)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("HMUI", "ItemForFocussedScrolling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollView*), "<Awake>b__38_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
