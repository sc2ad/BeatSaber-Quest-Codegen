// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollView
  class ScrollView;
  // Forward declaring type: TableCell
  class TableCell;
  // Skipping declaration: TableType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: TableView
  class TableView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::TableView);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::TableView*, "HMUI", "TableView");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0xA2
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.TableView
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 10C9070
  class TableView : public ::UnityEngine::MonoBehaviour/*, public ::HMUI::ITableCellOwner*/ {
    public:
    // Nested type: ::HMUI::TableView::TableType
    struct TableType;
    // Nested type: ::HMUI::TableView::ScrollPositionType
    struct ScrollPositionType;
    // Nested type: ::HMUI::TableView::CellsGroup
    class CellsGroup;
    // Nested type: ::HMUI::TableView::IDataSource
    class IDataSource;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.TableView/HMUI.TableType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TableType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TableType
      constexpr TableType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.TableView/HMUI.TableType Vertical
      static constexpr const int Vertical = 0;
      // Get static field: static public HMUI.TableView/HMUI.TableType Vertical
      static ::HMUI::TableView::TableType _get_Vertical();
      // Set static field: static public HMUI.TableView/HMUI.TableType Vertical
      static void _set_Vertical(::HMUI::TableView::TableType value);
      // static field const value: static public HMUI.TableView/HMUI.TableType Horizontal
      static constexpr const int Horizontal = 1;
      // Get static field: static public HMUI.TableView/HMUI.TableType Horizontal
      static ::HMUI::TableView::TableType _get_Horizontal();
      // Set static field: static public HMUI.TableView/HMUI.TableType Horizontal
      static void _set_Horizontal(::HMUI::TableView::TableType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.TableView/HMUI.TableType
    #pragma pack(pop)
    static check_size<sizeof(TableView::TableType), 0 + sizeof(int)> __HMUI_TableView_TableTypeSizeCheck;
    static_assert(sizeof(TableView::TableType) == 0x4);
    public:
    // private HMUI.ScrollView _scrollView
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::ScrollView* scrollView;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView*) == 0x8);
    // [SpaceAttribute] Offset: 0x10CB314
    // private System.Boolean _scrollToTopOnEnable
    // Size: 0x1
    // Offset: 0x20
    bool scrollToTopOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _alignToCenter
    // Size: 0x1
    // Offset: 0x21
    bool alignToCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alignToCenter and: tableType
    char __padding2[0x2] = {};
    // private HMUI.TableView/HMUI.TableType _tableType
    // Size: 0x4
    // Offset: 0x24
    ::HMUI::TableView::TableType tableType;
    // Field size check
    static_assert(sizeof(::HMUI::TableView::TableType) == 0x4);
    // [SpaceAttribute] Offset: 0x10CB36C
    // private HMUI.TableViewSelectionType _selectionType
    // Size: 0x4
    // Offset: 0x28
    ::HMUI::TableViewSelectionType selectionType;
    // Field size check
    static_assert(sizeof(::HMUI::TableViewSelectionType) == 0x4);
    // private System.Boolean _canSelectSelectedCell
    // Size: 0x1
    // Offset: 0x2C
    bool canSelectSelectedCell;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canSelectSelectedCell and: preallocatedCells
    char __padding5[0x3] = {};
    // [SpaceAttribute] Offset: 0x10CB3B4
    // [NullAllowed] Offset: 0x10CB3B4
    // private HMUI.TableView/HMUI.CellsGroup[] _preallocatedCells
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::HMUI::TableView::CellsGroup*> preallocatedCells;
    // Field size check
    static_assert(sizeof(::ArrayW<::HMUI::TableView::CellsGroup*>) == 0x8);
    // private System.Action`2<HMUI.TableView,System.Int32> didSelectCellWithIdxEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_2<::HMUI::TableView*, int>* didSelectCellWithIdxEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::HMUI::TableView*, int>*) == 0x8);
    // private System.Action`1<HMUI.TableView> didReloadDataEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<::HMUI::TableView*>* didReloadDataEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::HMUI::TableView*>*) == 0x8);
    // private System.Action`1<HMUI.TableView> didInsertCellsEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::HMUI::TableView*>* didInsertCellsEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::HMUI::TableView*>*) == 0x8);
    // private System.Action`1<HMUI.TableView> didDeleteCellsEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::HMUI::TableView*>* didDeleteCellsEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::HMUI::TableView*>*) == 0x8);
    // private System.Action`1<HMUI.TableView> didChangeRectSizeEvent
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_1<::HMUI::TableView*>* didChangeRectSizeEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::HMUI::TableView*>*) == 0x8);
    // private UnityEngine.RectTransform _contentTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::RectTransform* contentTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _viewportTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::RectTransform* viewportTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected HMUI.TableView/HMUI.IDataSource _dataSource
    // Size: 0x8
    // Offset: 0x70
    ::HMUI::TableView::IDataSource* dataSource;
    // Field size check
    static_assert(sizeof(::HMUI::TableView::IDataSource*) == 0x8);
    // private System.Int32 _numberOfCells
    // Size: 0x4
    // Offset: 0x78
    int numberOfCells;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _cellSize
    // Size: 0x4
    // Offset: 0x7C
    float cellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Collections.Generic.List`1<HMUI.TableCell> _visibleCells
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::HMUI::TableCell*>* visibleCells;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HMUI::TableCell*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<HMUI.TableCell>> _reusableCells
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::HMUI::TableCell*>*>* reusableCells;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::HMUI::TableCell*>*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> _selectedCellIdxs
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::HashSet_1<int>* selectedCellIdxs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Int32 _prevMinIdx
    // Size: 0x4
    // Offset: 0x98
    int prevMinIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevMaxIdx
    // Size: 0x4
    // Offset: 0x9C
    int prevMaxIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0xA0
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _refreshCellsOnEnable
    // Size: 0x1
    // Offset: 0xA1
    bool refreshCellsOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::HMUI::ITableCellOwner
    operator ::HMUI::ITableCellOwner() noexcept {
      return *reinterpret_cast<::HMUI::ITableCellOwner*>(this);
    }
    // Creating interface conversion operator: i_ITableCellOwner
    inline ::HMUI::ITableCellOwner* i_ITableCellOwner() noexcept {
      return reinterpret_cast<::HMUI::ITableCellOwner*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HMUI.ScrollView _scrollView
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView*& dyn__scrollView();
    // Get instance field reference: private System.Boolean _scrollToTopOnEnable
    [[deprecated("Use field access instead!")]] bool& dyn__scrollToTopOnEnable();
    // Get instance field reference: private System.Boolean _alignToCenter
    [[deprecated("Use field access instead!")]] bool& dyn__alignToCenter();
    // Get instance field reference: private HMUI.TableView/HMUI.TableType _tableType
    [[deprecated("Use field access instead!")]] ::HMUI::TableView::TableType& dyn__tableType();
    // Get instance field reference: private HMUI.TableViewSelectionType _selectionType
    [[deprecated("Use field access instead!")]] ::HMUI::TableViewSelectionType& dyn__selectionType();
    // Get instance field reference: private System.Boolean _canSelectSelectedCell
    [[deprecated("Use field access instead!")]] bool& dyn__canSelectSelectedCell();
    // Get instance field reference: private HMUI.TableView/HMUI.CellsGroup[] _preallocatedCells
    [[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::TableView::CellsGroup*>& dyn__preallocatedCells();
    // Get instance field reference: private System.Action`2<HMUI.TableView,System.Int32> didSelectCellWithIdxEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::TableView*, int>*& dyn_didSelectCellWithIdxEvent();
    // Get instance field reference: private System.Action`1<HMUI.TableView> didReloadDataEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::HMUI::TableView*>*& dyn_didReloadDataEvent();
    // Get instance field reference: private System.Action`1<HMUI.TableView> didInsertCellsEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::HMUI::TableView*>*& dyn_didInsertCellsEvent();
    // Get instance field reference: private System.Action`1<HMUI.TableView> didDeleteCellsEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::HMUI::TableView*>*& dyn_didDeleteCellsEvent();
    // Get instance field reference: private System.Action`1<HMUI.TableView> didChangeRectSizeEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::HMUI::TableView*>*& dyn_didChangeRectSizeEvent();
    // Get instance field reference: private UnityEngine.RectTransform _contentTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__contentTransform();
    // Get instance field reference: private UnityEngine.RectTransform _viewportTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__viewportTransform();
    // Get instance field reference: protected HMUI.TableView/HMUI.IDataSource _dataSource
    [[deprecated("Use field access instead!")]] ::HMUI::TableView::IDataSource*& dyn__dataSource();
    // Get instance field reference: private System.Int32 _numberOfCells
    [[deprecated("Use field access instead!")]] int& dyn__numberOfCells();
    // Get instance field reference: private System.Single _cellSize
    [[deprecated("Use field access instead!")]] float& dyn__cellSize();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<HMUI.TableCell> _visibleCells
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HMUI::TableCell*>*& dyn__visibleCells();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<HMUI.TableCell>> _reusableCells
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::HMUI::TableCell*>*>*& dyn__reusableCells();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> _selectedCellIdxs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn__selectedCellIdxs();
    // Get instance field reference: private System.Int32 _prevMinIdx
    [[deprecated("Use field access instead!")]] int& dyn__prevMinIdx();
    // Get instance field reference: private System.Int32 _prevMaxIdx
    [[deprecated("Use field access instead!")]] int& dyn__prevMaxIdx();
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private System.Boolean _refreshCellsOnEnable
    [[deprecated("Use field access instead!")]] bool& dyn__refreshCellsOnEnable();
    // public HMUI.TableViewSelectionType get_selectionType()
    // Offset: 0x16D0E40
    ::HMUI::TableViewSelectionType get_selectionType();
    // public System.Void set_selectionType(HMUI.TableViewSelectionType value)
    // Offset: 0x16D0E48
    void set_selectionType(::HMUI::TableViewSelectionType value);
    // public System.Boolean get_canSelectSelectedCell()
    // Offset: 0x16D0E50
    bool get_canSelectSelectedCell();
    // public HMUI.TableView/HMUI.IDataSource get_dataSource()
    // Offset: 0x16D14C0
    ::HMUI::TableView::IDataSource* get_dataSource();
    // public System.Collections.Generic.IEnumerable`1<HMUI.TableCell> get_visibleCells()
    // Offset: 0x16D14E0
    ::System::Collections::Generic::IEnumerable_1<::HMUI::TableCell*>* get_visibleCells();
    // public UnityEngine.RectTransform get_viewportTransform()
    // Offset: 0x16D14E8
    ::UnityEngine::RectTransform* get_viewportTransform();
    // public UnityEngine.RectTransform get_contentTransform()
    // Offset: 0x16D14F0
    ::UnityEngine::RectTransform* get_contentTransform();
    // public System.Int32 get_numberOfCells()
    // Offset: 0x16D14F8
    int get_numberOfCells();
    // public System.Single get_cellSize()
    // Offset: 0x16D1500
    float get_cellSize();
    // public HMUI.TableView/HMUI.TableType get_tableType()
    // Offset: 0x16D1508
    ::HMUI::TableView::TableType get_tableType();
    // protected HMUI.ScrollView get_scrollView()
    // Offset: 0x16D1510
    ::HMUI::ScrollView* get_scrollView();
    // public System.Void add_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x16D0E58
    void add_didSelectCellWithIdxEvent(::System::Action_2<::HMUI::TableView*, int>* value);
    // public System.Void remove_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x16D0EFC
    void remove_didSelectCellWithIdxEvent(::System::Action_2<::HMUI::TableView*, int>* value);
    // public System.Void add_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D0FA0
    void add_didReloadDataEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void remove_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D1044
    void remove_didReloadDataEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void add_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D10E8
    void add_didInsertCellsEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void remove_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D118C
    void remove_didInsertCellsEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void add_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D1230
    void add_didDeleteCellsEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void remove_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D12D4
    void remove_didDeleteCellsEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void add_didChangeRectSizeEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D1378
    void add_didChangeRectSizeEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void remove_didChangeRectSizeEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x16D141C
    void remove_didChangeRectSizeEvent(::System::Action_1<::HMUI::TableView*>* value);
    // public System.Void .ctor()
    // Offset: 0x16CD0B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TableView*, creationType>()));
    }
    // public System.Void SetDataSource(HMUI.TableView/HMUI.IDataSource newDataSource, System.Boolean reloadData)
    // Offset: 0x16D14C8
    void SetDataSource(::HMUI::TableView::IDataSource* newDataSource, bool reloadData);
    // protected System.Void Awake()
    // Offset: 0x16D1518
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x16D18D8
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x16D1968
    void OnEnable();
    // private System.Void LazyInit()
    // Offset: 0x16D1528
    void LazyInit();
    // public System.Void Hide()
    // Offset: 0x16D2030
    void Hide();
    // public System.Void Show()
    // Offset: 0x16D2058
    void Show();
    // private System.Void RefreshContentSize()
    // Offset: 0x16D2080
    void RefreshContentSize();
    // public System.Void RefreshCellsContent()
    // Offset: 0x16D2110
    void RefreshCellsContent();
    // protected System.Tuple`2<System.Int32,System.Int32> GetVisibleCellsIdRange()
    // Offset: 0x16D211C
    ::System::Tuple_2<int, int>* GetVisibleCellsIdRange();
    // private System.Void RefreshCells(System.Boolean forcedVisualsRefresh, System.Boolean forcedContentRefresh)
    // Offset: 0x16D19CC
    void RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh);
    // private System.Void LayoutCellForIdx(HMUI.TableCell cell, System.Int32 idx, System.Single offset)
    // Offset: 0x16D2390
    void LayoutCellForIdx(::HMUI::TableCell* cell, int idx, float offset);
    // private System.Void AddCellToReusableCells(HMUI.TableCell cell)
    // Offset: 0x16D229C
    void AddCellToReusableCells(::HMUI::TableCell* cell);
    // private System.Void HandleScrollRectValueChanged(System.Single f)
    // Offset: 0x16D25DC
    void HandleScrollRectValueChanged(float f);
    // private System.Void HandleCellSelectionDidChange(HMUI.SelectableCell selectableCell, HMUI.SelectableCell/HMUI.TransitionType transitionType, System.Object changeOwner)
    // Offset: 0x16D25E8
    void HandleCellSelectionDidChange(::HMUI::SelectableCell* selectableCell, ::HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner);
    // protected System.Void DidSelectCellWithIdx(System.Int32 idx)
    // Offset: 0x16D282C
    void DidSelectCellWithIdx(int idx);
    // public System.Void ReloadDataKeepingPosition()
    // Offset: 0x16D28A4
    void ReloadDataKeepingPosition();
    // public System.Void ReloadData()
    // Offset: 0x16CC2C4
    void ReloadData();
    // public System.Void InsertCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x16CC8A8
    void InsertCells(int idx, int count);
    // public System.Void DeleteCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x16CCC7C
    void DeleteCells(int idx, int count);
    // public HMUI.TableCell DequeueReusableCellForIdentifier(System.String identifier)
    // Offset: 0x16CEDA0
    ::HMUI::TableCell* DequeueReusableCellForIdentifier(::StringW identifier);
    // public System.Void SelectCellWithIdx(System.Int32 idx, System.Boolean callbackTable)
    // Offset: 0x16D2978
    void SelectCellWithIdx(int idx, bool callbackTable);
    // public System.Void ClearSelection()
    // Offset: 0x16D2AE8
    void ClearSelection();
    // public System.Void ClearHighlights()
    // Offset: 0x16D1F30
    void ClearHighlights();
    // public System.Void ScrollToCellWithIdx(System.Int32 idx, HMUI.TableView/HMUI.ScrollPositionType scrollPositionType, System.Boolean animated)
    // Offset: 0x16CCFCC
    void ScrollToCellWithIdx(int idx, ::HMUI::TableView::ScrollPositionType scrollPositionType, bool animated);
    // public System.Void ChangeRectSize(UnityEngine.RectTransform/UnityEngine.Axis axis, System.Single size)
    // Offset: 0x16D2C34
    void ChangeRectSize(::UnityEngine::RectTransform::Axis axis, float size);
  }; // HMUI.TableView
  #pragma pack(pop)
  static check_size<sizeof(TableView), 161 + sizeof(bool)> __HMUI_TableViewSizeCheck;
  static_assert(sizeof(TableView) == 0xA2);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::TableView::TableType, "HMUI", "TableView/TableType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::TableView::get_selectionType
// Il2CppName: get_selectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableViewSelectionType (HMUI::TableView::*)()>(&HMUI::TableView::get_selectionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_selectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::set_selectionType
// Il2CppName: set_selectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::HMUI::TableViewSelectionType)>(&HMUI::TableView::set_selectionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "TableViewSelectionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "set_selectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_canSelectSelectedCell
// Il2CppName: get_canSelectSelectedCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::TableView::*)()>(&HMUI::TableView::get_canSelectSelectedCell)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_canSelectSelectedCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_dataSource
// Il2CppName: get_dataSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableView::IDataSource* (HMUI::TableView::*)()>(&HMUI::TableView::get_dataSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_dataSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_visibleCells
// Il2CppName: get_visibleCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::HMUI::TableCell*>* (HMUI::TableView::*)()>(&HMUI::TableView::get_visibleCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_visibleCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_viewportTransform
// Il2CppName: get_viewportTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (HMUI::TableView::*)()>(&HMUI::TableView::get_viewportTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_viewportTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_contentTransform
// Il2CppName: get_contentTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (HMUI::TableView::*)()>(&HMUI::TableView::get_contentTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_contentTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_numberOfCells
// Il2CppName: get_numberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HMUI::TableView::*)()>(&HMUI::TableView::get_numberOfCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_numberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_cellSize
// Il2CppName: get_cellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::TableView::*)()>(&HMUI::TableView::get_cellSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_cellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_tableType
// Il2CppName: get_tableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableView::TableType (HMUI::TableView::*)()>(&HMUI::TableView::get_tableType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_tableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::get_scrollView
// Il2CppName: get_scrollView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::ScrollView* (HMUI::TableView::*)()>(&HMUI::TableView::get_scrollView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "get_scrollView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::add_didSelectCellWithIdxEvent
// Il2CppName: add_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_2<::HMUI::TableView*, int>*)>(&HMUI::TableView::add_didSelectCellWithIdxEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::remove_didSelectCellWithIdxEvent
// Il2CppName: remove_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_2<::HMUI::TableView*, int>*)>(&HMUI::TableView::remove_didSelectCellWithIdxEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::add_didReloadDataEvent
// Il2CppName: add_didReloadDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::add_didReloadDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "add_didReloadDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::remove_didReloadDataEvent
// Il2CppName: remove_didReloadDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::remove_didReloadDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "remove_didReloadDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::add_didInsertCellsEvent
// Il2CppName: add_didInsertCellsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::add_didInsertCellsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "add_didInsertCellsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::remove_didInsertCellsEvent
// Il2CppName: remove_didInsertCellsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::remove_didInsertCellsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "remove_didInsertCellsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::add_didDeleteCellsEvent
// Il2CppName: add_didDeleteCellsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::add_didDeleteCellsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "add_didDeleteCellsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::remove_didDeleteCellsEvent
// Il2CppName: remove_didDeleteCellsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::remove_didDeleteCellsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "remove_didDeleteCellsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::add_didChangeRectSizeEvent
// Il2CppName: add_didChangeRectSizeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::add_didChangeRectSizeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "add_didChangeRectSizeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::remove_didChangeRectSizeEvent
// Il2CppName: remove_didChangeRectSizeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::System::Action_1<::HMUI::TableView*>*)>(&HMUI::TableView::remove_didChangeRectSizeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "TableView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "remove_didChangeRectSizeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::TableView::SetDataSource
// Il2CppName: SetDataSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::HMUI::TableView::IDataSource*, bool)>(&HMUI::TableView::SetDataSource)> {
  static const MethodInfo* get() {
    static auto* newDataSource = &::il2cpp_utils::GetClassFromName("HMUI", "TableView/IDataSource")->byval_arg;
    static auto* reloadData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "SetDataSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newDataSource, reloadData});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::LazyInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::Show)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::RefreshContentSize
// Il2CppName: RefreshContentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::RefreshContentSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "RefreshContentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::RefreshCellsContent
// Il2CppName: RefreshCellsContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::RefreshCellsContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "RefreshCellsContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::GetVisibleCellsIdRange
// Il2CppName: GetVisibleCellsIdRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Tuple_2<int, int>* (HMUI::TableView::*)()>(&HMUI::TableView::GetVisibleCellsIdRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "GetVisibleCellsIdRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::RefreshCells
// Il2CppName: RefreshCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(bool, bool)>(&HMUI::TableView::RefreshCells)> {
  static const MethodInfo* get() {
    static auto* forcedVisualsRefresh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forcedContentRefresh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "RefreshCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forcedVisualsRefresh, forcedContentRefresh});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::LayoutCellForIdx
// Il2CppName: LayoutCellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::HMUI::TableCell*, int, float)>(&HMUI::TableView::LayoutCellForIdx)> {
  static const MethodInfo* get() {
    static auto* cell = &::il2cpp_utils::GetClassFromName("HMUI", "TableCell")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "LayoutCellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cell, idx, offset});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::AddCellToReusableCells
// Il2CppName: AddCellToReusableCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::HMUI::TableCell*)>(&HMUI::TableView::AddCellToReusableCells)> {
  static const MethodInfo* get() {
    static auto* cell = &::il2cpp_utils::GetClassFromName("HMUI", "TableCell")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "AddCellToReusableCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cell});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::HandleScrollRectValueChanged
// Il2CppName: HandleScrollRectValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(float)>(&HMUI::TableView::HandleScrollRectValueChanged)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "HandleScrollRectValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::HandleCellSelectionDidChange
// Il2CppName: HandleCellSelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::HMUI::SelectableCell*, ::HMUI::SelectableCell::TransitionType, ::Il2CppObject*)>(&HMUI::TableView::HandleCellSelectionDidChange)> {
  static const MethodInfo* get() {
    static auto* selectableCell = &::il2cpp_utils::GetClassFromName("HMUI", "SelectableCell")->byval_arg;
    static auto* transitionType = &::il2cpp_utils::GetClassFromName("HMUI", "SelectableCell/TransitionType")->byval_arg;
    static auto* changeOwner = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "HandleCellSelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectableCell, transitionType, changeOwner});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::DidSelectCellWithIdx
// Il2CppName: DidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(int)>(&HMUI::TableView::DidSelectCellWithIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "DidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ReloadDataKeepingPosition
// Il2CppName: ReloadDataKeepingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::ReloadDataKeepingPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ReloadDataKeepingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ReloadData
// Il2CppName: ReloadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::ReloadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ReloadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::InsertCells
// Il2CppName: InsertCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(int, int)>(&HMUI::TableView::InsertCells)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "InsertCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, count});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::DeleteCells
// Il2CppName: DeleteCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(int, int)>(&HMUI::TableView::DeleteCells)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "DeleteCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, count});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::DequeueReusableCellForIdentifier
// Il2CppName: DequeueReusableCellForIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableCell* (HMUI::TableView::*)(::StringW)>(&HMUI::TableView::DequeueReusableCellForIdentifier)> {
  static const MethodInfo* get() {
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "DequeueReusableCellForIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{identifier});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::SelectCellWithIdx
// Il2CppName: SelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(int, bool)>(&HMUI::TableView::SelectCellWithIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callbackTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "SelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, callbackTable});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::ClearSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ClearHighlights
// Il2CppName: ClearHighlights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)()>(&HMUI::TableView::ClearHighlights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ClearHighlights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ScrollToCellWithIdx
// Il2CppName: ScrollToCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(int, ::HMUI::TableView::ScrollPositionType, bool)>(&HMUI::TableView::ScrollToCellWithIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scrollPositionType = &::il2cpp_utils::GetClassFromName("HMUI", "TableView/ScrollPositionType")->byval_arg;
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ScrollToCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, scrollPositionType, animated});
  }
};
// Writing MetadataGetter for method: HMUI::TableView::ChangeRectSize
// Il2CppName: ChangeRectSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::TableView::*)(::UnityEngine::RectTransform::Axis, float)>(&HMUI::TableView::ChangeRectSize)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform/Axis")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::TableView*), "ChangeRectSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, size});
  }
};
