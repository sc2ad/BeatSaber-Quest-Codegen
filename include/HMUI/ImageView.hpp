// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: IComponentRefresher
#include "GlobalNamespace/IComponentRefresher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: CurvedCanvasSettingsHelper
  class CurvedCanvasSettingsHelper;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSO
  class ColorSO;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::ImageView);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ImageView*, "HMUI", "ImageView");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x150
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ImageView
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class ImageView : public ::UnityEngine::UI::Image/*, public ::GlobalNamespace::IComponentRefresher*/ {
    public:
    // Nested type: ::HMUI::ImageView::GradientDirection
    struct GradientDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ImageView/HMUI.GradientDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct GradientDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GradientDirection
      constexpr GradientDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ImageView/HMUI.GradientDirection Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public HMUI.ImageView/HMUI.GradientDirection Horizontal
      static ::HMUI::ImageView::GradientDirection _get_Horizontal();
      // Set static field: static public HMUI.ImageView/HMUI.GradientDirection Horizontal
      static void _set_Horizontal(::HMUI::ImageView::GradientDirection value);
      // static field const value: static public HMUI.ImageView/HMUI.GradientDirection Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public HMUI.ImageView/HMUI.GradientDirection Vertical
      static ::HMUI::ImageView::GradientDirection _get_Vertical();
      // Set static field: static public HMUI.ImageView/HMUI.GradientDirection Vertical
      static void _set_Vertical(::HMUI::ImageView::GradientDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.ImageView/HMUI.GradientDirection
    #pragma pack(pop)
    static check_size<sizeof(ImageView::GradientDirection), 0 + sizeof(int)> __HMUI_ImageView_GradientDirectionSizeCheck;
    static_assert(sizeof(ImageView::GradientDirection) == 0x4);
    public:
    // private System.Boolean _useScriptableObjectColors
    // Size: 0x1
    // Offset: 0xF8
    bool useScriptableObjectColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useScriptableObjectColors and: colorSo
    char __padding0[0x7] = {};
    // [NullAllowed] Offset: 0x110B138
    // private ColorSO _colorSo
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::ColorSO* colorSo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // [NullAllowed] Offset: 0x110B170
    // private ColorSO _color0So
    // Size: 0x8
    // Offset: 0x108
    ::GlobalNamespace::ColorSO* color0So;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // [NullAllowed] Offset: 0x110B1A8
    // private ColorSO _color1So
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::ColorSO* color1So;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // private System.Single _skew
    // Size: 0x4
    // Offset: 0x118
    float skew;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _gradient
    // Size: 0x1
    // Offset: 0x11C
    bool gradient;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gradient and: color0
    char __padding5[0x3] = {};
    // private UnityEngine.Color _color0
    // Size: 0x10
    // Offset: 0x120
    ::UnityEngine::Color color0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _color1
    // Size: 0x10
    // Offset: 0x130
    ::UnityEngine::Color color1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private HMUI.ImageView/HMUI.GradientDirection _gradientDirection
    // Size: 0x4
    // Offset: 0x140
    ::HMUI::ImageView::GradientDirection gradientDirection;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView::GradientDirection) == 0x4);
    // private System.Boolean _flipGradientColors
    // Size: 0x1
    // Offset: 0x144
    bool flipGradientColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipGradientColors and: curvedCanvasSettingsHelper
    char __padding9[0x3] = {};
    // private readonly HMUI.CurvedCanvasSettingsHelper _curvedCanvasSettingsHelper
    // Size: 0x8
    // Offset: 0x148
    ::HMUI::CurvedCanvasSettingsHelper* curvedCanvasSettingsHelper;
    // Field size check
    static_assert(sizeof(::HMUI::CurvedCanvasSettingsHelper*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IComponentRefresher
    operator ::GlobalNamespace::IComponentRefresher() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IComponentRefresher*>(this);
    }
    // Creating interface conversion operator: i_IComponentRefresher
    inline ::GlobalNamespace::IComponentRefresher* i_IComponentRefresher() noexcept {
      return reinterpret_cast<::GlobalNamespace::IComponentRefresher*>(this);
    }
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B240
    // Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
    static ::UnityEngine::Vector2 _get_kVec2Zero();
    // Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
    static void _set_kVec2Zero(::UnityEngine::Vector2 value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B250
    // Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
    static ::UnityEngine::Vector3 _get_kVec3Zero();
    // Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
    static void _set_kVec3Zero(::UnityEngine::Vector3 value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B260
    // Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
    static ::UnityEngine::Vector4 _get_kVec4Zero();
    // Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
    static void _set_kVec4Zero(::UnityEngine::Vector4 value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B270
    // Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_VertScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static void _set_s_VertScratch(::ArrayW<::UnityEngine::Vector2> value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B280
    // Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_UVScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static void _set_s_UVScratch(::ArrayW<::UnityEngine::Vector2> value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B290
    // Get static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_UV1Scratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
    static void _set_s_UV1Scratch(::ArrayW<::UnityEngine::Vector2> value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B2A0
    // Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
    static ::ArrayW<::UnityEngine::Color> _get_s_ColorScratch();
    // Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
    static void _set_s_ColorScratch(::ArrayW<::UnityEngine::Color> value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B2B0
    // Get static field: static private readonly UnityEngine.Vector3[] s_Xy
    static ::ArrayW<::UnityEngine::Vector3> _get_s_Xy();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Xy
    static void _set_s_Xy(::ArrayW<::UnityEngine::Vector3> value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110B2C0
    // Get static field: static private readonly UnityEngine.Vector3[] s_Uv
    static ::ArrayW<::UnityEngine::Vector3> _get_s_Uv();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Uv
    static void _set_s_Uv(::ArrayW<::UnityEngine::Vector3> value);
    // Get instance field reference: private System.Boolean _useScriptableObjectColors
    [[deprecated("Use field access instead!")]] bool& dyn__useScriptableObjectColors();
    // Get instance field reference: private ColorSO _colorSo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__colorSo();
    // Get instance field reference: private ColorSO _color0So
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__color0So();
    // Get instance field reference: private ColorSO _color1So
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__color1So();
    // Get instance field reference: private System.Single _skew
    [[deprecated("Use field access instead!")]] float& dyn__skew();
    // Get instance field reference: private System.Boolean _gradient
    [[deprecated("Use field access instead!")]] bool& dyn__gradient();
    // Get instance field reference: private UnityEngine.Color _color0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__color0();
    // Get instance field reference: private UnityEngine.Color _color1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__color1();
    // Get instance field reference: private HMUI.ImageView/HMUI.GradientDirection _gradientDirection
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView::GradientDirection& dyn__gradientDirection();
    // Get instance field reference: private System.Boolean _flipGradientColors
    [[deprecated("Use field access instead!")]] bool& dyn__flipGradientColors();
    // Get instance field reference: private readonly HMUI.CurvedCanvasSettingsHelper _curvedCanvasSettingsHelper
    [[deprecated("Use field access instead!")]] ::HMUI::CurvedCanvasSettingsHelper*& dyn__curvedCanvasSettingsHelper();
    // public System.Boolean get_useScriptableObjectColors()
    // Offset: 0x1738948
    bool get_useScriptableObjectColors();
    // public System.Void set_useScriptableObjectColors(System.Boolean value)
    // Offset: 0x1738950
    void set_useScriptableObjectColors(bool value);
    // public System.Single get_skew()
    // Offset: 0x17389FC
    float get_skew();
    // public System.Boolean get_gradient()
    // Offset: 0x1738A04
    bool get_gradient();
    // public System.Void set_gradient(System.Boolean value)
    // Offset: 0x1738A0C
    void set_gradient(bool value);
    // public UnityEngine.Color get_color0()
    // Offset: 0x1738A24
    ::UnityEngine::Color get_color0();
    // public System.Void set_color0(UnityEngine.Color value)
    // Offset: 0x17298BC
    void set_color0(::UnityEngine::Color value);
    // public UnityEngine.Color get_color1()
    // Offset: 0x1738AC4
    ::UnityEngine::Color get_color1();
    // public System.Void set_color1(UnityEngine.Color value)
    // Offset: 0x17298DC
    void set_color1(::UnityEngine::Color value);
    // public System.Void .ctor()
    // Offset: 0x173E540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ImageView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageView*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x173E5C8
    static void _cctor();
    // public System.Void __Refresh()
    // Offset: 0x173C798
    void __Refresh();
    // private System.Void GenerateSimpleSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect, System.Single curvedUIRadius)
    // Offset: 0x1738D2C
    void GenerateSimpleSprite(::UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius);
    // private System.Void GenerateSlicedSprite(UnityEngine.UI.VertexHelper toFill, System.Single curvedUIRadius)
    // Offset: 0x1739494
    void GenerateSlicedSprite(::UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius);
    // private System.Void GenerateTiledSprite(UnityEngine.UI.VertexHelper toFill, System.Single curvedUIRadius)
    // Offset: 0x173A770
    void GenerateTiledSprite(::UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector3[] quadPositions, UnityEngine.Color32 color, UnityEngine.Vector3[] quadUVs)
    // Offset: 0x173DCD4
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::ArrayW<::UnityEngine::Vector3> quadPositions, ::UnityEngine::Color32 color, ::ArrayW<::UnityEngine::Vector3> quadUVs);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax, System.Single elementWidthScale, System.Single curvedUIRadius)
    // Offset: 0x173D9B0
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color, ::UnityEngine::Vector2 uvMin, ::UnityEngine::Vector2 uvMax, float elementWidthScale, float curvedUIRadius);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uv0Min, UnityEngine.Vector2 uv0Max, UnityEngine.Vector2 uv1Min, UnityEngine.Vector2 uv1Max, System.Single elementWidthScale, System.Single curvedUIRadius, System.Single skewFactor, System.Single skewOffset)
    // Offset: 0x173D60C
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color, ::UnityEngine::Vector2 uv0Min, ::UnityEngine::Vector2 uv0Max, ::UnityEngine::Vector2 uv1Min, ::UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset);
    // static private System.Void AddQuadWithHorizontalGradient(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color0, UnityEngine.Color32 color1, UnityEngine.Vector2 uv0Min, UnityEngine.Vector2 uv0Max, UnityEngine.Vector2 uv1Min, UnityEngine.Vector2 uv1Max, System.Single elementWidthScale, System.Single curvedUIRadius, System.Single skewFactor, System.Single skewOffset)
    // Offset: 0x173CE08
    static void AddQuadWithHorizontalGradient(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color0, ::UnityEngine::Color32 color1, ::UnityEngine::Vector2 uv0Min, ::UnityEngine::Vector2 uv0Max, ::UnityEngine::Vector2 uv1Min, ::UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset);
    // static private System.Void AddQuadWithVerticalGradient(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color0, UnityEngine.Color32 color1, UnityEngine.Vector2 uv0Min, UnityEngine.Vector2 uv0Max, UnityEngine.Vector2 uv1Min, UnityEngine.Vector2 uv1Max, System.Single elementWidthScale, System.Single curvedUIRadius, System.Single skewFactor, System.Single skewOffset)
    // Offset: 0x173D260
    static void AddQuadWithVerticalGradient(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color0, ::UnityEngine::Color32 color1, ::UnityEngine::Vector2 uv0Min, ::UnityEngine::Vector2 uv0Max, ::UnityEngine::Vector2 uv1Min, ::UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset);
    // static private UnityEngine.Vector4 GetAdjustedBorders(UnityEngine.Vector4 border, UnityEngine.Rect rect)
    // Offset: 0x173CCEC
    static ::UnityEngine::Vector4 GetAdjustedBorders(::UnityEngine::Vector4 border, ::UnityEngine::Rect rect);
    // private System.Void GenerateFilledSprite(UnityEngine.UI.VertexHelper toFill, System.Boolean preserveAspect, System.Single curvedUIRadius)
    // Offset: 0x173B7DC
    void GenerateFilledSprite(::UnityEngine::UI::VertexHelper* toFill, bool preserveAspect, float curvedUIRadius);
    // static private System.Boolean RadialCut(UnityEngine.Vector3[] xy, UnityEngine.Vector3[] uv, System.Single fill, System.Boolean invert, System.Int32 corner)
    // Offset: 0x173DE5C
    static bool RadialCut(::ArrayW<::UnityEngine::Vector3> xy, ::ArrayW<::UnityEngine::Vector3> uv, float fill, bool invert, int corner);
    // static private System.Void RadialCut(UnityEngine.Vector3[] xy, System.Single cos, System.Single sin, System.Boolean invert, System.Int32 corner)
    // Offset: 0x173DFC8
    static void RadialCut(::ArrayW<::UnityEngine::Vector3> xy, float cos, float sin, bool invert, int corner);
    // static private System.Int32 GetNumberOfElements(System.Single curvedUIRadius, System.Single width)
    // Offset: 0x173CC4C
    static int GetNumberOfElements(float curvedUIRadius, float width);
    // private UnityEngine.Vector4 GetDrawingDimensions(System.Boolean shouldPreserveAspect)
    // Offset: 0x173C7A8
    ::UnityEngine::Vector4 GetDrawingDimensions(bool shouldPreserveAspect);
    // public override UnityEngine.Color get_color()
    // Offset: 0x173895C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Color Graphic::get_color()
    ::UnityEngine::Color get_color();
    // public override System.Void set_color(UnityEngine.Color value)
    // Offset: 0x17389F4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_color(UnityEngine.Color value)
    void set_color(::UnityEngine::Color value);
    // protected override System.Void OnEnable()
    // Offset: 0x1738B64
    // Implemented from: UnityEngine.UI.Image
    // Base method: System.Void Image::OnEnable()
    void OnEnable();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1738BA4
    // Implemented from: UnityEngine.UI.Image
    // Base method: System.Void Image::OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    void OnPopulateMesh(::UnityEngine::UI::VertexHelper* toFill);
  }; // HMUI.ImageView
  #pragma pack(pop)
  static check_size<sizeof(ImageView), 328 + sizeof(::HMUI::CurvedCanvasSettingsHelper*)> __HMUI_ImageViewSizeCheck;
  static_assert(sizeof(ImageView) == 0x150);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ImageView::GradientDirection, "HMUI", "ImageView/GradientDirection");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::ImageView::get_useScriptableObjectColors
// Il2CppName: get_useScriptableObjectColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ImageView::*)()>(&HMUI::ImageView::get_useScriptableObjectColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_useScriptableObjectColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::set_useScriptableObjectColors
// Il2CppName: set_useScriptableObjectColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(bool)>(&HMUI::ImageView::set_useScriptableObjectColors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "set_useScriptableObjectColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::get_skew
// Il2CppName: get_skew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HMUI::ImageView::*)()>(&HMUI::ImageView::get_skew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_skew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::get_gradient
// Il2CppName: get_gradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::ImageView::*)()>(&HMUI::ImageView::get_gradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_gradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::set_gradient
// Il2CppName: set_gradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(bool)>(&HMUI::ImageView::set_gradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "set_gradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::get_color0
// Il2CppName: get_color0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (HMUI::ImageView::*)()>(&HMUI::ImageView::get_color0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_color0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::set_color0
// Il2CppName: set_color0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::Color)>(&HMUI::ImageView::set_color0)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "set_color0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::get_color1
// Il2CppName: get_color1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (HMUI::ImageView::*)()>(&HMUI::ImageView::get_color1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_color1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::set_color1
// Il2CppName: set_color1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::Color)>(&HMUI::ImageView::set_color1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "set_color1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::ImageView::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HMUI::ImageView::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::__Refresh
// Il2CppName: __Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)()>(&HMUI::ImageView::__Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "__Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GenerateSimpleSprite
// Il2CppName: GenerateSimpleSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::UI::VertexHelper*, bool, float)>(&HMUI::ImageView::GenerateSimpleSprite)> {
  static const MethodInfo* get() {
    static auto* vh = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* lPreserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GenerateSimpleSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vh, lPreserveAspect, curvedUIRadius});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GenerateSlicedSprite
// Il2CppName: GenerateSlicedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::UI::VertexHelper*, float)>(&HMUI::ImageView::GenerateSlicedSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GenerateSlicedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill, curvedUIRadius});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GenerateTiledSprite
// Il2CppName: GenerateTiledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::UI::VertexHelper*, float)>(&HMUI::ImageView::GenerateTiledSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GenerateTiledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill, curvedUIRadius});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color32, ::ArrayW<::UnityEngine::Vector3>)>(&HMUI::ImageView::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* quadPositions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* quadUVs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, quadPositions, color, quadUVs});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float)>(&HMUI::ImageView::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uvMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uvMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elementWidthScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color, uvMin, uvMax, elementWidthScale, curvedUIRadius});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float, float, float)>(&HMUI::ImageView::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uv0Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv0Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elementWidthScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::AddQuadWithHorizontalGradient
// Il2CppName: AddQuadWithHorizontalGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float, float, float)>(&HMUI::ImageView::AddQuadWithHorizontalGradient)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uv0Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv0Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elementWidthScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "AddQuadWithHorizontalGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::AddQuadWithVerticalGradient
// Il2CppName: AddQuadWithVerticalGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float, float, float)>(&HMUI::ImageView::AddQuadWithVerticalGradient)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uv0Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv0Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uv1Max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elementWidthScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skewOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "AddQuadWithVerticalGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GetAdjustedBorders
// Il2CppName: GetAdjustedBorders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, ::UnityEngine::Rect)>(&HMUI::ImageView::GetAdjustedBorders)> {
  static const MethodInfo* get() {
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GetAdjustedBorders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{border, rect});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GenerateFilledSprite
// Il2CppName: GenerateFilledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::UI::VertexHelper*, bool, float)>(&HMUI::ImageView::GenerateFilledSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* preserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GenerateFilledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill, preserveAspect, curvedUIRadius});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::RadialCut
// Il2CppName: RadialCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, float, bool, int)>(&HMUI::ImageView::RadialCut)> {
  static const MethodInfo* get() {
    static auto* xy = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* uv = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* fill = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* invert = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* corner = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "RadialCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, uv, fill, invert, corner});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::RadialCut
// Il2CppName: RadialCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, float, float, bool, int)>(&HMUI::ImageView::RadialCut)> {
  static const MethodInfo* get() {
    static auto* xy = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* cos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* invert = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* corner = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "RadialCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, cos, sin, invert, corner});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GetNumberOfElements
// Il2CppName: GetNumberOfElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float, float)>(&HMUI::ImageView::GetNumberOfElements)> {
  static const MethodInfo* get() {
    static auto* curvedUIRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GetNumberOfElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curvedUIRadius, width});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::GetDrawingDimensions
// Il2CppName: GetDrawingDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (HMUI::ImageView::*)(bool)>(&HMUI::ImageView::GetDrawingDimensions)> {
  static const MethodInfo* get() {
    static auto* shouldPreserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "GetDrawingDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldPreserveAspect});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (HMUI::ImageView::*)()>(&HMUI::ImageView::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::Color)>(&HMUI::ImageView::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)()>(&HMUI::ImageView::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ImageView::OnPopulateMesh
// Il2CppName: OnPopulateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ImageView::*)(::UnityEngine::UI::VertexHelper*)>(&HMUI::ImageView::OnPopulateMesh)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ImageView*), "OnPopulateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
