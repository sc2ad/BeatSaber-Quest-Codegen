// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.ToggleWithCallbacks
#include "HMUI/ToggleWithCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: SwitchView
  class SwitchView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::SwitchView);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::SwitchView*, "HMUI", "SwitchView");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.SwitchView
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: 1109A64
  class SwitchView : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HMUI::SwitchView::AnimationType
    struct AnimationType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.SwitchView/HMUI.AnimationType
    // [TokenAttribute] Offset: FFFFFFFF
    struct AnimationType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AnimationType
      constexpr AnimationType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.SwitchView/HMUI.AnimationType OnOff
      static constexpr const int OnOff = 0;
      // Get static field: static public HMUI.SwitchView/HMUI.AnimationType OnOff
      static ::HMUI::SwitchView::AnimationType _get_OnOff();
      // Set static field: static public HMUI.SwitchView/HMUI.AnimationType OnOff
      static void _set_OnOff(::HMUI::SwitchView::AnimationType value);
      // static field const value: static public HMUI.SwitchView/HMUI.AnimationType SelectedState
      static constexpr const int SelectedState = 1;
      // Get static field: static public HMUI.SwitchView/HMUI.AnimationType SelectedState
      static ::HMUI::SwitchView::AnimationType _get_SelectedState();
      // Set static field: static public HMUI.SwitchView/HMUI.AnimationType SelectedState
      static void _set_SelectedState(::HMUI::SwitchView::AnimationType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HMUI.SwitchView/HMUI.AnimationType
    #pragma pack(pop)
    static check_size<sizeof(SwitchView::AnimationType), 0 + sizeof(int)> __HMUI_SwitchView_AnimationTypeSizeCheck;
    static_assert(sizeof(SwitchView::AnimationType) == 0x4);
    public:
    // private HMUI.SwitchView/HMUI.AnimationType _animationType
    // Size: 0x4
    // Offset: 0x18
    ::HMUI::SwitchView::AnimationType animationType;
    // Field size check
    static_assert(sizeof(::HMUI::SwitchView::AnimationType) == 0x4);
    // Padding between fields: animationType and: normalAnimationClip
    char __padding0[0x4] = {};
    // private UnityEngine.AnimationClip _normalAnimationClip
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationClip* normalAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _highlightedAnimationClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationClip* highlightedAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _pressedAnimationClip
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationClip* pressedAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _disabledAnimationClip
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationClip* disabledAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [SpaceAttribute] Offset: 0x110BA50
    // [DrawIfAttribute] Offset: 0x110BA50
    // [NullAllowed] Offset: 0x110BA50
    // private UnityEngine.AnimationClip _onAnimationClip
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationClip* onAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [DrawIfAttribute] Offset: 0x110BB4C
    // [NullAllowed] Offset: 0x110BB4C
    // private UnityEngine.AnimationClip _offAnimationClip
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationClip* offAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [DrawIfAttribute] Offset: 0x110BC38
    // [NullAllowed] Offset: 0x110BC38
    // private UnityEngine.AnimationClip _selectedAnimationClip
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationClip* selectedAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [DrawIfAttribute] Offset: 0x110BD30
    // [NullAllowed] Offset: 0x110BD30
    // private UnityEngine.AnimationClip _selectedAndHighlightedAnimationClip
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationClip* selectedAndHighlightedAnimationClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private HMUI.ToggleWithCallbacks _toggle
    // Size: 0x8
    // Offset: 0x60
    ::HMUI::ToggleWithCallbacks* toggle;
    // Field size check
    static_assert(sizeof(::HMUI::ToggleWithCallbacks*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HMUI.SwitchView/HMUI.AnimationType _animationType
    [[deprecated("Use field access instead!")]] ::HMUI::SwitchView::AnimationType& dyn__animationType();
    // Get instance field reference: private UnityEngine.AnimationClip _normalAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__normalAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _highlightedAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__highlightedAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _pressedAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__pressedAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _disabledAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__disabledAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _onAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__onAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _offAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__offAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _selectedAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__selectedAnimationClip();
    // Get instance field reference: private UnityEngine.AnimationClip _selectedAndHighlightedAnimationClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__selectedAndHighlightedAnimationClip();
    // Get instance field reference: private HMUI.ToggleWithCallbacks _toggle
    [[deprecated("Use field access instead!")]] ::HMUI::ToggleWithCallbacks*& dyn__toggle();
    // public System.Void .ctor()
    // Offset: 0x16FADA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SwitchView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SwitchView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SwitchView*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x16FAA38
    void Awake();
    // protected System.Void Start()
    // Offset: 0x16FAA90
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x16FACB0
    void OnDestroy();
    // private System.Void HandleOnValueChanged(System.Boolean value)
    // Offset: 0x16FADA0
    void HandleOnValueChanged(bool value);
    // private System.Void HandleStateDidChange(HMUI.ToggleWithCallbacks/HMUI.SelectionState value)
    // Offset: 0x16FADA4
    void HandleStateDidChange(::HMUI::ToggleWithCallbacks::SelectionState value);
    // private System.Void RefreshVisuals()
    // Offset: 0x16FAB88
    void RefreshVisuals();
  }; // HMUI.SwitchView
  #pragma pack(pop)
  static check_size<sizeof(SwitchView), 96 + sizeof(::HMUI::ToggleWithCallbacks*)> __HMUI_SwitchViewSizeCheck;
  static_assert(sizeof(SwitchView) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HMUI::SwitchView::AnimationType, "HMUI", "SwitchView/AnimationType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::SwitchView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::SwitchView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)()>(&HMUI::SwitchView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::SwitchView::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)()>(&HMUI::SwitchView::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::SwitchView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)()>(&HMUI::SwitchView::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::SwitchView::HandleOnValueChanged
// Il2CppName: HandleOnValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)(bool)>(&HMUI::SwitchView::HandleOnValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "HandleOnValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::SwitchView::HandleStateDidChange
// Il2CppName: HandleStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)(::HMUI::ToggleWithCallbacks::SelectionState)>(&HMUI::SwitchView::HandleStateDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HMUI", "ToggleWithCallbacks/SelectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "HandleStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::SwitchView::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::SwitchView::*)()>(&HMUI::SwitchView::RefreshVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::SwitchView*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
