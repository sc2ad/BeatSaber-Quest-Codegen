// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: StackedController
  class StackedController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::StackedController);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::StackedController*, "HMUI", "StackedController");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.StackedController
  // [TokenAttribute] Offset: FFFFFFFF
  class StackedController : public ::HMUI::ContainerViewController {
    public:
    // Nested type: ::HMUI::StackedController::$$c
    class $$c;
    // Nested type: ::HMUI::StackedController::$$c__DisplayClass5_0
    class $$c__DisplayClass5_0;
    // public HMUI.ViewController get_topStackedViewController()
    // Offset: 0x16FA3CC
    ::HMUI::ViewController* get_topStackedViewController();
    // public System.Void PushViewController(HMUI.ViewController viewController, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x16FA5D8
    void PushViewController(::HMUI::ViewController* viewController, ::System::Action* finishedCallback, bool immediately);
    // public System.Void PopViewController(System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x16FA6AC
    void PopViewController(::System::Action* finishedCallback, bool immediately);
    // public System.Void PopViewControllers(System.Int32 numberOfViewControllersToPop, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x16FA6C0
    void PopViewControllers(int numberOfViewControllersToPop, ::System::Action* finishedCallback, bool immediately);
    // static private System.Void SetupViewControllerRect(HMUI.ViewController viewController, System.Int32 index)
    // Offset: 0x16FA580
    static void SetupViewControllerRect(::HMUI::ViewController* viewController, int index);
    // public System.Void .ctor()
    // Offset: 0x16FA858
    // Implemented from: HMUI.ContainerViewController
    // Base method: System.Void ContainerViewController::.ctor()
    // Base method: System.Void ViewController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackedController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackedController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackedController*, creationType>()));
    }
    // protected override System.Void LayoutViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers)
    // Offset: 0x16FA438
    // Implemented from: HMUI.ContainerViewController
    // Base method: System.Void ContainerViewController::LayoutViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers)
    void LayoutViewControllers(::System::Collections::Generic::List_1<::HMUI::ViewController*>* viewControllers);
  }; // HMUI.StackedController
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::StackedController::get_topStackedViewController
// Il2CppName: get_topStackedViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::ViewController* (HMUI::StackedController::*)()>(&HMUI::StackedController::get_topStackedViewController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "get_topStackedViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::StackedController::PushViewController
// Il2CppName: PushViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::StackedController::*)(::HMUI::ViewController*, ::System::Action*, bool)>(&HMUI::StackedController::PushViewController)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "PushViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::StackedController::PopViewController
// Il2CppName: PopViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::StackedController::*)(::System::Action*, bool)>(&HMUI::StackedController::PopViewController)> {
  static const MethodInfo* get() {
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "PopViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::StackedController::PopViewControllers
// Il2CppName: PopViewControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::StackedController::*)(int, ::System::Action*, bool)>(&HMUI::StackedController::PopViewControllers)> {
  static const MethodInfo* get() {
    static auto* numberOfViewControllersToPop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "PopViewControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numberOfViewControllersToPop, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::StackedController::SetupViewControllerRect
// Il2CppName: SetupViewControllerRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HMUI::ViewController*, int)>(&HMUI::StackedController::SetupViewControllerRect)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "SetupViewControllerRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, index});
  }
};
// Writing MetadataGetter for method: HMUI::StackedController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::StackedController::LayoutViewControllers
// Il2CppName: LayoutViewControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::StackedController::*)(::System::Collections::Generic::List_1<::HMUI::ViewController*>*)>(&HMUI::StackedController::LayoutViewControllers)> {
  static const MethodInfo* get() {
    static auto* viewControllers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "ViewController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::StackedController*), "LayoutViewControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewControllers});
  }
};
