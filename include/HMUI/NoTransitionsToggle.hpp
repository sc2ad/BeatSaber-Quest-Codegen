// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: HMUI.UISelectionState
#include "HMUI/UISelectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: NoTransitionsToggle
  class NoTransitionsToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::NoTransitionsToggle);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::NoTransitionsToggle*, "HMUI", "NoTransitionsToggle");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x12C
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.NoTransitionsToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class NoTransitionsToggle : public ::UnityEngine::UI::Toggle {
    public:
    // Writing base type padding for base size: 0x119 to desired offset: 0x120
    char ___base_padding[0x7] = {};
    public:
    // private System.Action`1<HMUI.UISelectionState> selectionStateDidChangeEvent
    // Size: 0x8
    // Offset: 0x120
    ::System::Action_1<::HMUI::UISelectionState>* selectionStateDidChangeEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::HMUI::UISelectionState>*) == 0x8);
    // private HMUI.UISelectionState _selectionState
    // Size: 0x4
    // Offset: 0x128
    ::HMUI::UISelectionState selectionState;
    // Field size check
    static_assert(sizeof(::HMUI::UISelectionState) == 0x4);
    public:
    // Get instance field reference: private System.Action`1<HMUI.UISelectionState> selectionStateDidChangeEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::HMUI::UISelectionState>*& dyn_selectionStateDidChangeEvent();
    // Get instance field reference: private HMUI.UISelectionState _selectionState
    [[deprecated("Use field access instead!")]] ::HMUI::UISelectionState& dyn__selectionState();
    // public HMUI.UISelectionState get_selectionState()
    // Offset: 0x16C684C
    ::HMUI::UISelectionState get_selectionState();
    // public System.Void add_selectionStateDidChangeEvent(System.Action`1<HMUI.UISelectionState> value)
    // Offset: 0x16C6854
    void add_selectionStateDidChangeEvent(::System::Action_1<::HMUI::UISelectionState>* value);
    // public System.Void remove_selectionStateDidChangeEvent(System.Action`1<HMUI.UISelectionState> value)
    // Offset: 0x16C68FC
    void remove_selectionStateDidChangeEvent(::System::Action_1<::HMUI::UISelectionState>* value);
    // public System.Void .ctor()
    // Offset: 0x16C6A30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoTransitionsToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::NoTransitionsToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoTransitionsToggle*, creationType>()));
    }
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState state, System.Boolean instant)
    // Offset: 0x16C69A4
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState state, System.Boolean instant)
    void DoStateTransition(::UnityEngine::UI::Selectable::SelectionState state, bool instant);
  }; // HMUI.NoTransitionsToggle
  #pragma pack(pop)
  static check_size<sizeof(NoTransitionsToggle), 296 + sizeof(::HMUI::UISelectionState)> __HMUI_NoTransitionsToggleSizeCheck;
  static_assert(sizeof(NoTransitionsToggle) == 0x12C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::NoTransitionsToggle::get_selectionState
// Il2CppName: get_selectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::UISelectionState (HMUI::NoTransitionsToggle::*)()>(&HMUI::NoTransitionsToggle::get_selectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::NoTransitionsToggle*), "get_selectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::NoTransitionsToggle::add_selectionStateDidChangeEvent
// Il2CppName: add_selectionStateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::NoTransitionsToggle::*)(::System::Action_1<::HMUI::UISelectionState>*)>(&HMUI::NoTransitionsToggle::add_selectionStateDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "UISelectionState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::NoTransitionsToggle*), "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::NoTransitionsToggle::remove_selectionStateDidChangeEvent
// Il2CppName: remove_selectionStateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::NoTransitionsToggle::*)(::System::Action_1<::HMUI::UISelectionState>*)>(&HMUI::NoTransitionsToggle::remove_selectionStateDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HMUI", "UISelectionState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::NoTransitionsToggle*), "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::NoTransitionsToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::NoTransitionsToggle::DoStateTransition
// Il2CppName: DoStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::NoTransitionsToggle::*)(::UnityEngine::UI::Selectable::SelectionState, bool)>(&HMUI::NoTransitionsToggle::DoStateTransition)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable/SelectionState")->byval_arg;
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::NoTransitionsToggle*), "DoStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, instant});
  }
};
