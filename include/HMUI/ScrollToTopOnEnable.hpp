// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollView
  class ScrollView;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollToTopOnEnable
  class ScrollToTopOnEnable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::ScrollToTopOnEnable);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ScrollToTopOnEnable*, "HMUI", "ScrollToTopOnEnable");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ScrollToTopOnEnable
  // [TokenAttribute] Offset: FFFFFFFF
  class ScrollToTopOnEnable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private HMUI.ScrollView _scrollView
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::ScrollView* scrollView;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HMUI.ScrollView _scrollView
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView*& dyn__scrollView();
    // public System.Void .ctor()
    // Offset: 0x16C8ED4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScrollToTopOnEnable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ScrollToTopOnEnable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScrollToTopOnEnable*, creationType>()));
    }
    // protected System.Void OnEnable()
    // Offset: 0x16C8D7C
    void OnEnable();
  }; // HMUI.ScrollToTopOnEnable
  #pragma pack(pop)
  static check_size<sizeof(ScrollToTopOnEnable), 24 + sizeof(::HMUI::ScrollView*)> __HMUI_ScrollToTopOnEnableSizeCheck;
  static_assert(sizeof(ScrollToTopOnEnable) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::ScrollToTopOnEnable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::ScrollToTopOnEnable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ScrollToTopOnEnable::*)()>(&HMUI::ScrollToTopOnEnable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ScrollToTopOnEnable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
