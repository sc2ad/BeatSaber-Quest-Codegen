// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.NoTransitionsButton
#include "HMUI/NoTransitionsButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Forward declaring type: ButtonStaticAnimations
  class ButtonStaticAnimations;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HMUI::ButtonStaticAnimations);
DEFINE_IL2CPP_ARG_TYPE(::HMUI::ButtonStaticAnimations*, "HMUI", "ButtonStaticAnimations");
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ButtonStaticAnimations
  // [TokenAttribute] Offset: FFFFFFFF
  class ButtonStaticAnimations : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private HMUI.NoTransitionsButton _button
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::NoTransitionsButton* button;
    // Field size check
    static_assert(sizeof(::HMUI::NoTransitionsButton*) == 0x8);
    // [SpaceAttribute] Offset: 0x110AFB0
    // private UnityEngine.AnimationClip _normalClip
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationClip* normalClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _highlightedClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationClip* highlightedClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _pressedClip
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationClip* pressedClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.AnimationClip _disabledClip
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationClip* disabledClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private System.Boolean _didStart
    // Size: 0x1
    // Offset: 0x40
    bool didStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HMUI.NoTransitionsButton _button
    [[deprecated("Use field access instead!")]] ::HMUI::NoTransitionsButton*& dyn__button();
    // Get instance field reference: private UnityEngine.AnimationClip _normalClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__normalClip();
    // Get instance field reference: private UnityEngine.AnimationClip _highlightedClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__highlightedClip();
    // Get instance field reference: private UnityEngine.AnimationClip _pressedClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__pressedClip();
    // Get instance field reference: private UnityEngine.AnimationClip _disabledClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn__disabledClip();
    // Get instance field reference: private System.Boolean _didStart
    [[deprecated("Use field access instead!")]] bool& dyn__didStart();
    // public System.Void .ctor()
    // Offset: 0x172AB90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButtonStaticAnimations* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonStaticAnimations::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButtonStaticAnimations*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x172A8D0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x172A964
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x172AA98
    void OnEnable();
    // protected System.Void OnDestroy()
    // Offset: 0x172AAB4
    void OnDestroy();
    // private System.Void HandleButtonSelectionStateDidChange(HMUI.NoTransitionsButton/HMUI.SelectionState state)
    // Offset: 0x172A988
    void HandleButtonSelectionStateDidChange(::HMUI::NoTransitionsButton::SelectionState state);
  }; // HMUI.ButtonStaticAnimations
  #pragma pack(pop)
  static check_size<sizeof(ButtonStaticAnimations), 64 + sizeof(bool)> __HMUI_ButtonStaticAnimationsSizeCheck;
  static_assert(sizeof(ButtonStaticAnimations) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ButtonStaticAnimations::*)()>(&HMUI::ButtonStaticAnimations::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ButtonStaticAnimations*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ButtonStaticAnimations::*)()>(&HMUI::ButtonStaticAnimations::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ButtonStaticAnimations*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ButtonStaticAnimations::*)()>(&HMUI::ButtonStaticAnimations::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ButtonStaticAnimations*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ButtonStaticAnimations::*)()>(&HMUI::ButtonStaticAnimations::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::ButtonStaticAnimations*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange
// Il2CppName: HandleButtonSelectionStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::ButtonStaticAnimations::*)(::HMUI::NoTransitionsButton::SelectionState)>(&HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("HMUI", "NoTransitionsButton/SelectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::ButtonStaticAnimations*), "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
