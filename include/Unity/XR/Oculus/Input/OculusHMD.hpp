// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.XR.XRHMD
#include "UnityEngine/InputSystem/XR/XRHMD.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: ButtonControl
  class ButtonControl;
  // Forward declaring type: Vector3Control
  class Vector3Control;
}
// Completed forward declares
// Type namespace: Unity.XR.Oculus.Input
namespace Unity::XR::Oculus::Input {
  // Forward declaring type: OculusHMD
  class OculusHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::Oculus::Input::OculusHMD);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::Oculus::Input::OculusHMD*, "Unity.XR.Oculus.Input", "OculusHMD");
// Type namespace: Unity.XR.Oculus.Input
namespace Unity::XR::Oculus::Input {
  // Size: 0x208
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.Oculus.Input.OculusHMD
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 957000
  // [PreserveAttribute] Offset: FFFFFFFF
  class OculusHMD : public ::UnityEngine::InputSystem::XR::XRHMD {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.ButtonControl <userPresence>k__BackingField
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::InputSystem::Controls::ButtonControl* userPresence;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::InputSystem::Controls::Vector3Control* deviceAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <deviceAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::InputSystem::Controls::Vector3Control* deviceAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::InputSystem::Controls::Vector3Control* deviceAngularAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyeAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyeAngularAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyeAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyeAngularAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyeAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularAcceleration>k__BackingField
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyeAngularAcceleration;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <userPresence>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$userPresence$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$deviceAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <deviceAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$deviceAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$deviceAngularAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyeAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyeAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyeAngularAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyeAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyeAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyeAngularAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyeAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyeAcceleration$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyeAngularAcceleration$k__BackingField();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_userPresence()
    // Offset: 0xE0F5C0
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_userPresence();
    // private System.Void set_userPresence(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE0F5C8
    void set_userPresence(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_deviceAngularVelocity()
    // Offset: 0xE0F5D0
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_deviceAngularVelocity();
    // private System.Void set_deviceAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F5D8
    void set_deviceAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_deviceAcceleration()
    // Offset: 0xE0F5E0
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_deviceAcceleration();
    // private System.Void set_deviceAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F5E8
    void set_deviceAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_deviceAngularAcceleration()
    // Offset: 0xE0F5F0
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_deviceAngularAcceleration();
    // private System.Void set_deviceAngularAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F5F8
    void set_deviceAngularAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyeAngularVelocity()
    // Offset: 0xE0F600
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyeAngularVelocity();
    // private System.Void set_leftEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F608
    void set_leftEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyeAcceleration()
    // Offset: 0xE0F610
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyeAcceleration();
    // private System.Void set_leftEyeAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F618
    void set_leftEyeAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyeAngularAcceleration()
    // Offset: 0xE0F620
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyeAngularAcceleration();
    // private System.Void set_leftEyeAngularAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F628
    void set_leftEyeAngularAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyeAngularVelocity()
    // Offset: 0xE0F630
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyeAngularVelocity();
    // private System.Void set_rightEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F638
    void set_rightEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyeAcceleration()
    // Offset: 0xE0F640
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyeAcceleration();
    // private System.Void set_rightEyeAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F648
    void set_rightEyeAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyeAngularAcceleration()
    // Offset: 0xE0F650
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyeAngularAcceleration();
    // private System.Void set_rightEyeAngularAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F658
    void set_rightEyeAngularAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyeAngularVelocity()
    // Offset: 0xE0F660
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyeAngularVelocity();
    // private System.Void set_centerEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F668
    void set_centerEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyeAcceleration()
    // Offset: 0xE0F670
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyeAcceleration();
    // private System.Void set_centerEyeAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F678
    void set_centerEyeAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyeAngularAcceleration()
    // Offset: 0xE0F680
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyeAngularAcceleration();
    // private System.Void set_centerEyeAngularAcceleration(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE0F688
    void set_centerEyeAngularAcceleration(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public System.Void .ctor()
    // Offset: 0xE0F858
    // Implemented from: UnityEngine.InputSystem.XR.XRHMD
    // Base method: System.Void XRHMD::.ctor()
    // Base method: System.Void TrackedDevice::.ctor()
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::Oculus::Input::OculusHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusHMD*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xE0F690
    // Implemented from: UnityEngine.InputSystem.XR.XRHMD
    // Base method: System.Void XRHMD::FinishSetup()
    void FinishSetup();
  }; // Unity.XR.Oculus.Input.OculusHMD
  #pragma pack(pop)
  static check_size<sizeof(OculusHMD), 512 + sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*)> __Unity_XR_Oculus_Input_OculusHMDSizeCheck;
  static_assert(sizeof(OculusHMD) == 0x208);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_userPresence
// Il2CppName: get_userPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_userPresence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_userPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_userPresence
// Il2CppName: set_userPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&Unity::XR::Oculus::Input::OculusHMD::set_userPresence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_userPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_deviceAngularVelocity
// Il2CppName: get_deviceAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_deviceAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_deviceAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_deviceAngularVelocity
// Il2CppName: set_deviceAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_deviceAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_deviceAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_deviceAcceleration
// Il2CppName: get_deviceAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_deviceAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_deviceAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_deviceAcceleration
// Il2CppName: set_deviceAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_deviceAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_deviceAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_deviceAngularAcceleration
// Il2CppName: get_deviceAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_deviceAngularAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_deviceAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_deviceAngularAcceleration
// Il2CppName: set_deviceAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_deviceAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_deviceAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAngularVelocity
// Il2CppName: get_leftEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_leftEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAngularVelocity
// Il2CppName: set_leftEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_leftEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAcceleration
// Il2CppName: get_leftEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_leftEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAcceleration
// Il2CppName: set_leftEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_leftEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAngularAcceleration
// Il2CppName: get_leftEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_leftEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_leftEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAngularAcceleration
// Il2CppName: set_leftEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_leftEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_leftEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAngularVelocity
// Il2CppName: get_rightEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_rightEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAngularVelocity
// Il2CppName: set_rightEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_rightEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAcceleration
// Il2CppName: get_rightEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_rightEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAcceleration
// Il2CppName: set_rightEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_rightEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAngularAcceleration
// Il2CppName: get_rightEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_rightEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_rightEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAngularAcceleration
// Il2CppName: set_rightEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_rightEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_rightEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAngularVelocity
// Il2CppName: get_centerEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_centerEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAngularVelocity
// Il2CppName: set_centerEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_centerEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAcceleration
// Il2CppName: get_centerEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_centerEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAcceleration
// Il2CppName: set_centerEyeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_centerEyeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAngularAcceleration
// Il2CppName: get_centerEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::get_centerEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "get_centerEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAngularAcceleration
// Il2CppName: set_centerEyeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::Oculus::Input::OculusHMD::set_centerEyeAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "set_centerEyeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::XR::Oculus::Input::OculusHMD::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::Input::OculusHMD::*)()>(&Unity::XR::Oculus::Input::OculusHMD::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Input::OculusHMD*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
