// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.XR.XRHMD
#include "UnityEngine/InputSystem/XR/XRHMD.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: Vector3Control
  class Vector3Control;
}
// Completed forward declares
// Type namespace: Unity.XR.OpenVR
namespace Unity::XR::OpenVR {
  // Forward declaring type: OpenVRHMD
  class OpenVRHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::OpenVR::OpenVRHMD);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::OpenVR::OpenVRHMD*, "Unity.XR.OpenVR", "OpenVRHMD");
// Type namespace: Unity.XR.OpenVR
namespace Unity::XR::OpenVR {
  // Size: 0x1E0
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.OpenVR.OpenVRHMD
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 956C4C
  // [PreserveAttribute] Offset: FFFFFFFF
  class OpenVRHMD : public ::UnityEngine::InputSystem::XR::XRHMD {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.Vector3Control <deviceVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::InputSystem::Controls::Vector3Control* deviceVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::InputSystem::Controls::Vector3Control* deviceAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyeVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyeVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyeVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularVelocity>k__BackingField
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyeAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <deviceVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$deviceVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <deviceAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$deviceAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyeVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyeAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyeVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyeAngularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyeVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyeAngularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyeAngularVelocity$k__BackingField();
    // public UnityEngine.InputSystem.Controls.Vector3Control get_deviceVelocity()
    // Offset: 0xE10240
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_deviceVelocity();
    // private System.Void set_deviceVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10248
    void set_deviceVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_deviceAngularVelocity()
    // Offset: 0xE10250
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_deviceAngularVelocity();
    // private System.Void set_deviceAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10258
    void set_deviceAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyeVelocity()
    // Offset: 0xE10260
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyeVelocity();
    // private System.Void set_leftEyeVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10268
    void set_leftEyeVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyeAngularVelocity()
    // Offset: 0xE10270
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyeAngularVelocity();
    // private System.Void set_leftEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10278
    void set_leftEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyeVelocity()
    // Offset: 0xE10280
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyeVelocity();
    // private System.Void set_rightEyeVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10288
    void set_rightEyeVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyeAngularVelocity()
    // Offset: 0xE10290
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyeAngularVelocity();
    // private System.Void set_rightEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE10298
    void set_rightEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyeVelocity()
    // Offset: 0xE102A0
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyeVelocity();
    // private System.Void set_centerEyeVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE102A8
    void set_centerEyeVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyeAngularVelocity()
    // Offset: 0xE102B0
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyeAngularVelocity();
    // private System.Void set_centerEyeAngularVelocity(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xE102B8
    void set_centerEyeAngularVelocity(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public System.Void .ctor()
    // Offset: 0xE103F4
    // Implemented from: UnityEngine.InputSystem.XR.XRHMD
    // Base method: System.Void XRHMD::.ctor()
    // Base method: System.Void TrackedDevice::.ctor()
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpenVRHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::OpenVR::OpenVRHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpenVRHMD*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xE102C0
    // Implemented from: UnityEngine.InputSystem.XR.XRHMD
    // Base method: System.Void XRHMD::FinishSetup()
    void FinishSetup();
  }; // Unity.XR.OpenVR.OpenVRHMD
  #pragma pack(pop)
  static check_size<sizeof(OpenVRHMD), 472 + sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*)> __Unity_XR_OpenVR_OpenVRHMDSizeCheck;
  static_assert(sizeof(OpenVRHMD) == 0x1E0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_deviceVelocity
// Il2CppName: get_deviceVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_deviceVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_deviceVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_deviceVelocity
// Il2CppName: set_deviceVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_deviceVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_deviceVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_deviceAngularVelocity
// Il2CppName: get_deviceAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_deviceAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_deviceAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_deviceAngularVelocity
// Il2CppName: set_deviceAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_deviceAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_deviceAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_leftEyeVelocity
// Il2CppName: get_leftEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_leftEyeVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_leftEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_leftEyeVelocity
// Il2CppName: set_leftEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_leftEyeVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_leftEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_leftEyeAngularVelocity
// Il2CppName: get_leftEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_leftEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_leftEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_leftEyeAngularVelocity
// Il2CppName: set_leftEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_leftEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_leftEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_rightEyeVelocity
// Il2CppName: get_rightEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_rightEyeVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_rightEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_rightEyeVelocity
// Il2CppName: set_rightEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_rightEyeVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_rightEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_rightEyeAngularVelocity
// Il2CppName: get_rightEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_rightEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_rightEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_rightEyeAngularVelocity
// Il2CppName: set_rightEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_rightEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_rightEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_centerEyeVelocity
// Il2CppName: get_centerEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_centerEyeVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_centerEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_centerEyeVelocity
// Il2CppName: set_centerEyeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_centerEyeVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_centerEyeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::get_centerEyeAngularVelocity
// Il2CppName: get_centerEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::get_centerEyeAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "get_centerEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::set_centerEyeAngularVelocity
// Il2CppName: set_centerEyeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&Unity::XR::OpenVR::OpenVRHMD::set_centerEyeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "set_centerEyeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::XR::OpenVR::OpenVRHMD::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::OpenVR::OpenVRHMD::*)()>(&Unity::XR::OpenVR::OpenVRHMD::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::OpenVR::OpenVRHMD*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
