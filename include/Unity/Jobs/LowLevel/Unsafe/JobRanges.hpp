// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: Unity.Jobs.LowLevel.Unsafe
namespace Unity::Jobs::LowLevel::Unsafe {
  // Forward declaring type: JobRanges
  struct JobRanges;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Jobs::LowLevel::Unsafe::JobRanges, "Unity.Jobs.LowLevel.Unsafe", "JobRanges");
// Type namespace: Unity.Jobs.LowLevel.Unsafe
namespace Unity::Jobs::LowLevel::Unsafe {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Jobs.LowLevel.Unsafe.JobRanges
  // [TokenAttribute] Offset: FFFFFFFF
  struct JobRanges/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Int32 BatchSize
    // Size: 0x4
    // Offset: 0x0
    int BatchSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 NumJobs
    // Size: 0x4
    // Offset: 0x4
    int NumJobs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 TotalIterationCount
    // Size: 0x4
    // Offset: 0x8
    int TotalIterationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 NumPhases
    // Size: 0x4
    // Offset: 0xC
    int NumPhases;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.IntPtr StartEndIndex
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr StartEndIndex;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.IntPtr PhaseData
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr PhaseData;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: JobRanges
    constexpr JobRanges(int BatchSize_ = {}, int NumJobs_ = {}, int TotalIterationCount_ = {}, int NumPhases_ = {}, ::System::IntPtr StartEndIndex_ = {}, ::System::IntPtr PhaseData_ = {}) noexcept : BatchSize{BatchSize_}, NumJobs{NumJobs_}, TotalIterationCount{TotalIterationCount_}, NumPhases{NumPhases_}, StartEndIndex{StartEndIndex_}, PhaseData{PhaseData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Int32 BatchSize
    [[deprecated("Use field access instead!")]] int& dyn_BatchSize();
    // Get instance field reference: System.Int32 NumJobs
    [[deprecated("Use field access instead!")]] int& dyn_NumJobs();
    // Get instance field reference: public System.Int32 TotalIterationCount
    [[deprecated("Use field access instead!")]] int& dyn_TotalIterationCount();
    // Get instance field reference: System.Int32 NumPhases
    [[deprecated("Use field access instead!")]] int& dyn_NumPhases();
    // Get instance field reference: System.IntPtr StartEndIndex
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_StartEndIndex();
    // Get instance field reference: System.IntPtr PhaseData
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_PhaseData();
  }; // Unity.Jobs.LowLevel.Unsafe.JobRanges
  #pragma pack(pop)
  static check_size<sizeof(JobRanges), 24 + sizeof(::System::IntPtr)> __Unity_Jobs_LowLevel_Unsafe_JobRangesSizeCheck;
  static_assert(sizeof(JobRanges) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
