// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider.hpp"
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider_EffectorLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] raycastFrom
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastFrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "raycastFrom"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform raycastTo
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "raycastTo"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single raycastRadius
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_raycastRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "raycastRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider/RootMotion.FinalIK.EffectorLink[] effectors
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink*>& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_effectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_effectors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectors"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single smoothTimeIn
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_smoothTimeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_smoothTimeIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smoothTimeIn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single smoothTimeOut
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_smoothTimeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_smoothTimeOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smoothTimeOut"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask layers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_layers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_layers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 offsetTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offsetTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsetTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 offsetV
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offsetV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::dyn_offsetV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsetV"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.Solve
void RootMotion::FinalIK::PenetrationAvoidance::Avoider::Solve(::RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.GetOffsetTarget
::UnityEngine::Vector3 RootMotion::FinalIK::PenetrationAvoidance::Avoider::GetOffsetTarget(::RootMotion::FinalIK::IKSolverFullBodyBiped* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::GetOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.Raycast
::UnityEngine::Vector3 RootMotion::FinalIK::PenetrationAvoidance::Avoider::Raycast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::Raycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, from, to);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider_EffectorLink.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedEffector effector
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedEffector& RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink::dyn_effector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink::dyn_effector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effector"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedEffector*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::PenetrationAvoidance::Avoider::EffectorLink::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil
#include "RootMotion/FinalIK/Recoil.hpp"
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset
#include "RootMotion/FinalIK/Recoil_RecoilOffset.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.AimIK aimIK
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::AimIK*& RootMotion::FinalIK::Recoil::dyn_aimIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_aimIK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "aimIK"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::AimIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean aimIKSolvedLast
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Recoil::dyn_aimIKSolvedLast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_aimIKSolvedLast");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "aimIKSolvedLast"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness handedness
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Recoil::Handedness& RootMotion::FinalIK::Recoil::dyn_handedness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_handedness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handedness"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Recoil::Handedness*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean twoHanded
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Recoil::dyn_twoHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_twoHanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve recoilWeight
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::FinalIK::Recoil::dyn_recoilWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_recoilWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "recoilWeight"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single magnitudeRandom
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_magnitudeRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_magnitudeRandom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "magnitudeRandom"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotationRandom
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::dyn_rotationRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_rotationRandom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationRandom"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handRotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::dyn_handRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_handRotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handRotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single blendTime
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_blendTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_blendTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset[] offsets
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset*>& RootMotion::FinalIK::Recoil::dyn_offsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_offsets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsets"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Recoil::dyn_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_rotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single magnitudeMlp
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_magnitudeMlp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_magnitudeMlp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "magnitudeMlp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single endTime
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_endTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion handRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Recoil::dyn_handRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_handRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion secondaryHandRelativeRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Recoil::dyn_secondaryHandRelativeRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_secondaryHandRelativeRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "secondaryHandRelativeRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion randomRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Recoil::dyn_randomRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_randomRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single length
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Recoil::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single blendWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_blendWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_blendWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single w
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::dyn_w() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_w");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion primaryHandRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Recoil::dyn_primaryHandRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_primaryHandRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "primaryHandRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean handRotationsSet
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Recoil::dyn_handRotationsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_handRotationsSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handRotationsSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 aimIKAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::dyn_aimIKAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::dyn_aimIKAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "aimIKAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_isFinished
bool RootMotion::FinalIK::Recoil::get_isFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::get_isFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_primaryHandEffector
::RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::Recoil::get_primaryHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::get_primaryHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_primaryHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_secondaryHandEffector
::RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::Recoil::get_secondaryHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::get_secondaryHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondaryHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_primaryHand
::UnityEngine::Transform* RootMotion::FinalIK::Recoil::get_primaryHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::get_primaryHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_primaryHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_secondaryHand
::UnityEngine::Transform* RootMotion::FinalIK::Recoil::get_secondaryHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::get_secondaryHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondaryHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.SetHandRotations
void RootMotion::FinalIK::Recoil::SetHandRotations(::UnityEngine::Quaternion leftHandRotation, ::UnityEngine::Quaternion rightHandRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::SetHandRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, leftHandRotation, rightHandRotation);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.Fire
void RootMotion::FinalIK::Recoil::Fire(float magnitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(magnitude)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, magnitude);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.AfterFBBIK
void RootMotion::FinalIK::Recoil::AfterFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::AfterFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.AfterAimIK
void RootMotion::FinalIK::Recoil::AfterAimIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::AfterAimIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterAimIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.OnModifyOffset
void RootMotion::FinalIK::Recoil::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.OnDestroy
void RootMotion::FinalIK::Recoil::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset
#include "RootMotion/FinalIK/Recoil_RecoilOffset.hpp"
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Recoil_RecoilOffset_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single additivity
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_additivity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_additivity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "additivity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxAdditiveOffsetMag
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_maxAdditiveOffsetMag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_maxAdditiveOffsetMag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxAdditiveOffsetMag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset/RootMotion.FinalIK.EffectorLink[] effectorLinks
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink*>& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_effectorLinks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_effectorLinks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectorLinks"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 additiveOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_additiveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_additiveOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "additiveOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Recoil::RecoilOffset::dyn_lastOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::dyn_lastOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset.Start
void RootMotion::FinalIK::Recoil::RecoilOffset::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset.Apply
void RootMotion::FinalIK::Recoil::RecoilOffset::Apply(::RootMotion::FinalIK::IKSolverFullBodyBiped* solver, ::UnityEngine::Quaternion rotation, float masterWeight, float length, float timeLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(masterWeight), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(timeLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, rotation, masterWeight, length, timeLeft);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Recoil_RecoilOffset_EffectorLink.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedEffector effector
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedEffector& RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink::dyn_effector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink::dyn_effector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effector"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedEffector*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness
#include "RootMotion/FinalIK/Recoil.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
::RootMotion::FinalIK::Recoil::Handedness RootMotion::FinalIK::Recoil::Handedness::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Handedness::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Recoil::Handedness>("RootMotion.FinalIK", "Recoil/Handedness", "Right"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
void RootMotion::FinalIK::Recoil::Handedness::_set_Right(::RootMotion::FinalIK::Recoil::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Handedness::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Recoil/Handedness", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
::RootMotion::FinalIK::Recoil::Handedness RootMotion::FinalIK::Recoil::Handedness::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Handedness::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Recoil::Handedness>("RootMotion.FinalIK", "Recoil/Handedness", "Left"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
void RootMotion::FinalIK::Recoil::Handedness::_set_Left(::RootMotion::FinalIK::Recoil::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Handedness::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Recoil/Handedness", "Left", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::Recoil::Handedness::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::Handedness::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ShoulderRotator
#include "RootMotion/FinalIK/ShoulderRotator.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::ShoulderRotator::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single offset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::ShoulderRotator::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.FullBodyBipedIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedIK*& RootMotion::FinalIK::ShoulderRotator::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean skip
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::ShoulderRotator::dyn_skip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::dyn_skip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skip"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.Start
void RootMotion::FinalIK::ShoulderRotator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.RotateShoulders
void RootMotion::FinalIK::ShoulderRotator::RotateShoulders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::RotateShoulders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateShoulders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.RotateShoulder
void RootMotion::FinalIK::ShoulderRotator::RotateShoulder(::RootMotion::FinalIK::FullBodyBipedChain chain, float weight, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::RotateShoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateShoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chain, weight, offset);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.GetParentBoneMap
::RootMotion::FinalIK::IKMapping::BoneMap* RootMotion::FinalIK::ShoulderRotator::GetParentBoneMap(::RootMotion::FinalIK::FullBodyBipedChain chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::GetParentBoneMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentBoneMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKMapping::BoneMap*, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.OnDestroy
void RootMotion::FinalIK::ShoulderRotator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ShoulderRotator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator
#include "RootMotion/FinalIK/VRIKCalibrator.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.RecalibrateScale
void RootMotion::FinalIK::VRIKCalibrator::RecalibrateScale(::RootMotion::FinalIK::VRIK* ik, ::RootMotion::FinalIK::VRIKCalibrator::Settings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::RecalibrateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "RecalibrateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ik, settings);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
::RootMotion::FinalIK::VRIKCalibrator::CalibrationData* RootMotion::FinalIK::VRIKCalibrator::Calibrate(::RootMotion::FinalIK::VRIK* ik, ::RootMotion::FinalIK::VRIKCalibrator::Settings* settings, ::UnityEngine::Transform* headTracker, ::UnityEngine::Transform* bodyTracker, ::UnityEngine::Transform* leftHandTracker, ::UnityEngine::Transform* rightHandTracker, ::UnityEngine::Transform* leftFootTracker, ::UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(headTracker), ::il2cpp_utils::ExtractType(bodyTracker), ::il2cpp_utils::ExtractType(leftHandTracker), ::il2cpp_utils::ExtractType(rightHandTracker), ::il2cpp_utils::ExtractType(leftFootTracker), ::il2cpp_utils::ExtractType(rightFootTracker)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ik, settings, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(::RootMotion::FinalIK::VRIKCalibrator::Settings* settings, ::UnityEngine::Transform* tracker, ::RootMotion::FinalIK::IKSolverVR::Leg* leg, ::UnityEngine::Transform* lastBone, ::UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "CalibrateLeg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(tracker), ::il2cpp_utils::ExtractType(leg), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(rootForward), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, settings, tracker, leg, lastBone, rootForward, isLeft);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
void RootMotion::FinalIK::VRIKCalibrator::Calibrate(::RootMotion::FinalIK::VRIK* ik, ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, ::UnityEngine::Transform* headTracker, ::UnityEngine::Transform* bodyTracker, ::UnityEngine::Transform* leftHandTracker, ::UnityEngine::Transform* rightHandTracker, ::UnityEngine::Transform* leftFootTracker, ::UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(headTracker), ::il2cpp_utils::ExtractType(bodyTracker), ::il2cpp_utils::ExtractType(leftHandTracker), ::il2cpp_utils::ExtractType(rightHandTracker), ::il2cpp_utils::ExtractType(leftFootTracker), ::il2cpp_utils::ExtractType(rightFootTracker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ik, data, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(::RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, ::UnityEngine::Transform* tracker, ::RootMotion::FinalIK::IKSolverVR::Leg* leg, ::UnityEngine::Transform* lastBone, ::UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "CalibrateLeg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(tracker), ::il2cpp_utils::ExtractType(leg), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(rootForward), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data, tracker, leg, lastBone, rootForward, isLeft);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single scaleMlp
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_scaleMlp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_scaleMlp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleMlp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bodyTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bodyTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 footTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 footTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footForwardOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footForwardOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footForwardOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footForwardOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footInwardOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footInwardOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footInwardOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footInwardOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footHeadingOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footHeadingOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footHeadingOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footHeadingOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisPositionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_pelvisPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_pelvisPositionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisPositionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_pelvisRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_pelvisRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData_Target.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single scale
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target head
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target leftHand
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target rightHand
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target pelvis
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target leftFoot
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFoot"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target rightFoot
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFoot"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target leftLegGoal
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftLegGoal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_leftLegGoal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftLegGoal"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target rightLegGoal
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightLegGoal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_rightLegGoal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightLegGoal"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 pelvisTargetRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisTargetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisTargetRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisTargetRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisPositionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisPositionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisPositionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::dyn_pelvisRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData_Target.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean used
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_used() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_used");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "used"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion localRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_localRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::dyn_localRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target.SetTo
void RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::SetTo(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::SetTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKLODController
#include "RootMotion/FinalIK/VRIKLODController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer LODRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& RootMotion::FinalIK::VRIKLODController::dyn_LODRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::dyn_LODRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LODRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LODDistance
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKLODController::dyn_LODDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::dyn_LODDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LODDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowCulled
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::VRIKLODController::dyn_allowCulled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::dyn_allowCulled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowCulled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.VRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& RootMotion::FinalIK::VRIKLODController::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.Start
void RootMotion::FinalIK::VRIKLODController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.Update
void RootMotion::FinalIK::VRIKLODController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.GetLODLevel
int RootMotion::FinalIK::VRIKLODController::GetLODLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::GetLODLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLODLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKRootController
#include "RootMotion/FinalIK/VRIKRootController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <pelvisTargetRight>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKRootController::dyn_$pelvisTargetRight$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::dyn_$pelvisTargetRight$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pelvisTargetRight>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform pelvisTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIKRootController::dyn_pelvisTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::dyn_pelvisTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform leftFootTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIKRootController::dyn_leftFootTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::dyn_leftFootTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFootTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform rightFootTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIKRootController::dyn_rightFootTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::dyn_rightFootTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFootTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.VRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& RootMotion::FinalIK::VRIKRootController::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.get_pelvisTargetRight
::UnityEngine::Vector3 RootMotion::FinalIK::VRIKRootController::get_pelvisTargetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::get_pelvisTargetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvisTargetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.set_pelvisTargetRight
void RootMotion::FinalIK::VRIKRootController::set_pelvisTargetRight(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::set_pelvisTargetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pelvisTargetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Awake
void RootMotion::FinalIK::VRIKRootController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Calibrate
void RootMotion::FinalIK::VRIKRootController::Calibrate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Calibrate
void RootMotion::FinalIK::VRIKRootController::Calibrate(::RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.OnPreUpdate
void RootMotion::FinalIK::VRIKRootController::OnPreUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::OnPreUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.OnDestroy
void RootMotion::FinalIK::VRIKRootController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKRootController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.BeatmapFloorLightTilesGrid
#include "Ice/BeatmapFloorLightTilesGrid.hpp"
// Including type: Ice.FloorLightTilesGrid
#include "Ice/FloorLightTilesGrid.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfRows
[[deprecated("Use field access instead!")]] int& Ice::BeatmapFloorLightTilesGrid::dyn__numberOfRows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::dyn__numberOfRows");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfRows"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tileWidth
[[deprecated("Use field access instead!")]] float& Ice::BeatmapFloorLightTilesGrid::dyn__tileWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::dyn__tileWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tileWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tileHeight
[[deprecated("Use field access instead!")]] float& Ice::BeatmapFloorLightTilesGrid::dyn__tileHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::dyn__tileHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tileHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Ice.FloorLightTilesGrid _floorLightTilesGrid
[[deprecated("Use field access instead!")]] ::Ice::FloorLightTilesGrid*& Ice::BeatmapFloorLightTilesGrid::dyn__floorLightTilesGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::dyn__floorLightTilesGrid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightTilesGrid"))->offset;
  return *reinterpret_cast<::Ice::FloorLightTilesGrid**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawnController*& Ice::BeatmapFloorLightTilesGrid::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.BeatmapFloorLightTilesGrid.Start
void Ice::BeatmapFloorLightTilesGrid::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::BeatmapFloorLightTilesGrid::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightStreakTileEffect
#include "Ice/FloorLightStreakTileEffect.hpp"
// Including type: Ice.FloorLightStreakTileEffect/Ice.Element
#include "Ice/FloorLightStreakTileEffect_Element.hpp"
// Including type: Ice.FloorLightTilesGrid
#include "Ice/FloorLightTilesGrid.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: SimpleMemoryPool`1
#include "GlobalNamespace/SimpleMemoryPool_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFadeInDuration
float Ice::FloorLightStreakTileEffect::_get_kFadeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::_get_kFadeInDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Ice", "FloorLightStreakTileEffect", "kFadeInDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFadeInDuration
void Ice::FloorLightStreakTileEffect::_set_kFadeInDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::_set_kFadeInDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Ice", "FloorLightStreakTileEffect", "kFadeInDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kFadeOutDuration
float Ice::FloorLightStreakTileEffect::_get_kFadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::_get_kFadeOutDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Ice", "FloorLightStreakTileEffect", "kFadeOutDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFadeOutDuration
void Ice::FloorLightStreakTileEffect::_set_kFadeOutDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::_set_kFadeOutDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Ice", "FloorLightStreakTileEffect", "kFadeOutDuration", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stayOnTileDuration
[[deprecated("Use field access instead!")]] float& Ice::FloorLightStreakTileEffect::dyn__stayOnTileDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::dyn__stayOnTileDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stayOnTileDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Ice.FloorLightTilesGrid _floorLightTilesGrid
[[deprecated("Use field access instead!")]] ::Ice::FloorLightTilesGrid*& Ice::FloorLightStreakTileEffect::dyn__floorLightTilesGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::dyn__floorLightTilesGrid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightTilesGrid"))->offset;
  return *reinterpret_cast<::Ice::FloorLightTilesGrid**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& Ice::FloorLightStreakTileEffect::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SimpleMemoryPool`1<Ice.FloorLightStreakTileEffect/Ice.Element> _elementsPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SimpleMemoryPool_1<::Ice::FloorLightStreakTileEffect::Element*>*& Ice::FloorLightStreakTileEffect::dyn__elementsPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::dyn__elementsPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elementsPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SimpleMemoryPool_1<::Ice::FloorLightStreakTileEffect::Element*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.Start
void Ice::FloorLightStreakTileEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.Update
void Ice::FloorLightStreakTileEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.SpawnEffect
void Ice::FloorLightStreakTileEffect::SpawnEffect(int x, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::SpawnEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, color);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.DespawnAllEffects
void Ice::FloorLightStreakTileEffect::DespawnAllEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::DespawnAllEffects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnAllEffects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.CreateNewElement
::Ice::FloorLightStreakTileEffect::Element* Ice::FloorLightStreakTileEffect::CreateNewElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::CreateNewElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNewElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Ice::FloorLightStreakTileEffect::Element*, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect.HandleElementDidMoveToNextTile
void Ice::FloorLightStreakTileEffect::HandleElementDidMoveToNextTile(::Ice::FloorLightStreakTileEffect::Element* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::HandleElementDidMoveToNextTile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleElementDidMoveToNextTile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightStreakTileEffect/Ice.Element
#include "Ice/FloorLightStreakTileEffect_Element.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Ice.FloorLightStreakTileEffect/Ice.Element> didMoveToNextTile
[[deprecated("Use field access instead!")]] ::System::Action_1<::Ice::FloorLightStreakTileEffect::Element*>*& Ice::FloorLightStreakTileEffect::Element::dyn_didMoveToNextTile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn_didMoveToNextTile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didMoveToNextTile"))->offset;
  return *reinterpret_cast<::System::Action_1<::Ice::FloorLightStreakTileEffect::Element*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _currentTileY
[[deprecated("Use field access instead!")]] int& Ice::FloorLightStreakTileEffect::Element::dyn__currentTileY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn__currentTileY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTileY"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lineIndex
[[deprecated("Use field access instead!")]] int& Ice::FloorLightStreakTileEffect::Element::dyn__lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn__lineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _nextTileRemainingTime
[[deprecated("Use field access instead!")]] float& Ice::FloorLightStreakTileEffect::Element::dyn__nextTileRemainingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn__nextTileRemainingTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextTileRemainingTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stayOnTileDuration
[[deprecated("Use field access instead!")]] float& Ice::FloorLightStreakTileEffect::Element::dyn__stayOnTileDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn__stayOnTileDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stayOnTileDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Ice::FloorLightStreakTileEffect::Element::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect/Ice.Element.get_lineIndex
int Ice::FloorLightStreakTileEffect::Element::get_lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::get_lineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect/Ice.Element.get_currentTileY
int Ice::FloorLightStreakTileEffect::Element::get_currentTileY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::get_currentTileY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentTileY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect/Ice.Element.get_color
::UnityEngine::Color Ice::FloorLightStreakTileEffect::Element::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect/Ice.Element.Setup
void Ice::FloorLightStreakTileEffect::Element::Setup(::UnityEngine::Color color, int lineIndex, float stayOnTileDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(stayOnTileDuration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, lineIndex, stayOnTileDuration);
}
// Autogenerated method: Ice.FloorLightStreakTileEffect/Ice.Element.ManualUpdate
void Ice::FloorLightStreakTileEffect::Element::ManualUpdate(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightStreakTileEffect::Element::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightTile
#include "Ice/FloorLightTile.hpp"
// Including type: Ice.FloorLightTile/Ice.Pool
#include "Ice/FloorLightTile_Pool.hpp"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockColorSetter _colorSetter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockColorSetter*& Ice::FloorLightTile::dyn__colorSetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn__colorSetter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorSetter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockColorSetter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _tubeBloomPrePassLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& Ice::FloorLightTile::dyn__tubeBloomPrePassLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn__tubeBloomPrePassLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tubeBloomPrePassLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.SongTimeTweeningManager _songTimeTweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& Ice::FloorLightTile::dyn__songTimeTweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn__songTimeTweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeTweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::SongTimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Ice.FloorLightTile> didFinish
[[deprecated("Use field access instead!")]] ::System::Action_1<::Ice::FloorLightTile*>*& Ice::FloorLightTile::dyn_didFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn_didFinish");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didFinish"))->offset;
  return *reinterpret_cast<::System::Action_1<::Ice::FloorLightTile*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.ColorTween _fadeInTween
[[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& Ice::FloorLightTile::dyn__fadeInTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn__fadeInTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInTween"))->offset;
  return *reinterpret_cast<::Tweening::ColorTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.ColorTween _fadeOutTween
[[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& Ice::FloorLightTile::dyn__fadeOutTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::dyn__fadeOutTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutTween"))->offset;
  return *reinterpret_cast<::Tweening::ColorTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.FloorLightTile.Awake
void Ice::FloorLightTile::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTile.OnDestroy
void Ice::FloorLightTile::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTile.HighlightWithColor
void Ice::FloorLightTile::HighlightWithColor(::UnityEngine::Color color, float fadeInDuration, float fadeOutDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::HighlightWithColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightWithColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(fadeInDuration), ::il2cpp_utils::ExtractType(fadeOutDuration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, fadeInDuration, fadeOutDuration);
}
// Autogenerated method: Ice.FloorLightTile.HandleFadeInTweenOnCompleted
void Ice::FloorLightTile::HandleFadeInTweenOnCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::HandleFadeInTweenOnCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFadeInTweenOnCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTile.HandleFadeOutTweenOnCompleted
void Ice::FloorLightTile::HandleFadeOutTweenOnCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::HandleFadeOutTweenOnCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFadeOutTweenOnCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTile.SetColor
void Ice::FloorLightTile::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightTile/Ice.Pool
#include "Ice/FloorLightTile_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightTileInstaller
#include "Ice/FloorLightTileInstaller.hpp"
// Including type: Ice.FloorLightTile
#include "Ice/FloorLightTile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Ice.FloorLightTile _floorLightTilePrefab
[[deprecated("Use field access instead!")]] ::Ice::FloorLightTile*& Ice::FloorLightTileInstaller::dyn__floorLightTilePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTileInstaller::dyn__floorLightTilePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightTilePrefab"))->offset;
  return *reinterpret_cast<::Ice::FloorLightTile**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.FloorLightTileInstaller.InstallBindings
void Ice::FloorLightTileInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTileInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.FloorLightTilesGrid
#include "Ice/FloorLightTilesGrid.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Ice.FloorLightTile/Ice.Pool
#include "Ice/FloorLightTile_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Ice.FloorLightTile/Ice.Pool _floorLightTileMemoryPool
[[deprecated("Use field access instead!")]] ::Ice::FloorLightTile::Pool*& Ice::FloorLightTilesGrid::dyn__floorLightTileMemoryPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__floorLightTileMemoryPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightTileMemoryPool"))->offset;
  return *reinterpret_cast<::Ice::FloorLightTile::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<Ice.FloorLightTile> _floorLightTileMemoryPoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::Ice::FloorLightTile*>*& Ice::FloorLightTilesGrid::dyn__floorLightTileMemoryPoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__floorLightTileMemoryPoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightTileMemoryPoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::Ice::FloorLightTile*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Ice.FloorLightTile[][] _grid
[[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::Ice::FloorLightTile*>>& Ice::FloorLightTilesGrid::dyn__grid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__grid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_grid"))->offset;
  return *reinterpret_cast<::ArrayW<::ArrayW<::Ice::FloorLightTile*>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tileWidth
[[deprecated("Use field access instead!")]] float& Ice::FloorLightTilesGrid::dyn__tileWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__tileWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tileWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tileHeight
[[deprecated("Use field access instead!")]] float& Ice::FloorLightTilesGrid::dyn__tileHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__tileHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tileHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _anchorPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Ice::FloorLightTilesGrid::dyn__anchorPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__anchorPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_anchorPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ySize
[[deprecated("Use field access instead!")]] int& Ice::FloorLightTilesGrid::dyn__ySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::dyn__ySize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ySize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.FloorLightTilesGrid.get_ySize
int Ice::FloorLightTilesGrid::get_ySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::get_ySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTilesGrid.Init
void Ice::FloorLightTilesGrid::Init(::UnityEngine::Vector3 anchorPoint, int xSize, int ySize, float tileWidth, float tileHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorPoint), ::il2cpp_utils::ExtractType(xSize), ::il2cpp_utils::ExtractType(ySize), ::il2cpp_utils::ExtractType(tileWidth), ::il2cpp_utils::ExtractType(tileHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, anchorPoint, xSize, ySize, tileWidth, tileHeight);
}
// Autogenerated method: Ice.FloorLightTilesGrid.HighlightTile
void Ice::FloorLightTilesGrid::HighlightTile(int x, int y, float fadeInDuration, float fadeOutDuration, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::HighlightTile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightTile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(fadeInDuration), ::il2cpp_utils::ExtractType(fadeOutDuration), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y, fadeInDuration, fadeOutDuration, color);
}
// Autogenerated method: Ice.FloorLightTilesGrid.DespawnAllTiles
void Ice::FloorLightTilesGrid::DespawnAllTiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::DespawnAllTiles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnAllTiles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.FloorLightTilesGrid.HandleFloorLightTileDidFinish
void Ice::FloorLightTilesGrid::HandleFloorLightTileDidFinish(::Ice::FloorLightTile* floorLightTile) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::HandleFloorLightTileDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFloorLightTileDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(floorLightTile)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, floorLightTile);
}
// Autogenerated method: Ice.FloorLightTilesGrid.DespawnTile
void Ice::FloorLightTilesGrid::DespawnTile(::Ice::FloorLightTile* floorLightTile) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTilesGrid::DespawnTile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnTile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(floorLightTile)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, floorLightTile);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.NoteCutFloorLightStreakTileEffectSpawner
#include "Ice/NoteCutFloorLightStreakTileEffectSpawner.hpp"
// Including type: Ice.FloorLightStreakTileEffect
#include "Ice/FloorLightStreakTileEffect.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Ice.FloorLightStreakTileEffect _floorLightStreakTileEffect
[[deprecated("Use field access instead!")]] ::Ice::FloorLightStreakTileEffect*& Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__floorLightStreakTileEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__floorLightStreakTileEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorLightStreakTileEffect"))->offset;
  return *reinterpret_cast<::Ice::FloorLightStreakTileEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _spawnColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__spawnColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::dyn__spawnColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawner.get_spawnColor
::UnityEngine::Color Ice::NoteCutFloorLightStreakTileEffectSpawner::get_spawnColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::get_spawnColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawner.set_spawnColor
void Ice::NoteCutFloorLightStreakTileEffectSpawner::set_spawnColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::set_spawnColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spawnColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawner.Start
void Ice::NoteCutFloorLightStreakTileEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawner.OnDestroy
void Ice::NoteCutFloorLightStreakTileEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawner.HandleNoteWasCut
void Ice::NoteCutFloorLightStreakTileEffectSpawner::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ice.NoteCutFloorLightStreakTileEffectSpawnerLightWithId
#include "Ice/NoteCutFloorLightStreakTileEffectSpawnerLightWithId.hpp"
// Including type: Ice.NoteCutFloorLightStreakTileEffectSpawner
#include "Ice/NoteCutFloorLightStreakTileEffectSpawner.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Ice.NoteCutFloorLightStreakTileEffectSpawner _noteCutFloorLightStreakTileEffectSpawner
[[deprecated("Use field access instead!")]] ::Ice::NoteCutFloorLightStreakTileEffectSpawner*& Ice::NoteCutFloorLightStreakTileEffectSpawnerLightWithId::dyn__noteCutFloorLightStreakTileEffectSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawnerLightWithId::dyn__noteCutFloorLightStreakTileEffectSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteCutFloorLightStreakTileEffectSpawner"))->offset;
  return *reinterpret_cast<::Ice::NoteCutFloorLightStreakTileEffectSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Ice.NoteCutFloorLightStreakTileEffectSpawnerLightWithId.ColorWasSet
void Ice::NoteCutFloorLightStreakTileEffectSpawnerLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Ice::NoteCutFloorLightStreakTileEffectSpawnerLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <levelID>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$levelID$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$levelID$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levelID>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <beatmapCharacteristicSerializedName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$beatmapCharacteristicSerializedName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$beatmapCharacteristicSerializedName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapCharacteristicSerializedName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDifficulty <difficulty>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$difficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::dyn_$difficulty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficulty>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficulty*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.get_levelID
::StringW GlobalNamespace::BeatmapIdentifierNetSerializable::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::get_levelID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_levelID
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_levelID(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::set_levelID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.get_beatmapCharacteristicSerializedName
::StringW GlobalNamespace::BeatmapIdentifierNetSerializable::get_beatmapCharacteristicSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::get_beatmapCharacteristicSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristicSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_beatmapCharacteristicSerializedName
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_beatmapCharacteristicSerializedName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::set_beatmapCharacteristicSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapCharacteristicSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.get_difficulty
::GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapIdentifierNetSerializable::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::get_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_difficulty
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_difficulty(::GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::set_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.LiteNetLib.Utils.INetSerializable.Deserialize
void GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib_Utils_INetSerializable_Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib.Utils.INetSerializable.Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.LiteNetLib.Utils.INetSerializable.Serialize
void GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib_Utils_INetSerializable_Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib.Utils.INetSerializable.Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.Equals
bool GlobalNamespace::BeatmapIdentifierNetSerializable::Equals(::GlobalNamespace::BeatmapIdentifierNetSerializable* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.Equals
bool GlobalNamespace::BeatmapIdentifierNetSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.GetHashCode
int GlobalNamespace::BeatmapIdentifierNetSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.ToString
::StringW GlobalNamespace::BeatmapIdentifierNetSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapLevelMask
#include "GlobalNamespace/BeatmapLevelMask.hpp"
// Including type: BitMaskSparse
#include "GlobalNamespace/BitMaskSparse.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kBitCount
int GlobalNamespace::BeatmapLevelMask::_get_kBitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_get_kBitCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kBitCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBitCount
void GlobalNamespace::BeatmapLevelMask::_set_kBitCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_set_kBitCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kBitCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashCount
int GlobalNamespace::BeatmapLevelMask::_get_kHashCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_get_kHashCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kHashCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashCount
void GlobalNamespace::BeatmapLevelMask::_set_kHashCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_set_kHashCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kHashCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashBits
int GlobalNamespace::BeatmapLevelMask::_get_kHashBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_get_kHashBits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kHashBits"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashBits
void GlobalNamespace::BeatmapLevelMask::_set_kHashBits(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_set_kHashBits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kHashBits", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::StringW GlobalNamespace::BeatmapLevelMask::_get_kToStringPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_get_kToStringPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BeatmapLevelMask", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::BeatmapLevelMask::_set_kToStringPrefix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_set_kToStringPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::StringW GlobalNamespace::BeatmapLevelMask::_get_kToStringSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_get_kToStringSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BeatmapLevelMask", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::BeatmapLevelMask::_set_kToStringSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::_set_kToStringSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kToStringSuffix", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly BitMaskSparse _bloomFilter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BitMaskSparse*& GlobalNamespace::BeatmapLevelMask::dyn__bloomFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::dyn__bloomFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFilter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BitMaskSparse**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelMask.Contains
bool GlobalNamespace::BeatmapLevelMask::Contains(::StringW state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: BeatmapLevelMask.AddLevel
void GlobalNamespace::BeatmapLevelMask::AddLevel(::StringW state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::AddLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: BeatmapLevelMask.Serialize
void GlobalNamespace::BeatmapLevelMask::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BeatmapLevelMask.Deserialize
void GlobalNamespace::BeatmapLevelMask::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BeatmapLevelMask.Equals
bool GlobalNamespace::BeatmapLevelMask::Equals(::GlobalNamespace::BeatmapLevelMask* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BeatmapLevelMask.ToString
::StringW GlobalNamespace::BeatmapLevelMask::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelMask.GetHashCode
int GlobalNamespace::BeatmapLevelMask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelMask.Equals
bool GlobalNamespace::BeatmapLevelMask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMask128
#include "GlobalNamespace/BitMask128.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d0
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask128::dyn__d0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::dyn__d0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d0"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d1
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask128::dyn__d1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::dyn__d1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d1"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitMask128.get_bitCount
int GlobalNamespace::BitMask128::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMask128.get_maxValue
::GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMask128..ctor
// ABORTED elsewhere.  GlobalNamespace::BitMask128::BitMask128(uint64_t d0, uint64_t d1)
// Autogenerated method: BitMask128..ctor
GlobalNamespace::BitMask128::BitMask128(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BitMask128.SetBits
::GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMask128.GetBits
uint64_t GlobalNamespace::BitMask128::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMask128.Serialize
void GlobalNamespace::BitMask128::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMask128.CreateFromSerializedData
::GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMask128.Deserialize
::GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: BitMask128.Equals
bool GlobalNamespace::BitMask128::Equals(::GlobalNamespace::BitMask128 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMask128.ToString
::StringW GlobalNamespace::BitMask128::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BitMask128.Equals
bool GlobalNamespace::BitMask128::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: BitMask128.GetHashCode
int GlobalNamespace::BitMask128::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMask128.op_BitwiseOr
::GlobalNamespace::BitMask128 GlobalNamespace::operator|(const ::GlobalNamespace::BitMask128&& a, const ::GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask128.op_BitwiseAnd
::GlobalNamespace::BitMask128 GlobalNamespace::operator&(const ::GlobalNamespace::BitMask128&& a, const ::GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask128.op_ExclusiveOr
::GlobalNamespace::BitMask128 GlobalNamespace::operator^(const ::GlobalNamespace::BitMask128&& a, const ::GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_ExclusiveOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_ExclusiveOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask128.op_LeftShift
::GlobalNamespace::BitMask128 GlobalNamespace::operator<<(const ::GlobalNamespace::BitMask128&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_LeftShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_LeftShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), bits);
}
// Autogenerated method: BitMask128.op_RightShift
::GlobalNamespace::BitMask128 GlobalNamespace::operator>>(const ::GlobalNamespace::BitMask128&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_RightShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_RightShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), bits);
}
// Autogenerated method: BitMask128.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::BitMask128&& a, const ::GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask128.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::BitMask128&& a, const ::GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMask256
#include "GlobalNamespace/BitMask256.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d0
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask256::dyn__d0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::dyn__d0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d0"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d1
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask256::dyn__d1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::dyn__d1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d1"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d2
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask256::dyn__d2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::dyn__d2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d2"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _d3
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::BitMask256::dyn__d3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::dyn__d3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_d3"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitMask256.get_bitCount
int GlobalNamespace::BitMask256::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMask256.get_maxValue
::GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMask256..ctor
// ABORTED elsewhere.  GlobalNamespace::BitMask256::BitMask256(uint64_t d0, uint64_t d1, uint64_t d2, uint64_t d3)
// Autogenerated method: BitMask256..ctor
GlobalNamespace::BitMask256::BitMask256(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BitMask256.SetBits
::GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMask256.GetBits
uint64_t GlobalNamespace::BitMask256::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMask256.Serialize
void GlobalNamespace::BitMask256::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMask256.CreateFromSerializedData
::GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMask256.Deserialize
::GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: BitMask256.Equals
bool GlobalNamespace::BitMask256::Equals(::GlobalNamespace::BitMask256 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMask256.ToString
::StringW GlobalNamespace::BitMask256::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BitMask256.Equals
bool GlobalNamespace::BitMask256::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: BitMask256.GetHashCode
int GlobalNamespace::BitMask256::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMask256.op_BitwiseOr
::GlobalNamespace::BitMask256 GlobalNamespace::operator|(const ::GlobalNamespace::BitMask256&& a, const ::GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask256.op_BitwiseAnd
::GlobalNamespace::BitMask256 GlobalNamespace::operator&(const ::GlobalNamespace::BitMask256&& a, const ::GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask256.op_ExclusiveOr
::GlobalNamespace::BitMask256 GlobalNamespace::operator^(const ::GlobalNamespace::BitMask256&& a, const ::GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_ExclusiveOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_ExclusiveOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask256.op_LeftShift
::GlobalNamespace::BitMask256 GlobalNamespace::operator<<(const ::GlobalNamespace::BitMask256&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_LeftShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_LeftShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), bits);
}
// Autogenerated method: BitMask256.op_RightShift
::GlobalNamespace::BitMask256 GlobalNamespace::operator>>(const ::GlobalNamespace::BitMask256&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_RightShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_RightShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMask256, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), bits);
}
// Autogenerated method: BitMask256.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::BitMask256&& a, const ::GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: BitMask256.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::BitMask256&& a, const ::GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMask256::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BitMaskArray
#include "GlobalNamespace/BitMaskArray.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <bitCount>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BitMaskArray::dyn_$bitCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::dyn_$bitCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<bitCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64[] _data
[[deprecated("Use field access instead!")]] ::ArrayW<uint64_t>& GlobalNamespace::BitMaskArray::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::ArrayW<uint64_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitMaskArray.get_bitCount
int GlobalNamespace::BitMaskArray::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMaskArray.Equals
bool GlobalNamespace::BitMaskArray::Equals(::GlobalNamespace::BitMaskArray* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMaskArray.SetBits
::GlobalNamespace::BitMaskArray* GlobalNamespace::BitMaskArray::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMaskArray*, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMaskArray.GetBits
uint64_t GlobalNamespace::BitMaskArray::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMaskArray.Serialize
void GlobalNamespace::BitMaskArray::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMaskArray.Deserialize
void GlobalNamespace::BitMaskArray::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMaskArray.ToString
::StringW GlobalNamespace::BitMaskArray::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskArray::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BitMaskSparse
#include "GlobalNamespace/BitMaskSparse.hpp"
// Including type: BitMaskSparse/<>c
#include "GlobalNamespace/BitMaskSparse_--c.hpp"
// Including type: System.Collections.Generic.SortedSet`1
#include "System/Collections/Generic/SortedSet_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <bitCount>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BitMaskSparse::dyn_$bitCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::dyn_$bitCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<bitCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.SortedSet`1<System.UInt32> _sparseSet
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::SortedSet_1<uint>*& GlobalNamespace::BitMaskSparse::dyn__sparseSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::dyn__sparseSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparseSet"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::SortedSet_1<uint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitMaskSparse.get_bitCount
int GlobalNamespace::BitMaskSparse::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMaskSparse.Equals
bool GlobalNamespace::BitMaskSparse::Equals(::GlobalNamespace::BitMaskSparse* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMaskSparse.SetBits
::GlobalNamespace::BitMaskSparse* GlobalNamespace::BitMaskSparse::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitMaskSparse*, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMaskSparse.GetBits
uint64_t GlobalNamespace::BitMaskSparse::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMaskSparse.Serialize
void GlobalNamespace::BitMaskSparse::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMaskSparse.Deserialize
void GlobalNamespace::BitMaskSparse::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMaskSparse.ToString
::StringW GlobalNamespace::BitMaskSparse::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BitMaskSparse/<>c
#include "GlobalNamespace/BitMaskSparse_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BitMaskSparse/<>c <>9
::GlobalNamespace::BitMaskSparse::$$c* GlobalNamespace::BitMaskSparse::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::BitMaskSparse::$$c*>("", "BitMaskSparse/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BitMaskSparse/<>c <>9
void GlobalNamespace::BitMaskSparse::$$c::_set_$$9(::GlobalNamespace::BitMaskSparse::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitMaskSparse/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.UInt32,System.String> <>9__8_0
::System::Func_2<uint, ::StringW>* GlobalNamespace::BitMaskSparse::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<uint, ::StringW>*>("", "BitMaskSparse/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.UInt32,System.String> <>9__8_0
void GlobalNamespace::BitMaskSparse::$$c::_set_$$9__8_0(::System::Func_2<uint, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitMaskSparse/<>c", "<>9__8_0", value)));
}
// Autogenerated method: BitMaskSparse/<>c..cctor
void GlobalNamespace::BitMaskSparse::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskSparse/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMaskSparse/<>c.<ToString>b__8_0
::StringW GlobalNamespace::BitMaskSparse::$$c::$ToString$b__8_0(uint i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitMaskSparse::$$c::<ToString>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToString>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFilterUtil
#include "GlobalNamespace/BloomFilterUtil.hpp"
// Including type: BloomFilterUtil/<>c__DisplayClass2_0`1
#include "GlobalNamespace/BloomFilterUtil_--c__DisplayClass2_0_1.hpp"
// Including type: IBitMask`1
#include "GlobalNamespace/IBitMask_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFilterUtil.MurmurHash2
uint GlobalNamespace::BloomFilterUtil::MurmurHash2(::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFilterUtil::MurmurHash2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomFilterUtil", "MurmurHash2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, key);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask None
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "None"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask None
void GlobalNamespace::GameplayModifierMask::_set_None(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "None", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask BatteryEnergy
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_BatteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_BatteryEnergy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "BatteryEnergy"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask BatteryEnergy
void GlobalNamespace::GameplayModifierMask::_set_BatteryEnergy(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_BatteryEnergy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "BatteryEnergy", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoFail
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_NoFail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoFail"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoFail
void GlobalNamespace::GameplayModifierMask::_set_NoFail(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_NoFail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoFail", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask InstaFail
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_InstaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_InstaFail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "InstaFail"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask InstaFail
void GlobalNamespace::GameplayModifierMask::_set_InstaFail(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_InstaFail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "InstaFail", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoObstacles
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_NoObstacles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoObstacles"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoObstacles
void GlobalNamespace::GameplayModifierMask::_set_NoObstacles(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_NoObstacles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoObstacles", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoBombs
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoBombs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_NoBombs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoBombs"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoBombs
void GlobalNamespace::GameplayModifierMask::_set_NoBombs(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_NoBombs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoBombs", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask FastNotes
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_FastNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_FastNotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "FastNotes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask FastNotes
void GlobalNamespace::GameplayModifierMask::_set_FastNotes(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_FastNotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "FastNotes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask StrictAngles
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_StrictAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_StrictAngles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "StrictAngles"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask StrictAngles
void GlobalNamespace::GameplayModifierMask::_set_StrictAngles(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_StrictAngles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "StrictAngles", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask DisappearingArrows
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_DisappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_DisappearingArrows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "DisappearingArrows"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask DisappearingArrows
void GlobalNamespace::GameplayModifierMask::_set_DisappearingArrows(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_DisappearingArrows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "DisappearingArrows", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask FasterSong
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_FasterSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_FasterSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "FasterSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask FasterSong
void GlobalNamespace::GameplayModifierMask::_set_FasterSong(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_FasterSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "FasterSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SlowerSong
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SlowerSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_SlowerSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SlowerSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SlowerSong
void GlobalNamespace::GameplayModifierMask::_set_SlowerSong(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_SlowerSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SlowerSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoArrows
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_NoArrows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoArrows"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoArrows
void GlobalNamespace::GameplayModifierMask::_set_NoArrows(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_NoArrows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoArrows", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask GhostNotes
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_GhostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_GhostNotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "GhostNotes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask GhostNotes
void GlobalNamespace::GameplayModifierMask::_set_GhostNotes(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_GhostNotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "GhostNotes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SuperFastSong
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SuperFastSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_SuperFastSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SuperFastSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SuperFastSong
void GlobalNamespace::GameplayModifierMask::_set_SuperFastSong(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_SuperFastSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SuperFastSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask ProMode
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_ProMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_ProMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "ProMode"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask ProMode
void GlobalNamespace::GameplayModifierMask::_set_ProMode(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_ProMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "ProMode", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask ZenMode
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_ZenMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_ZenMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "ZenMode"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask ZenMode
void GlobalNamespace::GameplayModifierMask::_set_ZenMode(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_ZenMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "ZenMode", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SmallCubes
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SmallCubes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_SmallCubes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SmallCubes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SmallCubes
void GlobalNamespace::GameplayModifierMask::_set_SmallCubes(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_SmallCubes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SmallCubes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask All
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "All"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask All
void GlobalNamespace::GameplayModifierMask::_set_All(::GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt16 value__
[[deprecated("Use field access instead!")]] uint16_t& GlobalNamespace::GameplayModifierMask::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMask::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierMaskExtensions
#include "GlobalNamespace/GameplayModifierMaskExtensions.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifierMaskExtensions.Contains
bool GlobalNamespace::GameplayModifierMaskExtensions::Contains(::GlobalNamespace::GameplayModifierMask mask, ::GlobalNamespace::GameplayModifierMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: GameplayModifierMaskExtensions.DifferenceFrom
int GlobalNamespace::GameplayModifierMaskExtensions::DifferenceFrom(::GlobalNamespace::GameplayModifierMask mask, ::GlobalNamespace::GameplayModifierMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMaskExtensions::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToHexString
::StringW GlobalNamespace::GameplayModifierMaskExtensions::ToHexString(::GlobalNamespace::GameplayModifierMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMaskExtensions::ToHexString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToHexString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToModifiers
::GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifierMaskExtensions::ToModifiers(::GlobalNamespace::GameplayModifierMask gameplayModifierMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMaskExtensions::ToModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifierMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameplayModifierMask);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToMask
::GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMaskExtensions::ToMask(::GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifierMaskExtensions::ToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifierMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameplayModifiers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10BE364
// Autogenerated static field getter
// Get static field: static public readonly GameplayModifiers noModifiers
::GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::_get_noModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::_get_noModifiers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers*>("", "GameplayModifiers", "noModifiers"));
}
// Autogenerated static field setter
// Set static field: static public readonly GameplayModifiers noModifiers
void GlobalNamespace::GameplayModifiers::_set_noModifiers(::GlobalNamespace::GameplayModifiers* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::_set_noModifiers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers", "noModifiers", value));
}
// Autogenerated instance field getter
// Get instance field: private GameplayModifiers/EnergyType _energyType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers::EnergyType& GlobalNamespace::GameplayModifiers::dyn__energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__energyType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_energyType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiers::EnergyType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _noFailOn0Energy
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__noFailOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__noFailOn0Energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noFailOn0Energy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _instaFail
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__instaFail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instaFail"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _failOnSaberClash
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__failOnSaberClash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failOnSaberClash"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameplayModifiers/EnabledObstacleType _enabledObstacleType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers::EnabledObstacleType& GlobalNamespace::GameplayModifiers::dyn__enabledObstacleType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__enabledObstacleType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enabledObstacleType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiers::EnabledObstacleType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fastNotes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__fastNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__fastNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fastNotes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _strictAngles
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__strictAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__strictAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strictAngles"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disappearingArrows
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__disappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__disappearingArrows");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disappearingArrows"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ghostNotes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__ghostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__ghostNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostNotes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _noBombs
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__noBombs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__noBombs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noBombs"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameplayModifiers/SongSpeed _songSpeed
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers::SongSpeed& GlobalNamespace::GameplayModifiers::dyn__songSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__songSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songSpeed"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiers::SongSpeed*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _noArrows
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__noArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__noArrows");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noArrows"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _proMode
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__proMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__proMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_proMode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _zenMode
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__zenMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__zenMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zenMode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _smallCubes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameplayModifiers::dyn__smallCubes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::dyn__smallCubes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smallCubes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameplayModifiers.get_energyType
::GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameplayModifiers::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_energyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers::EnergyType, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noFailOn0Energy
bool GlobalNamespace::GameplayModifiers::get_noFailOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_noFailOn0Energy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFailOn0Energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_instaFail
bool GlobalNamespace::GameplayModifiers::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_instaFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_failOnSaberClash
bool GlobalNamespace::GameplayModifiers::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_failOnSaberClash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_enabledObstacleType
::GlobalNamespace::GameplayModifiers::EnabledObstacleType GlobalNamespace::GameplayModifiers::get_enabledObstacleType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_enabledObstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabledObstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers::EnabledObstacleType, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_fastNotes
bool GlobalNamespace::GameplayModifiers::get_fastNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_fastNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fastNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_strictAngles
bool GlobalNamespace::GameplayModifiers::get_strictAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_strictAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_strictAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_disappearingArrows
bool GlobalNamespace::GameplayModifiers::get_disappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_disappearingArrows");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disappearingArrows", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_ghostNotes
bool GlobalNamespace::GameplayModifiers::get_ghostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_ghostNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ghostNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noBombs
bool GlobalNamespace::GameplayModifiers::get_noBombs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_noBombs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noBombs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_songSpeed
::GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::get_songSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_songSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers::SongSpeed, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noArrows
bool GlobalNamespace::GameplayModifiers::get_noArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_noArrows");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noArrows", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_proMode
bool GlobalNamespace::GameplayModifiers::get_proMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_proMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_proMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_zenMode
bool GlobalNamespace::GameplayModifiers::get_zenMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_zenMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_zenMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_smallCubes
bool GlobalNamespace::GameplayModifiers::get_smallCubes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_smallCubes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_smallCubes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_songSpeedMul
float GlobalNamespace::GameplayModifiers::get_songSpeedMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_cutAngleTolerance
float GlobalNamespace::GameplayModifiers::get_cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_cutAngleTolerance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutAngleTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_notesUniformScale
float GlobalNamespace::GameplayModifiers::get_notesUniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::get_notesUniformScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_notesUniformScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers..cctor
void GlobalNamespace::GameplayModifiers::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiers", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GameplayModifiers.CopyWith
::GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::CopyWith(::System::Nullable_1<::GlobalNamespace::GameplayModifiers::EnergyType> energyType, ::System::Nullable_1<bool> noFailOn0Energy, ::System::Nullable_1<bool> instaFail, ::System::Nullable_1<bool> failOnSaberClash, ::System::Nullable_1<::GlobalNamespace::GameplayModifiers::EnabledObstacleType> enabledObstacleType, ::System::Nullable_1<bool> noBombs, ::System::Nullable_1<bool> fastNotes, ::System::Nullable_1<bool> strictAngles, ::System::Nullable_1<bool> disappearingArrows, ::System::Nullable_1<::GlobalNamespace::GameplayModifiers::SongSpeed> songSpeed, ::System::Nullable_1<bool> noArrows, ::System::Nullable_1<bool> ghostNotes, ::System::Nullable_1<bool> proMode, ::System::Nullable_1<bool> zenMode, ::System::Nullable_1<bool> smallCubes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::CopyWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energyType), ::il2cpp_utils::ExtractType(noFailOn0Energy), ::il2cpp_utils::ExtractType(instaFail), ::il2cpp_utils::ExtractType(failOnSaberClash), ::il2cpp_utils::ExtractType(enabledObstacleType), ::il2cpp_utils::ExtractType(noBombs), ::il2cpp_utils::ExtractType(fastNotes), ::il2cpp_utils::ExtractType(strictAngles), ::il2cpp_utils::ExtractType(disappearingArrows), ::il2cpp_utils::ExtractType(songSpeed), ::il2cpp_utils::ExtractType(noArrows), ::il2cpp_utils::ExtractType(ghostNotes), ::il2cpp_utils::ExtractType(proMode), ::il2cpp_utils::ExtractType(zenMode), ::il2cpp_utils::ExtractType(smallCubes)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, energyType, noFailOn0Energy, instaFail, failOnSaberClash, enabledObstacleType, noBombs, fastNotes, strictAngles, disappearingArrows, songSpeed, noArrows, ghostNotes, proMode, zenMode, smallCubes);
}
// Autogenerated method: GameplayModifiers.IsWithoutModifiers
bool GlobalNamespace::GameplayModifiers::IsWithoutModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::IsWithoutModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWithoutModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.Serialize
void GlobalNamespace::GameplayModifiers::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: GameplayModifiers.LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData
::GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::LiteNetLib_Utils_INetImmutableSerializable$GameplayModifiers$_CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, reader);
}
// Autogenerated method: GameplayModifiers.CreateFromSerializedData
::GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::CreateFromSerializedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiers", "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayModifiers*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiers/EnabledObstacleType
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/EnabledObstacleType All
::GlobalNamespace::GameplayModifiers::EnabledObstacleType GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::EnabledObstacleType>("", "GameplayModifiers/EnabledObstacleType", "All"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/EnabledObstacleType All
void GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_All(::GlobalNamespace::GameplayModifiers::EnabledObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/EnabledObstacleType", "All", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
::GlobalNamespace::GameplayModifiers::EnabledObstacleType GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_FullHeightOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_FullHeightOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::EnabledObstacleType>("", "GameplayModifiers/EnabledObstacleType", "FullHeightOnly"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
void GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_FullHeightOnly(::GlobalNamespace::GameplayModifiers::EnabledObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_FullHeightOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/EnabledObstacleType", "FullHeightOnly", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
::GlobalNamespace::GameplayModifiers::EnabledObstacleType GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_NoObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_get_NoObstacles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::EnabledObstacleType>("", "GameplayModifiers/EnabledObstacleType", "NoObstacles"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
void GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_NoObstacles(::GlobalNamespace::GameplayModifiers::EnabledObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::_set_NoObstacles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/EnabledObstacleType", "NoObstacles", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameplayModifiers::EnabledObstacleType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnabledObstacleType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiers/EnergyType
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/EnergyType Bar
::GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameplayModifiers::EnergyType::_get_Bar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnergyType::_get_Bar");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::EnergyType>("", "GameplayModifiers/EnergyType", "Bar"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/EnergyType Bar
void GlobalNamespace::GameplayModifiers::EnergyType::_set_Bar(::GlobalNamespace::GameplayModifiers::EnergyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnergyType::_set_Bar");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/EnergyType", "Bar", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/EnergyType Battery
::GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameplayModifiers::EnergyType::_get_Battery() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnergyType::_get_Battery");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::EnergyType>("", "GameplayModifiers/EnergyType", "Battery"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/EnergyType Battery
void GlobalNamespace::GameplayModifiers::EnergyType::_set_Battery(::GlobalNamespace::GameplayModifiers::EnergyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnergyType::_set_Battery");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/EnergyType", "Battery", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameplayModifiers::EnergyType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::EnergyType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiers/SongSpeed
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/SongSpeed Normal
::GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::SongSpeed::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::SongSpeed>("", "GameplayModifiers/SongSpeed", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/SongSpeed Normal
void GlobalNamespace::GameplayModifiers::SongSpeed::_set_Normal(::GlobalNamespace::GameplayModifiers::SongSpeed value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/SongSpeed", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/SongSpeed Faster
::GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::SongSpeed::_get_Faster() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_get_Faster");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::SongSpeed>("", "GameplayModifiers/SongSpeed", "Faster"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/SongSpeed Faster
void GlobalNamespace::GameplayModifiers::SongSpeed::_set_Faster(::GlobalNamespace::GameplayModifiers::SongSpeed value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_set_Faster");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/SongSpeed", "Faster", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/SongSpeed Slower
::GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::SongSpeed::_get_Slower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_get_Slower");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::SongSpeed>("", "GameplayModifiers/SongSpeed", "Slower"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/SongSpeed Slower
void GlobalNamespace::GameplayModifiers::SongSpeed::_set_Slower(::GlobalNamespace::GameplayModifiers::SongSpeed value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_set_Slower");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/SongSpeed", "Slower", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifiers/SongSpeed SuperFast
::GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::SongSpeed::_get_SuperFast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_get_SuperFast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameplayModifiers::SongSpeed>("", "GameplayModifiers/SongSpeed", "SuperFast"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifiers/SongSpeed SuperFast
void GlobalNamespace::GameplayModifiers::SongSpeed::_set_SuperFast(::GlobalNamespace::GameplayModifiers::SongSpeed value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::_set_SuperFast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiers/SongSpeed", "SuperFast", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameplayModifiers::SongSpeed::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiers::SongSpeed::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiersConfiguration/SongSpeed
#include "GlobalNamespace/GameplayModifiersConfiguration_SongSpeed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kSlower
float GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kSlower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kSlower");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/SongSpeed", "kSlower"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kSlower
void GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kSlower(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kSlower");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/SongSpeed", "kSlower", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kNormal
float GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/SongSpeed", "kNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kNormal
void GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kNormal(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/SongSpeed", "kNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kFaster
float GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kFaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kFaster");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/SongSpeed", "kFaster"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kFaster
void GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kFaster(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kFaster");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/SongSpeed", "kFaster", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kSuperFast
float GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kSuperFast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_get_kSuperFast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/SongSpeed", "kSuperFast"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kSuperFast
void GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kSuperFast(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::SongSpeed::_set_kSuperFast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/SongSpeed", "kSuperFast", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiersConfiguration/CutAngleTolerance
#include "GlobalNamespace/GameplayModifiersConfiguration_CutAngleTolerance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefault
float GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_get_kDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_get_kDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/CutAngleTolerance", "kDefault"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefault
void GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_set_kDefault(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_set_kDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/CutAngleTolerance", "kDefault", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kStrict
float GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_get_kStrict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_get_kStrict");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/CutAngleTolerance", "kStrict"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kStrict
void GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_set_kStrict(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::CutAngleTolerance::_set_kStrict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/CutAngleTolerance", "kStrict", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiersConfiguration/NoteUniformScale
#include "GlobalNamespace/GameplayModifiersConfiguration_NoteUniformScale.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefault
float GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_get_kDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_get_kDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/NoteUniformScale", "kDefault"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefault
void GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_set_kDefault(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_set_kDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/NoteUniformScale", "kDefault", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kSmall
float GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_get_kSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_get_kSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameplayModifiersConfiguration/NoteUniformScale", "kSmall"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kSmall
void GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_set_kSmall(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayModifiersConfiguration::NoteUniformScale::_set_kSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifiersConfiguration/NoteUniformScale", "kSmall", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBitMaskUtil
#include "GlobalNamespace/IBitMaskUtil.hpp"
// Including type: IBitMask`1
#include "GlobalNamespace/IBitMask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBitMaskUtil.GetHexDigit
uint GlobalNamespace::IBitMaskUtil::GetHexDigit(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBitMaskUtil::GetHexDigit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IBitMaskUtil", "GetHexDigit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: IBitMaskUtil.GetBase64Digit
uint GlobalNamespace::IBitMaskUtil::GetBase64Digit(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBitMaskUtil::GetBase64Digit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IBitMaskUtil", "GetBase64Digit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: IBitMaskUtil.GetBase64Char
::Il2CppChar GlobalNamespace::IBitMaskUtil::GetBase64Char(uint64_t digit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBitMaskUtil::GetBase64Char");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IBitMaskUtil", "GetBase64Char", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(digit)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, digit);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBladeMovementData
#include "GlobalNamespace/IBladeMovementData.hpp"
// Including type: BladeMovementDataElement
#include "GlobalNamespace/BladeMovementDataElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBladeMovementData.get_bladeSpeed
float GlobalNamespace::IBladeMovementData::get_bladeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBladeMovementData::get_bladeSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bladeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBladeMovementData.get_lastAddedData
::GlobalNamespace::BladeMovementDataElement GlobalNamespace::IBladeMovementData::get_lastAddedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBladeMovementData::get_lastAddedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastAddedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BladeMovementDataElement, false>(this, ___internal__method);
}
// Autogenerated method: IBladeMovementData.get_prevAddedData
::GlobalNamespace::BladeMovementDataElement GlobalNamespace::IBladeMovementData::get_prevAddedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBladeMovementData::get_prevAddedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevAddedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BladeMovementDataElement, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISaberMovementData
#include "GlobalNamespace/ISaberMovementData.hpp"
// Including type: BladeMovementDataElement
#include "GlobalNamespace/BladeMovementDataElement.hpp"
// Including type: ISaberMovementDataProcessor
#include "GlobalNamespace/ISaberMovementDataProcessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISaberMovementData.get_lastAddedData
::GlobalNamespace::BladeMovementDataElement GlobalNamespace::ISaberMovementData::get_lastAddedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::get_lastAddedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastAddedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BladeMovementDataElement, false>(this, ___internal__method);
}
// Autogenerated method: ISaberMovementData.AddDataProcessor
void GlobalNamespace::ISaberMovementData::AddDataProcessor(::GlobalNamespace::ISaberMovementDataProcessor* dataProcessor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::AddDataProcessor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDataProcessor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataProcessor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataProcessor);
}
// Autogenerated method: ISaberMovementData.RemoveDataProcessor
void GlobalNamespace::ISaberMovementData::RemoveDataProcessor(::GlobalNamespace::ISaberMovementDataProcessor* dataProcessor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::RemoveDataProcessor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveDataProcessor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataProcessor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataProcessor);
}
// Autogenerated method: ISaberMovementData.RequestLastDataProcessing
void GlobalNamespace::ISaberMovementData::RequestLastDataProcessing(::GlobalNamespace::ISaberMovementDataProcessor* dataProcessor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::RequestLastDataProcessing");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestLastDataProcessing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataProcessor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataProcessor);
}
// Autogenerated method: ISaberMovementData.ComputeSwingRating
float GlobalNamespace::ISaberMovementData::ComputeSwingRating(float overrideSegmentAngle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::ComputeSwingRating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSwingRating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideSegmentAngle)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, overrideSegmentAngle);
}
// Autogenerated method: ISaberMovementData.ComputeSwingRating
float GlobalNamespace::ISaberMovementData::ComputeSwingRating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementData::ComputeSwingRating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSwingRating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISaberMovementDataProcessor
#include "GlobalNamespace/ISaberMovementDataProcessor.hpp"
// Including type: BladeMovementDataElement
#include "GlobalNamespace/BladeMovementDataElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISaberMovementDataProcessor.ProcessNewData
void GlobalNamespace::ISaberMovementDataProcessor::ProcessNewData(::GlobalNamespace::BladeMovementDataElement newData, ::GlobalNamespace::BladeMovementDataElement prevData, bool prevDataAreValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberMovementDataProcessor::ProcessNewData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newData), ::il2cpp_utils::ExtractType(prevData), ::il2cpp_utils::ExtractType(prevDataAreValid)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newData, prevData, prevDataAreValid);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISaberSwingRatingCounterDidChangeReceiver
#include "GlobalNamespace/ISaberSwingRatingCounterDidChangeReceiver.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISaberSwingRatingCounterDidChangeReceiver.HandleSaberSwingRatingCounterDidChange
void GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver::HandleSaberSwingRatingCounterDidChange(::GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter, float rating) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver::HandleSaberSwingRatingCounterDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter), ::il2cpp_utils::ExtractType(rating)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberSwingRatingCounter, rating);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISaberSwingRatingCounterDidFinishReceiver
#include "GlobalNamespace/ISaberSwingRatingCounterDidFinishReceiver.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISaberSwingRatingCounterDidFinishReceiver.HandleSaberSwingRatingCounterDidFinish
void GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver::HandleSaberSwingRatingCounterDidFinish(::GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver::HandleSaberSwingRatingCounterDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberSwingRatingCounter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: ISaberSwingRatingCounterDidChangeReceiver
#include "GlobalNamespace/ISaberSwingRatingCounterDidChangeReceiver.hpp"
// Including type: ISaberSwingRatingCounterDidFinishReceiver
#include "GlobalNamespace/ISaberSwingRatingCounterDidFinishReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISaberSwingRatingCounter.get_beforeCutRating
float GlobalNamespace::ISaberSwingRatingCounter::get_beforeCutRating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::get_beforeCutRating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beforeCutRating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ISaberSwingRatingCounter.get_afterCutRating
float GlobalNamespace::ISaberSwingRatingCounter::get_afterCutRating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::get_afterCutRating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_afterCutRating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ISaberSwingRatingCounter.RegisterDidChangeReceiver
void GlobalNamespace::ISaberSwingRatingCounter::RegisterDidChangeReceiver(::GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::RegisterDidChangeReceiver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterDidChangeReceiver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, receiver);
}
// Autogenerated method: ISaberSwingRatingCounter.RegisterDidFinishReceiver
void GlobalNamespace::ISaberSwingRatingCounter::RegisterDidFinishReceiver(::GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::RegisterDidFinishReceiver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterDidFinishReceiver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, receiver);
}
// Autogenerated method: ISaberSwingRatingCounter.UnregisterDidChangeReceiver
void GlobalNamespace::ISaberSwingRatingCounter::UnregisterDidChangeReceiver(::GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::UnregisterDidChangeReceiver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterDidChangeReceiver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, receiver);
}
// Autogenerated method: ISaberSwingRatingCounter.UnregisterDidFinishReceiver
void GlobalNamespace::ISaberSwingRatingCounter::UnregisterDidFinishReceiver(::GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISaberSwingRatingCounter::UnregisterDidFinishReceiver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterDidFinishReceiver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, receiver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly GameplayModifiers gameplayModifiers
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& GlobalNamespace::LevelCompletionResults::dyn_gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_gameplayModifiers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayModifiers"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiers**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 modifiedScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_modifiedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_modifiedScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modifiedScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 multipliedScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_multipliedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_multipliedScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multipliedScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly RankModel/Rank rank
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RankModel::Rank& GlobalNamespace::LevelCompletionResults::dyn_rank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_rank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rank"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RankModel::Rank*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean fullCombo
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelCompletionResults::dyn_fullCombo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_fullCombo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullCombo"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single leftSaberMovementDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_leftSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_leftSaberMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftSaberMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single rightSaberMovementDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_rightSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_rightSaberMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightSaberMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single leftHandMovementDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_leftHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_leftHandMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single rightHandMovementDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_rightHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_rightHandMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LevelCompletionResults/LevelEndStateType levelEndStateType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelCompletionResults::LevelEndStateType& GlobalNamespace::LevelCompletionResults::dyn_levelEndStateType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_levelEndStateType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelEndStateType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelCompletionResults::LevelEndStateType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LevelCompletionResults/LevelEndAction levelEndAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelCompletionResults::LevelEndAction& GlobalNamespace::LevelCompletionResults::dyn_levelEndAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_levelEndAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelEndAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelCompletionResults::LevelEndAction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single energy
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "energy"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 goodCutsCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_goodCutsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_goodCutsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "goodCutsCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 badCutsCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_badCutsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_badCutsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badCutsCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 missedCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_missedCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_missedCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "missedCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 notGoodCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_notGoodCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_notGoodCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "notGoodCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 okCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_okCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_okCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "okCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 maxCutScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_maxCutScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_maxCutScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxCutScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 totalCutScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_totalCutScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_totalCutScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "totalCutScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 goodCutsCountForNotesWithFullScoreScoringType
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_goodCutsCountForNotesWithFullScoreScoringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_goodCutsCountForNotesWithFullScoreScoringType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "goodCutsCountForNotesWithFullScoreScoringType"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single averageCenterDistanceCutScoreForNotesWithFullScoreScoringType
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_averageCenterDistanceCutScoreForNotesWithFullScoreScoringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_averageCenterDistanceCutScoreForNotesWithFullScoreScoringType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "averageCenterDistanceCutScoreForNotesWithFullScoreScoringType"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single averageCutScoreForNotesWithFullScoreScoringType
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_averageCutScoreForNotesWithFullScoreScoringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_averageCutScoreForNotesWithFullScoreScoringType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "averageCutScoreForNotesWithFullScoreScoringType"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 maxCombo
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::dyn_maxCombo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_maxCombo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxCombo"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single endSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelCompletionResults::dyn_endSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::dyn_endSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LevelCompletionResults.CompareTo
int GlobalNamespace::LevelCompletionResults::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated method: LevelCompletionResults.Serialize
void GlobalNamespace::LevelCompletionResults::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LevelCompletionResults.LiteNetLib.Utils.INetImmutableSerializable<LevelCompletionResults>.CreateFromSerializedData
::GlobalNamespace::LevelCompletionResults* GlobalNamespace::LevelCompletionResults::LiteNetLib_Utils_INetImmutableSerializable$LevelCompletionResults$_CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LiteNetLib.Utils.INetImmutableSerializable<LevelCompletionResults>.CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetImmutableSerializable<LevelCompletionResults>.CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method, reader);
}
// Autogenerated method: LevelCompletionResults.CreateFromSerializedData
::GlobalNamespace::LevelCompletionResults* GlobalNamespace::LevelCompletionResults::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::CreateFromSerializedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelCompletionResults", "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelCompletionResults*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelCompletionResults/LevelEndStateType
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndStateType Incomplete
::GlobalNamespace::LevelCompletionResults::LevelEndStateType GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Incomplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Incomplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndStateType>("", "LevelCompletionResults/LevelEndStateType", "Incomplete"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndStateType Incomplete
void GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Incomplete(::GlobalNamespace::LevelCompletionResults::LevelEndStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Incomplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndStateType", "Incomplete", value));
}
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndStateType Cleared
::GlobalNamespace::LevelCompletionResults::LevelEndStateType GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Cleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Cleared");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndStateType>("", "LevelCompletionResults/LevelEndStateType", "Cleared"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndStateType Cleared
void GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Cleared(::GlobalNamespace::LevelCompletionResults::LevelEndStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Cleared");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndStateType", "Cleared", value));
}
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndStateType Failed
::GlobalNamespace::LevelCompletionResults::LevelEndStateType GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndStateType>("", "LevelCompletionResults/LevelEndStateType", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndStateType Failed
void GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Failed(::GlobalNamespace::LevelCompletionResults::LevelEndStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndStateType", "Failed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::LevelEndStateType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndStateType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelCompletionResults/LevelEndAction
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndAction None
::GlobalNamespace::LevelCompletionResults::LevelEndAction GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndAction>("", "LevelCompletionResults/LevelEndAction", "None"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndAction None
void GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_None(::GlobalNamespace::LevelCompletionResults::LevelEndAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndAction", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndAction Quit
::GlobalNamespace::LevelCompletionResults::LevelEndAction GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_Quit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndAction>("", "LevelCompletionResults/LevelEndAction", "Quit"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndAction Quit
void GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_Quit(::GlobalNamespace::LevelCompletionResults::LevelEndAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_Quit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndAction", "Quit", value));
}
// Autogenerated static field getter
// Get static field: static public LevelCompletionResults/LevelEndAction Restart
::GlobalNamespace::LevelCompletionResults::LevelEndAction GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_Restart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_get_Restart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LevelCompletionResults::LevelEndAction>("", "LevelCompletionResults/LevelEndAction", "Restart"));
}
// Autogenerated static field setter
// Set static field: static public LevelCompletionResults/LevelEndAction Restart
void GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_Restart(::GlobalNamespace::LevelCompletionResults::LevelEndAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::_set_Restart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelCompletionResults/LevelEndAction", "Restart", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LevelCompletionResults::LevelEndAction::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelCompletionResults::LevelEndAction::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String headTopId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_headTopId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_headTopId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTopId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 headTopPrimaryColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_headTopPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_headTopPrimaryColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTopPrimaryColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 headTopSecondaryColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_headTopSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_headTopSecondaryColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTopSecondaryColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String glassesId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_glassesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_glassesId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "glassesId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 glassesColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_glassesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_glassesColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "glassesColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String facialHairId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_facialHairId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_facialHairId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "facialHairId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 facialHairColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_facialHairColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_facialHairColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "facialHairColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String handsId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_handsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_handsId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handsId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 handsColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_handsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_handsColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handsColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String clothesId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_clothesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_clothesId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothesId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 clothesPrimaryColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_clothesPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_clothesPrimaryColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothesPrimaryColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 clothesSecondaryColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_clothesSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_clothesSecondaryColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothesSecondaryColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Color32 clothesDetailColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::MultiplayerAvatarData::dyn_clothesDetailColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_clothesDetailColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothesDetailColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String skinColorId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_skinColorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_skinColorId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skinColorId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String eyesId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_eyesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_eyesId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eyesId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String mouthId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerAvatarData::dyn_mouthId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::dyn_mouthId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerAvatarData..ctor
// ABORTED elsewhere.  GlobalNamespace::MultiplayerAvatarData::MultiplayerAvatarData(::StringW headTopId, ::UnityEngine::Color32 headTopPrimaryColor, ::UnityEngine::Color32 headTopSecondaryColor, ::StringW glassesId, ::UnityEngine::Color32 glassesColor, ::StringW facialHairId, ::UnityEngine::Color32 facialHairColor, ::StringW handsId, ::UnityEngine::Color32 handsColor, ::StringW clothesId, ::UnityEngine::Color32 clothesPrimaryColor, ::UnityEngine::Color32 clothesSecondaryColor, ::UnityEngine::Color32 clothesDetailColor, ::StringW skinColorId, ::StringW eyesId, ::StringW mouthId)
// Autogenerated method: MultiplayerAvatarData.Serialize
void GlobalNamespace::MultiplayerAvatarData::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MultiplayerAvatarData.CreateFromSerializedData
::GlobalNamespace::MultiplayerAvatarData GlobalNamespace::MultiplayerAvatarData::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method, reader);
}
// Autogenerated method: MultiplayerAvatarData.Deserialize
::GlobalNamespace::MultiplayerAvatarData GlobalNamespace::MultiplayerAvatarData::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerAvatarData", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerAvatarData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: MultiplayerAvatarData.Equals
bool GlobalNamespace::MultiplayerAvatarData::Equals(::GlobalNamespace::MultiplayerAvatarData other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: MultiplayerAvatarData.Equals
bool GlobalNamespace::MultiplayerAvatarData::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: MultiplayerAvatarData.GetHashCode
int GlobalNamespace::MultiplayerAvatarData::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerAvatarData::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteBasicCutInfoHelper
#include "GlobalNamespace/NoteBasicCutInfoHelper.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinBladeSpeedForCut
float GlobalNamespace::NoteBasicCutInfoHelper::_get_kMinBladeSpeedForCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBasicCutInfoHelper::_get_kMinBladeSpeedForCut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteBasicCutInfoHelper", "kMinBladeSpeedForCut"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinBladeSpeedForCut
void GlobalNamespace::NoteBasicCutInfoHelper::_set_kMinBladeSpeedForCut(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBasicCutInfoHelper::_set_kMinBladeSpeedForCut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteBasicCutInfoHelper", "kMinBladeSpeedForCut", value));
}
// Autogenerated method: NoteBasicCutInfoHelper.GetBasicCutInfo
void GlobalNamespace::NoteBasicCutInfoHelper::GetBasicCutInfo(::UnityEngine::Transform* noteTransform, ::GlobalNamespace::ColorType colorType, ::GlobalNamespace::NoteCutDirection cutDirection, ::GlobalNamespace::SaberType saberType, float saberBladeSpeed, ::UnityEngine::Vector3 cutDirVec, float cutAngleTolerance, ByRef<bool> directionOK, ByRef<bool> speedOK, ByRef<bool> saberTypeOK, ByRef<float> cutDirDeviation, ByRef<float> cutDirAngle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBasicCutInfoHelper::GetBasicCutInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteBasicCutInfoHelper", "GetBasicCutInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteTransform), ::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(cutDirection), ::il2cpp_utils::ExtractType(saberType), ::il2cpp_utils::ExtractType(saberBladeSpeed), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(cutAngleTolerance), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noteTransform, colorType, cutDirection, saberType, saberBladeSpeed, cutDirVec, cutAngleTolerance, byref(directionOK), byref(speedOK), byref(saberTypeOK), byref(cutDirDeviation), byref(cutDirAngle));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: NoteCutInfo/FailReason
#include "GlobalNamespace/NoteCutInfo_FailReason.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ISaberMovementData
#include "GlobalNamespace/ISaberMovementData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly NoteData noteData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData*& GlobalNamespace::NoteCutInfo::dyn_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_noteData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean speedOK
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteCutInfo::dyn_speedOK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_speedOK");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedOK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean directionOK
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteCutInfo::dyn_directionOK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_directionOK");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "directionOK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean saberTypeOK
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteCutInfo::dyn_saberTypeOK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_saberTypeOK");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberTypeOK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean wasCutTooSoon
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteCutInfo::dyn_wasCutTooSoon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_wasCutTooSoon");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasCutTooSoon"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single saberSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfo::dyn_saberSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_saberSpeed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 saberDir
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteCutInfo::dyn_saberDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_saberDir");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberDir"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly SaberType saberType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberType& GlobalNamespace::NoteCutInfo::dyn_saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_saberType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single timeDeviation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfo::dyn_timeDeviation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_timeDeviation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeDeviation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single cutDirDeviation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfo::dyn_cutDirDeviation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_cutDirDeviation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutDirDeviation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 cutPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteCutInfo::dyn_cutPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_cutPoint");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 cutNormal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteCutInfo::dyn_cutNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_cutNormal");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutNormal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single cutAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfo::dyn_cutAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_cutAngle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single cutDistanceToCenter
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfo::dyn_cutDistanceToCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_cutDistanceToCenter");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutDistanceToCenter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Quaternion worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteCutInfo::dyn_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_worldRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Quaternion inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteCutInfo::dyn_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_inverseWorldRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Quaternion noteRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteCutInfo::dyn_noteRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_noteRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 notePosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteCutInfo::dyn_notePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_notePosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "notePosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly ISaberMovementData saberMovementData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ISaberMovementData*& GlobalNamespace::NoteCutInfo::dyn_saberMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::dyn_saberMovementData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberMovementData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ISaberMovementData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutInfo.get_allIsOK
bool GlobalNamespace::NoteCutInfo::get_allIsOK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::get_allIsOK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_allIsOK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutInfo.get_allExceptSaberTypeIsOK
bool GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_allExceptSaberTypeIsOK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutInfo.get_failReason
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::get_failReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::get_failReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_failReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteCutInfo::FailReason, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutInfo..ctor
// ABORTED elsewhere.  GlobalNamespace::NoteCutInfo::NoteCutInfo(::GlobalNamespace::NoteData* noteData, bool speedOK, bool directionOK, bool saberTypeOK, bool wasCutTooSoon, float saberSpeed, ::UnityEngine::Vector3 saberDir, ::GlobalNamespace::SaberType saberType, float timeDeviation, float cutDirDeviation, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Vector3 cutNormal, float cutDistanceToCenter, float cutAngle, ::UnityEngine::Quaternion worldRotation, ::UnityEngine::Quaternion inverseWorldRotation, ::UnityEngine::Quaternion noteRotation, ::UnityEngine::Vector3 notePosition, ::GlobalNamespace::ISaberMovementData* saberMovementData)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutInfo/FailReason
#include "GlobalNamespace/NoteCutInfo_FailReason.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteCutInfo/FailReason None
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::FailReason::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutInfo::FailReason>("", "NoteCutInfo/FailReason", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutInfo/FailReason None
void GlobalNamespace::NoteCutInfo::FailReason::_set_None(::GlobalNamespace::NoteCutInfo::FailReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutInfo/FailReason", "None", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutInfo/FailReason TooSoon
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::FailReason::_get_TooSoon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_get_TooSoon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutInfo::FailReason>("", "NoteCutInfo/FailReason", "TooSoon"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutInfo/FailReason TooSoon
void GlobalNamespace::NoteCutInfo::FailReason::_set_TooSoon(::GlobalNamespace::NoteCutInfo::FailReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_set_TooSoon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutInfo/FailReason", "TooSoon", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutInfo/FailReason WrongColor
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::FailReason::_get_WrongColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_get_WrongColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutInfo::FailReason>("", "NoteCutInfo/FailReason", "WrongColor"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutInfo/FailReason WrongColor
void GlobalNamespace::NoteCutInfo::FailReason::_set_WrongColor(::GlobalNamespace::NoteCutInfo::FailReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_set_WrongColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutInfo/FailReason", "WrongColor", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutInfo/FailReason CutHarder
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::FailReason::_get_CutHarder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_get_CutHarder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutInfo::FailReason>("", "NoteCutInfo/FailReason", "CutHarder"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutInfo/FailReason CutHarder
void GlobalNamespace::NoteCutInfo::FailReason::_set_CutHarder(::GlobalNamespace::NoteCutInfo::FailReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_set_CutHarder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutInfo/FailReason", "CutHarder", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutInfo/FailReason WrongDirection
::GlobalNamespace::NoteCutInfo::FailReason GlobalNamespace::NoteCutInfo::FailReason::_get_WrongDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_get_WrongDirection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutInfo::FailReason>("", "NoteCutInfo/FailReason", "WrongDirection"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutInfo/FailReason WrongDirection
void GlobalNamespace::NoteCutInfo::FailReason::_set_WrongDirection(::GlobalNamespace::NoteCutInfo::FailReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::_set_WrongDirection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutInfo/FailReason", "WrongDirection", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteCutInfo::FailReason::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfo::FailReason::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single saberSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfoNetSerializable::dyn_saberSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_saberSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean cutWasOk
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutWasOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutWasOk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutWasOk"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable saberDir
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_saberDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_saberDir");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberDir"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable cutPoint
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutPoint"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable cutNormal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_cutNormal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutNormal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable notePosition
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_notePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_notePosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "notePosition"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable noteScale
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteScale"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public QuaternionSerializable noteRotation
[[deprecated("Use field access instead!")]] ::GlobalNamespace::QuaternionSerializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteRotation"))->offset;
  return *reinterpret_cast<::GlobalNamespace::QuaternionSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteData/GameplayType gameplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& GlobalNamespace::NoteCutInfoNetSerializable::dyn_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_gameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::GameplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ColorType colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::NoteCutInfoNetSerializable::dyn_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 noteLineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_noteLineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteLineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer lineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::NoteCutInfoNetSerializable::dyn_lineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_lineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeToNextColorNote
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutInfoNetSerializable::dyn_timeToNextColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_timeToNextColorNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeToNextColorNote"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable moveVec
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteCutInfoNetSerializable::dyn_moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::dyn_moveVec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveVec"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutInfoNetSerializable.LiteNetLib.Utils.INetSerializable.Deserialize
void GlobalNamespace::NoteCutInfoNetSerializable::LiteNetLib_Utils_INetSerializable_Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::LiteNetLib.Utils.INetSerializable.Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: NoteCutInfoNetSerializable.LiteNetLib.Utils.INetSerializable.Serialize
void GlobalNamespace::NoteCutInfoNetSerializable::LiteNetLib_Utils_INetSerializable_Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutInfoNetSerializable::LiteNetLib.Utils.INetSerializable.Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorType <colorType>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::NoteMissInfoNetSerializable::dyn_$colorType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::dyn_$colorType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<colorType>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <noteTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <noteLineIndex>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteLineIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteLineIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteLineLayer <noteLineLayer>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteLineLayer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::dyn_$noteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineLayer>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteMissInfoNetSerializable.get_colorType
::GlobalNamespace::ColorType GlobalNamespace::NoteMissInfoNetSerializable::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: NoteMissInfoNetSerializable.set_colorType
void GlobalNamespace::NoteMissInfoNetSerializable::set_colorType(::GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::set_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMissInfoNetSerializable.get_noteTime
float GlobalNamespace::NoteMissInfoNetSerializable::get_noteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::get_noteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMissInfoNetSerializable.set_noteTime
void GlobalNamespace::NoteMissInfoNetSerializable::set_noteTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::set_noteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMissInfoNetSerializable.get_noteLineIndex
int GlobalNamespace::NoteMissInfoNetSerializable::get_noteLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::get_noteLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NoteMissInfoNetSerializable.set_noteLineIndex
void GlobalNamespace::NoteMissInfoNetSerializable::set_noteLineIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::set_noteLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMissInfoNetSerializable.get_noteLineLayer
::GlobalNamespace::NoteLineLayer GlobalNamespace::NoteMissInfoNetSerializable::get_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::get_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: NoteMissInfoNetSerializable.set_noteLineLayer
void GlobalNamespace::NoteMissInfoNetSerializable::set_noteLineLayer(::GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::set_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMissInfoNetSerializable.LiteNetLib.Utils.INetSerializable.Deserialize
void GlobalNamespace::NoteMissInfoNetSerializable::LiteNetLib_Utils_INetSerializable_Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::LiteNetLib.Utils.INetSerializable.Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: NoteMissInfoNetSerializable.LiteNetLib.Utils.INetSerializable.Serialize
void GlobalNamespace::NoteMissInfoNetSerializable::LiteNetLib_Utils_INetSerializable_Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMissInfoNetSerializable::LiteNetLib.Utils.INetSerializable.Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteSpawnInfoNetSerializable
#include "GlobalNamespace/NoteSpawnInfoNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_lineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer noteLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_noteLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer beforeJumpNoteLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_beforeJumpNoteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_beforeJumpNoteLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beforeJumpNoteLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteData/GameplayType gameplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_gameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::GameplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteData/ScoringType scoringType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::ScoringType& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_scoringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_scoringType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scoringType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::ScoringType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ColorType colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteCutDirection cutDirection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutDirection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteCutDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeToNextColorNote
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_timeToNextColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_timeToNextColorNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeToNextColorNote"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeToPrevColorNote
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_timeToPrevColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_timeToPrevColorNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeToPrevColorNote"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 flipLineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_flipLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_flipLineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipLineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flipYSide
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_flipYSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_flipYSide");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipYSide"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable moveStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable moveEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable jumpEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single jumpGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single moveDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_moveDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cutDirectionAngleOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutDirectionAngleOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutDirectionAngleOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutDirectionAngleOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cutSfxVolumeMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutSfxVolumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::dyn_cutSfxVolumeMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutSfxVolumeMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteSpawnInfoNetSerializable.Serialize
void GlobalNamespace::NoteSpawnInfoNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NoteSpawnInfoNetSerializable.Deserialize
void GlobalNamespace::NoteSpawnInfoNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteSpawnInfoNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleSpawnInfoNetSerializable
#include "GlobalNamespace/ObstacleSpawnInfoNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_lineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer lineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_lineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_lineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 width
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 height
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable moveStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable moveEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable jumpEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_jumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_jumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single obstacleHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_obstacleHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_obstacleHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "obstacleHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single moveDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_moveDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noteLinesDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_noteLinesDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteLinesDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleSpawnInfoNetSerializable.Serialize
void GlobalNamespace::ObstacleSpawnInfoNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ObstacleSpawnInfoNetSerializable.Deserialize
void GlobalNamespace::ObstacleSpawnInfoNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSpawnInfoNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerLobbyPermissionConfigurationNetSerializable
#include "GlobalNamespace/PlayerLobbyPermissionConfigurationNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _userId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isServerOwner
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__isServerOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__isServerOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isServerOwner"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasRecommendBeatmapsPermission
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasRecommendBeatmapsPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasRecommendBeatmapsPermission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasRecommendBeatmapsPermission"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasRecommendGameplayModifiersPermission
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasRecommendGameplayModifiersPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasRecommendGameplayModifiersPermission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasRecommendGameplayModifiersPermission"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasKickVotePermission
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasKickVotePermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasKickVotePermission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasKickVotePermission"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInvitePermission
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasInvitePermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::dyn__hasInvitePermission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInvitePermission"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_userId
::StringW GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_isServerOwner
bool GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_isServerOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_isServerOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isServerOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_hasRecommendBeatmapsPermission
bool GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasRecommendBeatmapsPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasRecommendBeatmapsPermission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasRecommendBeatmapsPermission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_hasRecommendGameplayModifiersPermission
bool GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasRecommendGameplayModifiersPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasRecommendGameplayModifiersPermission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasRecommendGameplayModifiersPermission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_hasKickVotePermission
bool GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasKickVotePermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasKickVotePermission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasKickVotePermission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.get_hasInvitePermission
bool GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasInvitePermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::get_hasInvitePermission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInvitePermission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.Serialize
void GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PlayerLobbyPermissionConfigurationNetSerializable.Deserialize
void GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayersLobbyPermissionConfigurationNetSerializable
#include "GlobalNamespace/PlayersLobbyPermissionConfigurationNetSerializable.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayerLobbyPermissionConfigurationNetSerializable
#include "GlobalNamespace/PlayerLobbyPermissionConfigurationNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<PlayerLobbyPermissionConfigurationNetSerializable> _playersPermission
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable*>*& GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::dyn__playersPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::dyn__playersPermission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersPermission"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayersLobbyPermissionConfigurationNetSerializable.get_playersPermission
::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable*>* GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::get_playersPermission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::get_playersPermission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersPermission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLobbyPermissionConfigurationNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayersLobbyPermissionConfigurationNetSerializable.Serialize
void GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PlayersLobbyPermissionConfigurationNetSerializable.Deserialize
void GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersLobbyPermissionConfigurationNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayersMissingEntitlementsNetSerializable
#include "GlobalNamespace/PlayersMissingEntitlementsNetSerializable.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> _playersWithoutEntitlements
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::PlayersMissingEntitlementsNetSerializable::dyn__playersWithoutEntitlements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersMissingEntitlementsNetSerializable::dyn__playersWithoutEntitlements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersWithoutEntitlements"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayersMissingEntitlementsNetSerializable.get_playersWithoutEntitlements
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::PlayersMissingEntitlementsNetSerializable::get_playersWithoutEntitlements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersMissingEntitlementsNetSerializable::get_playersWithoutEntitlements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersWithoutEntitlements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayersMissingEntitlementsNetSerializable.Serialize
void GlobalNamespace::PlayersMissingEntitlementsNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersMissingEntitlementsNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PlayersMissingEntitlementsNetSerializable.Deserialize
void GlobalNamespace::PlayersMissingEntitlementsNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayersMissingEntitlementsNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RankModel
#include "GlobalNamespace/RankModel.hpp"
// Including type: RankModel/Rank
#include "GlobalNamespace/RankModel_Rank.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RankModel.GetRankName
::StringW GlobalNamespace::RankModel::GetRankName(::GlobalNamespace::RankModel::Rank rank) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::GetRankName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RankModel", "GetRankName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rank)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rank);
}
// Autogenerated method: RankModel.GetRankForScore
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::GetRankForScore(int multipliedScore, int modifiedScore, int maxMultipliedScore, int maxModifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::GetRankForScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RankModel", "GetRankForScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipliedScore), ::il2cpp_utils::ExtractType(modifiedScore), ::il2cpp_utils::ExtractType(maxMultipliedScore), ::il2cpp_utils::ExtractType(maxModifiedScore)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::RankModel::Rank, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, multipliedScore, modifiedScore, maxMultipliedScore, maxModifiedScore);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RankModel/Rank
#include "GlobalNamespace/RankModel_Rank.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RankModel/Rank E
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_E() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_E");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "E"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank E
void GlobalNamespace::RankModel::Rank::_set_E(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_E");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "E", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank D
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "D"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank D
void GlobalNamespace::RankModel::Rank::_set_D(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "D", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank C
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_C");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "C"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank C
void GlobalNamespace::RankModel::Rank::_set_C(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_C");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "C", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank B
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "B"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank B
void GlobalNamespace::RankModel::Rank::_set_B(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "B", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank A
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "A"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank A
void GlobalNamespace::RankModel::Rank::_set_A(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "A", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank S
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_S() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_S");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "S"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank S
void GlobalNamespace::RankModel::Rank::_set_S(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_S");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "S", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank SS
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_SS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_SS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "SS"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank SS
void GlobalNamespace::RankModel::Rank::_set_SS(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_SS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "SS", value));
}
// Autogenerated static field getter
// Get static field: static public RankModel/Rank SSS
::GlobalNamespace::RankModel::Rank GlobalNamespace::RankModel::Rank::_get_SSS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_get_SSS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RankModel::Rank>("", "RankModel/Rank", "SSS"));
}
// Autogenerated static field setter
// Set static field: static public RankModel/Rank SSS
void GlobalNamespace::RankModel::Rank::_set_SSS(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::_set_SSS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RankModel/Rank", "SSS", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RankModel::Rank::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RankModel::Rank::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SaberType SaberA
::GlobalNamespace::SaberType GlobalNamespace::SaberType::_get_SaberA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberType::_get_SaberA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaberType>("", "SaberType", "SaberA"));
}
// Autogenerated static field setter
// Set static field: static public SaberType SaberA
void GlobalNamespace::SaberType::_set_SaberA(::GlobalNamespace::SaberType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberType::_set_SaberA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberType", "SaberA", value));
}
// Autogenerated static field getter
// Get static field: static public SaberType SaberB
::GlobalNamespace::SaberType GlobalNamespace::SaberType::_get_SaberB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberType::_get_SaberB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaberType>("", "SaberType", "SaberB"));
}
// Autogenerated static field setter
// Set static field: static public SaberType SaberB
void GlobalNamespace::SaberType::_set_SaberB(::GlobalNamespace::SaberType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberType::_set_SaberB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberType", "SaberB", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberTypeExtensions
#include "GlobalNamespace/SaberTypeExtensions.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberTypeExtensions.MatchesColorType
bool GlobalNamespace::SaberTypeExtensions::MatchesColorType(::GlobalNamespace::SaberType saberType, ::GlobalNamespace::ColorType colorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTypeExtensions::MatchesColorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTypeExtensions", "MatchesColorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType), ::il2cpp_utils::ExtractType(colorType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, saberType, colorType);
}
// Autogenerated method: SaberTypeExtensions.Node
::UnityEngine::XR::XRNode GlobalNamespace::SaberTypeExtensions::Node(::GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTypeExtensions::Node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTypeExtensions", "Node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::XR::XRNode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, saberType);
}
// Autogenerated method: SaberTypeExtensions.MainSaber
::GlobalNamespace::SaberType GlobalNamespace::SaberTypeExtensions::MainSaber(bool leftHanded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTypeExtensions::MainSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTypeExtensions", "MainSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHanded)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SaberType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, leftHanded);
}
// Autogenerated method: SaberTypeExtensions.ToSaberType
::GlobalNamespace::SaberType GlobalNamespace::SaberTypeExtensions::ToSaberType(::GlobalNamespace::ColorType colorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTypeExtensions::ToSaberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTypeExtensions", "ToSaberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SaberType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, colorType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: QuantizedMathf
#include "GlobalNamespace/QuantizedMathf.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kQuaternionSerializableScaleFactor
int GlobalNamespace::QuantizedMathf::_get_kQuaternionSerializableScaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_get_kQuaternionSerializableScaleFactor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "QuantizedMathf", "kQuaternionSerializableScaleFactor"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kQuaternionSerializableScaleFactor
void GlobalNamespace::QuantizedMathf::_set_kQuaternionSerializableScaleFactor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_set_kQuaternionSerializableScaleFactor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuantizedMathf", "kQuaternionSerializableScaleFactor", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kQuaternionSerializableEpsilon
float GlobalNamespace::QuantizedMathf::_get_kQuaternionSerializableEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_get_kQuaternionSerializableEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuantizedMathf", "kQuaternionSerializableEpsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kQuaternionSerializableEpsilon
void GlobalNamespace::QuantizedMathf::_set_kQuaternionSerializableEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_set_kQuaternionSerializableEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuantizedMathf", "kQuaternionSerializableEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kVectorSerializableScaleInt
int GlobalNamespace::QuantizedMathf::_get_kVectorSerializableScaleInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_get_kVectorSerializableScaleInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "QuantizedMathf", "kVectorSerializableScaleInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kVectorSerializableScaleInt
void GlobalNamespace::QuantizedMathf::_set_kVectorSerializableScaleInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_set_kVectorSerializableScaleInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuantizedMathf", "kVectorSerializableScaleInt", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kVectorSerializableScale
float GlobalNamespace::QuantizedMathf::_get_kVectorSerializableScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_get_kVectorSerializableScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuantizedMathf", "kVectorSerializableScale"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kVectorSerializableScale
void GlobalNamespace::QuantizedMathf::_set_kVectorSerializableScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_set_kVectorSerializableScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuantizedMathf", "kVectorSerializableScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVectorSerializableEpsilon
float GlobalNamespace::QuantizedMathf::_get_kVectorSerializableEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_get_kVectorSerializableEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuantizedMathf", "kVectorSerializableEpsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVectorSerializableEpsilon
void GlobalNamespace::QuantizedMathf::_set_kVectorSerializableEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::_set_kVectorSerializableEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuantizedMathf", "kVectorSerializableEpsilon", value));
}
// Autogenerated method: QuantizedMathf.Approximately
bool GlobalNamespace::QuantizedMathf::Approximately(::UnityEngine::Quaternion a, ::UnityEngine::Quaternion b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: QuantizedMathf.Approximately
bool GlobalNamespace::QuantizedMathf::Approximately(float a, float b, float epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(epsilon)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, epsilon);
}
// Autogenerated method: QuantizedMathf.Approximately
bool GlobalNamespace::QuantizedMathf::Approximately(int a, int b, int epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(epsilon)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, epsilon);
}
// Autogenerated method: QuantizedMathf.Approximately
bool GlobalNamespace::QuantizedMathf::Approximately(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: QuantizedMathf.Approximately
bool GlobalNamespace::QuantizedMathf::Approximately(::UnityEngine::Pose a, ::UnityEngine::Pose b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: QuantizedMathf.QuantizedVectorComponentToString
::StringW GlobalNamespace::QuantizedMathf::QuantizedVectorComponentToString(int v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuantizedMathf::QuantizedVectorComponentToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuantizedMathf", "QuantizedVectorComponentToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Vector3Serializable
#include "GlobalNamespace/Vector3Serializable.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _x
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector3Serializable::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::dyn__x");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _y
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector3Serializable::dyn__y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::dyn__y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_y"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _z
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector3Serializable::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::dyn__z");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Vector3Serializable..ctor
GlobalNamespace::Vector3Serializable::Vector3Serializable(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, v);
}
// Autogenerated method: Vector3Serializable..ctor
GlobalNamespace::Vector3Serializable::Vector3Serializable(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: Vector3Serializable.Serialize
void GlobalNamespace::Vector3Serializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: Vector3Serializable.Deserialize
void GlobalNamespace::Vector3Serializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: Vector3Serializable.Equals
bool GlobalNamespace::Vector3Serializable::Equals(::GlobalNamespace::Vector3Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Vector3Serializable.Approximately
bool GlobalNamespace::Vector3Serializable::Approximately(::GlobalNamespace::Vector3Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Vector3Serializable.GetSize
int GlobalNamespace::Vector3Serializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.Equals
bool GlobalNamespace::Vector3Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Vector3Serializable.GetHashCode
int GlobalNamespace::Vector3Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.ToString
::StringW GlobalNamespace::Vector3Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.op_Addition
::GlobalNamespace::Vector3Serializable GlobalNamespace::operator+(const ::GlobalNamespace::Vector3Serializable& a, const ::GlobalNamespace::Vector3Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector3Serializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Vector3Serializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Vector3Serializable.op_Subtraction
::GlobalNamespace::Vector3Serializable GlobalNamespace::operator-(const ::GlobalNamespace::Vector3Serializable& a, const ::GlobalNamespace::Vector3Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector3Serializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector3Serializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Vector3Serializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Vector4Serializable
#include "GlobalNamespace/Vector4Serializable.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _x
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector4Serializable::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::dyn__x");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _y
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector4Serializable::dyn__y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::dyn__y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_y"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _z
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector4Serializable::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::dyn__z");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _w
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Vector4Serializable::dyn__w() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::dyn__w");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_w"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Vector4Serializable..ctor
GlobalNamespace::Vector4Serializable::Vector4Serializable(::UnityEngine::Vector4 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, v);
}
// Autogenerated method: Vector4Serializable..ctor
GlobalNamespace::Vector4Serializable::Vector4Serializable(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: Vector4Serializable.Serialize
void GlobalNamespace::Vector4Serializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: Vector4Serializable.Deserialize
void GlobalNamespace::Vector4Serializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: Vector4Serializable.Equals
bool GlobalNamespace::Vector4Serializable::Equals(::GlobalNamespace::Vector4Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Vector4Serializable.Approximately
bool GlobalNamespace::Vector4Serializable::Approximately(::GlobalNamespace::Vector4Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Vector4Serializable.GetSize
int GlobalNamespace::Vector4Serializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.Equals
bool GlobalNamespace::Vector4Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Vector4Serializable.GetHashCode
int GlobalNamespace::Vector4Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.ToString
::StringW GlobalNamespace::Vector4Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.op_Addition
::GlobalNamespace::Vector4Serializable GlobalNamespace::operator+(const ::GlobalNamespace::Vector4Serializable& a, const ::GlobalNamespace::Vector4Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector4Serializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Vector4Serializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Vector4Serializable.op_Subtraction
::GlobalNamespace::Vector4Serializable GlobalNamespace::operator-(const ::GlobalNamespace::Vector4Serializable& a, const ::GlobalNamespace::Vector4Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector4Serializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector4Serializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Vector4Serializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuaternionSerializable
#include "GlobalNamespace/QuaternionSerializable.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSqrtTwo
float GlobalNamespace::QuaternionSerializable::_get_kSqrtTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_get_kSqrtTwo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kSqrtTwo"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSqrtTwo
void GlobalNamespace::QuaternionSerializable::_set_kSqrtTwo(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_set_kSqrtTwo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kSqrtTwo", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kOneOverSqrtTwo
float GlobalNamespace::QuaternionSerializable::_get_kOneOverSqrtTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_get_kOneOverSqrtTwo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kOneOverSqrtTwo"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kOneOverSqrtTwo
void GlobalNamespace::QuaternionSerializable::_set_kOneOverSqrtTwo(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_set_kOneOverSqrtTwo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kOneOverSqrtTwo", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kScale
float GlobalNamespace::QuaternionSerializable::_get_kScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_get_kScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kScale
void GlobalNamespace::QuaternionSerializable::_set_kScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_set_kScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kInvScale
float GlobalNamespace::QuaternionSerializable::_get_kInvScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_get_kInvScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kInvScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kInvScale
void GlobalNamespace::QuaternionSerializable::_set_kInvScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::_set_kInvScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kInvScale", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _a
[[deprecated("Use field access instead!")]] int& GlobalNamespace::QuaternionSerializable::dyn__a() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::dyn__a");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_a"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _b
[[deprecated("Use field access instead!")]] int& GlobalNamespace::QuaternionSerializable::dyn__b() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::dyn__b");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_b"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _c
[[deprecated("Use field access instead!")]] int& GlobalNamespace::QuaternionSerializable::dyn__c() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::dyn__c");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_c"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: QuaternionSerializable.get_identity
::GlobalNamespace::QuaternionSerializable GlobalNamespace::QuaternionSerializable::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: QuaternionSerializable..ctor
GlobalNamespace::QuaternionSerializable::QuaternionSerializable(::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, q);
}
// Autogenerated method: QuaternionSerializable..ctor
GlobalNamespace::QuaternionSerializable::QuaternionSerializable(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: QuaternionSerializable.ToSmallest
void GlobalNamespace::QuaternionSerializable::ToSmallest(::UnityEngine::Quaternion q, ByRef<int> sa, ByRef<int> sb, ByRef<int> sc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::ToSmallest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "ToSmallest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q, byref(sa), byref(sb), byref(sc));
}
// Autogenerated method: QuaternionSerializable.FromSmallest
::UnityEngine::Quaternion GlobalNamespace::QuaternionSerializable::FromSmallest(int sa, int sb, int sc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::FromSmallest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "FromSmallest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sa), ::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(sc)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sa, sb, sc);
}
// Autogenerated method: QuaternionSerializable.Serialize
void GlobalNamespace::QuaternionSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: QuaternionSerializable.Deserialize
void GlobalNamespace::QuaternionSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: QuaternionSerializable.Equals
bool GlobalNamespace::QuaternionSerializable::Equals(::GlobalNamespace::QuaternionSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: QuaternionSerializable.Approximately
bool GlobalNamespace::QuaternionSerializable::Approximately(::GlobalNamespace::QuaternionSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: QuaternionSerializable.GetSize
int GlobalNamespace::QuaternionSerializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.Equals
bool GlobalNamespace::QuaternionSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: QuaternionSerializable.GetHashCode
int GlobalNamespace::QuaternionSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.ToString
::StringW GlobalNamespace::QuaternionSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.op_Addition
::GlobalNamespace::QuaternionSerializable GlobalNamespace::operator+(const ::GlobalNamespace::QuaternionSerializable& a, const ::GlobalNamespace::QuaternionSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: QuaternionSerializable.op_Subtraction
::GlobalNamespace::QuaternionSerializable GlobalNamespace::operator-(const ::GlobalNamespace::QuaternionSerializable& a, const ::GlobalNamespace::QuaternionSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuaternionSerializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PoseSerializable
#include "GlobalNamespace/PoseSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable position
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::PoseSerializable::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::dyn_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public QuaternionSerializable rotation
[[deprecated("Use field access instead!")]] ::GlobalNamespace::QuaternionSerializable& GlobalNamespace::PoseSerializable::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::dyn_rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::GlobalNamespace::QuaternionSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PoseSerializable.get_identity
::GlobalNamespace::PoseSerializable GlobalNamespace::PoseSerializable::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PoseSerializable..ctor
// ABORTED elsewhere.  GlobalNamespace::PoseSerializable::PoseSerializable(::GlobalNamespace::Vector3Serializable position, ::GlobalNamespace::QuaternionSerializable rotation)
// Autogenerated method: PoseSerializable.Serialize
void GlobalNamespace::PoseSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PoseSerializable.Deserialize
void GlobalNamespace::PoseSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: PoseSerializable.Equals
bool GlobalNamespace::PoseSerializable::Equals(::GlobalNamespace::PoseSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: PoseSerializable.GetSize
int GlobalNamespace::PoseSerializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: PoseSerializable.Equals
bool GlobalNamespace::PoseSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: PoseSerializable.GetHashCode
int GlobalNamespace::PoseSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: PoseSerializable.ToString
::StringW GlobalNamespace::PoseSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: PoseSerializable.op_Addition
::GlobalNamespace::PoseSerializable GlobalNamespace::operator+(const ::GlobalNamespace::PoseSerializable& a, const ::GlobalNamespace::PoseSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: PoseSerializable.op_Subtraction
::GlobalNamespace::PoseSerializable GlobalNamespace::operator-(const ::GlobalNamespace::PoseSerializable& a, const ::GlobalNamespace::PoseSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoseSerializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSerializable
#include "GlobalNamespace/ColorSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ColorSerializable::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::dyn__color");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorSerializable..ctor
// ABORTED elsewhere.  GlobalNamespace::ColorSerializable::ColorSerializable(::UnityEngine::Color color)
// Autogenerated method: ColorSerializable.Serialize
void GlobalNamespace::ColorSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ColorSerializable.Deserialize
void GlobalNamespace::ColorSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ColorSerializable.Equals
bool GlobalNamespace::ColorSerializable::Equals(::GlobalNamespace::ColorSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: ColorSerializable.Equals
bool GlobalNamespace::ColorSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: ColorSerializable.GetHashCode
int GlobalNamespace::ColorSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ColorSerializable.ToString
::StringW GlobalNamespace::ColorSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Color32Serializable
#include "GlobalNamespace/Color32Serializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color32 _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::Color32Serializable::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::dyn__color");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Color32Serializable..ctor
// ABORTED elsewhere.  GlobalNamespace::Color32Serializable::Color32Serializable(::UnityEngine::Color32 color)
// Autogenerated method: Color32Serializable.Serialize
void GlobalNamespace::Color32Serializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: Color32Serializable.Deserialize
void GlobalNamespace::Color32Serializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: Color32Serializable.Equals
bool GlobalNamespace::Color32Serializable::Equals(::GlobalNamespace::Color32Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Color32Serializable.Equals
bool GlobalNamespace::Color32Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Color32Serializable.GetHashCode
int GlobalNamespace::Color32Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Color32Serializable.ToString
::StringW GlobalNamespace::Color32Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Color32Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorNoAlphaSerializable
#include "GlobalNamespace/ColorNoAlphaSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ColorNoAlphaSerializable::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::dyn__color");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorNoAlphaSerializable..ctor
// ABORTED elsewhere.  GlobalNamespace::ColorNoAlphaSerializable::ColorNoAlphaSerializable(::UnityEngine::Color color)
// Autogenerated method: ColorNoAlphaSerializable.Serialize
void GlobalNamespace::ColorNoAlphaSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ColorNoAlphaSerializable.Deserialize
void GlobalNamespace::ColorNoAlphaSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ColorNoAlphaSerializable.Equals
bool GlobalNamespace::ColorNoAlphaSerializable::Equals(::GlobalNamespace::ColorNoAlphaSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: ColorNoAlphaSerializable.Equals
bool GlobalNamespace::ColorNoAlphaSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: ColorNoAlphaSerializable.GetHashCode
int GlobalNamespace::ColorNoAlphaSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoAlphaSerializable.ToString
::StringW GlobalNamespace::ColorNoAlphaSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoAlphaSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderSpawnInfoNetSerializable
#include "GlobalNamespace/SliderSpawnInfoNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ColorType colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderData/Type sliderType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderData::Type& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_sliderType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_sliderType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sliderType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderData::Type*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean hasHeadNote
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_hasHeadNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_hasHeadNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasHeadNote"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 headLineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headLineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headLineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer headLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer headBeforeJumpLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headBeforeJumpLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headBeforeJumpLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headBeforeJumpLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headControlPointLengthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headControlPointLengthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headControlPointLengthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headControlPointLengthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteCutDirection headCutDirection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headCutDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headCutDirection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteCutDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headCutDirectionAngleOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headCutDirectionAngleOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headCutDirectionAngleOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headCutDirectionAngleOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean hasTailNote
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_hasTailNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_hasTailNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasTailNote"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single tailTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 tailLineIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailLineIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailLineIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer tailLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteLineLayer tailBeforeJumpLineLayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailBeforeJumpLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailBeforeJumpLineLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailBeforeJumpLineLayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single tailControlPointLengthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailControlPointLengthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailControlPointLengthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailControlPointLengthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteCutDirection tailCutDirection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailCutDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailCutDirection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteCutDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single tailCutDirectionAngleOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailCutDirectionAngleOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailCutDirectionAngleOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailCutDirectionAngleOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderMidAnchorMode midAnchorMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMidAnchorMode& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_midAnchorMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_midAnchorMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "midAnchorMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMidAnchorMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sliceCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_sliceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_sliceCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sliceCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single squishAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_squishAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_squishAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "squishAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable headMoveStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headMoveStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headMoveStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headMoveStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable headJumpStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headJumpStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable headJumpEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headJumpEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headJumpGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_headJumpGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headJumpGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable tailMoveStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailMoveStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailMoveStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailMoveStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable tailJumpStartPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailJumpStartPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Vector3Serializable tailJumpEndPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Vector3Serializable& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailJumpEndPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Vector3Serializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single tailJumpGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_tailJumpGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailJumpGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single moveDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_moveDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderSpawnInfoNetSerializable.Serialize
void GlobalNamespace::SliderSpawnInfoNetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: SliderSpawnInfoNetSerializable.Deserialize
void GlobalNamespace::SliderSpawnInfoNetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderSpawnInfoNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashCount
int GlobalNamespace::SongPackMask::_get_kHashCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_get_kHashCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SongPackMask", "kHashCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashCount
void GlobalNamespace::SongPackMask::_set_kHashCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_set_kHashCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kHashCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashBits
int GlobalNamespace::SongPackMask::_get_kHashBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_get_kHashBits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SongPackMask", "kHashBits"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashBits
void GlobalNamespace::SongPackMask::_set_kHashBits(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_set_kHashBits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kHashBits", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::StringW GlobalNamespace::SongPackMask::_get_kToStringPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_get_kToStringPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SongPackMask", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::SongPackMask::_set_kToStringPrefix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_set_kToStringPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::StringW GlobalNamespace::SongPackMask::_get_kToStringSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_get_kToStringSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SongPackMask", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::SongPackMask::_set_kToStringSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::_set_kToStringSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringSuffix", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly BitMask128 _bloomFilter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BitMask128& GlobalNamespace::SongPackMask::dyn__bloomFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::dyn__bloomFilter");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFilter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BitMask128*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SongPackMask.get_all
::GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::get_all() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::get_all");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "get_all", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SongPackMask..ctor
GlobalNamespace::SongPackMask::SongPackMask(::StringW packId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packId);
}
// Autogenerated method: SongPackMask..ctor
// ABORTED elsewhere.  GlobalNamespace::SongPackMask::SongPackMask(::GlobalNamespace::BitMask128 bloomFilter)
// Autogenerated method: SongPackMask..ctor
GlobalNamespace::SongPackMask::SongPackMask(::System::Collections::Generic::IEnumerable_1<::StringW>* packs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packs)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packs);
}
// Autogenerated method: SongPackMask.Contains
bool GlobalNamespace::SongPackMask::Contains(::GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.DifferenceFrom
int GlobalNamespace::SongPackMask::DifferenceFrom(::GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.Serialize
void GlobalNamespace::SongPackMask::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: SongPackMask.CreateFromSerializedData
::GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(this, ___internal__method, reader);
}
// Autogenerated method: SongPackMask.Deserialize
::GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: SongPackMask.ToShortString
::StringW GlobalNamespace::SongPackMask::ToShortString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::ToShortString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToShortString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMask.ToBytes
::ArrayW<uint8_t> GlobalNamespace::SongPackMask::ToBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::ToBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(::GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.TryParse
bool GlobalNamespace::SongPackMask::TryParse(::StringW stringSerializedMask, ByRef<::GlobalNamespace::SongPackMask> songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::SongPackMask&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stringSerializedMask, byref(songPackMask));
}
// Autogenerated method: SongPackMask.Parse
::GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Parse(::StringW stringSerializedMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stringSerializedMask);
}
// Autogenerated method: SongPackMask.FromBytes
::GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::FromBytes(::ArrayW<uint8_t> bytes, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, offset);
}
// Autogenerated method: SongPackMask.ToString
::StringW GlobalNamespace::SongPackMask::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMask.GetHashCode
int GlobalNamespace::SongPackMask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: SongPackMask.op_BitwiseOr
::GlobalNamespace::SongPackMask GlobalNamespace::operator|(const ::GlobalNamespace::SongPackMask& a, const ::GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_BitwiseAnd
::GlobalNamespace::SongPackMask GlobalNamespace::operator&(const ::GlobalNamespace::SongPackMask& a, const ::GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::SongPackMask& a, const ::GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::SongPackMask& a, const ::GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMask::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMaskConverter
#include "GlobalNamespace/SongPackMaskConverter.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Newtonsoft.Json.JsonReader
#include "Newtonsoft/Json/JsonReader.hpp"
// Including type: Newtonsoft.Json.JsonSerializer
#include "Newtonsoft/Json/JsonSerializer.hpp"
// Including type: Newtonsoft.Json.JsonWriter
#include "Newtonsoft/Json/JsonWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMaskConverter.CanConvert
bool GlobalNamespace::SongPackMaskConverter::CanConvert(::System::Type* objectType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMaskConverter::CanConvert");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanConvert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, objectType);
}
// Autogenerated method: SongPackMaskConverter.ReadJson
::Il2CppObject* GlobalNamespace::SongPackMaskConverter::ReadJson(::Newtonsoft::Json::JsonReader* reader, ::System::Type* objectType, ::Il2CppObject* existingValue, ::Newtonsoft::Json::JsonSerializer* serializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMaskConverter::ReadJson");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(objectType), ::il2cpp_utils::ExtractType(existingValue), ::il2cpp_utils::ExtractType(serializer)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, reader, objectType, existingValue, serializer);
}
// Autogenerated method: SongPackMaskConverter.WriteJson
void GlobalNamespace::SongPackMaskConverter::WriteJson(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::JsonSerializer* serializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPackMaskConverter::WriteJson");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(serializer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, value, serializer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VarIntExtensions
#include "GlobalNamespace/VarIntExtensions.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VarIntExtensions.PutVarInt
void GlobalNamespace::VarIntExtensions::PutVarInt(::LiteNetLib::Utils::NetDataWriter* writer, int val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::PutVarInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarInt
int GlobalNamespace::VarIntExtensions::GetVarInt(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetVarInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarUInt
void GlobalNamespace::VarIntExtensions::PutVarUInt(::LiteNetLib::Utils::NetDataWriter* writer, uint val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::PutVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarUInt
uint GlobalNamespace::VarIntExtensions::GetVarUInt(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarLong
void GlobalNamespace::VarIntExtensions::PutVarLong(::LiteNetLib::Utils::NetDataWriter* writer, int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::PutVarLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarLong
int64_t GlobalNamespace::VarIntExtensions::GetVarLong(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetVarLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarULong
void GlobalNamespace::VarIntExtensions::PutVarULong(::LiteNetLib::Utils::NetDataWriter* writer, uint64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::PutVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarULong
uint64_t GlobalNamespace::VarIntExtensions::GetVarULong(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.TryGetVarUInt
bool GlobalNamespace::VarIntExtensions::TryGetVarUInt(::LiteNetLib::Utils::NetDataReader* reader, ByRef<uint> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::TryGetVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "TryGetVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader, byref(value));
}
// Autogenerated method: VarIntExtensions.TryGetVarULong
bool GlobalNamespace::VarIntExtensions::TryGetVarULong(::LiteNetLib::Utils::NetDataReader* reader, ByRef<uint64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::TryGetVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "TryGetVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader, byref(value));
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(int val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(uint val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(uint64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioHelpers
#include "GlobalNamespace/AudioHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioHelpers.NormalizedVolumeToDB
float GlobalNamespace::AudioHelpers::NormalizedVolumeToDB(float normalizedVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AudioHelpers::NormalizedVolumeToDB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AudioHelpers", "NormalizedVolumeToDB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedVolume)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, normalizedVolume);
}
// Autogenerated method: AudioHelpers.DBToNormalizedVolume
float GlobalNamespace::AudioHelpers::DBToNormalizedVolume(float db) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AudioHelpers::DBToNormalizedVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AudioHelpers", "DBToNormalizedVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(db)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, db);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CaptureAudioToWav
#include "GlobalNamespace/CaptureAudioToWav.hpp"
// Including type: System.IO.FileStream
#include "System/IO/FileStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _fileName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CaptureAudioToWav::dyn__fileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::dyn__fileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _sampleRate
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CaptureAudioToWav::dyn__sampleRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::dyn__sampleRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sampleRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _headerSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CaptureAudioToWav::dyn__headerSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::dyn__headerSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headerSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _recording
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CaptureAudioToWav::dyn__recording() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::dyn__recording");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_recording"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.FileStream _fileStream
[[deprecated("Use field access instead!")]] ::System::IO::FileStream*& GlobalNamespace::CaptureAudioToWav::dyn__fileStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::dyn__fileStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fileStream"))->offset;
  return *reinterpret_cast<::System::IO::FileStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CaptureAudioToWav.Awake
void GlobalNamespace::CaptureAudioToWav::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CaptureAudioToWav.Update
void GlobalNamespace::CaptureAudioToWav::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CaptureAudioToWav.StartWriting
void GlobalNamespace::CaptureAudioToWav::StartWriting(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::StartWriting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartWriting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: CaptureAudioToWav.OnAudioFilterRead
void GlobalNamespace::CaptureAudioToWav::OnAudioFilterRead(::ArrayW<float> data, int channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::OnAudioFilterRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAudioFilterRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channels);
}
// Autogenerated method: CaptureAudioToWav.ConvertAndWrite
void GlobalNamespace::CaptureAudioToWav::ConvertAndWrite(::ArrayW<float> dataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::ConvertAndWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertAndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataSource)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataSource);
}
// Autogenerated method: CaptureAudioToWav.WriteHeader
void GlobalNamespace::CaptureAudioToWav::WriteHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CaptureAudioToWav::WriteHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomizedPitch
#include "GlobalNamespace/RandomizedPitch.hpp"
// Including type: RandomizedPitch/<PlayDelayedCoroutine>d__9
#include "GlobalNamespace/RandomizedPitch_-PlayDelayedCoroutine-d__9.hpp"
// Including type: RandomizedPitch/<RestorePitchWithDelay>d__10
#include "GlobalNamespace/RandomizedPitch_-RestorePitchWithDelay-d__10.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::RandomizedPitch::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minPitchMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizedPitch::dyn__minPitchMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__minPitchMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minPitchMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxPitchMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizedPitch::dyn__maxPitchMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__maxPitchMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxPitchMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _playOnAwake
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RandomizedPitch::dyn__playOnAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__playOnAwake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playOnAwake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _originalPitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizedPitch::dyn__originalPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__originalPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine _restoringCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& GlobalNamespace::RandomizedPitch::dyn__restoringCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::dyn__restoringCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restoringCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomizedPitch.OnEnable
void GlobalNamespace::RandomizedPitch::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch.Play
void GlobalNamespace::RandomizedPitch::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch.PlayDelayed
void GlobalNamespace::RandomizedPitch::PlayDelayed(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::PlayDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: RandomizedPitch.PlayDelayedCoroutine
::System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::PlayDelayedCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::PlayDelayedCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayedCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: RandomizedPitch.RestorePitchWithDelay
::System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::RestorePitchWithDelay(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::RestorePitchWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestorePitchWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RandomizedPitch/<PlayDelayedCoroutine>d__9
#include "GlobalNamespace/RandomizedPitch_-PlayDelayedCoroutine-d__9.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RandomizedPitch <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomizedPitch*& GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RandomizedPitch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.MoveNext
bool GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RandomizedPitch/<RestorePitchWithDelay>d__10
#include "GlobalNamespace/RandomizedPitch_-RestorePitchWithDelay-d__10.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RandomizedPitch <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomizedPitch*& GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RandomizedPitch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.IDisposable.Dispose
void GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.MoveNext
bool GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.IEnumerator.Reset
void GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ActivateOnPlatform
#include "GlobalNamespace/ActivateOnPlatform.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VRPlatformSDK _vrPlatformSdk
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRPlatformSDK& GlobalNamespace::ActivateOnPlatform::dyn__vrPlatformSdk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnPlatform::dyn__vrPlatformSdk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformSdk"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRPlatformSDK*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::ActivateOnPlatform::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnPlatform::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ActivateOnPlatform.Awake
void GlobalNamespace::ActivateOnPlatform::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnPlatform::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CommandLineArguments
#include "GlobalNamespace/CommandLineArguments.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CommandLineArguments.Contains
bool GlobalNamespace::CommandLineArguments::Contains(::StringW argument) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CommandLineArguments::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CommandLineArguments", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argument)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, argument);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeactivateAnimatorOnInputFocusCapture
#include "GlobalNamespace/DeactivateAnimatorOnInputFocusCapture.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _wasEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__wasEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::dyn__wasEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.Start
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.OnDestroy
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.HandleInputFocusCaptured
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.HandleInputFocusReleased
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeactivateOnInputFocusCapture
#include "GlobalNamespace/DeactivateOnInputFocusCapture.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::DeactivateOnInputFocusCapture::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateOnInputFocusCapture::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DeactivateOnInputFocusCapture.OnEnable
void GlobalNamespace::DeactivateOnInputFocusCapture::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateOnInputFocusCapture::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.OnDestroy
void GlobalNamespace::DeactivateOnInputFocusCapture::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateOnInputFocusCapture::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.HandleInputFocusCaptured
void GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.HandleInputFocusReleased
void GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileHelpers
#include "GlobalNamespace/FileHelpers.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileHelpers.GetEscapedURLForFilePath
::StringW GlobalNamespace::FileHelpers::GetEscapedURLForFilePath(::StringW filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::GetEscapedURLForFilePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetEscapedURLForFilePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, filePath);
}
// Autogenerated method: FileHelpers.GetUniqueDirectoryNameByAppendingNumber
::StringW GlobalNamespace::FileHelpers::GetUniqueDirectoryNameByAppendingNumber(::StringW dirName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::GetUniqueDirectoryNameByAppendingNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetUniqueDirectoryNameByAppendingNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dirName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dirName);
}
// Autogenerated method: FileHelpers.GetFilePaths
::ArrayW<::StringW> GlobalNamespace::FileHelpers::GetFilePaths(::StringW directoryPath, ::System::Collections::Generic::HashSet_1<::StringW>* extensions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::GetFilePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetFilePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directoryPath), ::il2cpp_utils::ExtractType(extensions)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, directoryPath, extensions);
}
// Autogenerated method: FileHelpers.GetFileNamesFromFilePaths
::ArrayW<::StringW> GlobalNamespace::FileHelpers::GetFileNamesFromFilePaths(::ArrayW<::StringW> filePaths) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::GetFileNamesFromFilePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetFileNamesFromFilePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePaths)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, filePaths);
}
// Autogenerated method: FileHelpers.SaveToJSONFile
void GlobalNamespace::FileHelpers::SaveToJSONFile(::Il2CppObject* obj, ::StringW filePath, bool prettyPrint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::SaveToJSONFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "SaveToJSONFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(prettyPrint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, filePath, prettyPrint);
}
// Autogenerated method: FileHelpers.SaveToJSONFile
void GlobalNamespace::FileHelpers::SaveToJSONFile(::Il2CppObject* obj, ::StringW filePath, ::StringW tempFilePath, ::StringW backupFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::SaveToJSONFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "SaveToJSONFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(tempFilePath), ::il2cpp_utils::ExtractType(backupFilePath)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, filePath, tempFilePath, backupFilePath);
}
// Autogenerated method: FileHelpers.LoadJSONFile
::StringW GlobalNamespace::FileHelpers::LoadJSONFile(::StringW filePath, ::StringW backupFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileHelpers::LoadJSONFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "LoadJSONFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(backupFilePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, filePath, backupFilePath);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FindUnityObjectsHelper
#include "GlobalNamespace/FindUnityObjectsHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FindUnityObjectsHelper.GetMonoBehavioursInLoadedScenes
::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>* GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetMonoBehavioursInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllRootGameObjectsInLoadedScenes
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllRootGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInGameObject
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, go);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInLoadedScenes
::ArrayW<::UnityEngine::GameObject*> GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::GameObject*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FixedUpdateVector3SmoothValue
#include "GlobalNamespace/FixedUpdateVector3SmoothValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FixedUpdateVector3SmoothValue.Interpolate
::UnityEngine::Vector3 GlobalNamespace::FixedUpdateVector3SmoothValue::Interpolate(::UnityEngine::Vector3 value0, ::UnityEngine::Vector3 value1, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateVector3SmoothValue::Interpolate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, value0, value1, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GenericLogger
#include "GlobalNamespace/GenericLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GenericLogger.VerboseLog
void GlobalNamespace::GenericLogger::VerboseLog(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GenericLogger::VerboseLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GenericLogger", "VerboseLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRefreshable.Refresh
void GlobalNamespace::IRefreshable::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRefreshable::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KeyboardShortcutsManager
#include "GlobalNamespace/KeyboardShortcutsManager.hpp"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<KeyboardShortcutsManager/KeyboardShortcut,System.Collections.Generic.List`1<System.Action>> _keyboardShortcutActions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Collections::Generic::List_1<::System::Action*>*>*& GlobalNamespace::KeyboardShortcutsManager::dyn__keyboardShortcutActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::dyn__keyboardShortcutActions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyboardShortcutActions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Collections::Generic::List_1<::System::Action*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KeyboardShortcutsManager.Update
void GlobalNamespace::KeyboardShortcutsManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::UnityEngine::KeyCode combinationKey2, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::UnityEngine::KeyCode combinationKey2, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode mainKey
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_mainKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_mainKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainKey"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode combinationKey1
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "combinationKey1"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode combinationKey2
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "combinationKey2"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.GetHashCode
int GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.Equals
bool GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LinkedListExtension
#include "GlobalNamespace/LinkedListExtension.hpp"
// Including type: System.Collections.Generic.LinkedListNode`1
#include "System/Collections/Generic/LinkedListNode_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MipMapBiasSpriteSetter
#include "GlobalNamespace/MipMapBiasSpriteSetter.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite[] _sprites
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& GlobalNamespace::MipMapBiasSpriteSetter::dyn__sprites() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::dyn__sprites");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sprites"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _mipMapBias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MipMapBiasSpriteSetter::dyn__mipMapBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::dyn__mipMapBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mipMapBias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MipMapBiasSpriteSetter.Start
void GlobalNamespace::MipMapBiasSpriteSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityScenesHelper
#include "GlobalNamespace/UnityScenesHelper.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityScenesHelper.SetActiveRootObjectsInScene
void GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene(::UnityEngine::SceneManagement::Scene scene, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityScenesHelper", "SetActiveRootObjectsInScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, active);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: DrawIfAttribute
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DrawIfAttribute::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object value
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::DrawIfAttribute::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object orValue
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::DrawIfAttribute::dyn_orValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_orValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly DrawIfAttribute/DisablingType disablingType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DrawIfAttribute::DisablingType& GlobalNamespace::DrawIfAttribute::dyn_disablingType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_disablingType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disablingType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DrawIfAttribute::DisablingType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawIfAttribute/DisablingType
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType ReadOnly
::GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType ReadOnly
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly(::GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType DontDraw
::GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "DontDraw"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType DontDraw
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw(::GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "DontDraw", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DrawIfAttribute::DisablingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AssertExtensions
#include "GlobalNamespace/AssertExtensions.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kUnityAssertions
::StringW GlobalNamespace::AssertExtensions::_get_kUnityAssertions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::_get_kUnityAssertions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "AssertExtensions", "kUnityAssertions"));
}
// Autogenerated static field setter
// Set static field: static private System.String kUnityAssertions
void GlobalNamespace::AssertExtensions::_set_kUnityAssertions(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::_set_kUnityAssertions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AssertExtensions", "kUnityAssertions", value));
}
// Autogenerated method: AssertExtensions.LessThan
void GlobalNamespace::AssertExtensions::LessThan(float expected, float value, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AssertExtensions", "LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, expected, value, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ComponentExtensions
#include "GlobalNamespace/ComponentExtensions.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CubicBezierHelper
#include "GlobalNamespace/CubicBezierHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CubicBezierHelper.EvaluateCurve
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurve(::ArrayW<::UnityEngine::Vector3> points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurve
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurve(::UnityEngine::Vector3 a1, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 c2, ::UnityEngine::Vector3 a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a1, c1, c2, a2, t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative(::ArrayW<::UnityEngine::Vector3> points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative(::UnityEngine::Vector3 a1, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 c2, ::UnityEngine::Vector3 a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a1, c1, c2, a2, t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveSecondDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative(::ArrayW<::UnityEngine::Vector3> points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveSecondDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveSecondDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative(::UnityEngine::Vector3 a1, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 c2, ::UnityEngine::Vector3 a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveSecondDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a1, c1, c2, a2, t);
}
// Autogenerated method: CubicBezierHelper.Normal
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::Normal(::ArrayW<::UnityEngine::Vector3> points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::Normal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "Normal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.Normal
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::Normal(::UnityEngine::Vector3 a1, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 c2, ::UnityEngine::Vector3 a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::Normal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "Normal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a1, c1, c2, a2, t);
}
// Autogenerated method: CubicBezierHelper.SplitCurve
::System::Collections::Generic::List_1<::UnityEngine::Vector3>* GlobalNamespace::CubicBezierHelper::SplitCurve(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::SplitCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "SplitCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.EstimateCurveLength
float GlobalNamespace::CubicBezierHelper::EstimateCurveLength(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EstimateCurveLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EstimateCurveLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, p3);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawHelpers
#include "GlobalNamespace/DrawHelpers.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DrawHelpers.DrawTexture
void GlobalNamespace::DrawHelpers::DrawTexture(::UnityEngine::Texture* texture, float x, float y, float w, float h, ::UnityEngine::Material* mat, float sx, float sy, float sw, float sh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawHelpers::DrawTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DrawHelpers", "DrawTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(w), ::il2cpp_utils::ExtractType(h), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(sx), ::il2cpp_utils::ExtractType(sy), ::il2cpp_utils::ExtractType(sw), ::il2cpp_utils::ExtractType(sh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, x, y, w, h, mat, sx, sy, sw, sh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DroppedFramesLabel
#include "GlobalNamespace/DroppedFramesLabel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::DroppedFramesLabel::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _expectedFrameRate
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__expectedFrameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__expectedFrameRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_expectedFrameRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _resetInterval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__resetInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__resetInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resetInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _totalNumberOfDroppedFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__totalNumberOfDroppedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__totalNumberOfDroppedFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalNumberOfDroppedFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _syncedFrameTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__syncedFrameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__syncedFrameTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncedFrameTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intervalTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__intervalTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__intervalTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intervalTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxFrameTimeInInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__maxFrameTimeInInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__maxFrameTimeInInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxFrameTimeInInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameCountInInterval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__frameCountInInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__frameCountInInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameCountInInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DroppedFramesLabel.Start
void GlobalNamespace::DroppedFramesLabel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.Update
void GlobalNamespace::DroppedFramesLabel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.RefreshText
void GlobalNamespace::DroppedFramesLabel::RefreshText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::RefreshText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RenderTextureExtensions
#include "GlobalNamespace/RenderTextureExtensions.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RenderTextureExtensions.GetTexture2D
::UnityEngine::Texture2D* GlobalNamespace::RenderTextureExtensions::GetTexture2D(::UnityEngine::RenderTexture* rt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RenderTextureExtensions::GetTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RenderTextureExtensions", "GetTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rt);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimeHelper
#include "GlobalNamespace/TimeHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single <time>k__BackingField
float GlobalNamespace::TimeHelper::_get_$time$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$time$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<time>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <time>k__BackingField
void GlobalNamespace::TimeHelper::_set_$time$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$time$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<time>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <deltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<deltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <deltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<deltaTime>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <fixedDeltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<fixedDeltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <fixedDeltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<fixedDeltaTime>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <interpolationFactor>k__BackingField
float GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<interpolationFactor>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <interpolationFactor>k__BackingField
void GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<interpolationFactor>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _accumulator
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeHelper::dyn__accumulator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::dyn__accumulator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_accumulator"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeHelper.get_time
float GlobalNamespace::TimeHelper::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_time
void GlobalNamespace::TimeHelper::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_deltaTime
float GlobalNamespace::TimeHelper::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_deltaTime
void GlobalNamespace::TimeHelper::set_deltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_fixedDeltaTime
float GlobalNamespace::TimeHelper::get_fixedDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_fixedDeltaTime
void GlobalNamespace::TimeHelper::set_fixedDeltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_interpolationFactor
float GlobalNamespace::TimeHelper::get_interpolationFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_interpolationFactor
void GlobalNamespace::TimeHelper::set_interpolationFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.Awake
void GlobalNamespace::TimeHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.FixedUpdate
void GlobalNamespace::TimeHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.Update
void GlobalNamespace::TimeHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.__SetTime
void GlobalNamespace::TimeHelper::__SetTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::__SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "__SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VersionStringHelper
#include "GlobalNamespace/VersionStringHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VersionStringHelper.GetMajorVersionNumber
int GlobalNamespace::VersionStringHelper::GetMajorVersionNumber(::StringW versionString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VersionStringHelper::GetMajorVersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VersionStringHelper", "GetMajorVersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(versionString)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, versionString);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Easing
#include "GlobalNamespace/Easing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Easing.Linear
float GlobalNamespace::Easing::Linear(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::Linear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "Linear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InSine
float GlobalNamespace::Easing::InSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutSine
float GlobalNamespace::Easing::OutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutSine
float GlobalNamespace::Easing::InOutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuad
float GlobalNamespace::Easing::InQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuad
float GlobalNamespace::Easing::OutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuad
float GlobalNamespace::Easing::InOutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCubic
float GlobalNamespace::Easing::InCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCubic
float GlobalNamespace::Easing::OutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCubic
float GlobalNamespace::Easing::InOutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuart
float GlobalNamespace::Easing::InQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuart
float GlobalNamespace::Easing::OutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuart
float GlobalNamespace::Easing::InOutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuint
float GlobalNamespace::Easing::InQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuint
float GlobalNamespace::Easing::OutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuint
float GlobalNamespace::Easing::InOutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InExpo
float GlobalNamespace::Easing::InExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutExpo
float GlobalNamespace::Easing::OutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutExpo
float GlobalNamespace::Easing::InOutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCirc
float GlobalNamespace::Easing::InCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCirc
float GlobalNamespace::Easing::OutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCirc
float GlobalNamespace::Easing::InOutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBack
float GlobalNamespace::Easing::InBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBack
float GlobalNamespace::Easing::OutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBack
float GlobalNamespace::Easing::InOutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InElastic
float GlobalNamespace::Easing::InElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutElastic
float GlobalNamespace::Easing::OutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutElastic
float GlobalNamespace::Easing::InOutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBounce
float GlobalNamespace::Easing::InBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBounce
float GlobalNamespace::Easing::OutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBounce
float GlobalNamespace::Easing::InOutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EaseType None
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "None"));
}
// Autogenerated static field setter
// Set static field: static public EaseType None
void GlobalNamespace::EaseType::_set_None(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType Linear
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public EaseType Linear
void GlobalNamespace::EaseType::_set_Linear(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InSine
void GlobalNamespace::EaseType::_set_InSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutSine
void GlobalNamespace::EaseType::_set_OutSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutSine
void GlobalNamespace::EaseType::_set_InOutSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuad
void GlobalNamespace::EaseType::_set_InQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuad
void GlobalNamespace::EaseType::_set_OutQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuad
void GlobalNamespace::EaseType::_set_InOutQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InCubic
void GlobalNamespace::EaseType::_set_InCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutCubic
void GlobalNamespace::EaseType::_set_OutCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutCubic
void GlobalNamespace::EaseType::_set_InOutCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuart
void GlobalNamespace::EaseType::_set_InQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuart
void GlobalNamespace::EaseType::_set_OutQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuart
void GlobalNamespace::EaseType::_set_InOutQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuint
void GlobalNamespace::EaseType::_set_InQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuint
void GlobalNamespace::EaseType::_set_OutQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuint
void GlobalNamespace::EaseType::_set_InOutQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InExpo
void GlobalNamespace::EaseType::_set_InExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutExpo
void GlobalNamespace::EaseType::_set_OutExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutExpo
void GlobalNamespace::EaseType::_set_InOutExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InCirc
void GlobalNamespace::EaseType::_set_InCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutCirc
void GlobalNamespace::EaseType::_set_OutCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutCirc
void GlobalNamespace::EaseType::_set_InOutCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InBack
void GlobalNamespace::EaseType::_set_InBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutBack
void GlobalNamespace::EaseType::_set_OutBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutBack
void GlobalNamespace::EaseType::_set_InOutBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InElastic
void GlobalNamespace::EaseType::_set_InElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutElastic
void GlobalNamespace::EaseType::_set_OutElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutElastic
void GlobalNamespace::EaseType::_set_InOutElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InBounce
void GlobalNamespace::EaseType::_set_InBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InBounce", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutBounce
void GlobalNamespace::EaseType::_set_OutBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutBounce
void GlobalNamespace::EaseType::_set_InOutBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutBounce", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EaseType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Interpolation
#include "GlobalNamespace/Interpolation.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Interpolation.Interpolate
float GlobalNamespace::Interpolation::Interpolate(float t, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Interpolation::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Interpolation", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(easeType)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, easeType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdate
#include "GlobalNamespace/ManualUpdate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdateManager
#include "GlobalNamespace/ManualUpdateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ActivateOnVisible
#include "GlobalNamespace/ActivateOnVisible.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] _gameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ActivateOnVisible::dyn__gameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::dyn__gameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ActivateOnVisible.Awake
void GlobalNamespace::ActivateOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameVisible
void GlobalNamespace::ActivateOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameInvisible
void GlobalNamespace::ActivateOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo
#include "GlobalNamespace/AlphabetScrollInfo.hpp"
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Char character
[[deprecated("Use field access instead!")]] ::Il2CppChar& GlobalNamespace::AlphabetScrollInfo::Data::dyn_character() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AlphabetScrollInfo::Data::dyn_character");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "character"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 cellIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AlphabetScrollInfo::Data::dyn_cellIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AlphabetScrollInfo::Data::dyn_cellIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cellIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnimationStartParams
#include "GlobalNamespace/AnimationStartParams.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _timeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimationStartParams::dyn__timeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__timeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimationStartParams::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::AnimationStartParams::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AnimationStartParams.Start
void GlobalNamespace::AnimationStartParams::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ArrayHelpers
#include "GlobalNamespace/ArrayHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper
#include "GlobalNamespace/AsyncHelper.hpp"
// Including type: AsyncHelper/<>c__DisplayClass0_0`1
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass0_0_1.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AsyncHelper.RunSync
void GlobalNamespace::AsyncHelper::RunSync(::System::Func_1<::System::Threading::Tasks::Task*>* asyncTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::RunSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AsyncHelper", "RunSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asyncTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Func`1<System.Threading.Tasks.Task> asyncTask
[[deprecated("Use field access instead!")]] ::System::Func_1<::System::Threading::Tasks::Task*>*& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::dyn_asyncTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::dyn_asyncTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncTask"))->offset;
  return *reinterpret_cast<::System::Func_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0.<RunSync>b__0
::System::Threading::Tasks::Task* GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$RunSync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::<RunSync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunSync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AsyncHelper/<>c__DisplayClass1_0 <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0*& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.MoveNext
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.SetStateMachine
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard
#include "GlobalNamespace/Billboard.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Billboard/RotationMode _rotationMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Billboard::RotationMode& GlobalNamespace::Billboard::dyn__rotationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__rotationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Billboard::RotationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _flipDirection
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Billboard::dyn__flipDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__flipDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flipDirection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Billboard::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Billboard.Awake
void GlobalNamespace::Billboard::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Billboard.OnWillRenderObject
void GlobalNamespace::Billboard::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard/RotationMode
#include "GlobalNamespace/Billboard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode AllAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_AllAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_AllAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "AllAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode AllAxis
void GlobalNamespace::Billboard::RotationMode::_set_AllAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_AllAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "AllAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode XAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_XAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "XAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode XAxis
void GlobalNamespace::Billboard::RotationMode::_set_XAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_XAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "XAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode YAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_YAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "YAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode YAxis
void GlobalNamespace::Billboard::RotationMode::_set_YAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_YAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "YAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode ZAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_ZAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "ZAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode ZAxis
void GlobalNamespace::Billboard::RotationMode::_set_ZAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_ZAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "ZAxis", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Billboard::RotationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CameraDepthTextureMode
#include "GlobalNamespace/CameraDepthTextureMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.DepthTextureMode _depthTextureMode
[[deprecated("Use field access instead!")]] ::UnityEngine::DepthTextureMode& GlobalNamespace::CameraDepthTextureMode::dyn__depthTextureMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraDepthTextureMode::dyn__depthTextureMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_depthTextureMode"))->offset;
  return *reinterpret_cast<::UnityEngine::DepthTextureMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CameraDepthTextureMode.Awake
void GlobalNamespace::CameraDepthTextureMode::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraDepthTextureMode::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClickButtonWithCommandArgument
#include "GlobalNamespace/ClickButtonWithCommandArgument.hpp"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _argument
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ClickButtonWithCommandArgument::dyn__argument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::dyn__argument");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_argument"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _button
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& GlobalNamespace::ClickButtonWithCommandArgument::dyn__button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::dyn__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ClickButtonWithCommandArgument.Start
::System::Collections::IEnumerator* GlobalNamespace::ClickButtonWithCommandArgument::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ClickButtonWithCommandArgument <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickButtonWithCommandArgument*& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickButtonWithCommandArgument**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.IDisposable.Dispose
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.MoveNext
bool GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorExtensions
#include "GlobalNamespace/ColorExtensions.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorExtensions.SaturatedColor
::UnityEngine::Color GlobalNamespace::ColorExtensions::SaturatedColor(::UnityEngine::Color color, float saturation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::SaturatedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "SaturatedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(saturation)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, saturation);
}
// Autogenerated method: ColorExtensions.ColorWithAlpha
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithAlpha(::UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, alpha);
}
// Autogenerated method: ColorExtensions.ColorWithR
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithR(::UnityEngine::Color color, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, r);
}
// Autogenerated method: ColorExtensions.ColorWithG
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithG(::UnityEngine::Color color, float g) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithG");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithG", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(g)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, g);
}
// Autogenerated method: ColorExtensions.ColorWithB
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithB(::UnityEngine::Color color, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, b);
}
// Autogenerated method: ColorExtensions.ColorWithValue
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithValue(::UnityEngine::Color color, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, value);
}
// Autogenerated method: ColorExtensions.LerpRGBUnclamped
::UnityEngine::Color GlobalNamespace::ColorExtensions::LerpRGBUnclamped(::UnityEngine::Color a, ::UnityEngine::Color b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::LerpRGBUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "LerpRGBUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConfigSerializer
#include "GlobalNamespace/ConfigSerializer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConfigSerializer.SaveConfig
void GlobalNamespace::ConfigSerializer::SaveConfig(::Il2CppObject* config, ::StringW filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConfigSerializer::SaveConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "SaveConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, config, filePath);
}
// Autogenerated method: ConfigSerializer.LoadConfig
bool GlobalNamespace::ConfigSerializer::LoadConfig(::Il2CppObject* config, ::StringW filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConfigSerializer::LoadConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "LoadConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, config, filePath);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoroutineHelpers
#include "GlobalNamespace/CoroutineHelpers.hpp"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CoroutineHelpers.ExecuteAfterDelayCoroutine
::System::Collections::IEnumerator* GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine(::System::Action* action, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CoroutineHelpers", "ExecuteAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.IDisposable.Dispose
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.MoveNext
bool GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.Reset
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBoundingBox
#include "GlobalNamespace/CustomBoundingBox.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::CustomBoundingBox::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _boundingBoxCenter
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CustomBoundingBox::dyn__boundingBoxCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__boundingBoxCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundingBoxCenter"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _boundingBoxSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CustomBoundingBox::dyn__boundingBoxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__boundingBoxSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundingBoxSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::CustomBoundingBox::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomBoundingBox.Awake
void GlobalNamespace::CustomBoundingBox::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableGCWhileEnabled
#include "GlobalNamespace/DisableGCWhileEnabled.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableGCWhileEnabled.OnEnable
void GlobalNamespace::DisableGCWhileEnabled::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisableGCWhileEnabled::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DisableGCWhileEnabled.OnDisable
void GlobalNamespace::DisableGCWhileEnabled::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisableGCWhileEnabled::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoesNotRequireDomainReloadInitAttribute
#include "GlobalNamespace/DoesNotRequireDomainReloadInitAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableAfterDelay
#include "GlobalNamespace/EnableAfterDelay.hpp"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MonoBehaviour _component
[[deprecated("Use field access instead!")]] ::UnityEngine::MonoBehaviour*& GlobalNamespace::EnableAfterDelay::dyn__component() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::dyn__component");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_component"))->offset;
  return *reinterpret_cast<::UnityEngine::MonoBehaviour**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableAfterDelay.Start
::System::Collections::IEnumerator* GlobalNamespace::EnableAfterDelay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EnableAfterDelay <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnableAfterDelay*& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnableAfterDelay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.IDisposable.Dispose
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.MoveNext
bool GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.Reset
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableComponentWithCommandArgument
#include "GlobalNamespace/EnableComponentWithCommandArgument.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _argument
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::EnableComponentWithCommandArgument::dyn__argument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::dyn__argument");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_argument"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Behaviour _component
[[deprecated("Use field access instead!")]] ::UnityEngine::Behaviour*& GlobalNamespace::EnableComponentWithCommandArgument::dyn__component() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::dyn__component");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_component"))->offset;
  return *reinterpret_cast<::UnityEngine::Behaviour**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableComponentWithCommandArgument.Awake
void GlobalNamespace::EnableComponentWithCommandArgument::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableEmmisionOnVisible
#include "GlobalNamespace/EnableEmmisionOnVisible.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::EnableEmmisionOnVisible::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule[] _emmisionModules
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& GlobalNamespace::EnableEmmisionOnVisible::dyn__emmisionModules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::dyn__emmisionModules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emmisionModules"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableEmmisionOnVisible.Awake
void GlobalNamespace::EnableEmmisionOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameVisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameInvisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableOnVisible
#include "GlobalNamespace/EnableOnVisible.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Boolean> VisibilityChangedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::EnableOnVisible::dyn_VisibilityChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::dyn_VisibilityChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VisibilityChangedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Behaviour[] _components
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& GlobalNamespace::EnableOnVisible::dyn__components() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::dyn__components");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_components"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Behaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableOnVisible.add_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent(::System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.remove_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent(::System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.Awake
void GlobalNamespace::EnableOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameVisible
void GlobalNamespace::EnableOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameInvisible
void GlobalNamespace::EnableOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnumFlagAttribute
#include "GlobalNamespace/EnumFlagAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String enumName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::EnumFlagAttribute::dyn_enumName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumFlagAttribute::dyn_enumName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enumName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ExtensionMethods
#include "GlobalNamespace/ExtensionMethods.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExtensionMethods.ContainsLayer
bool GlobalNamespace::ExtensionMethods::ContainsLayer(::UnityEngine::LayerMask layerMask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::ContainsLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "ContainsLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerMask, layer);
}
// Autogenerated method: ExtensionMethods.StartUniqueCoroutine
::UnityEngine::Coroutine* GlobalNamespace::ExtensionMethods::StartUniqueCoroutine(::UnityEngine::MonoBehaviour* m, ::System::Func_1<::System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::StartUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StartUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Coroutine*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.StopUniqueCoroutine
void GlobalNamespace::ExtensionMethods::StopUniqueCoroutine(::UnityEngine::MonoBehaviour* m, ::System::Func_1<::System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::StopUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StopUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.IsDescendantOf
bool GlobalNamespace::ExtensionMethods::IsDescendantOf(::UnityEngine::Transform* transform, ::UnityEngine::Transform* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::IsDescendantOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "IsDescendantOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, parent);
}
// Autogenerated method: ExtensionMethods.SetLocalPositionAndRotation
void GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation(::UnityEngine::Transform* tr, ::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "SetLocalPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tr), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tr, pos, rot);
}
// Autogenerated method: ExtensionMethods.GetPath
::StringW GlobalNamespace::ExtensionMethods::GetPath(::UnityEngine::Transform* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::GetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "GetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, current);
}
// Autogenerated method: ExtensionMethods.Reflect
::UnityEngine::Quaternion GlobalNamespace::ExtensionMethods::Reflect(::UnityEngine::Quaternion source, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::Reflect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "Reflect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, normal);
}
// Autogenerated method: ExtensionMethods.CreateTexture2D
::UnityEngine::Texture2D* GlobalNamespace::ExtensionMethods::CreateTexture2D(::UnityEngine::RenderTexture* renderTexture, ::UnityEngine::TextureFormat textureFormat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::CreateTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "CreateTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture), ::il2cpp_utils::ExtractType(textureFormat)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, renderTexture, textureFormat);
}
// Autogenerated method: ExtensionMethods.Rotate
::UnityEngine::Vector2 GlobalNamespace::ExtensionMethods::Rotate(::UnityEngine::Vector2 vector, float rads) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::Rotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "Rotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(rads)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vector, rads);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EssentialHelpers
#include "GlobalNamespace/EssentialHelpers.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EssentialHelpers.get_CurrentTimeStamp
double GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "get_CurrentTimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: EssentialHelpers.SafeDestroy
void GlobalNamespace::EssentialHelpers::SafeDestroy(::UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EssentialHelpers::SafeDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "SafeDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventBinder
#include "GlobalNamespace/EventBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Action> _unsubscribes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action*>*& GlobalNamespace::EventBinder::dyn__unsubscribes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::dyn__unsubscribes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unsubscribes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Action*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventBinder.Bind
void GlobalNamespace::EventBinder::Bind(::System::Action* subscribe, ::System::Action* unsubscribe) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscribe), ::il2cpp_utils::ExtractType(unsubscribe)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subscribe, unsubscribe);
}
// Autogenerated method: EventBinder.ClearAllBindings
void GlobalNamespace::EventBinder::ClearAllBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::ClearAllBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FloatSO _easeValue
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSO*& GlobalNamespace::FadeInOutController::dyn__easeValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__easeValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_easeValue"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeInCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::dyn__fadeInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeInCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeOutCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::dyn__fadeOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeOutCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInStartDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__fadeInStartDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeInStartDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInStartDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultFadeOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__defaultFadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__defaultFadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultFadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultFadeInDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__defaultFadeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__defaultFadeInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultFadeInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FadeInOutController.FadeOutInstant
void GlobalNamespace::FadeInOutController::FadeOutInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOutInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOutInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(::System::Action* fadeInCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeInCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeInCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(::System::Action* fadeOutCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeOutCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeOutCallback);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration, ::System::Action* fadeInFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeInFinishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, fadeInFinishedCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration, ::System::Action* fadeOutFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOutFinishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, fadeOutFinishedCallback);
}
// Autogenerated method: FadeInOutController.Fade
::System::Collections::IEnumerator* GlobalNamespace::FadeInOutController::Fade(float fromValue, float toValue, float duration, float startDelay, ::UnityEngine::AnimationCurve* curve, ::System::Action* fadeFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromValue), ::il2cpp_utils::ExtractType(toValue), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(fadeFinishedCallback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, fromValue, toValue, duration, startDelay, curve, fadeFinishedCallback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_startDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_startDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FadeInOutController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FadeInOutController*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FadeInOutController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fromValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fromValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fromValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fromValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single toValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_toValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_toValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve curve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action fadeFinishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fadeFinishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fadeFinishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeFinishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$elapsedTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$elapsedTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.IDisposable.Dispose
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.MoveNext
bool GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.Reset
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper
#include "GlobalNamespace/FileCompressionHelper.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectoryAsync
void GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync(::StringW sourceDirectoryName, ::StringW destinationArchiveFileName, ::System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectoryAsync
void GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync(::StringW sourceArchiveFileName, ::StringW destinationDirectoryName, ::System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectory
bool GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory(::StringW sourceDirectoryName, ::StringW destinationArchiveFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectory
bool GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory(::StringW sourceArchiveFileName, ::StringW destinationDirectoryName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean success
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_success");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "success"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sourceDirectoryName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_sourceDirectoryName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_sourceDirectoryName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceDirectoryName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String destinationArchiveFileName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_destinationArchiveFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_destinationArchiveFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationArchiveFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Boolean> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean success
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_success");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "success"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sourceArchiveFileName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_sourceArchiveFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_sourceArchiveFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceArchiveFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String destinationDirectoryName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_destinationDirectoryName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_destinationDirectoryName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationDirectoryName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Boolean> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollow
#include "GlobalNamespace/FlexyFollow.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject _followObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::FlexyFollow::dyn__followObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _followSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlexyFollow::dyn__followSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FlexyFollow::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedXOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedXOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedYOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedYOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedZOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedZOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _useLocalPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__useLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__useLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useLocalPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _followTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollow::dyn__followTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollow::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlexyFollow.Start
void GlobalNamespace::FlexyFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlexyFollow.LateUpdate
void GlobalNamespace::FlexyFollow::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollowAndRotate
#include "GlobalNamespace/FlexyFollowAndRotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollowAndRotate::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlexyFollowAndRotate::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlexyFollowAndRotate.Update
void GlobalNamespace::FlexyFollowAndRotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FollowLocalRotation
#include "GlobalNamespace/FollowLocalRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform _target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FollowLocalRotation::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FollowLocalRotation::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FollowLocalRotation.Awake
void GlobalNamespace::FollowLocalRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FollowLocalRotation.Update
void GlobalNamespace::FollowLocalRotation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FrameCounter
#include "GlobalNamespace/FrameCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FrameCounter::dyn__numberOfFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::dyn__numberOfFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FrameCounter.Update
void GlobalNamespace::FrameCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FrameCounter.OnDestroy
void GlobalNamespace::FrameCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GeometryTools
#include "GlobalNamespace/GeometryTools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GeometryTools.ThreePointsToBox
bool GlobalNamespace::GeometryTools::ThreePointsToBox(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ByRef<::UnityEngine::Vector3> center, ByRef<::UnityEngine::Vector3> halfSize, ByRef<::UnityEngine::Quaternion> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeometryTools::ThreePointsToBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GeometryTools", "ThreePointsToBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, byref(center), byref(halfSize), byref(orientation));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMAsyncRequest
#include "GlobalNamespace/HMAsyncRequest.hpp"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _cancelled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMAsyncRequest::dyn__cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::dyn__cancelled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMAsyncRequest/CancelHander _cancelHander
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMAsyncRequest::CancelHander*& GlobalNamespace::HMAsyncRequest::dyn__cancelHander() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::dyn__cancelHander");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelHander"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMAsyncRequest::CancelHander**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMAsyncRequest.get_CancelHandler
::GlobalNamespace::HMAsyncRequest::CancelHander* GlobalNamespace::HMAsyncRequest::get_CancelHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::get_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HMAsyncRequest::CancelHander*, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.set_CancelHandler
void GlobalNamespace::HMAsyncRequest::set_CancelHandler(::GlobalNamespace::HMAsyncRequest::CancelHander* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::set_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMAsyncRequest.get_cancelled
bool GlobalNamespace::HMAsyncRequest::get_cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::get_cancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.Cancel
void GlobalNamespace::HMAsyncRequest::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::Cancel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMAsyncRequest/CancelHander.Invoke
void GlobalNamespace::HMAsyncRequest::CancelHander::Invoke(::GlobalNamespace::HMAsyncRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: HMAsyncRequest/CancelHander.BeginInvoke
::System::IAsyncResult* GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke(::GlobalNamespace::HMAsyncRequest* request, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: HMAsyncRequest/CancelHander.EndInvoke
void GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAutoincrementedRequestId
#include "GlobalNamespace/HMAutoincrementedRequestId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt64 _nextRequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "HMAutoincrementedRequestId", "_nextRequestId"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt64 _nextRequestId
void GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMAutoincrementedRequestId", "_nextRequestId", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _requestId
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::HMAutoincrementedRequestId::dyn__requestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::dyn__requestId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMAutoincrementedRequestId.get_RequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::get_RequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId..cctor
void GlobalNamespace::HMAutoincrementedRequestId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMAutoincrementedRequestId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(::GlobalNamespace::HMAutoincrementedRequestId* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId.GetHashCode
int GlobalNamespace::HMAutoincrementedRequestId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HorizontalCameraFov
#include "GlobalNamespace/HorizontalCameraFov.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _horizontalFOV
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorizontalCameraFov::dyn__horizontalFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorizontalCameraFov::dyn__horizontalFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_horizontalFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HorizontalCameraFov.Awake
void GlobalNamespace::HorizontalCameraFov::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorizontalCameraFov::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstantiatePrefab
#include "GlobalNamespace/InstantiatePrefab.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject _prefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::InstantiatePrefab::dyn__prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstantiatePrefab::dyn__prefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InstantiatePrefab.Awake
void GlobalNamespace::InstantiatePrefab::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstantiatePrefab::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntToRoman
#include "GlobalNamespace/IntToRoman.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntToRoman.Roman
::StringW GlobalNamespace::IntToRoman::Roman(int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IntToRoman::Roman");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IntToRoman", "Roman", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineTriangleIntersection
#include "GlobalNamespace/LineTriangleIntersection.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LineTriangleIntersection.Intersects
bool GlobalNamespace::LineTriangleIntersection::Intersects(::UnityEngine::Ray ray, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineTriangleIntersection::Intersects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineTriangleIntersection", "Intersects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ray, p0, p1, p2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MarkableUIButton
#include "GlobalNamespace/MarkableUIButton.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::MarkableUIButton::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _marked
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MarkableUIButton::dyn__marked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__marked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_marked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _markedTriggerId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MarkableUIButton::dyn__markedTriggerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__markedTriggerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_markedTriggerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MarkableUIButton.get_marked
bool GlobalNamespace::MarkableUIButton::get_marked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::get_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.set_marked
void GlobalNamespace::MarkableUIButton::set_marked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::set_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MarkableUIButton.Awake
void GlobalNamespace::MarkableUIButton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.ToggleMarked
void GlobalNamespace::MarkableUIButton::ToggleMarked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::ToggleMarked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleMarked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MonobehaviourCallbacksOrderDebuger
#include "GlobalNamespace/MonobehaviourCallbacksOrderDebuger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Awake
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.OnEnable
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Start
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NumberTag
#include "GlobalNamespace/NumberTag.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 number
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NumberTag::dyn_number() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NumberTag::dyn_number");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "number"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PerlinNoise
#include "GlobalNamespace/PerlinNoise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10B4E88
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] permutation
::ArrayW<int> GlobalNamespace::PerlinNoise::_get_permutation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_get_permutation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("", "PerlinNoise", "permutation"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] permutation
void GlobalNamespace::PerlinNoise::_set_permutation(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_set_permutation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "permutation", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10B4E98
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] p
::ArrayW<int> GlobalNamespace::PerlinNoise::_get_p() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_get_p");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("", "PerlinNoise", "p"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] p
void GlobalNamespace::PerlinNoise::_set_p(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_set_p");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "p", value));
}
// Autogenerated method: PerlinNoise..cctor
void GlobalNamespace::PerlinNoise::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PerlinNoise.OctavePerlin3D
float GlobalNamespace::PerlinNoise::OctavePerlin3D(float x, float y, float z, int octaves, float persistence, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::OctavePerlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "OctavePerlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(octaves), ::il2cpp_utils::ExtractType(persistence), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, octaves, persistence, repeat);
}
// Autogenerated method: PerlinNoise.Perlin3D
float GlobalNamespace::PerlinNoise::Perlin3D(float x, float y, float z, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Perlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Perlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, repeat);
}
// Autogenerated method: PerlinNoise.Inc
int GlobalNamespace::PerlinNoise::Inc(int num, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Inc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Inc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, num, repeat);
}
// Autogenerated method: PerlinNoise.Grad3D
float GlobalNamespace::PerlinNoise::Grad3D(int hash, float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Grad3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Grad3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hash, x, y, z);
}
// Autogenerated method: PerlinNoise.Fade
float GlobalNamespace::PerlinNoise::Fade(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: PerlinNoise.Lerp
float GlobalNamespace::PerlinNoise::Lerp(float a, float b, float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PersistentScriptableObject.OnEnable
void GlobalNamespace::PersistentScriptableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PersistentScriptableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PhysicsFollow
#include "GlobalNamespace/PhysicsFollow.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PhysicsFollow::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsFollow::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _friction
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsFollow::dyn__friction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__friction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_friction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _elasticity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsFollow::dyn__elasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__elasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody2D _rigidBody2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& GlobalNamespace::PhysicsFollow::dyn__rigidBody2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__rigidBody2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rigidBody2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PhysicsFollow.Start
void GlobalNamespace::PhysicsFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsFollow.FixedUpdate
void GlobalNamespace::PhysicsFollow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomAnimationStartTime
#include "GlobalNamespace/RandomAnimationStartTime.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::RandomAnimationStartTime::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimationStartTime::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomAnimationStartTime.Start
void GlobalNamespace::RandomAnimationStartTime::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimationStartTime::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomAnimatorStartTime
#include "GlobalNamespace/RandomAnimatorStartTime.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::RandomAnimatorStartTime::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _stateName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::RandomAnimatorStartTime::dyn__stateName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::dyn__stateName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stateName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomAnimatorStartTime.Start
void GlobalNamespace::RandomAnimatorStartTime::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ray2DExtensions
#include "GlobalNamespace/Ray2DExtensions.hpp"
// Including type: UnityEngine.Ray2D
#include "UnityEngine/Ray2D.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Ray2DExtensions.CircleIntersections
int GlobalNamespace::Ray2DExtensions::CircleIntersections(::UnityEngine::Ray2D ray, ::UnityEngine::Vector2 circleCenter, float radius, ::ArrayW<float> distances) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Ray2DExtensions::CircleIntersections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Ray2DExtensions", "CircleIntersections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(circleCenter), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(distances)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ray, circleCenter, radius, distances);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetPlayerPrefsOnButton
#include "GlobalNamespace/ResetPlayerPrefsOnButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.KeyCode _keyCode
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::ResetPlayerPrefsOnButton::dyn__keyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ResetPlayerPrefsOnButton::dyn__keyCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyCode"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ResetPlayerPrefsOnButton.Update
void GlobalNamespace::ResetPlayerPrefsOnButton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ResetPlayerPrefsOnButton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Rotate
#include "GlobalNamespace/Rotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _rotationVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__rotationVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__rotationVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Rotate::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _randomize
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Rotate::dyn__randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _randomMinMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomMinMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomMinMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomMinMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _randomMaxMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomMaxMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomMaxMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomMaxMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Rotate::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startRotationAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__startRotationAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__startRotationAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startRotationAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _randomizedMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomizedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomizedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomizedMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Rotate.Awake
void GlobalNamespace::Rotate::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameVisible
void GlobalNamespace::Rotate::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameInvisible
void GlobalNamespace::Rotate::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Update
void GlobalNamespace::Rotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Randomize
void GlobalNamespace::Rotate::Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneLoadedCallbacksOrderDebug
#include "GlobalNamespace/SceneLoadedCallbacksOrderDebug.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Awake
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnEnable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnSceneLoaded
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scene, mode);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Start
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnDisable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenshotRecorder
#include "GlobalNamespace/ScreenshotRecorder.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _directory
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ScreenshotRecorder::dyn__directory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__directory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directory"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _camera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::ScreenshotRecorder::dyn__camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__camera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_camera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameRate
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__frameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__frameRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _forceFixedFramerate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__forceFixedFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__forceFixedFramerate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forceFixedFramerate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _interval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__interval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ScreenshotRecorder/RecordingType _recordingType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScreenshotRecorder::RecordingType& GlobalNamespace::ScreenshotRecorder::dyn__recordingType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__recordingType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_recordingType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScreenshotRecorder::RecordingType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _pauseWithPButton
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__pauseWithPButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__pauseWithPButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pauseWithPButton"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _antiAlias
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__antiAlias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__antiAlias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_antiAlias"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _screenshotWidth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__screenshotWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__screenshotWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_screenshotWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _screenshotHeight
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__screenshotHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__screenshotHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_screenshotHeight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _counter
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__counter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__counter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_counter"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _originalTimeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ScreenshotRecorder::dyn__originalTimeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__originalTimeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalTimeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _paused
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__paused");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paused"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameNum
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__frameNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__frameNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cubemapLeftEye
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cubemapLeftEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cubemapLeftEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cubemapLeftEye"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cubemapRighEye
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cubemapRighEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cubemapRighEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cubemapRighEye"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _equirectTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__equirectTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__equirectTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_equirectTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cameraRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cameraRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cameraRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cameraRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScreenshotRecorder.get_directory
::StringW GlobalNamespace::ScreenshotRecorder::get_directory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::get_directory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_directory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.set_directory
void GlobalNamespace::ScreenshotRecorder::set_directory(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::set_directory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScreenshotRecorder.OnEnable
void GlobalNamespace::ScreenshotRecorder::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnDisable
void GlobalNamespace::ScreenshotRecorder::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.LateUpdate
void GlobalNamespace::ScreenshotRecorder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnApplicationFocus
void GlobalNamespace::ScreenshotRecorder::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: ScreenshotRecorder.SaveCameraScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveCameraScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.SaveTextureScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot(::UnityEngine::Texture2D* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveTextureScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tex);
}
// Autogenerated method: ScreenshotRecorder.ConvertRenderTexture
::UnityEngine::Texture2D* GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture(::UnityEngine::RenderTexture* renderTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertRenderTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method, renderTexture);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenshotRecorder/RecordingType
#include "GlobalNamespace/ScreenshotRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Mono360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Mono360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Interval
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Interval"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Interval
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Interval", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::RecordingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SerializationHelpers
#include "GlobalNamespace/SerializationHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SharedCoroutineStarter
#include "GlobalNamespace/SharedCoroutineStarter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShowHideAnimationController
#include "GlobalNamespace/ShowHideAnimationController.hpp"
// Including type: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9
#include "GlobalNamespace/ShowHideAnimationController_-DeactivateSelfAfterDelayCoroutine-d__9.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::ShowHideAnimationController::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _deactivateSelfAfterDelay
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ShowHideAnimationController::dyn__deactivateSelfAfterDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::dyn__deactivateSelfAfterDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deactivateSelfAfterDelay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _deactivationDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ShowHideAnimationController::dyn__deactivationDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::dyn__deactivationDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deactivationDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _show
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ShowHideAnimationController::dyn__show() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::dyn__show");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_show"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _showAnimatorParam
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ShowHideAnimationController::dyn__showAnimatorParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::dyn__showAnimatorParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_showAnimatorParam"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShowHideAnimationController.get_Show
bool GlobalNamespace::ShowHideAnimationController::get_Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::get_Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController.set_Show
void GlobalNamespace::ShowHideAnimationController::set_Show(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::set_Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ShowHideAnimationController.Awake
void GlobalNamespace::ShowHideAnimationController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController.DeactivateSelfAfterDelayCoroutine
::System::Collections::IEnumerator* GlobalNamespace::ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateSelfAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9
#include "GlobalNamespace/ShowHideAnimationController_-DeactivateSelfAfterDelayCoroutine-d__9.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ShowHideAnimationController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ShowHideAnimationController*& GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ShowHideAnimationController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.MoveNext
bool GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleFileLogger
#include "GlobalNamespace/SimpleFileLogger.hpp"
// Including type: SimpleFileLogger/MonoLogger
#include "GlobalNamespace/SimpleFileLogger_MonoLogger.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kFilename
::StringW GlobalNamespace::SimpleFileLogger::_get_kFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::_get_kFilename");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SimpleFileLogger", "kFilename"));
}
// Autogenerated static field setter
// Set static field: static private System.String kFilename
void GlobalNamespace::SimpleFileLogger::_set_kFilename(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::_set_kFilename");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleFileLogger", "kFilename", value));
}
// Autogenerated static field getter
// Get static field: static private SimpleFileLogger/MonoLogger _monoLogger
::GlobalNamespace::SimpleFileLogger::MonoLogger* GlobalNamespace::SimpleFileLogger::_get__monoLogger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::_get__monoLogger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SimpleFileLogger::MonoLogger*>("", "SimpleFileLogger", "_monoLogger"));
}
// Autogenerated static field setter
// Set static field: static private SimpleFileLogger/MonoLogger _monoLogger
void GlobalNamespace::SimpleFileLogger::_set__monoLogger(::GlobalNamespace::SimpleFileLogger::MonoLogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::_set__monoLogger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleFileLogger", "_monoLogger", value));
}
// Autogenerated method: SimpleFileLogger.get_monoLogger
::GlobalNamespace::SimpleFileLogger::MonoLogger* GlobalNamespace::SimpleFileLogger::get_monoLogger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::get_monoLogger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "get_monoLogger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SimpleFileLogger::MonoLogger*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SimpleFileLogger.Log
void GlobalNamespace::SimpleFileLogger::Log(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text);
}
// Autogenerated method: SimpleFileLogger.LogVector
void GlobalNamespace::SimpleFileLogger::LogVector(::StringW description, ::UnityEngine::Vector3 vec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::LogVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "LogVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractType(vec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, description, vec);
}
// Autogenerated method: SimpleFileLogger.Clear
void GlobalNamespace::SimpleFileLogger::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleFileLogger/MonoLogger
#include "GlobalNamespace/SimpleFileLogger_MonoLogger.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<System.String> _lines
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::SimpleFileLogger::MonoLogger::dyn__lines() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::MonoLogger::dyn__lines");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lines"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SimpleFileLogger/MonoLogger.OnDestroy
void GlobalNamespace::SimpleFileLogger::MonoLogger::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::MonoLogger::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleFileLogger/MonoLogger.Log
void GlobalNamespace::SimpleFileLogger::MonoLogger::Log(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::MonoLogger::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: SimpleFileLogger/MonoLogger.Clear
void GlobalNamespace::SimpleFileLogger::MonoLogger::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleFileLogger::MonoLogger::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleShadowController
#include "GlobalNamespace/SimpleShadowController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _followTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SimpleShadowController::dyn__followTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__followTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::SimpleShadowController::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _distanceScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SimpleShadowController::dyn__distanceScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__distanceScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_distanceScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SimpleShadowController::dyn__scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SimpleShadowController::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _floorYPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SimpleShadowController::dyn__floorYPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__floorYPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorYPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _floorYPosLocal
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SimpleShadowController::dyn__floorYPosLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__floorYPosLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorYPosLocal"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SimpleShadowController::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SimpleShadowController.Start
void GlobalNamespace::SimpleShadowController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleShadowController.LateUpdate
void GlobalNamespace::SimpleShadowController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SleepRigidbody2DWhenInvisible
#include "GlobalNamespace/SleepRigidbody2DWhenInvisible.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody2D _rigidbody2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& GlobalNamespace::SleepRigidbody2DWhenInvisible::dyn__rigidbody2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SleepRigidbody2DWhenInvisible::dyn__rigidbody2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rigidbody2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SleepRigidbody2DWhenInvisible.Awake
void GlobalNamespace::SleepRigidbody2DWhenInvisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SleepRigidbody2DWhenInvisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SleepRigidbody2DWhenInvisible.OnBecameInvisible
void GlobalNamespace::SleepRigidbody2DWhenInvisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SleepRigidbody2DWhenInvisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Snap
#include "GlobalNamespace/Snap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 snap
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Snap::dyn_snap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Snap::dyn_snap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "snap"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Snap::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Snap::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Snap.SnapPosition
void GlobalNamespace::Snap::SnapPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Snap::SnapPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SnapPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringBuilderExtension
#include "GlobalNamespace/StringBuilderExtension.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10B51D8
// Autogenerated static field getter
// Get static field: static private System.Char[] charToInt
::ArrayW<::Il2CppChar> GlobalNamespace::StringBuilderExtension::_get_charToInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::_get_charToInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("", "StringBuilderExtension", "charToInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Char[] charToInt
void GlobalNamespace::StringBuilderExtension::_set_charToInt(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::_set_charToInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringBuilderExtension", "charToInt", value));
}
// Autogenerated method: StringBuilderExtension..cctor
void GlobalNamespace::StringBuilderExtension::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: StringBuilderExtension.Swap
void GlobalNamespace::StringBuilderExtension::Swap(::System::Text::StringBuilder* sb, int startIndex, int endIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::Swap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "Swap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb, startIndex, endIndex);
}
// Autogenerated method: StringBuilderExtension.AppendNumber
void GlobalNamespace::StringBuilderExtension::AppendNumber(::System::Text::StringBuilder* sb, int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::AppendNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "AppendNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb, number);
}
// Autogenerated method: StringBuilderExtension.AppendNumber
void GlobalNamespace::StringBuilderExtension::AppendNumber(::System::Text::StringBuilder* sb, uint unumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringBuilderExtension::AppendNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "AppendNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(unumber)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb, unumber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringExtensions
#include "GlobalNamespace/StringExtensions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StringExtensions.Truncate
::StringW GlobalNamespace::StringExtensions::Truncate(::StringW s, int length, bool appendEllipsis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringExtensions::Truncate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringExtensions", "Truncate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(appendEllipsis)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, length, appendEllipsis);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TagPropertyAttribute
#include "GlobalNamespace/TagPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
