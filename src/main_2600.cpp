// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket
#include "LiteNetLib/NatPunchModule_NatPunchPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Token>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$Token$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$Token$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Token>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsExternal>k__BackingField
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$IsExternal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$IsExternal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsExternal>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_Token
::StringW LiteNetLib::NatPunchModule::NatPunchPacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_Token
void LiteNetLib::NatPunchModule::NatPunchPacket::set_Token(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_IsExternal
bool LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_IsExternal
void LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Unreliable
::LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Unreliable
void LiteNetLib::DeliveryMethod::_set_Unreliable(::LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
::LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableUnordered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_get_ReliableUnordered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableUnordered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
void LiteNetLib::DeliveryMethod::_set_ReliableUnordered(::LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_set_ReliableUnordered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableUnordered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Sequenced
::LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Sequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_get_Sequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Sequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Sequenced
void LiteNetLib::DeliveryMethod::_set_Sequenced(::LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_set_Sequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Sequenced", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
::LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableOrdered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_get_ReliableOrdered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableOrdered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
void LiteNetLib::DeliveryMethod::_set_ReliableOrdered(::LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_set_ReliableOrdered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableOrdered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
::LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableSequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_get_ReliableSequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableSequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
void LiteNetLib::DeliveryMethod::_set_ReliableSequenced(::LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::_set_ReliableSequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableSequenced", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::DeliveryMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DeliveryMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConstants
#include "LiteNetLib/NetConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultWindowSize
int LiteNetLib::NetConstants::_get_DefaultWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_DefaultWindowSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "DefaultWindowSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultWindowSize
void LiteNetLib::NetConstants::_set_DefaultWindowSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_DefaultWindowSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "DefaultWindowSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketBufferSize
int LiteNetLib::NetConstants::_get_SocketBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_SocketBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketBufferSize
void LiteNetLib::NetConstants::_set_SocketBufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_SocketBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketBufferSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketTTL
int LiteNetLib::NetConstants::_get_SocketTTL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_SocketTTL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketTTL"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketTTL
void LiteNetLib::NetConstants::_set_SocketTTL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_SocketTTL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketTTL", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConstants::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConstants::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ChanneledHeaderSize
int LiteNetLib::NetConstants::_get_ChanneledHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_ChanneledHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ChanneledHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChanneledHeaderSize
void LiteNetLib::NetConstants::_set_ChanneledHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_ChanneledHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ChanneledHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentHeaderSize
int LiteNetLib::NetConstants::_get_FragmentHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_FragmentHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentHeaderSize
void LiteNetLib::NetConstants::_set_FragmentHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_FragmentHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentedHeaderTotalSize
int LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentedHeaderTotalSize
void LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 MaxSequence
uint16_t LiteNetLib::NetConstants::_get_MaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_MaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "MaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 MaxSequence
void LiteNetLib::NetConstants::_set_MaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_MaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 HalfMaxSequence
uint16_t LiteNetLib::NetConstants::_get_HalfMaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_HalfMaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "HalfMaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 HalfMaxSequence
void LiteNetLib::NetConstants::_set_HalfMaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_HalfMaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HalfMaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 ProtocolId
int LiteNetLib::NetConstants::_get_ProtocolId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_ProtocolId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ProtocolId"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 ProtocolId
void LiteNetLib::NetConstants::_set_ProtocolId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_ProtocolId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ProtocolId", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxUdpHeaderSize
int LiteNetLib::NetConstants::_get_MaxUdpHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_MaxUdpHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxUdpHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxUdpHeaderSize
void LiteNetLib::NetConstants::_set_MaxUdpHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_MaxUdpHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxUdpHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] PossibleMtu
::ArrayW<int> LiteNetLib::NetConstants::_get_PossibleMtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_PossibleMtu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("LiteNetLib", "NetConstants", "PossibleMtu"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] PossibleMtu
void LiteNetLib::NetConstants::_set_PossibleMtu(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_PossibleMtu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PossibleMtu", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 MaxPacketSize
int LiteNetLib::NetConstants::_get_MaxPacketSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_MaxPacketSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxPacketSize"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 MaxPacketSize
void LiteNetLib::NetConstants::_set_MaxPacketSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_MaxPacketSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxPacketSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Byte MaxConnectionNumber
uint8_t LiteNetLib::NetConstants::_get_MaxConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_MaxConnectionNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("LiteNetLib", "NetConstants", "MaxConnectionNumber"));
}
// Autogenerated static field setter
// Set static field: static public System.Byte MaxConnectionNumber
void LiteNetLib::NetConstants::_set_MaxConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_MaxConnectionNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxConnectionNumber", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 PacketPoolSize
int LiteNetLib::NetConstants::_get_PacketPoolSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_get_PacketPoolSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "PacketPoolSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 PacketPoolSize
void LiteNetLib::NetConstants::_set_PacketPoolSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::_set_PacketPoolSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PacketPoolSize", value));
}
// Autogenerated method: LiteNetLib.NetConstants..cctor
void LiteNetLib::NetConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetLogLevel
#include "LiteNetLib/NetLogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Warning
::LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Warning
void LiteNetLib::NetLogLevel::_set_Warning(::LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Error
::LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Error
void LiteNetLib::NetLogLevel::_set_Error(::LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Trace
::LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Trace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_get_Trace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Trace"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Trace
void LiteNetLib::NetLogLevel::_set_Trace(::LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_set_Trace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Trace", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Info
::LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_get_Info");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Info"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Info
void LiteNetLib::NetLogLevel::_set_Info(::LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::_set_Info");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Info", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetLogLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetLogLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetLogger.WriteNet
void LiteNetLib::INetLogger::WriteNet(::LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::INetLogger::WriteNet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level, str, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetDebug
#include "LiteNetLib/NetDebug.hpp"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.INetLogger Logger
::LiteNetLib::INetLogger* LiteNetLib::NetDebug::_get_Logger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::_get_Logger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::INetLogger*>("LiteNetLib", "NetDebug", "Logger"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.INetLogger Logger
void LiteNetLib::NetDebug::_set_Logger(::LiteNetLib::INetLogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::_set_Logger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "Logger", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object DebugLogLock
::Il2CppObject* LiteNetLib::NetDebug::_get_DebugLogLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::_get_DebugLogLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("LiteNetLib", "NetDebug", "DebugLogLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object DebugLogLock
void LiteNetLib::NetDebug::_set_DebugLogLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::_set_DebugLogLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "DebugLogLock", value));
}
// Autogenerated method: LiteNetLib.NetDebug..cctor
void LiteNetLib::NetDebug::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteLogic
void LiteNetLib::NetDebug::WriteLogic(::LiteNetLib::NetLogLevel logLevel, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::WriteLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logLevel), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, logLevel, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(::LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(::LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteError
void LiteNetLib::NetDebug::WriteError(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetDebug::WriteError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.InvalidPacketException
#include "LiteNetLib/InvalidPacketException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.TooBigPacketException
#include "LiteNetLib/TooBigPacketException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _packet
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPacketReader::dyn__packet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::dyn__packet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packet"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetManager _manager
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetManager*& LiteNetLib::NetPacketReader::dyn__manager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::dyn__manager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manager"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetEvent _evt
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetEvent*& LiteNetLib::NetPacketReader::dyn__evt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::dyn__evt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_evt"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacketReader.SetSource
void LiteNetLib::NetPacketReader::SetSource(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPacketReader.RecycleInternal
void LiteNetLib::NetPacketReader::RecycleInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::RecycleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacketReader.Recycle
void LiteNetLib::NetPacketReader::Recycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketReader::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetEvent/LiteNetLib.EType Type
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetEvent::EType& LiteNetLib::NetEvent::dyn_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetEvent::EType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetPeer Peer
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetEvent::dyn_Peer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_Peer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Peer"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Net.IPEndPoint RemoteEndPoint
[[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& LiteNetLib::NetEvent::dyn_RemoteEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_RemoteEndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RemoteEndPoint"))->offset;
  return *reinterpret_cast<::System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object UserData
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetEvent::dyn_UserData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_UserData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UserData"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Latency
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetEvent::dyn_Latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_Latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Latency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Net.Sockets.SocketError ErrorCode
[[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketError& LiteNetLib::NetEvent::dyn_ErrorCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_ErrorCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ErrorCode"))->offset;
  return *reinterpret_cast<::System::Net::Sockets::SocketError*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.DisconnectReason DisconnectReason
[[deprecated("Use field access instead!")]] ::LiteNetLib::DisconnectReason& LiteNetLib::NetEvent::dyn_DisconnectReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_DisconnectReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DisconnectReason"))->offset;
  return *reinterpret_cast<::LiteNetLib::DisconnectReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.ConnectionRequest ConnectionRequest
[[deprecated("Use field access instead!")]] ::LiteNetLib::ConnectionRequest*& LiteNetLib::NetEvent::dyn_ConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_ConnectionRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionRequest"))->offset;
  return *reinterpret_cast<::LiteNetLib::ConnectionRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.DeliveryMethod DeliveryMethod
[[deprecated("Use field access instead!")]] ::LiteNetLib::DeliveryMethod& LiteNetLib::NetEvent::dyn_DeliveryMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_DeliveryMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DeliveryMethod"))->offset;
  return *reinterpret_cast<::LiteNetLib::DeliveryMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetPacketReader DataReader
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacketReader*& LiteNetLib::NetEvent::dyn_DataReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::dyn_DataReader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DataReader"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacketReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_Connect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Connect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
void LiteNetLib::NetEvent::EType::_set_Connect(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_Connect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Connect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
void LiteNetLib::NetEvent::EType::_set_Disconnect(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Receive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_Receive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Receive"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
void LiteNetLib::NetEvent::EType::_set_Receive(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_Receive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Receive", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
void LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
void LiteNetLib::NetEvent::EType::_set_Error(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
void LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
void LiteNetLib::NetEvent::EType::_set_Broadcast(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_ConnectionRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
void LiteNetLib::NetEvent::EType::_set_ConnectionRequest(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_ConnectionRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
::LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_MessageDelivered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_get_MessageDelivered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "MessageDelivered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
void LiteNetLib::NetEvent::EType::_set_MessageDelivered(::LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::_set_MessageDelivered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "MessageDelivered", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetEvent::EType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetEvent::EType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetSocket _socket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetSocket*& LiteNetLib::NetManager::dyn__socket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__socket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_socket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetSocket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _logicThread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& LiteNetLib::NetManager::dyn__logicThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__logicThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_logicThread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetEvent> _netEventsQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::LiteNetLib::NetEvent*>*& LiteNetLib::NetManager::dyn__netEventsQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__netEventsQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventsQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::LiteNetLib::NetEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Stack`1<LiteNetLib.NetEvent> _netEventsPool
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::LiteNetLib::NetEvent*>*& LiteNetLib::NetManager::dyn__netEventsPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__netEventsPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventsPool"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Stack_1<::LiteNetLib::NetEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.INetEventListener _netEventListener
[[deprecated("Use field access instead!")]] ::LiteNetLib::INetEventListener*& LiteNetLib::NetManager::dyn__netEventListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__netEventListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventListener"))->offset;
  return *reinterpret_cast<::LiteNetLib::INetEventListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.IDeliveryEventListener _deliveryEventListener
[[deprecated("Use field access instead!")]] ::LiteNetLib::IDeliveryEventListener*& LiteNetLib::NetManager::dyn__deliveryEventListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__deliveryEventListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveryEventListener"))->offset;
  return *reinterpret_cast<::LiteNetLib::IDeliveryEventListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.NetPeer> _peersDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Net::IPEndPoint*, ::LiteNetLib::NetPeer*>*& LiteNetLib::NetManager::dyn__peersDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__peersDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Net::IPEndPoint*, ::LiteNetLib::NetPeer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.ConnectionRequest> _requestsDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Net::IPEndPoint*, ::LiteNetLib::ConnectionRequest*>*& LiteNetLib::NetManager::dyn__requestsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__requestsDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestsDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Net::IPEndPoint*, ::LiteNetLib::ConnectionRequest*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ReaderWriterLockSlim _peersLock
[[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLockSlim*& LiteNetLib::NetManager::dyn__peersLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__peersLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersLock"))->offset;
  return *reinterpret_cast<::System::Threading::ReaderWriterLockSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer _headPeer
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetManager::dyn__headPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__headPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headPeer"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectedPeersCount
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn__connectedPeersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__connectedPeersCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPeersCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<LiteNetLib.NetPeer> _connectedPeerListCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::LiteNetLib::NetPeer*>*& LiteNetLib::NetManager::dyn__connectedPeerListCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__connectedPeerListCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPeerListCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::LiteNetLib::NetPeer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer[] _peersArray
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::NetPeer*>& LiteNetLib::NetManager::dyn__peersArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__peersArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersArray"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::NetPeer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly LiteNetLib.Layers.PacketLayerBase _extraPacketLayer
[[deprecated("Use field access instead!")]] ::LiteNetLib::Layers::PacketLayerBase*& LiteNetLib::NetManager::dyn__extraPacketLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__extraPacketLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraPacketLayer"))->offset;
  return *reinterpret_cast<::LiteNetLib::Layers::PacketLayerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastPeerId
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn__lastPeerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__lastPeerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPeerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<System.Int32> _peerIds
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& LiteNetLib::NetManager::dyn__peerIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__peerIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peerIds"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte _channelsCount
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::NetManager::dyn__channelsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn__channelsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channelsCount"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly LiteNetLib.NetPacketPool NetPacketPool
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacketPool*& LiteNetLib::NetManager::dyn_NetPacketPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_NetPacketPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetPacketPool"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacketPool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnconnectedMessagesEnabled
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_UnconnectedMessagesEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_UnconnectedMessagesEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnconnectedMessagesEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean NatPunchEnabled
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_NatPunchEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_NatPunchEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatPunchEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UpdateTime
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_UpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_UpdateTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UpdateTime"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 PingInterval
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_PingInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_PingInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PingInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 DisconnectTimeout
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_DisconnectTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_DisconnectTimeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DisconnectTimeout"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SimulatePacketLoss
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_SimulatePacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_SimulatePacketLoss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulatePacketLoss"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SimulateLatency
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_SimulateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_SimulateLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulateLatency"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationPacketLossChance
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_SimulationPacketLossChance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_SimulationPacketLossChance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationPacketLossChance"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationMinLatency
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_SimulationMinLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_SimulationMinLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationMinLatency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationMaxLatency
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_SimulationMaxLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_SimulationMaxLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationMaxLatency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnsyncedEvents
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_UnsyncedEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_UnsyncedEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnsyncedEvents"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnsyncedDeliveryEvent
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_UnsyncedDeliveryEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_UnsyncedDeliveryEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnsyncedDeliveryEvent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean BroadcastReceiveEnabled
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_BroadcastReceiveEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_BroadcastReceiveEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BroadcastReceiveEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ReconnectDelay
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_ReconnectDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_ReconnectDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReconnectDelay"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 MaxConnectAttempts
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetManager::dyn_MaxConnectAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_MaxConnectAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxConnectAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ReuseAddress
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_ReuseAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_ReuseAddress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReuseAddress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetStatistics Statistics
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetStatistics*& LiteNetLib::NetManager::dyn_Statistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_Statistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Statistics"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetStatistics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean EnableStatistics
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_EnableStatistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_EnableStatistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EnableStatistics"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NatPunchModule NatPunchModule
[[deprecated("Use field access instead!")]] ::LiteNetLib::NatPunchModule*& LiteNetLib::NetManager::dyn_NatPunchModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_NatPunchModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatPunchModule"))->offset;
  return *reinterpret_cast<::LiteNetLib::NatPunchModule**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean AutoRecycle
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_AutoRecycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_AutoRecycle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AutoRecycle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IPv6Enabled
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetManager::dyn_IPv6Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_IPv6Enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IPv6Enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ThreadPriority ThreadPriority
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPriority& LiteNetLib::NetManager::dyn_ThreadPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::dyn_ThreadPriority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ThreadPriority"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPriority*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetManager.get_IsRunning
bool LiteNetLib::NetManager::get_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_IsRunning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_LocalPort
int LiteNetLib::NetManager::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_FirstPeer
::LiteNetLib::NetPeer* LiteNetLib::NetManager::get_FirstPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_FirstPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FirstPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ChannelsCount
uint8_t LiteNetLib::NetManager::get_ChannelsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.set_ChannelsCount
void LiteNetLib::NetManager::set_ChannelsCount(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::set_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeerList
::System::Collections::Generic::List_1<::LiteNetLib::NetPeer*>* LiteNetLib::NetManager::get_ConnectedPeerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_ConnectedPeerList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeerList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeersCount
int LiteNetLib::NetManager::get_ConnectedPeersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::get_ConnectedPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeerById
::LiteNetLib::NetPeer* LiteNetLib::NetManager::GetPeerById(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::GetPeerById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeerById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, id);
}
// Autogenerated method: LiteNetLib.NetManager.TryGetPeer
bool LiteNetLib::NetManager::TryGetPeer(::System::Net::IPEndPoint* endPoint, ByRef<::LiteNetLib::NetPeer*> peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::TryGetPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<::LiteNetLib::NetPeer*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, endPoint, byref(peer));
}
// Autogenerated method: LiteNetLib.NetManager.AddPeer
void LiteNetLib::NetManager::AddPeer(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::AddPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeer
void LiteNetLib::NetManager::RemovePeer(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::RemovePeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeerInternal
void LiteNetLib::NetManager::RemovePeerInternal(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::RemovePeerInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeerInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.ConnectionLatencyUpdated
void LiteNetLib::NetManager::ConnectionLatencyUpdated(::LiteNetLib::NetPeer* fromPeer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::ConnectionLatencyUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionLatencyUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromPeer, latency);
}
// Autogenerated method: LiteNetLib.NetManager.MessageDelivered
void LiteNetLib::NetManager::MessageDelivered(::LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::MessageDelivered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromPeer, userData);
}
// Autogenerated method: LiteNetLib.NetManager.SendRawAndRecycle
int LiteNetLib::NetManager::SendRawAndRecycle(::LiteNetLib::NetPacket* packet, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendRawAndRecycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRawAndRecycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(::LiteNetLib::NetPacket* packet, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(::ArrayW<uint8_t> message, int start, int length, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(::LiteNetLib::NetPeer* peer, ::LiteNetLib::DisconnectReason reason, ::System::Net::Sockets::SocketError socketErrorCode, ::LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(::LiteNetLib::NetPeer* peer, ::LiteNetLib::DisconnectReason reason, ::System::Net::Sockets::SocketError socketErrorCode, bool force, ::ArrayW<uint8_t> data, int start, int count, ::LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, force, data, start, count, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.CreateEvent
void LiteNetLib::NetManager::CreateEvent(::LiteNetLib::NetEvent::EType type, ::LiteNetLib::NetPeer* peer, ::System::Net::IPEndPoint* remoteEndPoint, ::System::Net::Sockets::SocketError errorCode, int latency, ::LiteNetLib::DisconnectReason disconnectReason, ::LiteNetLib::ConnectionRequest* connectionRequest, ::LiteNetLib::DeliveryMethod deliveryMethod, ::LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::CreateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(latency), ::il2cpp_utils::ExtractType(disconnectReason), ::il2cpp_utils::ExtractType(connectionRequest), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(readerSource), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type, peer, remoteEndPoint, errorCode, latency, disconnectReason, connectionRequest, deliveryMethod, readerSource, userData);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessEvent
void LiteNetLib::NetManager::ProcessEvent(::LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::ProcessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.RecycleEvent
void LiteNetLib::NetManager::RecycleEvent(::LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::RecycleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.UpdateLogic
void LiteNetLib::NetManager::UpdateLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::UpdateLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived(::ArrayW<uint8_t> data, int length, ::System::Net::Sockets::SocketError errorCode, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::LiteNetLib.INetSocketListener.OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.OnConnectionSolved
::LiteNetLib::NetPeer* LiteNetLib::NetManager::OnConnectionSolved(::LiteNetLib::ConnectionRequest* request, ::ArrayW<uint8_t> rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::OnConnectionSolved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnConnectionSolved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, request, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.NetManager.GetNextPeerId
int LiteNetLib::NetManager::GetNextPeerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::GetNextPeerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextPeerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessConnectRequest
void LiteNetLib::NetManager::ProcessConnectRequest(::System::Net::IPEndPoint* remoteEndPoint, ::LiteNetLib::NetPeer* netPeer, ::LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(netPeer), ::il2cpp_utils::ExtractType(connRequest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, netPeer, connRequest);
}
// Autogenerated method: LiteNetLib.NetManager.DataReceived
void LiteNetLib::NetManager::DataReceived(::ArrayW<uint8_t> reusableBuffer, int count, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DataReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DataReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reusableBuffer), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reusableBuffer, count, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.CreateReceiveEvent
void LiteNetLib::NetManager::CreateReceiveEvent(::LiteNetLib::NetPacket* packet, ::LiteNetLib::DeliveryMethod method, ::LiteNetLib::NetPeer* fromPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::CreateReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(fromPeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet, method, fromPeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod options, ::LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(::System::Net::IPAddress* addressIPv4, ::System::Net::IPAddress* addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(::StringW addressIPv4, ::StringW addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::ArrayW<uint8_t> message, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::LiteNetLib::Utils::NetDataWriter* writer, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, writer, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::ArrayW<uint8_t> message, int start, int length, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::LiteNetLib::Utils::NetDataWriter* writer, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, writer, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::ArrayW<uint8_t> data, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::ArrayW<uint8_t> data, int start, int length, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, start, length, port);
}
// Autogenerated method: LiteNetLib.NetManager.Flush
void LiteNetLib::NetManager::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.PollEvents
void LiteNetLib::NetManager::PollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::PollEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
::LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::StringW address, int port, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
::LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::StringW address, int port, ::LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
::LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::System::Net::IPEndPoint* target, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, target, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
::LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::System::Net::IPEndPoint* target, ::LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method, target, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop(bool sendDisconnectMessages) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sendDisconnectMessages)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sendDisconnectMessages);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersCount
int LiteNetLib::NetManager::GetPeersCount(::LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::GetPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peerState)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersNonAlloc
void LiteNetLib::NetManager::GetPeersNonAlloc(::System::Collections::Generic::List_1<::LiteNetLib::NetPeer*>* peers, ::LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::GetPeersNonAlloc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersNonAlloc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peers), ::il2cpp_utils::ExtractType(peerState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peers, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll(::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(::LiteNetLib::NetPeer* peer, ::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, data);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(::LiteNetLib::NetPeer* peer, ::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, writer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(::LiteNetLib::NetPeer* peer, ::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.GetEnumerator
::LiteNetLib::NetManager::NetPeerEnumerator LiteNetLib::NetManager::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetManager::NetPeerEnumerator, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::LiteNetLib::NetPeer*>* LiteNetLib::NetManager::System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.Equals
bool LiteNetLib::NetManager::IPEndPointComparer::Equals(::System::Net::IPEndPoint* x, ::System::Net::IPEndPoint* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::IPEndPointComparer::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.GetHashCode
int LiteNetLib::NetManager::IPEndPointComparer::GetHashCode(::System::Net::IPEndPoint* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::IPEndPointComparer::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPeer _initialPeer
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetManager::NetPeerEnumerator::dyn__initialPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::dyn__initialPeer");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialPeer"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer _p
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetManager::NetPeerEnumerator::dyn__p() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::dyn__p");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.get_Current
::LiteNetLib::NetPeer* LiteNetLib::NetManager::NetPeerEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* LiteNetLib::NetManager::NetPeerEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator..ctor
LiteNetLib::NetManager::NetPeerEnumerator::NetPeerEnumerator(::LiteNetLib::NetPeer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Dispose
void LiteNetLib::NetManager::NetPeerEnumerator::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.MoveNext
bool LiteNetLib::NetManager::NetPeerEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Reset
void LiteNetLib::NetManager::NetPeerEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::NetPeerEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Unreliable
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Unreliable
void LiteNetLib::PacketProperty::_set_Unreliable(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Channeled
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Channeled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Channeled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Channeled"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Channeled
void LiteNetLib::PacketProperty::_set_Channeled(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Channeled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Channeled", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ack
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Ack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ack"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ack
void LiteNetLib::PacketProperty::_set_Ack(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Ack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ack", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ping
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Ping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ping"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ping
void LiteNetLib::PacketProperty::_set_Ping(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Ping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ping", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Pong
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Pong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Pong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Pong"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Pong
void LiteNetLib::PacketProperty::_set_Pong(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Pong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Pong", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectRequest
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_ConnectRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectRequest
void LiteNetLib::PacketProperty::_set_ConnectRequest(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_ConnectRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectAccept
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectAccept() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_ConnectAccept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectAccept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectAccept
void LiteNetLib::PacketProperty::_set_ConnectAccept(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_ConnectAccept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectAccept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Disconnect
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Disconnect
void LiteNetLib::PacketProperty::_set_Disconnect(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty UnconnectedMessage
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_UnconnectedMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_UnconnectedMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "UnconnectedMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty UnconnectedMessage
void LiteNetLib::PacketProperty::_set_UnconnectedMessage(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_UnconnectedMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "UnconnectedMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuCheck
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_MtuCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuCheck"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuCheck
void LiteNetLib::PacketProperty::_set_MtuCheck(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_MtuCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuCheck", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuOk
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_MtuOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuOk
void LiteNetLib::PacketProperty::_set_MtuOk(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_MtuOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Broadcast
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Broadcast
void LiteNetLib::PacketProperty::_set_Broadcast(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Merged
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Merged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Merged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Merged"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Merged
void LiteNetLib::PacketProperty::_set_Merged(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Merged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Merged", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ShutdownOk
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ShutdownOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_ShutdownOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ShutdownOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ShutdownOk
void LiteNetLib::PacketProperty::_set_ShutdownOk(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_ShutdownOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ShutdownOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty PeerNotFound
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_PeerNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_PeerNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "PeerNotFound"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty PeerNotFound
void LiteNetLib::PacketProperty::_set_PeerNotFound(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_PeerNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "PeerNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty InvalidProtocol
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_InvalidProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_InvalidProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "InvalidProtocol"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty InvalidProtocol
void LiteNetLib::PacketProperty::_set_InvalidProtocol(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_InvalidProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "InvalidProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty NatMessage
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_NatMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_NatMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "NatMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty NatMessage
void LiteNetLib::PacketProperty::_set_NatMessage(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_NatMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "NatMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Empty
::LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Empty"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Empty
void LiteNetLib::PacketProperty::_set_Empty(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Empty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::PacketProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::PacketProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 LastProperty
int LiteNetLib::NetPacket::_get_LastProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::_get_LastProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPacket", "LastProperty"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 LastProperty
void LiteNetLib::NetPacket::_set_LastProperty(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::_set_LastProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPacket", "LastProperty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] RawData
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::NetPacket::dyn_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::dyn_RawData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RawData"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Size
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPacket::dyn_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::dyn_Size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object UserData
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPacket::dyn_UserData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::dyn_UserData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UserData"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacket.get_Property
::LiteNetLib::PacketProperty LiteNetLib::NetPacket::get_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::PacketProperty, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Property
void LiteNetLib::NetPacket::set_Property(::LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ConnectionNumber
uint8_t LiteNetLib::NetPacket::get_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ConnectionNumber
void LiteNetLib::NetPacket::set_ConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_Sequence
uint16_t LiteNetLib::NetPacket::get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Sequence
void LiteNetLib::NetPacket::set_Sequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_IsFragmented
bool LiteNetLib::NetPacket::get_IsFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_IsFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ChannelId
uint8_t LiteNetLib::NetPacket::get_ChannelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ChannelId
void LiteNetLib::NetPacket::set_ChannelId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentId
uint16_t LiteNetLib::NetPacket::get_FragmentId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentId
void LiteNetLib::NetPacket::set_FragmentId(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentPart
uint16_t LiteNetLib::NetPacket::get_FragmentPart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentPart
void LiteNetLib::NetPacket::set_FragmentPart(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentsTotal
uint16_t LiteNetLib::NetPacket::get_FragmentsTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::get_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentsTotal
void LiteNetLib::NetPacket::set_FragmentsTotal(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::set_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket..cctor
void LiteNetLib::NetPacket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.MarkFragmented
void LiteNetLib::NetPacket::MarkFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::MarkFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize(::LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.FromBytes
bool LiteNetLib::NetPacket::FromBytes(::ArrayW<uint8_t> data, int start, int packetSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacket::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(packetSize)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, start, packetSize);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.SocketAddress
#include "System/Net/SocketAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConnectRequestPacket::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectRequestPacket", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConnectRequestPacket::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectRequestPacket", "HeaderSize", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int64 ConnectionTime
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetConnectRequestPacket::dyn_ConnectionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::dyn_ConnectionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte ConnectionNumber
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::NetConnectRequestPacket::dyn_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::dyn_ConnectionNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte[] TargetAddress
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::NetConnectRequestPacket::dyn_TargetAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::dyn_TargetAddress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetAddress"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.Utils.NetDataReader Data
[[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetDataReader*& LiteNetLib::NetConnectRequestPacket::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<::LiteNetLib::Utils::NetDataReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.GetProtocolId
int LiteNetLib::NetConnectRequestPacket::GetProtocolId(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::GetProtocolId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "GetProtocolId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.FromData
::LiteNetLib::NetConnectRequestPacket* LiteNetLib::NetConnectRequestPacket::FromData(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetConnectRequestPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.Make
::LiteNetLib::NetPacket* LiteNetLib::NetConnectRequestPacket::Make(::LiteNetLib::Utils::NetDataWriter* connectData, ::System::Net::SocketAddress* addressBytes, int64_t connectId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectRequestPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectData), ::il2cpp_utils::ExtractType(addressBytes), ::il2cpp_utils::ExtractType(connectId)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, connectData, addressBytes, connectId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 Size
int LiteNetLib::NetConnectAcceptPacket::_get_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::_get_Size");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectAcceptPacket", "Size"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 Size
void LiteNetLib::NetConnectAcceptPacket::_set_Size(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::_set_Size");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectAcceptPacket", "Size", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int64 ConnectionId
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionId"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte ConnectionNumber
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean IsReusedPeer
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetConnectAcceptPacket::dyn_IsReusedPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::dyn_IsReusedPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsReusedPeer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.FromData
::LiteNetLib::NetConnectAcceptPacket* LiteNetLib::NetConnectAcceptPacket::FromData(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetConnectAcceptPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.Make
::LiteNetLib::NetPacket* LiteNetLib::NetConnectAcceptPacket::Make(int64_t connectId, uint8_t connectNum, bool reusedPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetConnectAcceptPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectId), ::il2cpp_utils::ExtractType(connectNum), ::il2cpp_utils::ExtractType(reusedPeer)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, connectId, connectNum, reusedPeer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket[] _pool
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::NetPacket*>& LiteNetLib::NetPacketPool::dyn__pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::dyn__pool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pool"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ReaderWriterLockSlim _lock
[[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLockSlim*& LiteNetLib::NetPacketPool::dyn__lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::dyn__lock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lock"))->offset;
  return *reinterpret_cast<::System::Threading::ReaderWriterLockSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _count
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPacketPool::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::dyn__count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithData
::LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithData(::LiteNetLib::PacketProperty property, ::ArrayW<uint8_t> data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::GetWithData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(this, ___internal__method, property, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
::LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(::LiteNetLib::PacketProperty property, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(this, ___internal__method, property, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
::LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(::LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(this, ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetPacket
::LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetPacket(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::GetPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::NetPacket*, false>(this, ___internal__method, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.Recycle
void LiteNetLib::NetPacketPool::Recycle(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPacketPool::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Outgoing
::LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Outgoing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_get_Outgoing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Outgoing"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Outgoing
void LiteNetLib::ConnectionState::_set_Outgoing(::LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_set_Outgoing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Outgoing", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Connected
::LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Connected
void LiteNetLib::ConnectionState::_set_Connected(::LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState ShutdownRequested
::LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_ShutdownRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_get_ShutdownRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "ShutdownRequested"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState ShutdownRequested
void LiteNetLib::ConnectionState::_set_ShutdownRequested(::LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_set_ShutdownRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "ShutdownRequested", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Disconnected
::LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Disconnected
void LiteNetLib::ConnectionState::_set_Disconnected(::LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Any
::LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Any"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Any
void LiteNetLib::ConnectionState::_set_Any(::LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Any", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::ConnectionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult None
::LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult None
void LiteNetLib::ConnectRequestResult::_set_None(::LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult P2PLose
::LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_P2PLose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_get_P2PLose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "P2PLose"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult P2PLose
void LiteNetLib::ConnectRequestResult::_set_P2PLose(::LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_set_P2PLose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "P2PLose", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult Reconnection
::LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_Reconnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_get_Reconnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "Reconnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult Reconnection
void LiteNetLib::ConnectRequestResult::_set_Reconnection(::LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_set_Reconnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "Reconnection", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult NewConnection
::LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_NewConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_get_NewConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "NewConnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult NewConnection
void LiteNetLib::ConnectRequestResult::_set_NewConnection(::LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::_set_NewConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "NewConnection", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::ConnectRequestResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ConnectRequestResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult None
::LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult None
void LiteNetLib::DisconnectResult::_set_None(::LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Reject
::LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Reject
void LiteNetLib::DisconnectResult::_set_Reject(::LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Disconnect
::LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Disconnect
void LiteNetLib::DisconnectResult::_set_Disconnect(::LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Disconnect", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::DisconnectResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::DisconnectResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult None
::LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult None
void LiteNetLib::ShutdownResult::_set_None(::LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult Success
::LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "Success"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult Success
void LiteNetLib::ShutdownResult::_set_Success(::LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult WasConnected
::LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_WasConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_get_WasConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "WasConnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult WasConnected
void LiteNetLib::ShutdownResult::_set_WasConnected(::LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::_set_WasConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "WasConnected", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::ShutdownResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ShutdownResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MtuCheckDelay
int LiteNetLib::NetPeer::_get_MtuCheckDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_get_MtuCheckDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MtuCheckDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MtuCheckDelay
void LiteNetLib::NetPeer::_set_MtuCheckDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_set_MtuCheckDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MtuCheckDelay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxMtuCheckAttempts
int LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxMtuCheckAttempts
void LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ShutdownDelay
int LiteNetLib::NetPeer::_get_ShutdownDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_get_ShutdownDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "ShutdownDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ShutdownDelay
void LiteNetLib::NetPeer::_set_ShutdownDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::_set_ShutdownDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "ShutdownDelay", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rtt
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__rtt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__rtt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rtt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _avgRtt
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__avgRtt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__avgRtt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avgRtt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rttCount
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__rttCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__rttCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rttCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _resendDelay
[[deprecated("Use field access instead!")]] double& LiteNetLib::NetPeer::dyn__resendDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__resendDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resendDelay"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _pingSendTimer
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__pingSendTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__pingSendTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingSendTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rttResetTimer
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__rttResetTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__rttResetTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rttResetTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Diagnostics.Stopwatch _pingTimer
[[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& LiteNetLib::NetPeer::dyn__pingTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__pingTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingTimer"))->offset;
  return *reinterpret_cast<::System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _timeSinceLastPacket
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__timeSinceLastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__timeSinceLastPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceLastPacket"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _remoteDelta
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetPeer::dyn__remoteDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__remoteDelta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteDelta"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacketPool _packetPool
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacketPool*& LiteNetLib::NetPeer::dyn__packetPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__packetPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetPool"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacketPool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _flushLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPeer::dyn__flushLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__flushLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flushLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _sendLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPeer::dyn__sendLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__sendLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _shutdownLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPeer::dyn__shutdownLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__shutdownLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: LiteNetLib.NetPeer NextPeer
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetPeer::dyn_NextPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_NextPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextPeer"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: LiteNetLib.NetPeer PrevPeer
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPeer*& LiteNetLib::NetPeer::dyn_PrevPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_PrevPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PrevPeer"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetPacket> _unreliableChannel
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::LiteNetLib::NetPacket*>*& LiteNetLib::NetPeer::dyn__unreliableChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__unreliableChannel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unreliableChannel"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::LiteNetLib::NetPacket*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.BaseChannel[] _channels
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::BaseChannel*>& LiteNetLib::NetPeer::dyn__channels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__channels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channels"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::BaseChannel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.BaseChannel _headChannel
[[deprecated("Use field access instead!")]] ::LiteNetLib::BaseChannel*& LiteNetLib::NetPeer::dyn__headChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__headChannel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headChannel"))->offset;
  return *reinterpret_cast<::LiteNetLib::BaseChannel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtu
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mtu");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtu"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuIdx
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mtuIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mtuIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _finishMtu
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetPeer::dyn__finishMtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__finishMtu");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finishMtu"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuCheckTimer
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mtuCheckTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mtuCheckTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuCheckTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuCheckAttempts
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mtuCheckAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mtuCheckAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuCheckAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _mtuMutex
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPeer::dyn__mtuMutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mtuMutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuMutex"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 _fragmentId
[[deprecated("Use field access instead!")]] uint16_t& LiteNetLib::NetPeer::dyn__fragmentId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__fragmentId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fragmentId"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.UInt16,LiteNetLib.NetPeer/LiteNetLib.IncomingFragments> _holdedFragments
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint16_t, ::LiteNetLib::NetPeer::IncomingFragments*>*& LiteNetLib::NetPeer::dyn__holdedFragments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__holdedFragments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_holdedFragments"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<uint16_t, ::LiteNetLib::NetPeer::IncomingFragments*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.UInt16,System.UInt16> _deliveredFramgnets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint16_t, uint16_t>*& LiteNetLib::NetPeer::dyn__deliveredFramgnets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__deliveredFramgnets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveredFramgnets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<uint16_t, uint16_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _mergeData
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__mergeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mergeData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergeData"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mergePos
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mergePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mergePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergePos"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mergeCount
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__mergeCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__mergeCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergeCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectAttempts
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__connectAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectTimer
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__connectTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _connectTime
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetPeer::dyn__connectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte _connectNum
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::NetPeer::dyn__connectNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectNum"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.ConnectionState _connectionState
[[deprecated("Use field access instead!")]] ::LiteNetLib::ConnectionState& LiteNetLib::NetPeer::dyn__connectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectionState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionState"))->offset;
  return *reinterpret_cast<::LiteNetLib::ConnectionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _shutdownPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__shutdownPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__shutdownPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _shutdownTimer
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn__shutdownTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__shutdownTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _pingPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__pingPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__pingPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _pongPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__pongPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__pongPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pongPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _connectRequestPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__connectRequestPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectRequestPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectRequestPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _connectAcceptPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__connectAcceptPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn__connectAcceptPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectAcceptPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Net.IPEndPoint EndPoint
[[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& LiteNetLib::NetPeer::dyn_EndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_EndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EndPoint"))->offset;
  return *reinterpret_cast<::System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetManager NetManager
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetManager*& LiteNetLib::NetPeer::dyn_NetManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_NetManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetManager"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 Id
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::dyn_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_Id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object Tag
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LiteNetLib::NetPeer::dyn_Tag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_Tag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tag"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetStatistics Statistics
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetStatistics*& LiteNetLib::NetPeer::dyn_Statistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::dyn_Statistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Statistics"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetStatistics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionNum
uint8_t LiteNetLib::NetPeer::get_ConnectionNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.set_ConnectionNum
void LiteNetLib::NetPeer::set_ConnectionNum(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::set_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionState
::LiteNetLib::ConnectionState LiteNetLib::NetPeer::get_ConnectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_ConnectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectTime
int64_t LiteNetLib::NetPeer::get_ConnectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_ConnectTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Ping
int LiteNetLib::NetPeer::get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_Ping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Mtu
int LiteNetLib::NetPeer::get_Mtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_Mtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteTimeDelta
int64_t LiteNetLib::NetPeer::get_RemoteTimeDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_RemoteTimeDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteTimeDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteUtcTime
::System::DateTime LiteNetLib::NetPeer::get_RemoteUtcTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_RemoteUtcTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteUtcTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_TimeSinceLastPacket
int LiteNetLib::NetPeer::get_TimeSinceLastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_TimeSinceLastPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TimeSinceLastPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ResendDelay
double LiteNetLib::NetPeer::get_ResendDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::get_ResendDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ResendDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SetMtu
void LiteNetLib::NetPeer::SetMtu(int mtuIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SetMtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mtuIdx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mtuIdx);
}
// Autogenerated method: LiteNetLib.NetPeer.GetPacketsCountInReliableQueue
int LiteNetLib::NetPeer::GetPacketsCountInReliableQueue(uint8_t channelNumber, bool ordered) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::GetPacketsCountInReliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacketsCountInReliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(ordered)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, channelNumber, ordered);
}
// Autogenerated method: LiteNetLib.NetPeer.CreateChannel
::LiteNetLib::BaseChannel* LiteNetLib::NetPeer::CreateChannel(uint8_t idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::CreateChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::BaseChannel*, false>(this, ___internal__method, idx);
}
// Autogenerated method: LiteNetLib.NetPeer.Reject
void LiteNetLib::NetPeer::Reject(int64_t connectionId, uint8_t connectionNumber, ::ArrayW<uint8_t> data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(connectionNumber), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connectionId, connectionNumber, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectAccept
bool LiteNetLib::NetPeer::ProcessConnectAccept(::LiteNetLib::NetConnectAcceptPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::ProcessConnectAccept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectAccept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.GetMaxSinglePacketSize
int LiteNetLib::NetPeer::GetMaxSinglePacketSize(::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::GetMaxSinglePacketSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxSinglePacketSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, options);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::ArrayW<uint8_t> data, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, ::LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::LiteNetLib::Utils::NetDataWriter* dataWriter, ::LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, int start, int length, ::LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.SendInternal
void LiteNetLib::NetPeer::SendInternal(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, ::LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessDisconnect
::LiteNetLib::DisconnectResult LiteNetLib::NetPeer::ProcessDisconnect(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::ProcessDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::DisconnectResult, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Shutdown
::LiteNetLib::ShutdownResult LiteNetLib::NetPeer::Shutdown(::ArrayW<uint8_t> data, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(force)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::ShutdownResult, false>(this, ___internal__method, data, start, length, force);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateRoundTripTime
void LiteNetLib::NetPeer::UpdateRoundTripTime(int roundTripTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::UpdateRoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(roundTripTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, roundTripTime);
}
// Autogenerated method: LiteNetLib.NetPeer.AddReliablePacket
void LiteNetLib::NetPeer::AddReliablePacket(::LiteNetLib::DeliveryMethod method, ::LiteNetLib::NetPacket* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::AddReliablePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReliablePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method, p);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessMtuPacket
void LiteNetLib::NetPeer::ProcessMtuPacket(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::ProcessMtuPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMtuPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateMtuLogic
void LiteNetLib::NetPeer::UpdateMtuLogic(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::UpdateMtuLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMtuLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectRequest
::LiteNetLib::ConnectRequestResult LiteNetLib::NetPeer::ProcessConnectRequest(::LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connRequest)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::ConnectRequestResult, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessPacket
void LiteNetLib::NetPeer::ProcessPacket(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::ProcessPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.SendMerged
void LiteNetLib::NetPeer::SendMerged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendMerged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMerged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SendUserData
void LiteNetLib::NetPeer::SendUserData(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::SendUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Flush
void LiteNetLib::NetPeer::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.Update
void LiteNetLib::NetPeer::Update(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.RecycleAndDeliver
void LiteNetLib::NetPeer::RecycleAndDeliver(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::RecycleAndDeliver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleAndDeliver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetPacket[] Fragments
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::NetPacket*>& LiteNetLib::NetPeer::IncomingFragments::dyn_Fragments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::IncomingFragments::dyn_Fragments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Fragments"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ReceivedCount
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::IncomingFragments::dyn_ReceivedCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::IncomingFragments::dyn_ReceivedCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReceivedCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 TotalSize
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetPeer::IncomingFragments::dyn_TotalSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::IncomingFragments::dyn_TotalSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TotalSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte ChannelId
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::NetPeer::IncomingFragments::dyn_ChannelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetPeer::IncomingFragments::dyn_ChannelId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ChannelId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::INetSocketListener::OnMessageReceived(::ArrayW<uint8_t> data, int length, ::System::Net::Sockets::SocketError errorCode, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::INetSocketListener::OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Net.Sockets.Socket
#include "System/Net/Sockets/Socket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ReceivePollingTime
int LiteNetLib::NetSocket::_get_ReceivePollingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_get_ReceivePollingTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "ReceivePollingTime"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ReceivePollingTime
void LiteNetLib::NetSocket::_set_ReceivePollingTime(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_set_ReceivePollingTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "ReceivePollingTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SioUdpConnreset
int LiteNetLib::NetSocket::_get_SioUdpConnreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_get_SioUdpConnreset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "SioUdpConnreset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SioUdpConnreset
void LiteNetLib::NetSocket::_set_SioUdpConnreset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_set_SioUdpConnreset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "SioUdpConnreset", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Net.IPAddress MulticastAddressV6
::System::Net::IPAddress* LiteNetLib::NetSocket::_get_MulticastAddressV6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_get_MulticastAddressV6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Net::IPAddress*>("LiteNetLib", "NetSocket", "MulticastAddressV6"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Net.IPAddress MulticastAddressV6
void LiteNetLib::NetSocket::_set_MulticastAddressV6(::System::Net::IPAddress* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_set_MulticastAddressV6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "MulticastAddressV6", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Boolean IPv6Support
bool LiteNetLib::NetSocket::_get_IPv6Support() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_get_IPv6Support");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LiteNetLib", "NetSocket", "IPv6Support"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Boolean IPv6Support
void LiteNetLib::NetSocket::_set_IPv6Support(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::_set_IPv6Support");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "IPv6Support", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Net.Sockets.Socket _udpSocketv4
[[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& LiteNetLib::NetSocket::dyn__udpSocketv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn__udpSocketv4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_udpSocketv4"))->offset;
  return *reinterpret_cast<::System::Net::Sockets::Socket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Net.Sockets.Socket _udpSocketv6
[[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& LiteNetLib::NetSocket::dyn__udpSocketv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn__udpSocketv6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_udpSocketv6"))->offset;
  return *reinterpret_cast<::System::Net::Sockets::Socket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _threadv4
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& LiteNetLib::NetSocket::dyn__threadv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn__threadv4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threadv4"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _threadv6
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& LiteNetLib::NetSocket::dyn__threadv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn__threadv6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threadv6"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.INetSocketListener _listener
[[deprecated("Use field access instead!")]] ::LiteNetLib::INetSocketListener*& LiteNetLib::NetSocket::dyn__listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn__listener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listener"))->offset;
  return *reinterpret_cast<::LiteNetLib::INetSocketListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <LocalPort>k__BackingField
[[deprecated("Use field access instead!")]] int& LiteNetLib::NetSocket::dyn_$LocalPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn_$LocalPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LocalPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsRunning
[[deprecated("Use field access instead!")]] bool& LiteNetLib::NetSocket::dyn_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::dyn_IsRunning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsRunning"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetSocket.get_LocalPort
int LiteNetLib::NetSocket::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_LocalPort
void LiteNetLib::NetSocket::set_LocalPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::set_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket.get_Ttl
int16_t LiteNetLib::NetSocket::get_Ttl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::get_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_Ttl
void LiteNetLib::NetSocket::set_Ttl(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::set_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket..cctor
void LiteNetLib::NetSocket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetSocket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.IsActive
bool LiteNetLib::NetSocket::IsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.ReceiveLogic
void LiteNetLib::NetSocket::ReceiveLogic(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::ReceiveLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: LiteNetLib.NetSocket.Bind
bool LiteNetLib::NetSocket::Bind(::System::Net::IPAddress* addressIPv4, ::System::Net::IPAddress* addressIPv6, int port, bool reuseAddress, bool ipv6, ::System::Threading::ThreadPriority priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(reuseAddress), ::il2cpp_utils::ExtractType(ipv6), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port, reuseAddress, ipv6, priority);
}
// Autogenerated method: LiteNetLib.NetSocket.BindSocket
bool LiteNetLib::NetSocket::BindSocket(::System::Net::Sockets::Socket* socket, ::System::Net::IPEndPoint* ep, bool reuseAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::BindSocket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindSocket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(socket), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(reuseAddress)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, socket, ep, reuseAddress);
}
// Autogenerated method: LiteNetLib.NetSocket.SendBroadcast
bool LiteNetLib::NetSocket::SendBroadcast(::ArrayW<uint8_t> data, int offset, int size, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, offset, size, port);
}
// Autogenerated method: LiteNetLib.NetSocket.SendTo
int LiteNetLib::NetSocket::SendTo(::ArrayW<uint8_t> data, int offset, int size, ::System::Net::IPEndPoint* remoteEndPoint, ByRef<::System::Net::Sockets::SocketError> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::SendTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, data, offset, size, remoteEndPoint, byref(errorCode));
}
// Autogenerated method: LiteNetLib.NetSocket.Close
void LiteNetLib::NetSocket::Close(bool suspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetSocket::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suspend)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, suspend);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetsSent
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetStatistics::dyn__packetsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::dyn__packetsSent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetsSent"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetsReceived
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetStatistics::dyn__packetsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::dyn__packetsReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetsReceived"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _bytesSent
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetStatistics::dyn__bytesSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::dyn__bytesSent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesSent"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _bytesReceived
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetStatistics::dyn__bytesReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::dyn__bytesReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesReceived"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetLoss
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::NetStatistics::dyn__packetLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::dyn__packetLoss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetLoss"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsSent
int64_t LiteNetLib::NetStatistics::get_PacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_PacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsReceived
int64_t LiteNetLib::NetStatistics::get_PacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_PacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesSent
int64_t LiteNetLib::NetStatistics::get_BytesSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_BytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesReceived
int64_t LiteNetLib::NetStatistics::get_BytesReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_BytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLoss
int64_t LiteNetLib::NetStatistics::get_PacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_PacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLossPercent
int64_t LiteNetLib::NetStatistics::get_PacketLossPercent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::get_PacketLossPercent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLossPercent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.Reset
void LiteNetLib::NetStatistics::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsSent
void LiteNetLib::NetStatistics::IncrementPacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::IncrementPacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsReceived
void LiteNetLib::NetStatistics::IncrementPacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::IncrementPacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesSent
void LiteNetLib::NetStatistics::AddBytesSent(int64_t bytesSent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::AddBytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesSent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesSent);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesReceived
void LiteNetLib::NetStatistics::AddBytesReceived(int64_t bytesReceived) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::AddBytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesReceived)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesReceived);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketLoss
void LiteNetLib::NetStatistics::IncrementPacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::IncrementPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddPacketLoss
void LiteNetLib::NetStatistics::AddPacketLoss(int64_t packetLoss) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::AddPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetLoss)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packetLoss);
}
// Autogenerated method: LiteNetLib.NetStatistics.ToString
::StringW LiteNetLib::NetStatistics::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetStatistics::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv4
::LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_get_IPv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv4"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv4
void LiteNetLib::LocalAddrType::_set_IPv4(::LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_set_IPv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv4", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv6
::LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_get_IPv6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv6"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv6
void LiteNetLib::LocalAddrType::_set_IPv6(::LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_set_IPv6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv6", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType All
::LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "All"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType All
void LiteNetLib::LocalAddrType::_set_All(::LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::LocalAddrType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::LocalAddrType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetUtils
#include "LiteNetLib/NetUtils.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
::System::Collections::Generic::List_1<::StringW>* LiteNetLib::NetUtils::_get_IpList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::_get_IpList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::StringW>*>("LiteNetLib", "NetUtils", "IpList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
void LiteNetLib::NetUtils::_set_IpList(::System::Collections::Generic::List_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::_set_IpList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetUtils", "IpList", value));
}
// Autogenerated method: LiteNetLib.NetUtils..cctor
void LiteNetLib::NetUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.MakeEndPoint
::System::Net::IPEndPoint* LiteNetLib::NetUtils::MakeEndPoint(::StringW hostStr, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::MakeEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "MakeEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Net::IPEndPoint*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr, port);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
::System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::StringW hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Net::IPAddress*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
::System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::StringW hostStr, ::System::Net::Sockets::AddressFamily addressFamily) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(addressFamily)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Net::IPAddress*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr, addressFamily);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddresses
::ArrayW<::System::Net::IPAddress*> LiteNetLib::NetUtils::ResolveAddresses(::StringW hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::ResolveAddresses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddresses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Net::IPAddress*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
::System::Collections::Generic::List_1<::StringW>* LiteNetLib::NetUtils::GetLocalIpList(::LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
void LiteNetLib::NetUtils::GetLocalIpList(::System::Collections::Generic::IList_1<::StringW>* targetList, ::LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetList), ::il2cpp_utils::ExtractType(addrType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, targetList, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIp
::StringW LiteNetLib::NetUtils::GetLocalIp(::LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::GetLocalIp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.PrintInterfaceInfos
void LiteNetLib::NetUtils::PrintInterfaceInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::PrintInterfaceInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "PrintInterfaceInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.RelativeSequenceNumber
int LiteNetLib::NetUtils::RelativeSequenceNumber(int number, int expected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetUtils::RelativeSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "RelativeSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(expected)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number, expected);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ReliableChannel
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 BitsInByte
int LiteNetLib::ReliableChannel::_get_BitsInByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::_get_BitsInByte");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "ReliableChannel", "BitsInByte"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 BitsInByte
void LiteNetLib::ReliableChannel::_set_BitsInByte(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::_set_BitsInByte");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ReliableChannel", "BitsInByte", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _outgoingAcks
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::ReliableChannel::dyn__outgoingAcks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__outgoingAcks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outgoingAcks"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket[] _pendingPackets
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::ReliableChannel::PendingPacket>& LiteNetLib::ReliableChannel::dyn__pendingPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__pendingPackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pendingPackets"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::ReliableChannel::PendingPacket>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket[] _receivedPackets
[[deprecated("Use field access instead!")]] ::ArrayW<::LiteNetLib::NetPacket*>& LiteNetLib::ReliableChannel::dyn__receivedPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__receivedPackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receivedPackets"))->offset;
  return *reinterpret_cast<::ArrayW<::LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean[] _earlyReceived
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& LiteNetLib::ReliableChannel::dyn__earlyReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__earlyReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_earlyReceived"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _localSeqence
[[deprecated("Use field access instead!")]] int& LiteNetLib::ReliableChannel::dyn__localSeqence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__localSeqence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localSeqence"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _remoteSequence
[[deprecated("Use field access instead!")]] int& LiteNetLib::ReliableChannel::dyn__remoteSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__remoteSequence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteSequence"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _localWindowStart
[[deprecated("Use field access instead!")]] int& LiteNetLib::ReliableChannel::dyn__localWindowStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__localWindowStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localWindowStart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _remoteWindowStart
[[deprecated("Use field access instead!")]] int& LiteNetLib::ReliableChannel::dyn__remoteWindowStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__remoteWindowStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteWindowStart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _mustSendAcks
[[deprecated("Use field access instead!")]] bool& LiteNetLib::ReliableChannel::dyn__mustSendAcks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__mustSendAcks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mustSendAcks"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.DeliveryMethod _deliveryMethod
[[deprecated("Use field access instead!")]] ::LiteNetLib::DeliveryMethod& LiteNetLib::ReliableChannel::dyn__deliveryMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__deliveryMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveryMethod"))->offset;
  return *reinterpret_cast<::LiteNetLib::DeliveryMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _ordered
[[deprecated("Use field access instead!")]] bool& LiteNetLib::ReliableChannel::dyn__ordered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__ordered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ordered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _windowSize
[[deprecated("Use field access instead!")]] int& LiteNetLib::ReliableChannel::dyn__windowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__windowSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_windowSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte _id
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::ReliableChannel::dyn__id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::dyn__id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_id"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessAck
void LiteNetLib::ReliableChannel::ProcessAck(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::ProcessAck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.ReliableChannel.SendNextPackets
void LiteNetLib::ReliableChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessPacket
bool LiteNetLib::ReliableChannel::ProcessPacket(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _packet
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::ReliableChannel::PendingPacket::dyn__packet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::dyn__packet");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packet"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _timeStamp
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::ReliableChannel::PendingPacket::dyn__timeStamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::dyn__timeStamp");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeStamp"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isSent
[[deprecated("Use field access instead!")]] bool& LiteNetLib::ReliableChannel::PendingPacket::dyn__isSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::dyn__isSent");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isSent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.Init
void LiteNetLib::ReliableChannel::PendingPacket::Init(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.TrySend
void LiteNetLib::ReliableChannel::PendingPacket::TrySend(int64_t currentTime, ::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::TrySend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TrySend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTime), ::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentTime, peer);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.Clear
bool LiteNetLib::ReliableChannel::PendingPacket::Clear(::LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.ToString
::StringW LiteNetLib::ReliableChannel::PendingPacket::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::ReliableChannel::PendingPacket::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.SequencedChannel
#include "LiteNetLib/SequencedChannel.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _localSequence
[[deprecated("Use field access instead!")]] int& LiteNetLib::SequencedChannel::dyn__localSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__localSequence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localSequence"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 _remoteSequence
[[deprecated("Use field access instead!")]] uint16_t& LiteNetLib::SequencedChannel::dyn__remoteSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__remoteSequence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteSequence"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _reliable
[[deprecated("Use field access instead!")]] bool& LiteNetLib::SequencedChannel::dyn__reliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__reliable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reliable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _lastPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::SequencedChannel::dyn__lastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__lastPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _ackPacket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetPacket*& LiteNetLib::SequencedChannel::dyn__ackPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__ackPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ackPacket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _mustSendAck
[[deprecated("Use field access instead!")]] bool& LiteNetLib::SequencedChannel::dyn__mustSendAck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__mustSendAck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mustSendAck"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte _id
[[deprecated("Use field access instead!")]] uint8_t& LiteNetLib::SequencedChannel::dyn__id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_id"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _lastPacketSendTime
[[deprecated("Use field access instead!")]] int64_t& LiteNetLib::SequencedChannel::dyn__lastPacketSendTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::dyn__lastPacketSendTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPacketSendTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.SequencedChannel.SendNextPackets
void LiteNetLib::SequencedChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.SequencedChannel.ProcessPacket
bool LiteNetLib::SequencedChannel::ProcessPacket(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SequencedChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.SimpleChannel
#include "LiteNetLib/SimpleChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.SimpleChannel.SendNextPackets
void LiteNetLib::SimpleChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SimpleChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.SimpleChannel.ProcessPacket
bool LiteNetLib::SimpleChannel::ProcessPacket(::LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::SimpleChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.CRC32C
#include "LiteNetLib/Utils/CRC32C.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ChecksumSize
int LiteNetLib::Utils::CRC32C::_get_ChecksumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_get_ChecksumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "CRC32C", "ChecksumSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChecksumSize
void LiteNetLib::Utils::CRC32C::_set_ChecksumSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_set_ChecksumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "ChecksumSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 Poly
uint LiteNetLib::Utils::CRC32C::_get_Poly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_get_Poly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("LiteNetLib.Utils", "CRC32C", "Poly"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 Poly
void LiteNetLib::Utils::CRC32C::_set_Poly(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_set_Poly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Poly", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] Table
::ArrayW<uint> LiteNetLib::Utils::CRC32C::_get_Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_get_Table");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint>>("LiteNetLib.Utils", "CRC32C", "Table"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] Table
void LiteNetLib::Utils::CRC32C::_set_Table(::ArrayW<uint> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::_set_Table");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Table", value));
}
// Autogenerated method: LiteNetLib.Utils.CRC32C..cctor
void LiteNetLib::Utils::CRC32C::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.CRC32C.Compute
uint LiteNetLib::Utils::CRC32C::Compute(::ArrayW<uint8_t> input, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::CRC32C::Compute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", "Compute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, input, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.FastBitConverter
#include "LiteNetLib/Utils/FastBitConverter.hpp"
// Including type: LiteNetLib.Utils.FastBitConverter/LiteNetLib.Utils.ConverterHelperDouble
#include "LiteNetLib/Utils/FastBitConverter_ConverterHelperDouble.hpp"
// Including type: LiteNetLib.Utils.FastBitConverter/LiteNetLib.Utils.ConverterHelperFloat
#include "LiteNetLib/Utils/FastBitConverter_ConverterHelperFloat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::ArrayW<uint8_t> buffer, int offset, uint64_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::ArrayW<uint8_t> buffer, int offset, int data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::ArrayW<uint8_t> buffer, int offset, int16_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::ArrayW<uint8_t> bytes, int startIndex, uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.INetSerializable.Serialize
void LiteNetLib::Utils::INetSerializable::Serialize(::LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::INetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LiteNetLib.Utils.INetSerializable.Deserialize
void LiteNetLib::Utils::INetSerializable::Deserialize(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::INetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Byte[] _data
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::Utils::NetDataReader::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _position
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NetDataReader::dyn__position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::dyn__position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_position"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _dataSize
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NetDataReader::dyn__dataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::dyn__dataSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _offset
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NetDataReader::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_RawData
::ArrayW<uint8_t> LiteNetLib::Utils::NetDataReader::get_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_RawData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_RawDataSize
int LiteNetLib::Utils::NetDataReader::get_RawDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_RawDataSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawDataSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_UserDataOffset
int LiteNetLib::Utils::NetDataReader::get_UserDataOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_UserDataOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserDataOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_UserDataSize
int LiteNetLib::Utils::NetDataReader::get_UserDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_UserDataSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserDataSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_IsNull
bool LiteNetLib::Utils::NetDataReader::get_IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_Position
int LiteNetLib::Utils::NetDataReader::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_EndOfData
bool LiteNetLib::Utils::NetDataReader::get_EndOfData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_EndOfData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_AvailableBytes
int LiteNetLib::Utils::NetDataReader::get_AvailableBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::get_AvailableBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AvailableBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SkipBytes
void LiteNetLib::Utils::NetDataReader::SkipBytes(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::SkipBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SkipBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::LiteNetLib::Utils::NetDataWriter* dataWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::ArrayW<uint8_t> source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::ArrayW<uint8_t> source, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, offset);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::ArrayW<uint8_t> source, int offset, int maxSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(maxSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, offset, maxSize);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetNetEndPoint
::System::Net::IPEndPoint* LiteNetLib::Utils::NetDataReader::GetNetEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetNetEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNetEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetByte
uint8_t LiteNetLib::Utils::NetDataReader::GetByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetSByte
int8_t LiteNetLib::Utils::NetDataReader::GetSByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBoolArray
::ArrayW<bool> LiteNetLib::Utils::NetDataReader::GetBoolArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetBoolArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoolArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<bool>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUShortArray
::ArrayW<uint16_t> LiteNetLib::Utils::NetDataReader::GetUShortArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetUShortArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUShortArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint16_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetShortArray
::ArrayW<int16_t> LiteNetLib::Utils::NetDataReader::GetShortArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetShortArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShortArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int16_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetLongArray
::ArrayW<int64_t> LiteNetLib::Utils::NetDataReader::GetLongArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetLongArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLongArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int64_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetULongArray
::ArrayW<uint64_t> LiteNetLib::Utils::NetDataReader::GetULongArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetULongArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetULongArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint64_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetIntArray
::ArrayW<int> LiteNetLib::Utils::NetDataReader::GetIntArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetIntArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIntArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUIntArray
::ArrayW<uint> LiteNetLib::Utils::NetDataReader::GetUIntArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetUIntArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUIntArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetFloatArray
::ArrayW<float> LiteNetLib::Utils::NetDataReader::GetFloatArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetFloatArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<float>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetDoubleArray
::ArrayW<double> LiteNetLib::Utils::NetDataReader::GetDoubleArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetDoubleArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDoubleArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<double>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetStringArray
::ArrayW<::StringW> LiteNetLib::Utils::NetDataReader::GetStringArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetStringArray
::ArrayW<::StringW> LiteNetLib::Utils::NetDataReader::GetStringArray(int maxStringLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStringLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method, maxStringLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBool
bool LiteNetLib::Utils::NetDataReader::GetBool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetChar
::Il2CppChar LiteNetLib::Utils::NetDataReader::GetChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUShort
uint16_t LiteNetLib::Utils::NetDataReader::GetUShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetShort
int16_t LiteNetLib::Utils::NetDataReader::GetShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetLong
int64_t LiteNetLib::Utils::NetDataReader::GetLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetULong
uint64_t LiteNetLib::Utils::NetDataReader::GetULong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetInt
int LiteNetLib::Utils::NetDataReader::GetInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUInt
uint LiteNetLib::Utils::NetDataReader::GetUInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetFloat
float LiteNetLib::Utils::NetDataReader::GetFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetDouble
double LiteNetLib::Utils::NetDataReader::GetDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetString
::StringW LiteNetLib::Utils::NetDataReader::GetString(int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetString
::StringW LiteNetLib::Utils::NetDataReader::GetString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetRemainingBytesSegment
::System::ArraySegment_1<uint8_t> LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemainingBytesSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ArraySegment_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetRemainingBytes
::ArrayW<uint8_t> LiteNetLib::Utils::NetDataReader::GetRemainingBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetRemainingBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemainingBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytes
void LiteNetLib::Utils::NetDataReader::GetBytes(::ArrayW<uint8_t> destination, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination, start, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytes
void LiteNetLib::Utils::NetDataReader::GetBytes(::ArrayW<uint8_t> destination, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetSBytesWithLength
::ArrayW<int8_t> LiteNetLib::Utils::NetDataReader::GetSBytesWithLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytesWithLength
::ArrayW<uint8_t> LiteNetLib::Utils::NetDataReader::GetBytesWithLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::GetBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekByte
uint8_t LiteNetLib::Utils::NetDataReader::PeekByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekSByte
int8_t LiteNetLib::Utils::NetDataReader::PeekSByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekBool
bool LiteNetLib::Utils::NetDataReader::PeekBool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekChar
::Il2CppChar LiteNetLib::Utils::NetDataReader::PeekChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekUShort
uint16_t LiteNetLib::Utils::NetDataReader::PeekUShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekShort
int16_t LiteNetLib::Utils::NetDataReader::PeekShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekLong
int64_t LiteNetLib::Utils::NetDataReader::PeekLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekULong
uint64_t LiteNetLib::Utils::NetDataReader::PeekULong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekInt
int LiteNetLib::Utils::NetDataReader::PeekInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekUInt
uint LiteNetLib::Utils::NetDataReader::PeekUInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekFloat
float LiteNetLib::Utils::NetDataReader::PeekFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekDouble
double LiteNetLib::Utils::NetDataReader::PeekDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekString
::StringW LiteNetLib::Utils::NetDataReader::PeekString(int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekString
::StringW LiteNetLib::Utils::NetDataReader::PeekString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::PeekString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetByte
bool LiteNetLib::Utils::NetDataReader::TryGetByte(ByRef<uint8_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetSByte
bool LiteNetLib::Utils::NetDataReader::TryGetSByte(ByRef<int8_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetBool
bool LiteNetLib::Utils::NetDataReader::TryGetBool(ByRef<bool> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetChar
bool LiteNetLib::Utils::NetDataReader::TryGetChar(ByRef<::Il2CppChar> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetShort
bool LiteNetLib::Utils::NetDataReader::TryGetShort(ByRef<int16_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int16_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetUShort
bool LiteNetLib::Utils::NetDataReader::TryGetUShort(ByRef<uint16_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint16_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetInt
bool LiteNetLib::Utils::NetDataReader::TryGetInt(ByRef<int> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetUInt
bool LiteNetLib::Utils::NetDataReader::TryGetUInt(ByRef<uint> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetLong
bool LiteNetLib::Utils::NetDataReader::TryGetLong(ByRef<int64_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetULong
bool LiteNetLib::Utils::NetDataReader::TryGetULong(ByRef<uint64_t> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetFloat
bool LiteNetLib::Utils::NetDataReader::TryGetFloat(ByRef<float> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetDouble
bool LiteNetLib::Utils::NetDataReader::TryGetDouble(ByRef<double> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetString
bool LiteNetLib::Utils::NetDataReader::TryGetString(ByRef<::StringW> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetStringArray
bool LiteNetLib::Utils::NetDataReader::TryGetStringArray(ByRef<::ArrayW<::StringW>> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::ArrayW<::StringW>&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetBytesWithLength
bool LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength(ByRef<::ArrayW<uint8_t>> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::ArrayW<uint8_t>&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.Clear
void LiteNetLib::Utils::NetDataReader::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 InitialSize
int LiteNetLib::Utils::NetDataWriter::_get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::_get_InitialSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "NetDataWriter", "InitialSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 InitialSize
void LiteNetLib::Utils::NetDataWriter::_set_InitialSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::_set_InitialSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NetDataWriter", "InitialSize", value));
}
// Autogenerated instance field getter
// Get instance field: protected System.Byte[] _data
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::Utils::NetDataWriter::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _position
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NetDataWriter::dyn__position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::dyn__position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_position"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _autoResize
[[deprecated("Use field access instead!")]] bool& LiteNetLib::Utils::NetDataWriter::dyn__autoResize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::dyn__autoResize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_autoResize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Capacity
int LiteNetLib::Utils::NetDataWriter::get_Capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::get_Capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Data
::ArrayW<uint8_t> LiteNetLib::Utils::NetDataWriter::get_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::get_Data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Length
int LiteNetLib::Utils::NetDataWriter::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::get_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromBytes
::LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromBytes(::ArrayW<uint8_t> bytes, bool copy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(copy)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, copy);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromBytes
::LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromBytes(::ArrayW<uint8_t> bytes, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromString
::LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromString(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::FromString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.ResizeIfNeed
void LiteNetLib::Utils::NetDataWriter::ResizeIfNeed(int newSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::ResizeIfNeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResizeIfNeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSize);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Reset
void LiteNetLib::Utils::NetDataWriter::Reset(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Reset
void LiteNetLib::Utils::NetDataWriter::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.CopyData
::ArrayW<uint8_t> LiteNetLib::Utils::NetDataWriter::CopyData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::CopyData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::ArrayW<uint8_t> data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutSBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength(::ArrayW<int8_t> data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutSBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength(::ArrayW<int8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutBytesWithLength(::ArrayW<uint8_t> data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutBytesWithLength(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::System::Array* arr, int sz) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr), ::il2cpp_utils::ExtractType(sz)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arr, sz);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<double> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<int64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<uint64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<uint> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<uint16_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<int16_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::ArrayW<::StringW> value, int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(maxLength)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::StringW value, int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(maxLength)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, maxLength);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetPacketProcessor
#include "LiteNetLib/Utils/NetPacketProcessor.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.HashCache`1
#include "LiteNetLib/Utils/NetPacketProcessor_HashCache_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate
#include "LiteNetLib/Utils/NetPacketProcessor_SubscribeDelegate.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass25_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass25_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass26_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass26_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass27_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass27_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass28_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass28_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass29_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass29_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass30_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass30_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass31_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass31_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass32_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass32_0_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetSerializer _netSerializer
[[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetSerializer*& LiteNetLib::Utils::NetPacketProcessor::dyn__netSerializer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::dyn__netSerializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netSerializer"))->offset;
  return *reinterpret_cast<::LiteNetLib::Utils::NetSerializer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.UInt64,LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate> _callbacks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate*>*& LiteNetLib::Utils::NetPacketProcessor::dyn__callbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::dyn__callbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callbacks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<uint64_t, ::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataWriter _netDataWriter
[[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetDataWriter*& LiteNetLib::Utils::NetPacketProcessor::dyn__netDataWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::dyn__netDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netDataWriter"))->offset;
  return *reinterpret_cast<::LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.GetCallbackFromData
::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate* LiteNetLib::Utils::NetPacketProcessor::GetCallbackFromData(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::GetCallbackFromData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCallbackFromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate*, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadAllPackets
void LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAllPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadAllPackets
void LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets(::LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAllPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadPacket
void LiteNetLib::Utils::NetPacketProcessor::ReadPacket(::LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::ReadPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadPacket
void LiteNetLib::Utils::NetPacketProcessor::ReadPacket(::LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::ReadPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate
#include "LiteNetLib/Utils/NetPacketProcessor_SubscribeDelegate.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.Invoke
void LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::Invoke(::LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.BeginInvoke
::System::IAsyncResult* LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::BeginInvoke(::LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, reader, userData, callback, object);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.EndInvoke
void LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.InvalidTypeException
#include "LiteNetLib/Utils/InvalidTypeException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.ParseException
#include "LiteNetLib/Utils/ParseException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCall`1
#include "LiteNetLib/Utils/NetSerializer_FastCall_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallSpecific`2
#include "LiteNetLib/Utils/NetSerializer_FastCallSpecific_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallSpecificAuto`2
#include "LiteNetLib/Utils/NetSerializer_FastCallSpecificAuto_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallStatic`2
#include "LiteNetLib/Utils/NetSerializer_FastCallStatic_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallStruct`2
#include "LiteNetLib/Utils/NetSerializer_FastCallStruct_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallClass`2
#include "LiteNetLib/Utils/NetSerializer_FastCallClass_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.IntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_IntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.UIntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_UIntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ShortSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ShortSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.UShortSerializer`1
#include "LiteNetLib/Utils/NetSerializer_UShortSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.LongSerializer`1
#include "LiteNetLib/Utils/NetSerializer_LongSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ULongSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ULongSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.SByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_SByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FloatSerializer`1
#include "LiteNetLib/Utils/NetSerializer_FloatSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.DoubleSerializer`1
#include "LiteNetLib/Utils/NetSerializer_DoubleSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.BoolSerializer`1
#include "LiteNetLib/Utils/NetSerializer_BoolSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CharSerializer`1
#include "LiteNetLib/Utils/NetSerializer_CharSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.IPEndPointSerializer`1
#include "LiteNetLib/Utils/NetSerializer_IPEndPointSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.StringSerializer`1
#include "LiteNetLib/Utils/NetSerializer_StringSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.EnumByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_EnumByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.EnumIntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_EnumIntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ClassInfo`1
#include "LiteNetLib/Utils/NetSerializer_ClassInfo_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomType
#include "LiteNetLib/Utils/NetSerializer_CustomType.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeStruct`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeStruct_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeClass`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeClass_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeStatic`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeStatic_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.Utils.NetDataWriter _writer
[[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetDataWriter*& LiteNetLib::Utils::NetSerializer::dyn__writer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetSerializer::dyn__writer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_writer"))->offset;
  return *reinterpret_cast<::LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _maxStringLength
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NetSerializer::dyn__maxStringLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetSerializer::dyn__maxStringLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxStringLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Type,LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomType> _registeredTypes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::LiteNetLib::Utils::NetSerializer::CustomType*>*& LiteNetLib::Utils::NetSerializer::dyn__registeredTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetSerializer::dyn__registeredTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registeredTypes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Type*, ::LiteNetLib::Utils::NetSerializer::CustomType*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomType
#include "LiteNetLib/Utils/NetSerializer_CustomType.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCall`1
#include "LiteNetLib/Utils/NetSerializer_FastCall_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpPacket
#include "LiteNetLib/Utils/NtpPacket.hpp"
// Including type: LiteNetLib.Utils.NtpLeapIndicator
#include "LiteNetLib/Utils/NtpLeapIndicator.hpp"
// Including type: LiteNetLib.Utils.NtpMode
#include "LiteNetLib/Utils/NtpMode.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.DateTime Epoch
::System::DateTime LiteNetLib::Utils::NtpPacket::_get_Epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::_get_Epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("LiteNetLib.Utils", "NtpPacket", "Epoch"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.DateTime Epoch
void LiteNetLib::Utils::NtpPacket::_set_Epoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::_set_Epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpPacket", "Epoch", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] <Bytes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::Utils::NtpPacket::dyn_$Bytes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::dyn_$Bytes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Bytes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.DateTime> <DestinationTimestamp>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::DateTime>& LiteNetLib::Utils::NtpPacket::dyn_$DestinationTimestamp$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::dyn_$DestinationTimestamp$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<DestinationTimestamp>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::System::DateTime>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Bytes
::ArrayW<uint8_t> LiteNetLib::Utils::NtpPacket::get_Bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_Bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_Bytes
void LiteNetLib::Utils::NtpPacket::set_Bytes(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::set_Bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_LeapIndicator
::LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpPacket::get_LeapIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_LeapIndicator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeapIndicator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpLeapIndicator, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_VersionNumber
int LiteNetLib::Utils::NtpPacket::get_VersionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_VersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_VersionNumber
void LiteNetLib::Utils::NtpPacket::set_VersionNumber(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::set_VersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Mode
::LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpPacket::get_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_Mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpMode, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_Mode
void LiteNetLib::Utils::NtpPacket::set_Mode(::LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::set_Mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Stratum
int LiteNetLib::Utils::NtpPacket::get_Stratum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_Stratum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Stratum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Poll
int LiteNetLib::Utils::NtpPacket::get_Poll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_Poll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Poll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Precision
int LiteNetLib::Utils::NtpPacket::get_Precision() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_Precision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Precision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RootDelay
::System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RootDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_RootDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RootDispersion
::System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RootDispersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_RootDispersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootDispersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReferenceId
uint LiteNetLib::Utils::NtpPacket::get_ReferenceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_ReferenceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReferenceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReferenceTimestamp
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::get_ReferenceTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_ReferenceTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReferenceTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_OriginTimestamp
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::get_OriginTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_OriginTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OriginTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReceiveTimestamp
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::get_ReceiveTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_ReceiveTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReceiveTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_TransmitTimestamp
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::get_TransmitTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_TransmitTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TransmitTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_TransmitTimestamp
void LiteNetLib::Utils::NtpPacket::set_TransmitTimestamp(::System::Nullable_1<::System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::set_TransmitTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TransmitTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_DestinationTimestamp
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::get_DestinationTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_DestinationTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DestinationTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_DestinationTimestamp
void LiteNetLib::Utils::NtpPacket::set_DestinationTimestamp(::System::Nullable_1<::System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::set_DestinationTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DestinationTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RoundTripTime
::System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RoundTripTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_RoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_CorrectionOffset
::System::TimeSpan LiteNetLib::Utils::NtpPacket::get_CorrectionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::get_CorrectionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CorrectionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket..cctor
void LiteNetLib::Utils::NtpPacket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.FromServerResponse
::LiteNetLib::Utils::NtpPacket* LiteNetLib::Utils::NtpPacket::FromServerResponse(::ArrayW<uint8_t> bytes, ::System::DateTime destinationTimestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::FromServerResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "FromServerResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(destinationTimestamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes, destinationTimestamp);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.ValidateRequest
void LiteNetLib::Utils::NtpPacket::ValidateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::ValidateRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.ValidateReply
void LiteNetLib::Utils::NtpPacket::ValidateReply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::ValidateReply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateReply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.CheckTimestamps
void LiteNetLib::Utils::NtpPacket::CheckTimestamps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::CheckTimestamps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckTimestamps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetDateTime64
::System::Nullable_1<::System::DateTime> LiteNetLib::Utils::NtpPacket::GetDateTime64(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::GetDateTime64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDateTime64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::System::DateTime>, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SetDateTime64
void LiteNetLib::Utils::NtpPacket::SetDateTime64(int offset, ::System::Nullable_1<::System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::SetDateTime64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDateTime64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offset, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetTimeSpan32
::System::TimeSpan LiteNetLib::Utils::NtpPacket::GetTimeSpan32(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::GetTimeSpan32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeSpan32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetUInt64BE
uint64_t LiteNetLib::Utils::NtpPacket::GetUInt64BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::GetUInt64BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt64BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SetUInt64BE
void LiteNetLib::Utils::NtpPacket::SetUInt64BE(int offset, uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::SetUInt64BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUInt64BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offset, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetInt32BE
int LiteNetLib::Utils::NtpPacket::GetInt32BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::GetInt32BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetUInt32BE
uint LiteNetLib::Utils::NtpPacket::GetUInt32BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::GetUInt32BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt32BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SwapEndianness
uint LiteNetLib::Utils::NtpPacket::SwapEndianness(uint x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::SwapEndianness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "SwapEndianness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SwapEndianness
uint64_t LiteNetLib::Utils::NtpPacket::SwapEndianness(uint64_t x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpPacket::SwapEndianness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "SwapEndianness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpLeapIndicator
#include "LiteNetLib/Utils/NtpLeapIndicator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator NoWarning
::LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_NoWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_get_NoWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "NoWarning"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator NoWarning
void LiteNetLib::Utils::NtpLeapIndicator::_set_NoWarning(::LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_set_NoWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "NoWarning", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas61Seconds
::LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas61Seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas61Seconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas61Seconds"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas61Seconds
void LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas61Seconds(::LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas61Seconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas61Seconds", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas59Seconds
::LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas59Seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas59Seconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas59Seconds"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas59Seconds
void LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas59Seconds(::LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas59Seconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas59Seconds", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator AlarmCondition
::LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_AlarmCondition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_get_AlarmCondition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "AlarmCondition"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator AlarmCondition
void LiteNetLib::Utils::NtpLeapIndicator::_set_AlarmCondition(::LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::_set_AlarmCondition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "AlarmCondition", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NtpLeapIndicator::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpLeapIndicator::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpMode
#include "LiteNetLib/Utils/NtpMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpMode Client
::LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpMode::_get_Client() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpMode::_get_Client");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpMode>("LiteNetLib.Utils", "NtpMode", "Client"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpMode Client
void LiteNetLib::Utils::NtpMode::_set_Client(::LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpMode::_set_Client");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpMode", "Client", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpMode Server
::LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpMode::_get_Server() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpMode::_get_Server");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LiteNetLib::Utils::NtpMode>("LiteNetLib.Utils", "NtpMode", "Server"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpMode Server
void LiteNetLib::Utils::NtpMode::_set_Server(::LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpMode::_set_Server");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpMode", "Server", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LiteNetLib::Utils::NtpMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpRequest
#include "LiteNetLib/Utils/NtpRequest.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LiteNetLib.Utils.NtpPacket
#include "LiteNetLib/Utils/NtpPacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultPort
int LiteNetLib::Utils::NtpRequest::_get_DefaultPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::_get_DefaultPort");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "NtpRequest", "DefaultPort"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultPort
void LiteNetLib::Utils::NtpRequest::_set_DefaultPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::_set_DefaultPort");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpRequest", "DefaultPort", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetSocket _socket
[[deprecated("Use field access instead!")]] ::LiteNetLib::NetSocket*& LiteNetLib::Utils::NtpRequest::dyn__socket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::dyn__socket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_socket"))->offset;
  return *reinterpret_cast<::LiteNetLib::NetSocket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<LiteNetLib.Utils.NtpPacket> _onRequestComplete
[[deprecated("Use field access instead!")]] ::System::Action_1<::LiteNetLib::Utils::NtpPacket*>*& LiteNetLib::Utils::NtpRequest::dyn__onRequestComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::dyn__onRequestComplete");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onRequestComplete"))->offset;
  return *reinterpret_cast<::System::Action_1<::LiteNetLib::Utils::NtpPacket*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Net.IPEndPoint _ntpEndPoint
[[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& LiteNetLib::Utils::NtpRequest::dyn__ntpEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::dyn__ntpEndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ntpEndPoint"))->offset;
  return *reinterpret_cast<::System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
::LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::System::Net::IPEndPoint* endPoint, ::System::Action_1<::LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, endPoint, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
::LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::System::Net::IPAddress* ipAddress, ::System::Action_1<::LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ipAddress), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ipAddress, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
::LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::StringW ntpServerAddress, int port, ::System::Action_1<::LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ntpServerAddress), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ntpServerAddress, port, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
::LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::StringW ntpServerAddress, ::System::Action_1<::LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ntpServerAddress), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodRethrow<::LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ntpServerAddress, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Send
void LiteNetLib::Utils::NtpRequest::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Close
void LiteNetLib::Utils::NtpRequest::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::Utils::NtpRequest::LiteNetLib_INetSocketListener_OnMessageReceived(::ArrayW<uint8_t> data, int length, ::System::Net::Sockets::SocketError errorCode, ::System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NtpRequest::LiteNetLib.INetSocketListener.OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Layers.Crc32cLayer
#include "LiteNetLib/Layers/Crc32cLayer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Layers.Crc32cLayer.ProcessInboundPacket
void LiteNetLib::Layers::Crc32cLayer::ProcessInboundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::Crc32cLayer::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated method: LiteNetLib.Layers.Crc32cLayer.ProcessOutBoundPacket
void LiteNetLib::Layers::Crc32cLayer::ProcessOutBoundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::Crc32cLayer::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 ExtraPacketSizeForLayer
[[deprecated("Use field access instead!")]] int& LiteNetLib::Layers::PacketLayerBase::dyn_ExtraPacketSizeForLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::PacketLayerBase::dyn_ExtraPacketSizeForLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ExtraPacketSizeForLayer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Layers.PacketLayerBase.ProcessInboundPacket
void LiteNetLib::Layers::PacketLayerBase::ProcessInboundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::PacketLayerBase::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated method: LiteNetLib.Layers.PacketLayerBase.ProcessOutBoundPacket
void LiteNetLib::Layers::PacketLayerBase::ProcessOutBoundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::PacketLayerBase::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Layers.XorEncryptLayer
#include "LiteNetLib/Layers/XorEncryptLayer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _byteKey
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& LiteNetLib::Layers::XorEncryptLayer::dyn__byteKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::XorEncryptLayer::dyn__byteKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_byteKey"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.SetKey
void LiteNetLib::Layers::XorEncryptLayer::SetKey(::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::XorEncryptLayer::SetKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.SetKey
void LiteNetLib::Layers::XorEncryptLayer::SetKey(::ArrayW<uint8_t> key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::XorEncryptLayer::SetKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.ProcessInboundPacket
void LiteNetLib::Layers::XorEncryptLayer::ProcessInboundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::XorEncryptLayer::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.ProcessOutBoundPacket
void LiteNetLib::Layers::XorEncryptLayer::ProcessOutBoundPacket(::System::Net::IPEndPoint* remoteEndPoint, ByRef<::ArrayW<uint8_t>> data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Layers::XorEncryptLayer::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, byref(data), byref(offset), byref(length));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.INVALIDATION_FLAGS
#include "LIV/SDK/Unity/INVALIDATION_FLAGS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS NONE
::LIV::SDK::Unity::INVALIDATION_FLAGS LIV::SDK::Unity::INVALIDATION_FLAGS::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::INVALIDATION_FLAGS>("LIV.SDK.Unity", "INVALIDATION_FLAGS", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS NONE
void LIV::SDK::Unity::INVALIDATION_FLAGS::_set_NONE(::LIV::SDK::Unity::INVALIDATION_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "INVALIDATION_FLAGS", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS HMD_CAMERA
::LIV::SDK::Unity::INVALIDATION_FLAGS LIV::SDK::Unity::INVALIDATION_FLAGS::_get_HMD_CAMERA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_get_HMD_CAMERA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::INVALIDATION_FLAGS>("LIV.SDK.Unity", "INVALIDATION_FLAGS", "HMD_CAMERA"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS HMD_CAMERA
void LIV::SDK::Unity::INVALIDATION_FLAGS::_set_HMD_CAMERA(::LIV::SDK::Unity::INVALIDATION_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_set_HMD_CAMERA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "INVALIDATION_FLAGS", "HMD_CAMERA", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS STAGE
::LIV::SDK::Unity::INVALIDATION_FLAGS LIV::SDK::Unity::INVALIDATION_FLAGS::_get_STAGE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_get_STAGE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::INVALIDATION_FLAGS>("LIV.SDK.Unity", "INVALIDATION_FLAGS", "STAGE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS STAGE
void LIV::SDK::Unity::INVALIDATION_FLAGS::_set_STAGE(::LIV::SDK::Unity::INVALIDATION_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_set_STAGE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "INVALIDATION_FLAGS", "STAGE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS MR_CAMERA_PREFAB
::LIV::SDK::Unity::INVALIDATION_FLAGS LIV::SDK::Unity::INVALIDATION_FLAGS::_get_MR_CAMERA_PREFAB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_get_MR_CAMERA_PREFAB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::INVALIDATION_FLAGS>("LIV.SDK.Unity", "INVALIDATION_FLAGS", "MR_CAMERA_PREFAB"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS MR_CAMERA_PREFAB
void LIV::SDK::Unity::INVALIDATION_FLAGS::_set_MR_CAMERA_PREFAB(::LIV::SDK::Unity::INVALIDATION_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_set_MR_CAMERA_PREFAB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "INVALIDATION_FLAGS", "MR_CAMERA_PREFAB", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS EXCLUDE_BEHAVIOURS
::LIV::SDK::Unity::INVALIDATION_FLAGS LIV::SDK::Unity::INVALIDATION_FLAGS::_get_EXCLUDE_BEHAVIOURS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_get_EXCLUDE_BEHAVIOURS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::INVALIDATION_FLAGS>("LIV.SDK.Unity", "INVALIDATION_FLAGS", "EXCLUDE_BEHAVIOURS"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS EXCLUDE_BEHAVIOURS
void LIV::SDK::Unity::INVALIDATION_FLAGS::_set_EXCLUDE_BEHAVIOURS(::LIV::SDK::Unity::INVALIDATION_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::_set_EXCLUDE_BEHAVIOURS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "INVALIDATION_FLAGS", "EXCLUDE_BEHAVIOURS", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& LIV::SDK::Unity::INVALIDATION_FLAGS::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::INVALIDATION_FLAGS::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.LIV
#include "LIV/SDK/Unity/LIV.hpp"
// Including type: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68
#include "LIV/SDK/Unity/LIV_-WaitForUnityEndOfFrame-d__68.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LIV.SDK.Unity.SDKRender
#include "LIV/SDK/Unity/SDKRender.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Action onActivate
[[deprecated("Use field access instead!")]] ::System::Action*& LIV::SDK::Unity::LIV::dyn_onActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onActivate"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPreRender
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPreRender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPreRender"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPreRenderBackground
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPreRenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPreRenderBackground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPreRenderBackground"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPostRenderBackground
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPostRenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPostRenderBackground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPostRenderBackground"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPreRenderForeground
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPreRenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPreRenderForeground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPreRenderForeground"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPostRenderForeground
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPostRenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPostRenderForeground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPostRenderForeground"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<LIV.SDK.Unity.SDKRender> onPostRender
[[deprecated("Use field access instead!")]] ::System::Action_1<::LIV::SDK::Unity::SDKRender*>*& LIV::SDK::Unity::LIV::dyn_onPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onPostRender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPostRender"))->offset;
  return *reinterpret_cast<::System::Action_1<::LIV::SDK::Unity::SDKRender*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action onDeactivate
[[deprecated("Use field access instead!")]] ::System::Action*& LIV::SDK::Unity::LIV::dyn_onDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn_onDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDeactivate"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _stage
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& LIV::SDK::Unity::LIV::dyn__stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__stage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stage"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _stageTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& LIV::SDK::Unity::LIV::dyn__stageTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__stageTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stageTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _HMDCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& LIV::SDK::Unity::LIV::dyn__HMDCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__HMDCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_HMDCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _MRCameraPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& LIV::SDK::Unity::LIV::dyn__MRCameraPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__MRCameraPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_MRCameraPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disableStandardAssets
[[deprecated("Use field access instead!")]] bool& LIV::SDK::Unity::LIV::dyn__disableStandardAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__disableStandardAssets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disableStandardAssets"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask _spectatorLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& LIV::SDK::Unity::LIV::dyn__spectatorLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__spectatorLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectatorLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _excludeBehaviours
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& LIV::SDK::Unity::LIV::dyn__excludeBehaviours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__excludeBehaviours");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_excludeBehaviours"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fixPostEffectsAlpha
[[deprecated("Use field access instead!")]] bool& LIV::SDK::Unity::LIV::dyn__fixPostEffectsAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__fixPostEffectsAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixPostEffectsAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isActive
[[deprecated("Use field access instead!")]] bool& LIV::SDK::Unity::LIV::dyn__isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__isActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.SDKRender _render
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKRender*& LIV::SDK::Unity::LIV::dyn__render() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__render");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_render"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::SDKRender**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _wasReady
[[deprecated("Use field access instead!")]] bool& LIV::SDK::Unity::LIV::dyn__wasReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__wasReady");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasReady"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.INVALIDATION_FLAGS _invalidate
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::INVALIDATION_FLAGS& LIV::SDK::Unity::LIV::dyn__invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__invalidate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_invalidate"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::INVALIDATION_FLAGS*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _stageCandidate
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& LIV::SDK::Unity::LIV::dyn__stageCandidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__stageCandidate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stageCandidate"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _HMDCameraCandidate
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& LIV::SDK::Unity::LIV::dyn__HMDCameraCandidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__HMDCameraCandidate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_HMDCameraCandidate"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _MRCameraPrefabCandidate
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& LIV::SDK::Unity::LIV::dyn__MRCameraPrefabCandidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__MRCameraPrefabCandidate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_MRCameraPrefabCandidate"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _excludeBehavioursCandidate
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& LIV::SDK::Unity::LIV::dyn__excludeBehavioursCandidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__excludeBehavioursCandidate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_excludeBehavioursCandidate"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enabled
[[deprecated("Use field access instead!")]] bool& LIV::SDK::Unity::LIV::dyn__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine _waitForEndOfFrameCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& LIV::SDK::Unity::LIV::dyn__waitForEndOfFrameCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::dyn__waitForEndOfFrameCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitForEndOfFrameCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_stage
::UnityEngine::Transform* LIV::SDK::Unity::LIV::get_stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_stage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_stage
void LIV::SDK::Unity::LIV::set_stage(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_stage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_trackedSpaceOrigin
::UnityEngine::Transform* LIV::SDK::Unity::LIV::get_trackedSpaceOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_trackedSpaceOrigin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackedSpaceOrigin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_trackedSpaceOrigin
void LIV::SDK::Unity::LIV::set_trackedSpaceOrigin(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_trackedSpaceOrigin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_trackedSpaceOrigin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_stageLocalToWorldMatrix
::UnityEngine::Matrix4x4 LIV::SDK::Unity::LIV::get_stageLocalToWorldMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_stageLocalToWorldMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stageLocalToWorldMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_stageWorldToLocalMatrix
::UnityEngine::Matrix4x4 LIV::SDK::Unity::LIV::get_stageWorldToLocalMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_stageWorldToLocalMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stageWorldToLocalMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_stageTransform
::UnityEngine::Transform* LIV::SDK::Unity::LIV::get_stageTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_stageTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stageTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_stageTransform
void LIV::SDK::Unity::LIV::set_stageTransform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_stageTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stageTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_HMDCamera
::UnityEngine::Camera* LIV::SDK::Unity::LIV::get_HMDCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_HMDCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HMDCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_HMDCamera
void LIV::SDK::Unity::LIV::set_HMDCamera(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_HMDCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HMDCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_MRCameraPrefab
::UnityEngine::Camera* LIV::SDK::Unity::LIV::get_MRCameraPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_MRCameraPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MRCameraPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_MRCameraPrefab
void LIV::SDK::Unity::LIV::set_MRCameraPrefab(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_MRCameraPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MRCameraPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_disableStandardAssets
bool LIV::SDK::Unity::LIV::get_disableStandardAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_disableStandardAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disableStandardAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_disableStandardAssets
void LIV::SDK::Unity::LIV::set_disableStandardAssets(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_disableStandardAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableStandardAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_spectatorLayerMask
::UnityEngine::LayerMask LIV::SDK::Unity::LIV::get_spectatorLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_spectatorLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spectatorLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_spectatorLayerMask
void LIV::SDK::Unity::LIV::set_spectatorLayerMask(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_spectatorLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spectatorLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_excludeBehaviours
::ArrayW<::StringW> LIV::SDK::Unity::LIV::get_excludeBehaviours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_excludeBehaviours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_excludeBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_excludeBehaviours
void LIV::SDK::Unity::LIV::set_excludeBehaviours(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_excludeBehaviours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_excludeBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_fixPostEffectsAlpha
bool LIV::SDK::Unity::LIV::get_fixPostEffectsAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_fixPostEffectsAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fixPostEffectsAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.set_fixPostEffectsAlpha
void LIV::SDK::Unity::LIV::set_fixPostEffectsAlpha(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::set_fixPostEffectsAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fixPostEffectsAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_isValid
bool LIV::SDK::Unity::LIV::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_isActive
bool LIV::SDK::Unity::LIV::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get__isReady
bool LIV::SDK::Unity::LIV::get__isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get__isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.get_render
::LIV::SDK::Unity::SDKRender* LIV::SDK::Unity::LIV::get_render() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::get_render");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::SDKRender*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.OnEnable
void LIV::SDK::Unity::LIV::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.Update
void LIV::SDK::Unity::LIV::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.OnDisable
void LIV::SDK::Unity::LIV::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.WaitForUnityEndOfFrame
::System::Collections::IEnumerator* LIV::SDK::Unity::LIV::WaitForUnityEndOfFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::WaitForUnityEndOfFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForUnityEndOfFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.Activate
void LIV::SDK::Unity::LIV::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.UpdateSDKReady
void LIV::SDK::Unity::LIV::UpdateSDKReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::UpdateSDKReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSDKReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.OnSDKReadyChanged
void LIV::SDK::Unity::LIV::OnSDKReadyChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::OnSDKReadyChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSDKReadyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LIV.SDK.Unity.LIV.OnSDKActivate
void LIV::SDK::Unity::LIV::OnSDKActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::OnSDKActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSDKActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.OnSDKDeactivate
void LIV::SDK::Unity::LIV::OnSDKDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::OnSDKDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSDKDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.CreateAssets
void LIV::SDK::Unity::LIV::CreateAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::CreateAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.DestroyAssets
void LIV::SDK::Unity::LIV::DestroyAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::DestroyAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.StartRenderCoroutine
void LIV::SDK::Unity::LIV::StartRenderCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::StartRenderCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartRenderCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.StopRenderCoroutine
void LIV::SDK::Unity::LIV::StopRenderCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::StopRenderCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopRenderCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.SubmitSDKOutput
void LIV::SDK::Unity::LIV::SubmitSDKOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::SubmitSDKOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitSDKOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV.Invalidate
void LIV::SDK::Unity::LIV::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68
#include "LIV/SDK/Unity/LIV_-WaitForUnityEndOfFrame-d__68.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LIV.SDK.Unity.LIV <>4__this
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::LIV*& LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::LIV**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68.System.Collections.IEnumerator.get_Current
::Il2CppObject* LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68.System.IDisposable.Dispose
void LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68.MoveNext
bool LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.LIV/LIV.SDK.Unity.<WaitForUnityEndOfFrame>d__68.System.Collections.IEnumerator.Reset
void LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::$WaitForUnityEndOfFrame$d__68::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.SDKBridge
#include "LIV/SDK/Unity/SDKBridge.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: LIV.SDK.Unity.SDKTexture
#include "LIV/SDK/Unity/SDKTexture.hpp"
// Including type: LIV.SDK.Unity.SDKApplicationOutput
#include "LIV/SDK/Unity/SDKApplicationOutput.hpp"
// Including type: LIV.SDK.Unity.SDKOutputFrame
#include "LIV/SDK/Unity/SDKOutputFrame.hpp"
// Including type: LIV.SDK.Unity.SDKPlane
#include "LIV/SDK/Unity/SDKPlane.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<LIV.SDK.Unity.SDKInputFrame> _injection_SDKInputFrame
::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKInputFrame> LIV::SDK::Unity::SDKBridge::_get__injection_SDKInputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_SDKInputFrame");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKInputFrame>>("LIV.SDK.Unity", "SDKBridge", "_injection_SDKInputFrame"));
}
// Autogenerated static field setter
// Set static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<LIV.SDK.Unity.SDKInputFrame> _injection_SDKInputFrame
void LIV::SDK::Unity::SDKBridge::_set__injection_SDKInputFrame(::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKInputFrame> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_SDKInputFrame");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_SDKInputFrame", value));
}
// Autogenerated static field getter
// Get static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<LIV.SDK.Unity.SDKResolution> _injection_SDKResolution
::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKResolution> LIV::SDK::Unity::SDKBridge::_get__injection_SDKResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_SDKResolution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKResolution>>("LIV.SDK.Unity", "SDKBridge", "_injection_SDKResolution"));
}
// Autogenerated static field setter
// Set static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<LIV.SDK.Unity.SDKResolution> _injection_SDKResolution
void LIV::SDK::Unity::SDKBridge::_set__injection_SDKResolution(::LIV::SDK::Unity::SDKBridge::SDKInjection_1<::LIV::SDK::Unity::SDKResolution> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_SDKResolution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_SDKResolution", value));
}
// Autogenerated static field getter
// Get static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<System.Boolean> _injection_IsActive
::LIV::SDK::Unity::SDKBridge::SDKInjection_1<bool> LIV::SDK::Unity::SDKBridge::_get__injection_IsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_IsActive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::SDKBridge::SDKInjection_1<bool>>("LIV.SDK.Unity", "SDKBridge", "_injection_IsActive"));
}
// Autogenerated static field setter
// Set static field: static private LIV.SDK.Unity.SDKBridge/LIV.SDK.Unity.SDKInjection`1<System.Boolean> _injection_IsActive
void LIV::SDK::Unity::SDKBridge::_set__injection_IsActive(::LIV::SDK::Unity::SDKBridge::SDKInjection_1<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_IsActive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_IsActive", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _injection_DisableSubmit
bool LIV::SDK::Unity::SDKBridge::_get__injection_DisableSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_DisableSubmit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LIV.SDK.Unity", "SDKBridge", "_injection_DisableSubmit"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _injection_DisableSubmit
void LIV::SDK::Unity::SDKBridge::_set__injection_DisableSubmit(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_DisableSubmit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_DisableSubmit", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _injection_DisableSubmitApplicationOutput
bool LIV::SDK::Unity::SDKBridge::_get__injection_DisableSubmitApplicationOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_DisableSubmitApplicationOutput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LIV.SDK.Unity", "SDKBridge", "_injection_DisableSubmitApplicationOutput"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _injection_DisableSubmitApplicationOutput
void LIV::SDK::Unity::SDKBridge::_set__injection_DisableSubmitApplicationOutput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_DisableSubmitApplicationOutput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_DisableSubmitApplicationOutput", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _injection_DisableAddTexture
bool LIV::SDK::Unity::SDKBridge::_get__injection_DisableAddTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_DisableAddTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LIV.SDK.Unity", "SDKBridge", "_injection_DisableAddTexture"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _injection_DisableAddTexture
void LIV::SDK::Unity::SDKBridge::_set__injection_DisableAddTexture(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_DisableAddTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_DisableAddTexture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _injection_DisableCreateFrame
bool LIV::SDK::Unity::SDKBridge::_get__injection_DisableCreateFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_get__injection_DisableCreateFrame");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LIV.SDK.Unity", "SDKBridge", "_injection_DisableCreateFrame"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _injection_DisableCreateFrame
void LIV::SDK::Unity::SDKBridge::_set__injection_DisableCreateFrame(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::_set__injection_DisableCreateFrame");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKBridge", "_injection_DisableCreateFrame", value));
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.get_IsActive
bool LIV::SDK::Unity::SDKBridge::get_IsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::get_IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "get_IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge..cctor
void LIV::SDK::Unity::SDKBridge::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddStringToChannel
int LIV::SDK::Unity::SDKBridge::AddStringToChannel(int slot, ::System::IntPtr str, int length, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddStringToChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddStringToChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slot), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, slot, str, length, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.addtexture
int LIV::SDK::Unity::SDKBridge::addtexture(::System::IntPtr sourcetexture, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::addtexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "addtexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourcetexture), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourcetexture, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetObjectTimeStamp
uint64_t LIV::SDK::Unity::SDKBridge::GetObjectTimeStamp(::System::IntPtr obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetObjectTimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetObjectTimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetCurrentTimeTicks
uint64_t LIV::SDK::Unity::SDKBridge::GetCurrentTimeTicks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetCurrentTimeTicks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetCurrentTimeTicks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetIsCaptureActive
bool LIV::SDK::Unity::SDKBridge::GetIsCaptureActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetIsCaptureActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetIsCaptureActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetRenderEventFunc
::System::IntPtr LIV::SDK::Unity::SDKBridge::GetRenderEventFunc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetRenderEventFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetRenderEventFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetCompositorChannelObject
::System::IntPtr LIV::SDK::Unity::SDKBridge::GetCompositorChannelObject(int slot, uint64_t tag, uint64_t timestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetCompositorChannelObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetCompositorChannelObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slot), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(timestamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, slot, tag, timestamp);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddObjectToCompositorChannel
int LIV::SDK::Unity::SDKBridge::AddObjectToCompositorChannel(int slot, ::System::IntPtr obj, int objectsize, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddObjectToCompositorChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddObjectToCompositorChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slot), ::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(objectsize), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, slot, obj, objectsize, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddObjectToFrame
int LIV::SDK::Unity::SDKBridge::AddObjectToFrame(::System::IntPtr obj, int objectsize, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddObjectToFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddObjectToFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(objectsize), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, objectsize, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.updatinputframe
::System::IntPtr LIV::SDK::Unity::SDKBridge::updatinputframe(::System::IntPtr InputFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::updatinputframe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "updatinputframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(InputFrame)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, InputFrame);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetViewportTexture
::System::IntPtr LIV::SDK::Unity::SDKBridge::GetViewportTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetViewportTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetViewportTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetChannelObject
::System::IntPtr LIV::SDK::Unity::SDKBridge::GetChannelObject(int slot, uint64_t tag, uint64_t timestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetChannelObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetChannelObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slot), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(timestamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, slot, tag, timestamp);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddObjectToChannel
int LIV::SDK::Unity::SDKBridge::AddObjectToChannel(int slot, ::System::IntPtr obj, int objectsize, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddObjectToChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddObjectToChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slot), ::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(objectsize), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, slot, obj, objectsize, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.Tag
uint64_t LIV::SDK::Unity::SDKBridge::Tag(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::Tag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "Tag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddString
void LIV::SDK::Unity::SDKBridge::AddString(::StringW tag, ::StringW value, int slot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(slot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tag, value, slot);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddTexture
void LIV::SDK::Unity::SDKBridge::AddTexture(::LIV::SDK::Unity::SDKTexture texture, uint64_t tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(tag)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, tag);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetObjectTime
uint64_t LIV::SDK::Unity::SDKBridge::GetObjectTime(::System::IntPtr objectptr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetObjectTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetObjectTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectptr)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, objectptr);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetCurrentTime
uint64_t LIV::SDK::Unity::SDKBridge::GetCurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetCurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetCurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.IssuePluginEvent
void LIV::SDK::Unity::SDKBridge::IssuePluginEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::IssuePluginEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "IssuePluginEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.SubmitApplicationOutput
void LIV::SDK::Unity::SDKBridge::SubmitApplicationOutput(::LIV::SDK::Unity::SDKApplicationOutput applicationOutput) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::SubmitApplicationOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "SubmitApplicationOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(applicationOutput)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, applicationOutput);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.UpdateInputFrame
bool LIV::SDK::Unity::SDKBridge::UpdateInputFrame(ByRef<::LIV::SDK::Unity::SDKInputFrame> setframe) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::UpdateInputFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "UpdateInputFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(setframe)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(setframe));
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetViewfinderTexture
::LIV::SDK::Unity::SDKTexture LIV::SDK::Unity::SDKBridge::GetViewfinderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetViewfinderTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetViewfinderTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::SDKTexture, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.AddTexture
void LIV::SDK::Unity::SDKBridge::AddTexture(::LIV::SDK::Unity::SDKTexture texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::AddTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "AddTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.CreateFrame
void LIV::SDK::Unity::SDKBridge::CreateFrame(::LIV::SDK::Unity::SDKOutputFrame frame) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::CreateFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "CreateFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frame)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frame);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.SetGroundPlane
void LIV::SDK::Unity::SDKBridge::SetGroundPlane(::LIV::SDK::Unity::SDKPlane groundPlane) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::SetGroundPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "SetGroundPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groundPlane)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, groundPlane);
}
// Autogenerated method: LIV.SDK.Unity.SDKBridge.GetResolution
bool LIV::SDK::Unity::SDKBridge::GetResolution(ByRef<::LIV::SDK::Unity::SDKResolution> sdkResolution) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKBridge::GetResolution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKBridge", "GetResolution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sdkResolution)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(sdkResolution));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.SDKRender
#include "LIV/SDK/Unity/SDKRender.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: LIV.SDK.Unity.LIV
#include "LIV/SDK/Unity/LIV.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.ColorWriteMask
#include "UnityEngine/Rendering/ColorWriteMask.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_ID
#include "LIV/SDK/Unity/TEXTURE_ID.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _clipPlaneCommandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneCommandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneCommandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _combineAlphaCommandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& LIV::SDK::Unity::SDKRender::dyn__combineAlphaCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__combineAlphaCommandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_combineAlphaCommandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _captureTextureCommandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& LIV::SDK::Unity::SDKRender::dyn__captureTextureCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__captureTextureCommandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_captureTextureCommandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _applyTextureCommandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& LIV::SDK::Unity::SDKRender::dyn__applyTextureCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__applyTextureCommandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_applyTextureCommandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _optimizedRenderingCommandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& LIV::SDK::Unity::SDKRender::dyn__optimizedRenderingCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__optimizedRenderingCommandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_optimizedRenderingCommandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CameraEvent _clipPlaneCameraEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CameraEvent& LIV::SDK::Unity::SDKRender::dyn__clipPlaneCameraEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneCameraEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneCameraEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CameraEvent*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CameraEvent _optimizedRenderingCameraEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CameraEvent& LIV::SDK::Unity::SDKRender::dyn__optimizedRenderingCameraEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__optimizedRenderingCameraEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_optimizedRenderingCameraEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CameraEvent*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _clipPlaneMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _clipPlaneSimpleMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneSimpleMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneSimpleMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneSimpleMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _clipPlaneSimpleDebugMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneSimpleDebugMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneSimpleDebugMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneSimpleDebugMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _clipPlaneComplexMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneComplexMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneComplexMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneComplexMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _clipPlaneComplexDebugMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__clipPlaneComplexDebugMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__clipPlaneComplexDebugMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clipPlaneComplexDebugMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _writeOpaqueToAlphaMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__writeOpaqueToAlphaMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__writeOpaqueToAlphaMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_writeOpaqueToAlphaMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _combineAlphaMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__combineAlphaMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__combineAlphaMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_combineAlphaMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _writeMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__writeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__writeMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_writeMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _forceForwardRenderingMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& LIV::SDK::Unity::SDKRender::dyn__forceForwardRenderingMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__forceForwardRenderingMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forceForwardRenderingMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _backgroundRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& LIV::SDK::Unity::SDKRender::dyn__backgroundRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__backgroundRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_backgroundRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _foregroundRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& LIV::SDK::Unity::SDKRender::dyn__foregroundRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__foregroundRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_foregroundRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _optimizedRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& LIV::SDK::Unity::SDKRender::dyn__optimizedRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__optimizedRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_optimizedRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _complexClipPlaneRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& LIV::SDK::Unity::SDKRender::dyn__complexClipPlaneRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__complexClipPlaneRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_complexClipPlaneRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.LIV _liv
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::LIV*& LIV::SDK::Unity::SDKRender::dyn__liv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__liv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_liv"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::LIV**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.SDKOutputFrame _outputFrame
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKOutputFrame& LIV::SDK::Unity::SDKRender::dyn__outputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__outputFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputFrame"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::SDKOutputFrame*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.SDKInputFrame _inputFrame
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKInputFrame& LIV::SDK::Unity::SDKRender::dyn__inputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__inputFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputFrame"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::SDKInputFrame*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.SDKResolution _resolution
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKResolution& LIV::SDK::Unity::SDKRender::dyn__resolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__resolution");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resolution"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::SDKResolution*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _cameraInstance
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& LIV::SDK::Unity::SDKRender::dyn__cameraInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__cameraInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cameraInstance"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LIV.SDK.Unity.SDKPose _requestedPose
[[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKPose& LIV::SDK::Unity::SDKRender::dyn__requestedPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__requestedPose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestedPose"))->offset;
  return *reinterpret_cast<::LIV::SDK::Unity::SDKPose*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _requestedPoseFrameIndex
[[deprecated("Use field access instead!")]] int& LIV::SDK::Unity::SDKRender::dyn__requestedPoseFrameIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::dyn__requestedPoseFrameIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestedPoseFrameIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_useDeferredRendering
bool LIV::SDK::Unity::SDKRender::get_useDeferredRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_useDeferredRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useDeferredRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_interlacedRendering
bool LIV::SDK::Unity::SDKRender::get_interlacedRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_interlacedRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interlacedRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_canRenderBackground
bool LIV::SDK::Unity::SDKRender::get_canRenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_canRenderBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canRenderBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_canRenderForeground
bool LIV::SDK::Unity::SDKRender::get_canRenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_canRenderForeground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canRenderForeground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_canRenderOptimized
bool LIV::SDK::Unity::SDKRender::get_canRenderOptimized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_canRenderOptimized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canRenderOptimized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_liv
::LIV::SDK::Unity::LIV* LIV::SDK::Unity::SDKRender::get_liv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_liv");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_liv", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::LIV*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_outputFrame
::LIV::SDK::Unity::SDKOutputFrame LIV::SDK::Unity::SDKRender::get_outputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_outputFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::SDKOutputFrame, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_inputFrame
::LIV::SDK::Unity::SDKInputFrame LIV::SDK::Unity::SDKRender::get_inputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_inputFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inputFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::SDKInputFrame, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_resolution
::LIV::SDK::Unity::SDKResolution LIV::SDK::Unity::SDKRender::get_resolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_resolution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resolution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LIV::SDK::Unity::SDKResolution, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_cameraInstance
::UnityEngine::Camera* LIV::SDK::Unity::SDKRender::get_cameraInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_cameraInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cameraInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_cameraReference
::UnityEngine::Camera* LIV::SDK::Unity::SDKRender::get_cameraReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_cameraReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cameraReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_hmdCamera
::UnityEngine::Camera* LIV::SDK::Unity::SDKRender::get_hmdCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_hmdCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmdCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_stage
::UnityEngine::Transform* LIV::SDK::Unity::SDKRender::get_stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_stage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_stageTransform
::UnityEngine::Transform* LIV::SDK::Unity::SDKRender::get_stageTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_stageTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stageTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_stageLocalToWorldMatrix
::UnityEngine::Matrix4x4 LIV::SDK::Unity::SDKRender::get_stageLocalToWorldMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_stageLocalToWorldMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stageLocalToWorldMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_localToWorldMatrix
::UnityEngine::Matrix4x4 LIV::SDK::Unity::SDKRender::get_localToWorldMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_localToWorldMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localToWorldMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_spectatorLayerMask
int LIV::SDK::Unity::SDKRender::get_spectatorLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_spectatorLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spectatorLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_disableStandardAssets
bool LIV::SDK::Unity::SDKRender::get_disableStandardAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_disableStandardAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disableStandardAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.get_canSetPose
bool LIV::SDK::Unity::SDKRender::get_canSetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::get_canSetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canSetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.GetClipPlaneMaterial
::UnityEngine::Material* LIV::SDK::Unity::SDKRender::GetClipPlaneMaterial(bool debugClipPlane, bool complexClipPlane, ::UnityEngine::Rendering::ColorWriteMask colorWriteMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::GetClipPlaneMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClipPlaneMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(debugClipPlane), ::il2cpp_utils::ExtractType(complexClipPlane), ::il2cpp_utils::ExtractType(colorWriteMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method, debugClipPlane, complexClipPlane, colorWriteMask);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.GetGroundClipPlaneMaterial
::UnityEngine::Material* LIV::SDK::Unity::SDKRender::GetGroundClipPlaneMaterial(bool debugClipPlane, ::UnityEngine::Rendering::ColorWriteMask colorWriteMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::GetGroundClipPlaneMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGroundClipPlaneMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(debugClipPlane), ::il2cpp_utils::ExtractType(colorWriteMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method, debugClipPlane, colorWriteMask);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.UpdateCameraSettings
void LIV::SDK::Unity::SDKRender::UpdateCameraSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::UpdateCameraSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCameraSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.Render
void LIV::SDK::Unity::SDKRender::Render() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::Render");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.RenderBackground
void LIV::SDK::Unity::SDKRender::RenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::RenderBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.RenderForeground
void LIV::SDK::Unity::SDKRender::RenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::RenderForeground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderForeground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.RenderOptimized
void LIV::SDK::Unity::SDKRender::RenderOptimized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::RenderOptimized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderOptimized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.CreateAssets
void LIV::SDK::Unity::SDKRender::CreateAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::CreateAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.DestroyAssets
void LIV::SDK::Unity::SDKRender::DestroyAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::DestroyAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.Dispose
void LIV::SDK::Unity::SDKRender::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.SetPose
bool LIV::SDK::Unity::SDKRender::SetPose(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float verticalFieldOfView, bool useLocalSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::SetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(verticalFieldOfView), ::il2cpp_utils::ExtractType(useLocalSpace)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, position, rotation, verticalFieldOfView, useLocalSpace);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.SetGroundPlane
void LIV::SDK::Unity::SDKRender::SetGroundPlane(float distance, ::UnityEngine::Vector3 normal, bool useLocalSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::SetGroundPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGroundPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(useLocalSpace)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance, normal, useLocalSpace);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.SetGroundPlane
void LIV::SDK::Unity::SDKRender::SetGroundPlane(::UnityEngine::Plane plane, bool useLocalSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::SetGroundPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGroundPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plane), ::il2cpp_utils::ExtractType(useLocalSpace)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, plane, useLocalSpace);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.SetGroundPlane
void LIV::SDK::Unity::SDKRender::SetGroundPlane(::UnityEngine::Transform* transform, bool useLocalSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::SetGroundPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGroundPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(useLocalSpace)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transform, useLocalSpace);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.ReleaseBridgePoseControl
void LIV::SDK::Unity::SDKRender::ReleaseBridgePoseControl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::ReleaseBridgePoseControl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseBridgePoseControl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.UpdateBridgeResolution
void LIV::SDK::Unity::SDKRender::UpdateBridgeResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::UpdateBridgeResolution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBridgeResolution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.UpdateBridgeInputFrame
void LIV::SDK::Unity::SDKRender::UpdateBridgeInputFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::UpdateBridgeInputFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBridgeInputFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.InvokePreRender
void LIV::SDK::Unity::SDKRender::InvokePreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::InvokePreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.IvokePostRender
void LIV::SDK::Unity::SDKRender::IvokePostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::IvokePostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IvokePostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.InvokePreRenderBackground
void LIV::SDK::Unity::SDKRender::InvokePreRenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::InvokePreRenderBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePreRenderBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.InvokePostRenderBackground
void LIV::SDK::Unity::SDKRender::InvokePostRenderBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::InvokePostRenderBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePostRenderBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.InvokePreRenderForeground
void LIV::SDK::Unity::SDKRender::InvokePreRenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::InvokePreRenderForeground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePreRenderForeground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.InvokePostRenderForeground
void LIV::SDK::Unity::SDKRender::InvokePostRenderForeground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::InvokePostRenderForeground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePostRenderForeground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.CreateBackgroundTexture
void LIV::SDK::Unity::SDKRender::CreateBackgroundTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::CreateBackgroundTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBackgroundTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.CreateForegroundTexture
void LIV::SDK::Unity::SDKRender::CreateForegroundTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::CreateForegroundTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateForegroundTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.CreateOptimizedTexture
void LIV::SDK::Unity::SDKRender::CreateOptimizedTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::CreateOptimizedTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOptimizedTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.CreateComplexClipPlaneTexture
void LIV::SDK::Unity::SDKRender::CreateComplexClipPlaneTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::CreateComplexClipPlaneTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateComplexClipPlaneTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.UpdateTextures
void LIV::SDK::Unity::SDKRender::UpdateTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::UpdateTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKRender.SendTextureToBridge
void LIV::SDK::Unity::SDKRender::SendTextureToBridge(::UnityEngine::RenderTexture* texture, ::LIV::SDK::Unity::TEXTURE_ID id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::SendTextureToBridge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendTextureToBridge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(id)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, texture, id);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.SDKShaders
#include "LIV/SDK/Unity/SDKShaders.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 LIV_COLOR_MASK
int LIV::SDK::Unity::SDKShaders::_get_LIV_COLOR_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_COLOR_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LIV.SDK.Unity", "SDKShaders", "LIV_COLOR_MASK"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 LIV_COLOR_MASK
void LIV::SDK::Unity::SDKShaders::_set_LIV_COLOR_MASK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_COLOR_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_COLOR_MASK", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 LIV_TESSELLATION_PROPERTY
int LIV::SDK::Unity::SDKShaders::_get_LIV_TESSELLATION_PROPERTY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_TESSELLATION_PROPERTY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LIV.SDK.Unity", "SDKShaders", "LIV_TESSELLATION_PROPERTY"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 LIV_TESSELLATION_PROPERTY
void LIV::SDK::Unity::SDKShaders::_set_LIV_TESSELLATION_PROPERTY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_TESSELLATION_PROPERTY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_TESSELLATION_PROPERTY", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY
int LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY
void LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_MR_FOREGROUND_KEYWORD
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_MR_FOREGROUND_KEYWORD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_MR_FOREGROUND_KEYWORD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_MR_FOREGROUND_KEYWORD"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_MR_FOREGROUND_KEYWORD
void LIV::SDK::Unity::SDKShaders::_set_LIV_MR_FOREGROUND_KEYWORD(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_MR_FOREGROUND_KEYWORD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_MR_FOREGROUND_KEYWORD", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_MR_BACKGROUND_KEYWORD
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_MR_BACKGROUND_KEYWORD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_MR_BACKGROUND_KEYWORD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_MR_BACKGROUND_KEYWORD"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_MR_BACKGROUND_KEYWORD
void LIV::SDK::Unity::SDKShaders::_set_LIV_MR_BACKGROUND_KEYWORD(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_MR_BACKGROUND_KEYWORD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_MR_BACKGROUND_KEYWORD", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_MR_KEYWORD
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_MR_KEYWORD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_MR_KEYWORD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_MR_KEYWORD"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_MR_KEYWORD
void LIV::SDK::Unity::SDKShaders::_set_LIV_MR_KEYWORD(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_MR_KEYWORD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_MR_KEYWORD", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_CLIP_PLANE_SIMPLE_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_SIMPLE_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_SIMPLE_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_SIMPLE_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_CLIP_PLANE_SIMPLE_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_SIMPLE_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_SIMPLE_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_SIMPLE_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_CLIP_PLANE_COMPLEX_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_COMPLEX_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_COMPLEX_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_COMPLEX_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_CLIP_PLANE_COMPLEX_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_COMPLEX_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_COMPLEX_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_COMPLEX_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_WRITE_OPAQUE_TO_ALPHA_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_WRITE_OPAQUE_TO_ALPHA_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_WRITE_OPAQUE_TO_ALPHA_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_WRITE_OPAQUE_TO_ALPHA_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_WRITE_OPAQUE_TO_ALPHA_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_WRITE_OPAQUE_TO_ALPHA_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_WRITE_OPAQUE_TO_ALPHA_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_WRITE_OPAQUE_TO_ALPHA_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_COMBINE_ALPHA_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_COMBINE_ALPHA_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_COMBINE_ALPHA_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_COMBINE_ALPHA_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_COMBINE_ALPHA_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_COMBINE_ALPHA_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_COMBINE_ALPHA_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_COMBINE_ALPHA_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_WRITE_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_WRITE_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_WRITE_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_WRITE_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_WRITE_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_WRITE_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_WRITE_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_WRITE_SHADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.String LIV_FORCE_FORWARD_RENDERING_SHADER
::StringW LIV::SDK::Unity::SDKShaders::_get_LIV_FORCE_FORWARD_RENDERING_SHADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_get_LIV_FORCE_FORWARD_RENDERING_SHADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKShaders", "LIV_FORCE_FORWARD_RENDERING_SHADER"));
}
// Autogenerated static field setter
// Set static field: static public System.String LIV_FORCE_FORWARD_RENDERING_SHADER
void LIV::SDK::Unity::SDKShaders::_set_LIV_FORCE_FORWARD_RENDERING_SHADER(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::_set_LIV_FORCE_FORWARD_RENDERING_SHADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKShaders", "LIV_FORCE_FORWARD_RENDERING_SHADER", value));
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders..cctor
void LIV::SDK::Unity::SDKShaders::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StartRendering
void LIV::SDK::Unity::SDKShaders::StartRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StartRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StartRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StopRendering
void LIV::SDK::Unity::SDKShaders::StopRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StopRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StopRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StartForegroundRendering
void LIV::SDK::Unity::SDKShaders::StartForegroundRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StartForegroundRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StartForegroundRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StopForegroundRendering
void LIV::SDK::Unity::SDKShaders::StopForegroundRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StopForegroundRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StopForegroundRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StartBackgroundRendering
void LIV::SDK::Unity::SDKShaders::StartBackgroundRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StartBackgroundRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StartBackgroundRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LIV.SDK.Unity.SDKShaders.StopBackgroundRendering
void LIV::SDK::Unity::SDKShaders::StopBackgroundRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKShaders::StopBackgroundRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKShaders", "StopBackgroundRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.SDKConstants
#include "LIV/SDK/Unity/SDKConstants.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String SDK_ID
::StringW LIV::SDK::Unity::SDKConstants::_get_SDK_ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_get_SDK_ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKConstants", "SDK_ID"));
}
// Autogenerated static field setter
// Set static field: static public System.String SDK_ID
void LIV::SDK::Unity::SDKConstants::_set_SDK_ID(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_set_SDK_ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKConstants", "SDK_ID", value));
}
// Autogenerated static field getter
// Get static field: static public System.String SDK_VERSION
::StringW LIV::SDK::Unity::SDKConstants::_get_SDK_VERSION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_get_SDK_VERSION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKConstants", "SDK_VERSION"));
}
// Autogenerated static field setter
// Set static field: static public System.String SDK_VERSION
void LIV::SDK::Unity::SDKConstants::_set_SDK_VERSION(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_set_SDK_VERSION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKConstants", "SDK_VERSION", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ENGINE_NAME
::StringW LIV::SDK::Unity::SDKConstants::_get_ENGINE_NAME() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_get_ENGINE_NAME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("LIV.SDK.Unity", "SDKConstants", "ENGINE_NAME"));
}
// Autogenerated static field setter
// Set static field: static public System.String ENGINE_NAME
void LIV::SDK::Unity::SDKConstants::_set_ENGINE_NAME(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKConstants::_set_ENGINE_NAME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "SDKConstants", "ENGINE_NAME", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.PRIORITY
#include "LIV/SDK/Unity/PRIORITY.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.PRIORITY NONE
::LIV::SDK::Unity::PRIORITY LIV::SDK::Unity::PRIORITY::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::PRIORITY::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::PRIORITY>("LIV.SDK.Unity", "PRIORITY", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.PRIORITY NONE
void LIV::SDK::Unity::PRIORITY::_set_NONE(::LIV::SDK::Unity::PRIORITY value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::PRIORITY::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "PRIORITY", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.PRIORITY GAME
::LIV::SDK::Unity::PRIORITY LIV::SDK::Unity::PRIORITY::_get_GAME() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::PRIORITY::_get_GAME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::PRIORITY>("LIV.SDK.Unity", "PRIORITY", "GAME"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.PRIORITY GAME
void LIV::SDK::Unity::PRIORITY::_set_GAME(::LIV::SDK::Unity::PRIORITY value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::PRIORITY::_set_GAME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "PRIORITY", "GAME", value));
}
// Autogenerated instance field getter
// Get instance field: public System.SByte value__
[[deprecated("Use field access instead!")]] int8_t& LIV::SDK::Unity::PRIORITY::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::PRIORITY::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.FEATURES
#include "LIV/SDK/Unity/FEATURES.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES NONE
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES NONE
void LIV::SDK::Unity::FEATURES::_set_NONE(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES BACKGROUND_RENDER
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_BACKGROUND_RENDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_BACKGROUND_RENDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "BACKGROUND_RENDER"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES BACKGROUND_RENDER
void LIV::SDK::Unity::FEATURES::_set_BACKGROUND_RENDER(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_BACKGROUND_RENDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "BACKGROUND_RENDER", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES FOREGROUND_RENDER
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_FOREGROUND_RENDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_FOREGROUND_RENDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "FOREGROUND_RENDER"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES FOREGROUND_RENDER
void LIV::SDK::Unity::FEATURES::_set_FOREGROUND_RENDER(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_FOREGROUND_RENDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "FOREGROUND_RENDER", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES COMPLEX_CLIP_PLANE
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_COMPLEX_CLIP_PLANE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_COMPLEX_CLIP_PLANE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "COMPLEX_CLIP_PLANE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES COMPLEX_CLIP_PLANE
void LIV::SDK::Unity::FEATURES::_set_COMPLEX_CLIP_PLANE(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_COMPLEX_CLIP_PLANE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "COMPLEX_CLIP_PLANE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES BACKGROUND_DEPTH_RENDER
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_BACKGROUND_DEPTH_RENDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_BACKGROUND_DEPTH_RENDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "BACKGROUND_DEPTH_RENDER"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES BACKGROUND_DEPTH_RENDER
void LIV::SDK::Unity::FEATURES::_set_BACKGROUND_DEPTH_RENDER(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_BACKGROUND_DEPTH_RENDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "BACKGROUND_DEPTH_RENDER", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES OVERRIDE_POST_PROCESSING
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_OVERRIDE_POST_PROCESSING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_OVERRIDE_POST_PROCESSING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "OVERRIDE_POST_PROCESSING"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES OVERRIDE_POST_PROCESSING
void LIV::SDK::Unity::FEATURES::_set_OVERRIDE_POST_PROCESSING(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_OVERRIDE_POST_PROCESSING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "OVERRIDE_POST_PROCESSING", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES FIX_FOREGROUND_ALPHA
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_FIX_FOREGROUND_ALPHA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_FIX_FOREGROUND_ALPHA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "FIX_FOREGROUND_ALPHA"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES FIX_FOREGROUND_ALPHA
void LIV::SDK::Unity::FEATURES::_set_FIX_FOREGROUND_ALPHA(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_FIX_FOREGROUND_ALPHA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "FIX_FOREGROUND_ALPHA", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES GROUND_CLIP_PLANE
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_GROUND_CLIP_PLANE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_GROUND_CLIP_PLANE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "GROUND_CLIP_PLANE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES GROUND_CLIP_PLANE
void LIV::SDK::Unity::FEATURES::_set_GROUND_CLIP_PLANE(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_GROUND_CLIP_PLANE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "GROUND_CLIP_PLANE", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES RELEASE_CONTROL
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_RELEASE_CONTROL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_RELEASE_CONTROL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "RELEASE_CONTROL"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES RELEASE_CONTROL
void LIV::SDK::Unity::FEATURES::_set_RELEASE_CONTROL(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_RELEASE_CONTROL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "RELEASE_CONTROL", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES OPTIMIZED_RENDER
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_OPTIMIZED_RENDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_OPTIMIZED_RENDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "OPTIMIZED_RENDER"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES OPTIMIZED_RENDER
void LIV::SDK::Unity::FEATURES::_set_OPTIMIZED_RENDER(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_OPTIMIZED_RENDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "OPTIMIZED_RENDER", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES INTERLACED_RENDER
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_INTERLACED_RENDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_INTERLACED_RENDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "INTERLACED_RENDER"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES INTERLACED_RENDER
void LIV::SDK::Unity::FEATURES::_set_INTERLACED_RENDER(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_INTERLACED_RENDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "INTERLACED_RENDER", value));
}
// Autogenerated static field getter
// Get static field: static public LIV.SDK.Unity.FEATURES DEBUG_CLIP_PLANE
::LIV::SDK::Unity::FEATURES LIV::SDK::Unity::FEATURES::_get_DEBUG_CLIP_PLANE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_get_DEBUG_CLIP_PLANE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LIV::SDK::Unity::FEATURES>("LIV.SDK.Unity", "FEATURES", "DEBUG_CLIP_PLANE"));
}
// Autogenerated static field setter
// Set static field: static public LIV.SDK.Unity.FEATURES DEBUG_CLIP_PLANE
void LIV::SDK::Unity::FEATURES::_set_DEBUG_CLIP_PLANE(::LIV::SDK::Unity::FEATURES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::_set_DEBUG_CLIP_PLANE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LIV.SDK.Unity", "FEATURES", "DEBUG_CLIP_PLANE", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 value__
[[deprecated("Use field access instead!")]] uint64_t& LIV::SDK::Unity::FEATURES::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::FEATURES::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
