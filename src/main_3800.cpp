// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightRotationEventEffect
#include "GlobalNamespace/LightRotationEventEffect.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSpeedMultiplier
float GlobalNamespace::LightRotationEventEffect::_get_kSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::_get_kSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightRotationEventEffect", "kSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSpeedMultiplier
void GlobalNamespace::LightRotationEventEffect::_set_kSpeedMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::_set_kSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightRotationEventEffect", "kSpeedMultiplier", value));
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::LightRotationEventEffect::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _rotationVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LightRotationEventEffect::dyn__rotationVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__rotationVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotationSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationEventEffect::dyn__rotationSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__rotationSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::LightRotationEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::LightRotationEventEffect::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LightRotationEventEffect::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _startRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::LightRotationEventEffect::dyn__startRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__startRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationEventEffect::dyn__rotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__rotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::LightRotationEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightRotationEventEffect.Start
void GlobalNamespace::LightRotationEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.Update
void GlobalNamespace::LightRotationEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.OnDestroy
void GlobalNamespace::LightRotationEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.HandleBeatmapEvent
void GlobalNamespace::LightRotationEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightSwitchEventEffect
#include "GlobalNamespace/LightSwitchEventEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
// Including type: ColorBoostBeatmapEventData
#include "GlobalNamespace/ColorBoostBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFlashAndFadeDuration
float GlobalNamespace::LightSwitchEventEffect::_get_kFlashAndFadeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::_get_kFlashAndFadeDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightSwitchEventEffect", "kFlashAndFadeDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFlashAndFadeDuration
void GlobalNamespace::LightSwitchEventEffect::_set_kFlashAndFadeDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::_set_kFlashAndFadeDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightSwitchEventEffect", "kFlashAndFadeDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHighlightDuration
float GlobalNamespace::LightSwitchEventEffect::_get_kHighlightDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::_get_kHighlightDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightSwitchEventEffect", "kHighlightDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHighlightDuration
void GlobalNamespace::LightSwitchEventEffect::_set_kHighlightDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::_set_kHighlightDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightSwitchEventEffect", "kHighlightDuration", value));
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor0
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__lightColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightColor0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor0"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__lightColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightColor1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor0
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor0"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor0Boost
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__lightColor0Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightColor0Boost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor0Boost"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor1Boost
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__lightColor1Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightColor1Boost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor1Boost"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor0Boost
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor0Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor0Boost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor0Boost"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor1Boost
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor1Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__highlightColor1Boost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor1Boost"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _offColorIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightSwitchEventEffect::dyn__offColorIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__offColorIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offColorIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lightOnStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightSwitchEventEffect::dyn__lightOnStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightOnStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightOnStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightsID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightSwitchEventEffect::dyn__lightsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightsID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::LightSwitchEventEffect::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::LightSwitchEventEffect::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::LightSwitchEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.SongTimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& GlobalNamespace::LightSwitchEventEffect::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::SongTimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::LightSwitchEventEffect::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.ColorTween _colorTween
[[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& GlobalNamespace::LightSwitchEventEffect::dyn__colorTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__colorTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorTween"))->offset;
  return *reinterpret_cast<::Tweening::ColorTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _alternativeFromColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightSwitchEventEffect::dyn__alternativeFromColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__alternativeFromColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternativeFromColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _alternativeToColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightSwitchEventEffect::dyn__alternativeToColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__alternativeToColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternativeToColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _usingBoostColors
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightSwitchEventEffect::dyn__usingBoostColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__usingBoostColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_usingBoostColors"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _colorChangeBeatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::LightSwitchEventEffect::dyn__colorChangeBeatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__colorChangeBeatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorChangeBeatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::LightSwitchEventEffect::dyn__colorBoostBeatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::dyn__colorBoostBeatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorBoostBeatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightSwitchEventEffect.get_lightsId
int GlobalNamespace::LightSwitchEventEffect::get_lightsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::get_lightsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.Awake
void GlobalNamespace::LightSwitchEventEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.Start
void GlobalNamespace::LightSwitchEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.OnDestroy
void GlobalNamespace::LightSwitchEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.HandleColorChangeBeatmapEvent
void GlobalNamespace::LightSwitchEventEffect::HandleColorChangeBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::HandleColorChangeBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorChangeBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: LightSwitchEventEffect.HandleColorBoostBeatmapEvent
void GlobalNamespace::LightSwitchEventEffect::HandleColorBoostBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::HandleColorBoostBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorBoostBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: LightSwitchEventEffect.SetupTweenAndSaveOtherColors
void GlobalNamespace::LightSwitchEventEffect::SetupTweenAndSaveOtherColors(::UnityEngine::Color fromColor, ::UnityEngine::Color toColor, ::UnityEngine::Color alternativeFromColor, ::UnityEngine::Color alternativeToColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::SetupTweenAndSaveOtherColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupTweenAndSaveOtherColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromColor), ::il2cpp_utils::ExtractType(toColor), ::il2cpp_utils::ExtractType(alternativeFromColor), ::il2cpp_utils::ExtractType(alternativeToColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromColor, toColor, alternativeFromColor, alternativeToColor);
}
// Autogenerated method: LightSwitchEventEffect.CheckNextEventForFade
void GlobalNamespace::LightSwitchEventEffect::CheckNextEventForFade(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::CheckNextEventForFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckNextEventForFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: LightSwitchEventEffect.GetNormalColor
::UnityEngine::Color GlobalNamespace::LightSwitchEventEffect::GetNormalColor(int beatmapEventValue, bool colorBoost) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::GetNormalColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNormalColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventValue), ::il2cpp_utils::ExtractType(colorBoost)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, beatmapEventValue, colorBoost);
}
// Autogenerated method: LightSwitchEventEffect.GetHighlightColor
::UnityEngine::Color GlobalNamespace::LightSwitchEventEffect::GetHighlightColor(int beatmapEventValue, bool colorBoost) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::GetHighlightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighlightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventValue), ::il2cpp_utils::ExtractType(colorBoost)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, beatmapEventValue, colorBoost);
}
// Autogenerated method: LightSwitchEventEffect.SetColor
void GlobalNamespace::LightSwitchEventEffect::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightSwitchEventEffect::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MeshRendererSwitchEventEffect
#include "GlobalNamespace/MeshRendererSwitchEventEffect.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _deactivateOnBoostRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::MeshRendererSwitchEventEffect::dyn__deactivateOnBoostRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::dyn__deactivateOnBoostRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deactivateOnBoostRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _activateOnBoostRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::MeshRendererSwitchEventEffect::dyn__activateOnBoostRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::dyn__activateOnBoostRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activateOnBoostRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MeshRendererSwitchEventEffect.Start
void GlobalNamespace::MeshRendererSwitchEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MeshRendererSwitchEventEffect.OnDestroy
void GlobalNamespace::MeshRendererSwitchEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MeshRendererSwitchEventEffect.HandleBeatmapEvent
void GlobalNamespace::MeshRendererSwitchEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: MeshRendererSwitchEventEffect.ToggleObjects
void GlobalNamespace::MeshRendererSwitchEventEffect::ToggleObjects(bool isBoostOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MeshRendererSwitchEventEffect::ToggleObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isBoostOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isBoostOn);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionClearedEnvironmentEffect
#include "GlobalNamespace/MissionClearedEnvironmentEffect.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveCheckersManager _missionObjectiveCheckersManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveCheckersManager*& GlobalNamespace::MissionClearedEnvironmentEffect::dyn__missionObjectiveCheckersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionClearedEnvironmentEffect::dyn__missionObjectiveCheckersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveCheckersManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveCheckersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::MissionClearedEnvironmentEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionClearedEnvironmentEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionClearedEnvironmentEffect.Awake
void GlobalNamespace::MissionClearedEnvironmentEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionClearedEnvironmentEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionClearedEnvironmentEffect.OnDestroy
void GlobalNamespace::MissionClearedEnvironmentEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionClearedEnvironmentEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionClearedEnvironmentEffect.HandleMissionObjectiveCheckersManagerObjectiveWasCleared
void GlobalNamespace::MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectiveWasCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteTrailEffect
#include "GlobalNamespace/NoteTrailEffect.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteTrailParticleSystem
#include "GlobalNamespace/NoteTrailParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _particlesPerFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteTrailEffect::dyn__particlesPerFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::dyn__particlesPerFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particlesPerFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxSpawnDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteTrailEffect::dyn__maxSpawnDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::dyn__maxSpawnDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxSpawnDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteMovement _noteMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement*& GlobalNamespace::NoteTrailEffect::dyn__noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::dyn__noteMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteTrailParticleSystem _noteTrailParticleSystem
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteTrailParticleSystem*& GlobalNamespace::NoteTrailEffect::dyn__noteTrailParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::dyn__noteTrailParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteTrailParticleSystem"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteTrailParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteTrailEffect.Awake
void GlobalNamespace::NoteTrailEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.OnDestroy
void GlobalNamespace::NoteTrailEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.Update
void GlobalNamespace::NoteTrailEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.HandleNoteMovementDidInit
void GlobalNamespace::NoteTrailEffect::HandleNoteMovementDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::HandleNoteMovementDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteMovementDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.HandleNoteDidStartJump
void GlobalNamespace::NoteTrailEffect::HandleNoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailEffect::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleSaberSparkleEffect
#include "GlobalNamespace/ObstacleSaberSparkleEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _sparkleParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ObstacleSaberSparkleEffect::dyn__sparkleParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::dyn__sparkleParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparkleParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _burnParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ObstacleSaberSparkleEffect::dyn__burnParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::dyn__burnParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule _sparkleParticleSystemEmissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::ObstacleSaberSparkleEffect::dyn__sparkleParticleSystemEmissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::dyn__sparkleParticleSystemEmissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparkleParticleSystemEmissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule _burnParticleSystemEmissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::ObstacleSaberSparkleEffect::dyn__burnParticleSystemEmissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::dyn__burnParticleSystemEmissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnParticleSystemEmissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleSaberSparkleEffect.set_color
void GlobalNamespace::ObstacleSaberSparkleEffect::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffect.Awake
void GlobalNamespace::ObstacleSaberSparkleEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffect.SetPositionAndRotation
void GlobalNamespace::ObstacleSaberSparkleEffect::SetPositionAndRotation(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: ObstacleSaberSparkleEffect.StartEmission
void GlobalNamespace::ObstacleSaberSparkleEffect::StartEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::StartEmission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEmission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffect.StopEmission
void GlobalNamespace::ObstacleSaberSparkleEffect::StopEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffect::StopEmission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopEmission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemContinuousEventEffect
#include "GlobalNamespace/ParticleSystemContinuousEventEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemContinuousEventEffect.Start
void GlobalNamespace::ParticleSystemContinuousEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemContinuousEventEffect.OnDestroy
void GlobalNamespace::ParticleSystemContinuousEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemContinuousEventEffect.HandleBeatmapEvent
void GlobalNamespace::ParticleSystemContinuousEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: ParticleSystemContinuousEventEffect.ToggleEmitting
void GlobalNamespace::ParticleSystemContinuousEventEffect::ToggleEmitting(bool shouldPlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemContinuousEventEffect::ToggleEmitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleEmitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldPlay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shouldPlay);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEmitEventEffect
#include "GlobalNamespace/ParticleSystemEmitEventEffect.hpp"
// Including type: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_ParticleSystemEmitBehavior.hpp"
// Including type: ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_BeatmapEditorParticleSystemEmitBehavior.hpp"
// Including type: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_GameplayParticleSystemEmitBehavior.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__beatmapEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__beatmapEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _particleSystemParentTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemParentTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemParentTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _particleSystemMaxSpawnedSystems
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemMaxSpawnedSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemMaxSpawnedSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemMaxSpawnedSystems"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentContext _environmentContext
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentContext& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__environmentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__environmentContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_environmentContext"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentContext*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _diContainer
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__diContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__diContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diContainer"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior _particleSystemEmitBehavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*& GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemEmitBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::dyn__particleSystemEmitBehavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemEmitBehavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEmitEventEffect.Start
void GlobalNamespace::ParticleSystemEmitEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect.OnDestroy
void GlobalNamespace::ParticleSystemEmitEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_ParticleSystemEmitBehavior.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: ParticleSystemEventController/Pool
#include "GlobalNamespace/ParticleSystemEventController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly MemoryPoolContainer`1<ParticleSystemEventController> _particleSystemEventControllerPoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ParticleSystemEventController*>*& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemEventControllerPoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemEventControllerPoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemEventControllerPoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ParticleSystemEventController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Transform _particleSystemParentTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemParentTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemParentTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _particleSystemMaxSpawnedSystems
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemMaxSpawnedSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__particleSystemMaxSpawnedSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemMaxSpawnedSystems"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior.Dispose
void GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior.HandleBeatmapEvent
void GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior.EmitParticles
::GlobalNamespace::ParticleSystemEventController* GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::EmitParticles(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::EmitParticles");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ParticleSystemEventController*, false>(this, ___internal__method, startTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_BeatmapEditorParticleSystemEmitBehavior.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: ParticleSystemEventController/Pool
#include "GlobalNamespace/ParticleSystemEventController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.TickableManager _tickableManager
[[deprecated("Use field access instead!")]] ::Zenject::TickableManager*& GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::dyn__tickableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::dyn__tickableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickableManager"))->offset;
  return *reinterpret_cast<::Zenject::TickableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior.Tick
void GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior.Dispose
void GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_GameplayParticleSystemEmitBehavior.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: SongSpeedData
#include "GlobalNamespace/SongSpeedData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: ParticleSystemEventController/Pool
#include "GlobalNamespace/ParticleSystemEventController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly PauseController _pauseController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PauseController*& GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::dyn__pauseController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::dyn__pauseController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pauseController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PauseController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SongSpeedData _songSpeedData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongSpeedData*& GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::dyn__songSpeedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::dyn__songSpeedData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songSpeedData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongSpeedData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior.HandlePauseControllerDidPause
void GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior.HandlePauseControllerDidResume
void GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior.Dispose
void GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEmitEventEffect/GameplayParticleSystemEmitBehavior.EmitParticles
::GlobalNamespace::ParticleSystemEventController* GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::EmitParticles(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::GameplayParticleSystemEmitBehavior::EmitParticles");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ParticleSystemEventController*, false>(this, ___internal__method, startTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEmitEventEffectInstaller
#include "GlobalNamespace/ParticleSystemEmitEventEffectInstaller.hpp"
// Including type: ParticleSystemEventController
#include "GlobalNamespace/ParticleSystemEventController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ParticleSystemEventController _particleSystemEventControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ParticleSystemEventController*& GlobalNamespace::ParticleSystemEmitEventEffectInstaller::dyn__particleSystemEventControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffectInstaller::dyn__particleSystemEventControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemEventControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ParticleSystemEventController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _particleSystemEventControllerInitialSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ParticleSystemEmitEventEffectInstaller::dyn__particleSystemEventControllerInitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffectInstaller::dyn__particleSystemEventControllerInitialSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemEventControllerInitialSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEmitEventEffectInstaller.InstallBindings
void GlobalNamespace::ParticleSystemEmitEventEffectInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffectInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEventController
#include "GlobalNamespace/ParticleSystemEventController.hpp"
// Including type: ParticleSystemEventController/Pool
#include "GlobalNamespace/ParticleSystemEventController_Pool.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMaxSimDelta
float GlobalNamespace::ParticleSystemEventController::_get_kMaxSimDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::_get_kMaxSimDelta");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ParticleSystemEventController", "kMaxSimDelta"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxSimDelta
void GlobalNamespace::ParticleSystemEventController::_set_kMaxSimDelta(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::_set_kMaxSimDelta");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParticleSystemEventController", "kMaxSimDelta", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ParticleSystemEventController::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _particleSystemFullDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemEventController::dyn__particleSystemFullDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::dyn__particleSystemFullDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystemFullDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemEventController::dyn_$startTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::dyn_$startTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEventController.get_startTime
float GlobalNamespace::ParticleSystemEventController::get_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::get_startTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventController.set_startTime
void GlobalNamespace::ParticleSystemEventController::set_startTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::set_startTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ParticleSystemEventController.get_endTime
float GlobalNamespace::ParticleSystemEventController::get_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::get_endTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventController.Init
void GlobalNamespace::ParticleSystemEventController::Init(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startTime);
}
// Autogenerated method: ParticleSystemEventController.InitSpeed
void GlobalNamespace::ParticleSystemEventController::InitSpeed(float simulationSpeedMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::InitSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(simulationSpeedMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, simulationSpeedMultiplier);
}
// Autogenerated method: ParticleSystemEventController.Play
void GlobalNamespace::ParticleSystemEventController::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventController.Pause
void GlobalNamespace::ParticleSystemEventController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventController.Stop
void GlobalNamespace::ParticleSystemEventController::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventController.ManualUpdate
void GlobalNamespace::ParticleSystemEventController::ManualUpdate(float time, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventController::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEventController/Pool
#include "GlobalNamespace/ParticleSystemEventController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemEventEffect
#include "GlobalNamespace/ParticleSystemEventEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor0
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::ParticleSystemEventEffect::dyn__lightColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__lightColor0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor0"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _lightColor1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::ParticleSystemEventEffect::dyn__lightColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__lightColor1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor0
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor0"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _highlightColor1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lightOnStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemEventEffect::dyn__lightOnStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__lightOnStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightOnStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _colorEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::ParticleSystemEventEffect::dyn__colorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__colorEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ParticleSystemEventEffect::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::ParticleSystemEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lightIsOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemEventEffect::dyn__lightIsOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__lightIsOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIsOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _offColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParticleSystemEventEffect::dyn__offColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__offColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _highlightValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemEventEffect::dyn__highlightValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__highlightValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _afterHighlightColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParticleSystemEventEffect::dyn__afterHighlightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__afterHighlightColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_afterHighlightColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _highlightColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__highlightColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single kFadeSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemEventEffect::dyn_kFadeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn_kFadeSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "kFadeSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MainModule _mainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::ParticleSystemEventEffect::dyn__mainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__mainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.Particle[] _particles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& GlobalNamespace::ParticleSystemEventEffect::dyn__particles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__particles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::Particle>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _particleColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParticleSystemEventEffect::dyn__particleColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__particleColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::ParticleSystemEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemEventEffect.Start
void GlobalNamespace::ParticleSystemEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.OnDestroy
void GlobalNamespace::ParticleSystemEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.Update
void GlobalNamespace::ParticleSystemEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.HandleBeatmapEvent
void GlobalNamespace::ParticleSystemEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: ParticleSystemEventEffect.RefreshParticles
void GlobalNamespace::ParticleSystemEventEffect::RefreshParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEventEffect::RefreshParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PhysicsPositionsMovementEventEffect
#include "GlobalNamespace/PhysicsPositionsMovementEventEffect.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: SongTimeFixedUpdateController
#include "GlobalNamespace/SongTimeFixedUpdateController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _movementVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__movementVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__movementVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stepSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__stepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__stepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elasticity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__elasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__elasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _friction
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__friction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__friction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_friction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minMaxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__minMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__minMaxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minMaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxMaxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxMaxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxMaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxAcceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxAcceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxAcceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SongTimeFixedUpdateController _songTimeFixedUpdateController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongTimeFixedUpdateController*& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__songTimeFixedUpdateController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__songTimeFixedUpdateController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeFixedUpdateController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongTimeFixedUpdateController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__prevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _targetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__targetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__targetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__maxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sqrMaxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__sqrMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__sqrMaxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sqrMaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PhysicsPositionsMovementEventEffect.Start
void GlobalNamespace::PhysicsPositionsMovementEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsPositionsMovementEventEffect.OnDestroy
void GlobalNamespace::PhysicsPositionsMovementEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsPositionsMovementEventEffect.HandleSongTimeFixedUpdate
void GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleSongTimeFixedUpdate(float fixedDeltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleSongTimeFixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongTimeFixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixedDeltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fixedDeltaTime);
}
// Autogenerated method: PhysicsPositionsMovementEventEffect.HandleSongTimeUpdate
void GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleSongTimeUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleSongTimeUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongTimeUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsPositionsMovementEventEffect.HandleBeatmapEvent
void GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsPositionsMovementEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberClashEffect
#include "GlobalNamespace/SaberClashEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _sparkleParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SaberClashEffect::dyn__sparkleParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__sparkleParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparkleParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _glowParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SaberClashEffect::dyn__glowParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__glowParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_glowParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::SaberClashEffect::dyn__rumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__rumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblePreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberClashChecker _saberClashChecker
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberClashChecker*& GlobalNamespace::SaberClashEffect::dyn__saberClashChecker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__saberClashChecker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberClashChecker"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberClashChecker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& GlobalNamespace::SaberClashEffect::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SaberClashEffect::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule _sparkleParticleSystemEmmisionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::SaberClashEffect::dyn__sparkleParticleSystemEmmisionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__sparkleParticleSystemEmmisionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparkleParticleSystemEmmisionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule _glowParticleSystemEmmisionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::SaberClashEffect::dyn__glowParticleSystemEmmisionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__glowParticleSystemEmmisionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_glowParticleSystemEmmisionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _sabersAreClashing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SaberClashEffect::dyn__sabersAreClashing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::dyn__sabersAreClashing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sabersAreClashing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberClashEffect.Start
void GlobalNamespace::SaberClashEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberClashEffect.OnDisable
void GlobalNamespace::SaberClashEffect::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberClashEffect.LateUpdate
void GlobalNamespace::SaberClashEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberClashEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SmoothStepPositionEventEffect
#include "GlobalNamespace/SmoothStepPositionEventEffect.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::SmoothStepPositionEventEffect::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _clampValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SmoothStepPositionEventEffect::dyn__clampValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__clampValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clampValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _eventValueMin
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SmoothStepPositionEventEffect::dyn__eventValueMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__eventValueMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventValueMin"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _eventValueMax
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SmoothStepPositionEventEffect::dyn__eventValueMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__eventValueMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventValueMax"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _movementVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SmoothStepPositionEventEffect::dyn__movementVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__movementVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stepSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SmoothStepPositionEventEffect::dyn__stepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__stepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::SmoothStepPositionEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.SongTimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& GlobalNamespace::SmoothStepPositionEventEffect::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::SongTimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _positionTween
[[deprecated("Use field access instead!")]] ::Tweening::Vector3Tween*& GlobalNamespace::SmoothStepPositionEventEffect::dyn__positionTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__positionTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionTween"))->offset;
  return *reinterpret_cast<::Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SmoothStepPositionEventEffect::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SmoothStepPositionEventEffect::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::SmoothStepPositionEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SmoothStepPositionEventEffect.Awake
void GlobalNamespace::SmoothStepPositionEventEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionEventEffect.Start
void GlobalNamespace::SmoothStepPositionEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionEventEffect.OnDestroy
void GlobalNamespace::SmoothStepPositionEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionEventEffect.HandleBeatmapEvent
void GlobalNamespace::SmoothStepPositionEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: SmoothStepPositionEventEffect.GetPositionForValue
::UnityEngine::Vector3 GlobalNamespace::SmoothStepPositionEventEffect::GetPositionForValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::GetPositionForValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, value);
}
// Autogenerated method: SmoothStepPositionEventEffect.SetPosition
void GlobalNamespace::SmoothStepPositionEventEffect::SetPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionEventEffect::SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SmoothStepPositionGroupEventEffect
#include "GlobalNamespace/SmoothStepPositionGroupEventEffect.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _elements
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__elements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elements"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _clampValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__clampValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__clampValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clampValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _eventValueMin
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__eventValueMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__eventValueMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventValueMin"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _eventValueMax
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__eventValueMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__eventValueMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventValueMax"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _baseOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__baseOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__baseOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _movementVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__movementVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__movementVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stepSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__stepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__stepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EaseType _easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.SongTimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::SongTimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _positionTween
[[deprecated("Use field access instead!")]] ::Tweening::Vector3Tween*& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__positionTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__positionTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionTween"))->offset;
  return *reinterpret_cast<::Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.Awake
void GlobalNamespace::SmoothStepPositionGroupEventEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.Start
void GlobalNamespace::SmoothStepPositionGroupEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.OnDestroy
void GlobalNamespace::SmoothStepPositionGroupEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.HandleBeatmapEvent
void GlobalNamespace::SmoothStepPositionGroupEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.GetPositionForValue
::UnityEngine::Vector3 GlobalNamespace::SmoothStepPositionGroupEventEffect::GetPositionForValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::GetPositionForValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, value);
}
// Autogenerated method: SmoothStepPositionGroupEventEffect.SetPosition
void GlobalNamespace::SmoothStepPositionGroupEventEffect::SetPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
// Including type: VideoProjectionDataModelSO/VideoClipWithId
#include "GlobalNamespace/VideoProjectionDataModelSO_VideoClipWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VideoProjectionDataModelSO/VideoClipWithId[] _videoClipsWithId
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*>& GlobalNamespace::VideoProjectionDataModelSO::dyn__videoClipsWithId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::dyn__videoClipsWithId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoClipsWithId"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionDataModelSO.get_videoClipWithIds
::ArrayW<::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*> GlobalNamespace::VideoProjectionDataModelSO::get_videoClipWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::get_videoClipWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_videoClipWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionDataModelSO/VideoClipWithId
#include "GlobalNamespace/VideoProjectionDataModelSO_VideoClipWithId.hpp"
// Including type: UnityEngine.AddressableAssets.AssetReference
#include "UnityEngine/AddressableAssets/AssetReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _id
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::dyn__id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::dyn__id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AddressableAssets.AssetReference _videoAssetReference
[[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AssetReference*& GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::dyn__videoAssetReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::dyn__videoAssetReference");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoAssetReference"))->offset;
  return *reinterpret_cast<::UnityEngine::AddressableAssets::AssetReference**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionDataModelSO/VideoClipWithId.get_id
int GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VideoProjectionDataModelSO/VideoClipWithId.get_videoAssetReference
::UnityEngine::AddressableAssets::AssetReference* GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_videoAssetReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId::get_videoAssetReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_videoAssetReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AddressableAssets::AssetReference*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect
#include "GlobalNamespace/VideoProjectionEffect.hpp"
// Including type: VideoProjectionEffect/InitData
#include "GlobalNamespace/VideoProjectionEffect_InitData.hpp"
// Including type: VideoProjectionEffect/VideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior.hpp"
// Including type: VideoProjectionEffect/BeatmapEditorVideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_BeatmapEditorVideoProjectionBehavior.hpp"
// Including type: VideoProjectionEffect/GameplayVideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_GameplayVideoProjectionBehavior.hpp"
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
// Including type: SongTimeSyncedVideoPlayer
#include "GlobalNamespace/SongTimeSyncedVideoPlayer.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VideoProjectionDataModelSO _videoProjectionDataModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionDataModelSO*& GlobalNamespace::VideoProjectionEffect::dyn__videoProjectionDataModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__videoProjectionDataModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoProjectionDataModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VideoProjectionDataModelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SongTimeSyncedVideoPlayer _videoPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongTimeSyncedVideoPlayer*& GlobalNamespace::VideoProjectionEffect::dyn__videoPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__videoPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongTimeSyncedVideoPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _videoEventType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::VideoProjectionEffect::dyn__videoEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__videoEventType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoEventType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VideoProjectionEffect/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionEffect::InitData*& GlobalNamespace::VideoProjectionEffect::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VideoProjectionEffect::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentContext _environmentContext
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentContext& GlobalNamespace::VideoProjectionEffect::dyn__environmentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__environmentContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_environmentContext"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentContext*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IReadonlyBeatmapData _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IReadonlyBeatmapData*& GlobalNamespace::VideoProjectionEffect::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IReadonlyBeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::VideoProjectionEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VideoProjectionEffect/VideoProjectionBehavior _behavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*& GlobalNamespace::VideoProjectionEffect::dyn__behavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::dyn__behavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_behavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionEffect.Start
void GlobalNamespace::VideoProjectionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VideoProjectionEffect.OnDestroy
void GlobalNamespace::VideoProjectionEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/InitData
#include "GlobalNamespace/VideoProjectionEffect_InitData.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly IPreviewBeatmapLevel previewBeatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::VideoProjectionEffect::InitData::dyn_previewBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::InitData::dyn_previewBeatmapLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewBeatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/VideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior.hpp"
// Including type: VideoProjectionEffect/VideoProjectionBehavior/<>c__DisplayClass7_0
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior_--c__DisplayClass7_0.hpp"
// Including type: VideoProjectionEffect/VideoProjectionBehavior/<LoadPreviewCoverAsset>d__8
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior_-LoadPreviewCoverAsset-d__8.hpp"
// Including type: UnityEngine.Video.VideoClip
#include "UnityEngine/Video/VideoClip.hpp"
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
// Including type: SongTimeSyncedVideoPlayer
#include "GlobalNamespace/SongTimeSyncedVideoPlayer.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _eventValue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__eventValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__eventValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.Video.VideoClip> _videoClipHandle
[[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::Video::VideoClip*>& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__videoClipHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__videoClipHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoClipHandle"))->offset;
  return *reinterpret_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::Video::VideoClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VideoProjectionDataModelSO _model
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionDataModelSO*& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__model() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__model");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_model"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VideoProjectionDataModelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SongTimeSyncedVideoPlayer _videoPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongTimeSyncedVideoPlayer*& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__videoPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__videoPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_videoPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongTimeSyncedVideoPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IPreviewBeatmapLevel _previewBeatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__previewBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::dyn__previewBeatmapLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewBeatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior.Dispose
void GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior.LoadVideoFromModel
void GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadVideoFromModel(int eventValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadVideoFromModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadVideoFromModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventValue);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior.LoadPreviewCoverAsset
void GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadPreviewCoverAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadPreviewCoverAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadPreviewCoverAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/VideoProjectionBehavior/<>c__DisplayClass7_0
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior_--c__DisplayClass7_0.hpp"
// Including type: VideoProjectionDataModelSO/VideoClipWithId
#include "GlobalNamespace/VideoProjectionDataModelSO_VideoClipWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 eventValue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$$c__DisplayClass7_0::dyn_eventValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$$c__DisplayClass7_0::dyn_eventValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior/<>c__DisplayClass7_0.<LoadVideoFromModel>b__0
bool GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$$c__DisplayClass7_0::$LoadVideoFromModel$b__0(::GlobalNamespace::VideoProjectionDataModelSO::VideoClipWithId* clipWithId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$$c__DisplayClass7_0::<LoadVideoFromModel>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LoadVideoFromModel>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipWithId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipWithId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/VideoProjectionBehavior/<LoadPreviewCoverAsset>d__8
#include "GlobalNamespace/VideoProjectionEffect_VideoProjectionBehavior_-LoadPreviewCoverAsset-d__8.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncVoidMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VideoProjectionEffect/VideoProjectionBehavior <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.Sprite> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>& GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior/<LoadPreviewCoverAsset>d__8.MoveNext
void GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VideoProjectionEffect/VideoProjectionBehavior/<LoadPreviewCoverAsset>d__8.SetStateMachine
void GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/BeatmapEditorVideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_BeatmapEditorVideoProjectionBehavior.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
// Including type: SongTimeSyncedVideoPlayer
#include "GlobalNamespace/SongTimeSyncedVideoPlayer.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDataCallbackWrapper _callbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::dyn__callbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::dyn__callbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionEffect/BeatmapEditorVideoProjectionBehavior.HandleBeatmapEvent
void GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: VideoProjectionEffect/BeatmapEditorVideoProjectionBehavior.Dispose
void GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::BeatmapEditorVideoProjectionBehavior::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionEffect/GameplayVideoProjectionBehavior
#include "GlobalNamespace/VideoProjectionEffect_GameplayVideoProjectionBehavior.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: VideoProjectionDataModelSO
#include "GlobalNamespace/VideoProjectionDataModelSO.hpp"
// Including type: SongTimeSyncedVideoPlayer
#include "GlobalNamespace/SongTimeSyncedVideoPlayer.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VideoProjectionInstaller
#include "GlobalNamespace/VideoProjectionInstaller.hpp"
// Including type: EnvironmentSceneSetupData
#include "GlobalNamespace/EnvironmentSceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentSceneSetupData _sceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentSceneSetupData*& GlobalNamespace::VideoProjectionInstaller::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionInstaller::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VideoProjectionInstaller.InstallBindings
void GlobalNamespace::VideoProjectionInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentContext
#include "GlobalNamespace/EnvironmentContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EnvironmentContext Gameplay
::GlobalNamespace::EnvironmentContext GlobalNamespace::EnvironmentContext::_get_Gameplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentContext::_get_Gameplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EnvironmentContext>("", "EnvironmentContext", "Gameplay"));
}
// Autogenerated static field setter
// Set static field: static public EnvironmentContext Gameplay
void GlobalNamespace::EnvironmentContext::_set_Gameplay(::GlobalNamespace::EnvironmentContext value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentContext::_set_Gameplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentContext", "Gameplay", value));
}
// Autogenerated static field getter
// Get static field: static public EnvironmentContext BeatmapEditor
::GlobalNamespace::EnvironmentContext GlobalNamespace::EnvironmentContext::_get_BeatmapEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentContext::_get_BeatmapEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EnvironmentContext>("", "EnvironmentContext", "BeatmapEditor"));
}
// Autogenerated static field setter
// Set static field: static public EnvironmentContext BeatmapEditor
void GlobalNamespace::EnvironmentContext::_set_BeatmapEditor(::GlobalNamespace::EnvironmentContext value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentContext::_set_BeatmapEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentContext", "BeatmapEditor", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EnvironmentContext::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentContext::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentSpawnRotation
#include "GlobalNamespace/EnvironmentSpawnRotation.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: SpawnRotationBeatmapEventData
#include "GlobalNamespace/SpawnRotationBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1122560
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _spawnRotationID
int GlobalNamespace::EnvironmentSpawnRotation::_get__spawnRotationID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::_get__spawnRotationID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentSpawnRotation", "_spawnRotationID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _spawnRotationID
void GlobalNamespace::EnvironmentSpawnRotation::_set__spawnRotationID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::_set__spawnRotationID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentSpawnRotation", "_spawnRotationID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _numberOfActiveEnvironmentSpawnRotationObjects
int GlobalNamespace::EnvironmentSpawnRotation::_get__numberOfActiveEnvironmentSpawnRotationObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::_get__numberOfActiveEnvironmentSpawnRotationObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentSpawnRotation", "_numberOfActiveEnvironmentSpawnRotationObjects"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _numberOfActiveEnvironmentSpawnRotationObjects
void GlobalNamespace::EnvironmentSpawnRotation::_set__numberOfActiveEnvironmentSpawnRotationObjects(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::_set__numberOfActiveEnvironmentSpawnRotationObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentSpawnRotation", "_numberOfActiveEnvironmentSpawnRotationObjects", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _aheadTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnvironmentSpawnRotation::dyn__aheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__aheadTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_aheadTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnvironmentSpawnRotation::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::EnvironmentSpawnRotation::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::EnvironmentSpawnRotation::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnvironmentSpawnRotation::dyn__currentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__currentRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnvironmentSpawnRotation::dyn__prevRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__prevRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnvironmentSpawnRotation::dyn__targetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::dyn__targetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnvironmentSpawnRotation.get_targetRotation
float GlobalNamespace::EnvironmentSpawnRotation::get_targetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::get_targetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation..cctor
void GlobalNamespace::EnvironmentSpawnRotation::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnvironmentSpawnRotation", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnEnable
void GlobalNamespace::EnvironmentSpawnRotation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnDisable
void GlobalNamespace::EnvironmentSpawnRotation::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.Start
void GlobalNamespace::EnvironmentSpawnRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnDestroy
void GlobalNamespace::EnvironmentSpawnRotation::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.HandleSpawnRotationBeatmapEvent
void GlobalNamespace::EnvironmentSpawnRotation::HandleSpawnRotationBeatmapEvent(::GlobalNamespace::SpawnRotationBeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::HandleSpawnRotationBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnRotationBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: EnvironmentSpawnRotation.FixedUpdate
void GlobalNamespace::EnvironmentSpawnRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.LateUpdate
void GlobalNamespace::EnvironmentSpawnRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentSpawnRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlickeringNeonSign
#include "GlobalNamespace/FlickeringNeonSign.hpp"
// Including type: FlickeringNeonSign/<FlickeringCoroutine>d__16
#include "GlobalNamespace/FlickeringNeonSign_-FlickeringCoroutine-d__16.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _flickeringSprite
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::FlickeringNeonSign::dyn__flickeringSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__flickeringSprite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flickeringSprite"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _light
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::FlickeringNeonSign::dyn__light() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__light");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_light"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::FlickeringNeonSign::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minOnDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlickeringNeonSign::dyn__minOnDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__minOnDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minOnDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxOnDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlickeringNeonSign::dyn__maxOnDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__maxOnDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxOnDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minOffDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlickeringNeonSign::dyn__minOffDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__minOffDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minOffDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxOffDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlickeringNeonSign::dyn__maxOffDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__maxOffDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxOffDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _spriteOnColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlickeringNeonSign::dyn__spriteOnColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__spriteOnColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteOnColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _lightOnColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlickeringNeonSign::dyn__lightOnColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__lightOnColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightOnColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _onMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::FlickeringNeonSign::dyn__onMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__onMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _offMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::FlickeringNeonSign::dyn__offMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__offMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip[] _sparksAudioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::FlickeringNeonSign::dyn__sparksAudioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__sparksAudioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparksAudioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RandomObjectPicker`1<UnityEngine.AudioClip> _sparksAudioClipPicker
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>*& GlobalNamespace::FlickeringNeonSign::dyn__sparksAudioClipPicker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::dyn__sparksAudioClipPicker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparksAudioClipPicker"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlickeringNeonSign.Awake
void GlobalNamespace::FlickeringNeonSign::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.Start
void GlobalNamespace::FlickeringNeonSign::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.OnEnable
void GlobalNamespace::FlickeringNeonSign::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.FlickeringCoroutine
::System::Collections::IEnumerator* GlobalNamespace::FlickeringNeonSign::FlickeringCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::FlickeringCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlickeringCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.SetOn
void GlobalNamespace::FlickeringNeonSign::SetOn(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::SetOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, on);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlickeringNeonSign/<FlickeringCoroutine>d__16
#include "GlobalNamespace/FlickeringNeonSign_-FlickeringCoroutine-d__16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FlickeringNeonSign <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlickeringNeonSign*& GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlickeringNeonSign**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.IDisposable.Dispose
void GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.MoveNext
bool GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.IEnumerator.Reset
void GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingCar
#include "GlobalNamespace/FlyingCar.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _startZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingCar::dyn__startZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::dyn__startZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _endZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingCar::dyn__endZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::dyn__endZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingCar::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _progress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingCar::dyn__progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::dyn__progress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _pos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FlyingCar::dyn__pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::dyn__pos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingCar.Start
void GlobalNamespace::FlyingCar::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingCar.Update
void GlobalNamespace::FlyingCar::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingCar.UpdatePos
void GlobalNamespace::FlyingCar::UpdatePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingCar::UpdatePos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingGameHUDRotation
#include "GlobalNamespace/FlyingGameHUDRotation.hpp"
// Including type: BeatLineManager
#include "GlobalNamespace/BeatLineManager.hpp"
// Including type: EnvironmentSpawnRotation
#include "GlobalNamespace/EnvironmentSpawnRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingGameHUDRotation::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatLineManager _beatLineManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatLineManager*& GlobalNamespace::FlyingGameHUDRotation::dyn__beatLineManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::dyn__beatLineManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatLineManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatLineManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentSpawnRotation _environmentSpawnRotation
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentSpawnRotation*& GlobalNamespace::FlyingGameHUDRotation::dyn__environmentSpawnRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::dyn__environmentSpawnRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_environmentSpawnRotation"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentSpawnRotation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevYAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingGameHUDRotation::dyn__prevYAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::dyn__prevYAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevYAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _yAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingGameHUDRotation::dyn__yAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::dyn__yAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingGameHUDRotation.Start
void GlobalNamespace::FlyingGameHUDRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingGameHUDRotation.FixedUpdate
void GlobalNamespace::FlyingGameHUDRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingGameHUDRotation.LateUpdate
void GlobalNamespace::FlyingGameHUDRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingGameHUDRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MovementBeatmapEventEffect
#include "GlobalNamespace/MovementBeatmapEventEffect.hpp"
// Including type: MovementBeatmapEventEffect/MovementData
#include "GlobalNamespace/MovementBeatmapEventEffect_MovementData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEventType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapEventType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _transitionSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MovementBeatmapEventEffect::dyn__transitionSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__transitionSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transitionSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MovementBeatmapEventEffect/MovementData[] _movementData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MovementBeatmapEventEffect::MovementData*>& GlobalNamespace::MovementBeatmapEventEffect::dyn__movementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__movementData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MovementBeatmapEventEffect::MovementData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _transforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::MovementBeatmapEventEffect::dyn__transforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__transforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _currentMovementDataIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MovementBeatmapEventEffect::dyn__currentMovementDataIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__currentMovementDataIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentMovementDataIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _currentPositionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::MovementBeatmapEventEffect::dyn__currentPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__currentPositionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPositionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevPositionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::MovementBeatmapEventEffect::dyn__prevPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__prevPositionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPositionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _startLocalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::MovementBeatmapEventEffect::dyn__startLocalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__startLocalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startLocalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MovementBeatmapEventEffect.Start
void GlobalNamespace::MovementBeatmapEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.OnDestroy
void GlobalNamespace::MovementBeatmapEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.FixedUpdate
void GlobalNamespace::MovementBeatmapEventEffect::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.LateUpdate
void GlobalNamespace::MovementBeatmapEventEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.HandleBeatmapEvent
void GlobalNamespace::MovementBeatmapEventEffect::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: MovementBeatmapEventEffect.SetLocalPositionOffsetsForAllObjects
void GlobalNamespace::MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects(::UnityEngine::Vector3 localPositionOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPositionOffsetsForAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPositionOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localPositionOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MovementBeatmapEventEffect/MovementData
#include "GlobalNamespace/MovementBeatmapEventEffect_MovementData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPositionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::MovementBeatmapEventEffect::MovementData::dyn__localPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::MovementData::dyn__localPositionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPositionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MovementBeatmapEventEffect/MovementData.get_localPositionOffset
::UnityEngine::Vector3 GlobalNamespace::MovementBeatmapEventEffect::MovementData::get_localPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementBeatmapEventEffect::MovementData::get_localPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RectangleFakeGlow
#include "GlobalNamespace/RectangleFakeGlow.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1122798
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::RectangleFakeGlow::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RectangleFakeGlow", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::RectangleFakeGlow::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RectangleFakeGlow", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11227A8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::RectangleFakeGlow::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RectangleFakeGlow", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::RectangleFakeGlow::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RectangleFakeGlow", "_sizeParamsID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _size
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::RectangleFakeGlow::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _edgeSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RectangleFakeGlow::dyn__edgeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::dyn__edgeSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_edgeSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::RectangleFakeGlow::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::RectangleFakeGlow::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RectangleFakeGlow.get_color
::UnityEngine::Color GlobalNamespace::RectangleFakeGlow::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.set_color
void GlobalNamespace::RectangleFakeGlow::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RectangleFakeGlow..cctor
void GlobalNamespace::RectangleFakeGlow::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RectangleFakeGlow", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.Awake
void GlobalNamespace::RectangleFakeGlow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.OnEnable
void GlobalNamespace::RectangleFakeGlow::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.OnDisable
void GlobalNamespace::RectangleFakeGlow::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.Refresh
void GlobalNamespace::RectangleFakeGlow::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlow::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RectangleFakeGlowLightWithId
#include "GlobalNamespace/RectangleFakeGlowLightWithId.hpp"
// Including type: RectangleFakeGlow
#include "GlobalNamespace/RectangleFakeGlow.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RectangleFakeGlowLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlowLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alphaMul
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RectangleFakeGlowLightWithId::dyn__alphaMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlowLightWithId::dyn__alphaMul");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaMul"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RectangleFakeGlow _rectangleFakeGlow
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RectangleFakeGlow*& GlobalNamespace::RectangleFakeGlowLightWithId::dyn__rectangleFakeGlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlowLightWithId::dyn__rectangleFakeGlow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectangleFakeGlow"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RectangleFakeGlow**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RectangleFakeGlowLightWithId.get_color
::UnityEngine::Color GlobalNamespace::RectangleFakeGlowLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlowLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlowLightWithId.ColorWasSet
void GlobalNamespace::RectangleFakeGlowLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RectangleFakeGlowLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RotateBySpawnRotation
#include "GlobalNamespace/RotateBySpawnRotation.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: SpawnRotationBeatmapEventData
#include "GlobalNamespace/SpawnRotationBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _aheadTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotateBySpawnRotation::dyn__aheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__aheadTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_aheadTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotateBySpawnRotation::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::RotateBySpawnRotation::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::RotateBySpawnRotation::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotateBySpawnRotation::dyn__currentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__currentRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotateBySpawnRotation::dyn__prevRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__prevRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotateBySpawnRotation::dyn__targetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::dyn__targetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RotateBySpawnRotation.Start
void GlobalNamespace::RotateBySpawnRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.OnDestroy
void GlobalNamespace::RotateBySpawnRotation::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.HandleSpawnRotationBeatmapEvent
void GlobalNamespace::RotateBySpawnRotation::HandleSpawnRotationBeatmapEvent(::GlobalNamespace::SpawnRotationBeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::HandleSpawnRotationBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnRotationBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: RotateBySpawnRotation.FixedUpdate
void GlobalNamespace::RotateBySpawnRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.LateUpdate
void GlobalNamespace::RotateBySpawnRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateBySpawnRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnChevronObjectPoolsInstaller
#include "GlobalNamespace/SpawnChevronObjectPoolsInstaller.hpp"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SpawnRotationChevron _spawnRotationChevronPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpawnRotationChevron*& GlobalNamespace::SpawnChevronObjectPoolsInstaller::dyn__spawnRotationChevronPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnChevronObjectPoolsInstaller::dyn__spawnRotationChevronPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnRotationChevronPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpawnRotationChevron**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnChevronObjectPoolsInstaller.InstallBindings
void GlobalNamespace::SpawnChevronObjectPoolsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnChevronObjectPoolsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight[] _lights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>& GlobalNamespace::SpawnRotationChevron::dyn__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::dyn__lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SpawnRotationChevron::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lightAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevron::dyn__lightAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::dyn__lightAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnRotationChevron.SetLightAmount
void GlobalNamespace::SpawnRotationChevron::SetLightAmount(float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::SetLightAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, amount);
}
// Autogenerated method: SpawnRotationChevron.UpdateLights
void GlobalNamespace::SpawnRotationChevron::UpdateLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::UpdateLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevron.ColorWasSet
void GlobalNamespace::SpawnRotationChevron::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevron::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevronManager
#include "GlobalNamespace/SpawnRotationChevronManager.hpp"
// Including type: SpawnRotationChevronManager/DirectionData
#include "GlobalNamespace/SpawnRotationChevronManager_DirectionData.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: SpawnRotationBeatmapEventData
#include "GlobalNamespace/SpawnRotationBeatmapEventData.hpp"
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__fadeInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__fadeInTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__fadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__fadeOutTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpStartOffsetTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__jumpStartOffsetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__jumpStartOffsetTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpStartOffsetTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cutOffsetTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__cutOffsetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__cutOffsetTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutOffsetTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeInLightAmountCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::SpawnRotationChevronManager::dyn__fadeInLightAmountCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__fadeInLightAmountCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInLightAmountCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeOutLightAmountCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::SpawnRotationChevronManager::dyn__fadeOutLightAmountCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__fadeOutLightAmountCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutLightAmountCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SpawnRotationChevron/Pool _chevronPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpawnRotationChevron::Pool*& GlobalNamespace::SpawnRotationChevronManager::dyn__chevronPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__chevronPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chevronPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpawnRotationChevron::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::SpawnRotationChevronManager::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnController*& GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _spawnRotationDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::SpawnRotationChevronManager::dyn__spawnRotationDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__spawnRotationDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnRotationDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapObjectDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapObjectDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__beatmapObjectDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,SpawnRotationChevronManager/DirectionData> _directionToDataDictionary
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SpawnRotationChevronManager::DirectionData*>*& GlobalNamespace::SpawnRotationChevronManager::dyn__directionToDataDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__directionToDataDictionary");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionToDataDictionary"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SpawnRotationChevronManager::DirectionData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.Int32> _activeDirections
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& GlobalNamespace::SpawnRotationChevronManager::dyn__activeDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__activeDirections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeDirections"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> _reusableDirectionsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::SpawnRotationChevronManager::dyn__reusableDirectionsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__reusableDirectionsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableDirectionsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _moveDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__moveDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _halfJumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__halfJumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__halfJumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_halfJumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentSpawnRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::dyn__currentSpawnRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::dyn__currentSpawnRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentSpawnRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnRotationChevronManager.Start
void GlobalNamespace::SpawnRotationChevronManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.Update
void GlobalNamespace::SpawnRotationChevronManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.OnDestroy
void GlobalNamespace::SpawnRotationChevronManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.HandleBeatmapObjectCallback
void GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectCallback(::GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: SpawnRotationChevronManager.HandleSpawnRotationBeatmapEvent
void GlobalNamespace::SpawnRotationChevronManager::HandleSpawnRotationBeatmapEvent(::GlobalNamespace::SpawnRotationBeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::HandleSpawnRotationBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnRotationBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: SpawnRotationChevronManager.HandleBeatmapObjectSpawnControllerDidInit
void GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectSpawnControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.ComputeAheadTime
float GlobalNamespace::SpawnRotationChevronManager::ComputeAheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::ComputeAheadTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeAheadTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevronManager/DirectionData
#include "GlobalNamespace/SpawnRotationChevronManager_DirectionData.hpp"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SpawnRotationChevron chevron
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpawnRotationChevron*& GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_chevron() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_chevron");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chevron"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpawnRotationChevron**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean fullyLid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fullyLid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fullyLid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullyLid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeOutStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fadeOutStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fadeOutStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeInEndTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fadeInEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationChevronManager::DirectionData::dyn_fadeInEndTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInEndTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kNumberOfSamples
int GlobalNamespace::BasicSpectrogramData::_get_kNumberOfSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::_get_kNumberOfSamples");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BasicSpectrogramData", "kNumberOfSamples"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kNumberOfSamples
void GlobalNamespace::BasicSpectrogramData::_set_kNumberOfSamples(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::_set_kNumberOfSamples");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BasicSpectrogramData", "kNumberOfSamples", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::BasicSpectrogramData::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _instantChangeThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BasicSpectrogramData::dyn__instantChangeThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__instantChangeThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantChangeThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasData
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BasicSpectrogramData::dyn__hasData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__hasData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasData"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasProcessedData
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BasicSpectrogramData::dyn__hasProcessedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__hasProcessedData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasProcessedData"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _samples
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::BasicSpectrogramData::dyn__samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__samples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_samples"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Single> _processedSamples
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& GlobalNamespace::BasicSpectrogramData::dyn__processedSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::dyn__processedSamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_processedSamples"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BasicSpectrogramData.get_Samples
::ArrayW<float> GlobalNamespace::BasicSpectrogramData::get_Samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::get_Samples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Samples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<float>, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.get_ProcessedSamples
::System::Collections::Generic::List_1<float>* GlobalNamespace::BasicSpectrogramData::get_ProcessedSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::get_ProcessedSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProcessedSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<float>*, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.Awake
void GlobalNamespace::BasicSpectrogramData::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.LateUpdate
void GlobalNamespace::BasicSpectrogramData::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.ProcessSamples
void GlobalNamespace::BasicSpectrogramData::ProcessSamples(::ArrayW<float> sourceSamples, ::System::Collections::Generic::List_1<float>* processedSamples) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicSpectrogramData::ProcessSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceSamples), ::il2cpp_utils::ExtractType(processedSamples)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sourceSamples, processedSamples);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Spectrogram
#include "GlobalNamespace/Spectrogram.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1122960
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _spectrogramDataID
int GlobalNamespace::Spectrogram::_get__spectrogramDataID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::_get__spectrogramDataID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Spectrogram", "_spectrogramDataID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _spectrogramDataID
void GlobalNamespace::Spectrogram::_set__spectrogramDataID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::_set__spectrogramDataID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Spectrogram", "_spectrogramDataID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::Spectrogram::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "Spectrogram", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::Spectrogram::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Spectrogram", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _meshRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::Spectrogram::dyn__meshRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::dyn__meshRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::Spectrogram::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BasicSpectrogramData _spectrogramData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicSpectrogramData*& GlobalNamespace::Spectrogram::dyn__spectrogramData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::dyn__spectrogramData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectrogramData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicSpectrogramData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Spectrogram.get_materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::Spectrogram::get_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::get_materialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::MaterialPropertyBlock*, false>(this, ___internal__method);
}
// Autogenerated method: Spectrogram..cctor
void GlobalNamespace::Spectrogram::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Spectrogram", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Spectrogram.Awake
void GlobalNamespace::Spectrogram::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Spectrogram.Update
void GlobalNamespace::Spectrogram::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Spectrogram::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpectrogramRow
#include "GlobalNamespace/SpectrogramRow.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11229A0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _spectrogramDataID
int GlobalNamespace::SpectrogramRow::_get__spectrogramDataID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::_get__spectrogramDataID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SpectrogramRow", "_spectrogramDataID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _spectrogramDataID
void GlobalNamespace::SpectrogramRow::_set__spectrogramDataID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::_set__spectrogramDataID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpectrogramRow", "_spectrogramDataID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::SpectrogramRow::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "SpectrogramRow", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::SpectrogramRow::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpectrogramRow", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _meshRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::SpectrogramRow::dyn__meshRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::dyn__meshRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _dataIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SpectrogramRow::dyn__dataIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::dyn__dataIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BasicSpectrogramData _spectrogramData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicSpectrogramData*& GlobalNamespace::SpectrogramRow::dyn__spectrogramData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::dyn__spectrogramData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectrogramData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicSpectrogramData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpectrogramRow..cctor
void GlobalNamespace::SpectrogramRow::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SpectrogramRow", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SpectrogramRow.Awake
void GlobalNamespace::SpectrogramRow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpectrogramRow.Update
void GlobalNamespace::SpectrogramRow::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpectrogramRow::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TransformSpectrogram
#include "GlobalNamespace/TransformSpectrogram.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _transforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::TransformSpectrogram::dyn__transforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__transforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightAxis _axis
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightAxis& GlobalNamespace::TransformSpectrogram::dyn__axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_axis"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightAxis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minPosition
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransformSpectrogram::dyn__minPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__minPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxPosition
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransformSpectrogram::dyn__maxPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__maxPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scaleSamples
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransformSpectrogram::dyn__scaleSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__scaleSamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleSamples"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransformSpectrogram::dyn__scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BasicSpectrogramData _spectrogramData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicSpectrogramData*& GlobalNamespace::TransformSpectrogram::dyn__spectrogramData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__spectrogramData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectrogramData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicSpectrogramData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _direction
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransformSpectrogram::dyn__direction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__direction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_direction"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _defaultPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::TransformSpectrogram::dyn__defaultPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::dyn__defaultPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransformSpectrogram.Awake
void GlobalNamespace::TransformSpectrogram::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransformSpectrogram.Update
void GlobalNamespace::TransformSpectrogram::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StaticEnvironmentLights
#include "GlobalNamespace/StaticEnvironmentLights.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _lightColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& GlobalNamespace::StaticEnvironmentLights::dyn__lightColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticEnvironmentLights::dyn__lightColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material[] _materials
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& GlobalNamespace::StaticEnvironmentLights::dyn__materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticEnvironmentLights::dyn__materials");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materials"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StaticEnvironmentLights.Awake
void GlobalNamespace::StaticEnvironmentLights::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticEnvironmentLights::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRing
#include "GlobalNamespace/TrackLaneRing.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _prevRotZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__prevRotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__prevRotZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRotZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__rotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__rotZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _destRotZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__destRotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__destRotZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destRotZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__rotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__rotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevPosZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__prevPosZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__prevPosZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPosZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _posZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__posZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__posZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_posZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _destPosZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__destPosZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__destPosZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destPosZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _moveSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRing::dyn__moveSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__moveSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _positionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TrackLaneRing::dyn__positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__positionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TrackLaneRing::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrackLaneRing.get_destRotZ
float GlobalNamespace::TrackLaneRing::get_destRotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::get_destRotZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_destRotZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.Init
void GlobalNamespace::TrackLaneRing::Init(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 positionOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(positionOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, positionOffset);
}
// Autogenerated method: TrackLaneRing.FixedUpdateRing
void GlobalNamespace::TrackLaneRing::FixedUpdateRing(float fixedDeltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::FixedUpdateRing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdateRing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixedDeltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fixedDeltaTime);
}
// Autogenerated method: TrackLaneRing.LateUpdateRing
void GlobalNamespace::TrackLaneRing::LateUpdateRing(float interpolationFactor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::LateUpdateRing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateRing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interpolationFactor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, interpolationFactor);
}
// Autogenerated method: TrackLaneRing.SetDestRotation
void GlobalNamespace::TrackLaneRing::SetDestRotation(float destRotZ, float rotateSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::SetDestRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDestRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destRotZ), ::il2cpp_utils::ExtractType(rotateSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destRotZ, rotateSpeed);
}
// Autogenerated method: TrackLaneRing.GetRotation
float GlobalNamespace::TrackLaneRing::GetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.GetDestinationRotation
float GlobalNamespace::TrackLaneRing::GetDestinationRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::GetDestinationRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDestinationRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.SetPosition
void GlobalNamespace::TrackLaneRing::SetPosition(float destPosZ, float moveSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRing::SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destPosZ), ::il2cpp_utils::ExtractType(moveSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destPosZ, moveSpeed);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: TrackLaneRing
#include "GlobalNamespace/TrackLaneRing.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TrackLaneRing _trackLaneRingPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrackLaneRing*& GlobalNamespace::TrackLaneRingsManager::dyn__trackLaneRingPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__trackLaneRingPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackLaneRingPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrackLaneRing**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ringCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsManager::dyn__ringCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__ringCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ringCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _ringPositionStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsManager::dyn__ringPositionStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__ringPositionStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ringPositionStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _spawnAsChildren
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TrackLaneRingsManager::dyn__spawnAsChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__spawnAsChildren");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnAsChildren"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& GlobalNamespace::TrackLaneRingsManager::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TrackLaneRing[] _rings
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TrackLaneRing*>& GlobalNamespace::TrackLaneRingsManager::dyn__rings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::dyn__rings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rings"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TrackLaneRing*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrackLaneRingsManager.get_ringPositionStep
float GlobalNamespace::TrackLaneRingsManager::get_ringPositionStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::get_ringPositionStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ringPositionStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.get_Rings
::ArrayW<::GlobalNamespace::TrackLaneRing*> GlobalNamespace::TrackLaneRingsManager::get_Rings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::get_Rings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Rings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::TrackLaneRing*>, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.Start
void GlobalNamespace::TrackLaneRingsManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.FixedUpdate
void GlobalNamespace::TrackLaneRingsManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.LateUpdate
void GlobalNamespace::TrackLaneRingsManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.OnDrawGizmosSelected
void GlobalNamespace::TrackLaneRingsManager::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsManager::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsPositionStepEffectSpawner
#include "GlobalNamespace/TrackLaneRingsPositionStepEffectSpawner.hpp"
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TrackLaneRingsManager _trackLaneRingsManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrackLaneRingsManager*& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__trackLaneRingsManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__trackLaneRingsManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackLaneRingsManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrackLaneRingsManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEventType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapEventType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minPositionStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__minPositionStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__minPositionStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minPositionStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxPositionStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__maxPositionStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__maxPositionStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxPositionStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _moveSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__moveSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__moveSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.Start
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.OnDestroy
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.HandleBeatmapEvent
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect.hpp"
// Including type: TrackLaneRingsRotationEffect/RingRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect_RingRotationEffect.hpp"
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TrackLaneRingsManager _trackLaneRingsManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrackLaneRingsManager*& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__trackLaneRingsManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__trackLaneRingsManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackLaneRingsManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrackLaneRingsManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startupRotationAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startupRotationAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startupRotationStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startupRotationStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _startupRotationPropagationSpeed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationPropagationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationPropagationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startupRotationPropagationSpeed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startupRotationFlexySpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationFlexySpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__startupRotationFlexySpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startupRotationFlexySpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<TrackLaneRingsRotationEffect/RingRotationEffect> _activeRingRotationEffects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*>*& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__activeRingRotationEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__activeRingRotationEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeRingRotationEffects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<TrackLaneRingsRotationEffect/RingRotationEffect> _ringRotationEffectsPool
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*>*& GlobalNamespace::TrackLaneRingsRotationEffect::dyn__ringRotationEffectsPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn__ringRotationEffectsPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ringRotationEffectsPool"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> ringRotationEffectsToDelete
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::TrackLaneRingsRotationEffect::dyn_ringRotationEffectsToDelete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::dyn_ringRotationEffectsToDelete");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ringRotationEffectsToDelete"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrackLaneRingsRotationEffect.Awake
void GlobalNamespace::TrackLaneRingsRotationEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.Start
void GlobalNamespace::TrackLaneRingsRotationEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.FixedUpdate
void GlobalNamespace::TrackLaneRingsRotationEffect::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.AddRingRotationEffect
void GlobalNamespace::TrackLaneRingsRotationEffect::AddRingRotationEffect(float angle, float step, int propagationSpeed, float flexySpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::AddRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(step), ::il2cpp_utils::ExtractType(propagationSpeed), ::il2cpp_utils::ExtractType(flexySpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, angle, step, propagationSpeed, flexySpeed);
}
// Autogenerated method: TrackLaneRingsRotationEffect.GetFirstRingRotationAngle
float GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingRotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFirstRingRotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.GetFirstRingDestinationRotationAngle
float GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFirstRingDestinationRotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.SpawnRingRotationEffect
::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect* GlobalNamespace::TrackLaneRingsRotationEffect::SpawnRingRotationEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::SpawnRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.RecycleRingRotationEffect
void GlobalNamespace::TrackLaneRingsRotationEffect::RecycleRingRotationEffect(::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect* ringRotationEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RecycleRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ringRotationEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ringRotationEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffect/RingRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect_RingRotationEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single rotationAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationFlexySpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationFlexySpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationFlexySpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationFlexySpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 rotationPropagationSpeed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationPropagationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_rotationPropagationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationPropagationSpeed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 progressPos
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_progressPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect::dyn_progressPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressPos"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffectSpawner
#include "GlobalNamespace/TrackLaneRingsRotationEffectSpawner.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: TrackLaneRingsRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BasicBeatmapEventData
#include "GlobalNamespace/BasicBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TrackLaneRingsRotationEffect _trackLaneRingsRotationEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrackLaneRingsRotationEffect*& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__trackLaneRingsRotationEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__trackLaneRingsRotationEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackLaneRingsRotationEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrackLaneRingsRotationEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _beatmapEventType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapEventType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotationStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TrackLaneRingsRotationEffectSpawner/RotationStepType _rotationStepType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationStepType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationStepType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationStepType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rotationPropagationSpeed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationPropagationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationPropagationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationPropagationSpeed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotationFlexySpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationFlexySpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__rotationFlexySpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationFlexySpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.Start
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.OnDestroy
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.HandleBeatmapEvent
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffectSpawner/RotationStepType
#include "GlobalNamespace/TrackLaneRingsRotationEffectSpawner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range0ToMax
::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range0ToMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range0ToMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range0ToMax"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range0ToMax
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range0ToMax(::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range0ToMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range0ToMax", value));
}
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range
::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range(::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range", value));
}
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType MaxOr0
::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_MaxOr0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_MaxOr0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "MaxOr0"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType MaxOr0
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_MaxOr0(::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_MaxOr0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "MaxOr0", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ComboUIController
#include "GlobalNamespace/ComboUIController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IComboController
#include "GlobalNamespace/IComboController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _comboText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::ComboUIController::dyn__comboText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::dyn__comboText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::ComboUIController::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IComboController _comboController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IComboController*& GlobalNamespace::ComboUIController::dyn__comboController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::dyn__comboController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IComboController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _comboLostId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ComboUIController::dyn__comboLostId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::dyn__comboLostId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboLostId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fullComboLost
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ComboUIController::dyn__fullComboLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::dyn__fullComboLost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fullComboLost"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ComboUIController.Start
void GlobalNamespace::ComboUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.OnEnable
void GlobalNamespace::ComboUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.OnDisable
void GlobalNamespace::ComboUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.RegisterForEvents
void GlobalNamespace::ComboUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.UnregisterFromEvents
void GlobalNamespace::ComboUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.HandleComboDidChange
void GlobalNamespace::ComboUIController::HandleComboDidChange(int combo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::HandleComboDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(combo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, combo);
}
// Autogenerated method: ComboUIController.HandleComboBreakingEventHappened
void GlobalNamespace::ComboUIController::HandleComboBreakingEventHappened() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboUIController::HandleComboBreakingEventHappened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboBreakingEventHappened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoreGameHUDController
#include "GlobalNamespace/CoreGameHUDController.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _songProgressPanelGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CoreGameHUDController::dyn__songProgressPanelGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::dyn__songProgressPanelGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songProgressPanelGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _relativeScoreGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CoreGameHUDController::dyn__relativeScoreGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::dyn__relativeScoreGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_relativeScoreGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _immediateRankGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CoreGameHUDController::dyn__immediateRankGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::dyn__immediateRankGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_immediateRankGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _energyPanelGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CoreGameHUDController::dyn__energyPanelGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::dyn__energyPanelGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_energyPanelGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup _canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& GlobalNamespace::CoreGameHUDController::dyn__canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::dyn__canvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CoreGameHUDController.get_songProgressPanelGO
::UnityEngine::GameObject* GlobalNamespace::CoreGameHUDController::get_songProgressPanelGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::get_songProgressPanelGO");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songProgressPanelGO", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoreGameHUDController.get_relativeScoreGo
::UnityEngine::GameObject* GlobalNamespace::CoreGameHUDController::get_relativeScoreGo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::get_relativeScoreGo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_relativeScoreGo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoreGameHUDController.get_immediateRankGo
::UnityEngine::GameObject* GlobalNamespace::CoreGameHUDController::get_immediateRankGo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::get_immediateRankGo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_immediateRankGo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoreGameHUDController.get_energyPanelGo
::UnityEngine::GameObject* GlobalNamespace::CoreGameHUDController::get_energyPanelGo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::get_energyPanelGo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyPanelGo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoreGameHUDController.set_alpha
void GlobalNamespace::CoreGameHUDController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CoreGameHUDController.Initialize
void GlobalNamespace::CoreGameHUDController::Initialize(::GlobalNamespace::CoreGameHUDController::InitData* initData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean hide
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CoreGameHUDController::InitData::dyn_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::InitData::dyn_hide");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hide"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean showEnergyPanel
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CoreGameHUDController::InitData::dyn_showEnergyPanel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::InitData::dyn_showEnergyPanel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showEnergyPanel"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean advancedHUD
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CoreGameHUDController::InitData::dyn_advancedHUD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoreGameHUDController::InitData::dyn_advancedHUD");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "advancedHUD"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyUIPanel
#include "GlobalNamespace/GameEnergyUIPanel.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: IGameEnergyCounter
#include "GlobalNamespace/IGameEnergyCounter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _energyBar
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::GameEnergyUIPanel::dyn__energyBar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__energyBar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_energyBar"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _playableDirector
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::GameEnergyUIPanel::dyn__playableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__playableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playableDirector"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _batteryLifeSegmentPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::GameEnergyUIPanel::dyn__batteryLifeSegmentPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__batteryLifeSegmentPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_batteryLifeSegmentPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _batterySegmentSeparatorWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GameEnergyUIPanel::dyn__batterySegmentSeparatorWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__batterySegmentSeparatorWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_batterySegmentSeparatorWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _batterySegmentHorizontalPadding
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GameEnergyUIPanel::dyn__batterySegmentHorizontalPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__batterySegmentHorizontalPadding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_batterySegmentHorizontalPadding"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGameEnergyCounter _gameEnergyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameEnergyCounter*& GlobalNamespace::GameEnergyUIPanel::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.UI.Image> _batteryLifeSegments
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>*& GlobalNamespace::GameEnergyUIPanel::dyn__batteryLifeSegments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__batteryLifeSegments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_batteryLifeSegments"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _activeBatteryLifeSegmentsCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameEnergyUIPanel::dyn__activeBatteryLifeSegmentsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__activeBatteryLifeSegmentsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeBatteryLifeSegmentsCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _energyBarRectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& GlobalNamespace::GameEnergyUIPanel::dyn__energyBarRectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::dyn__energyBarRectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_energyBarRectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameEnergyUIPanel.Start
void GlobalNamespace::GameEnergyUIPanel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.Init
void GlobalNamespace::GameEnergyUIPanel::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.OnDestroy
void GlobalNamespace::GameEnergyUIPanel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.CreateUIForBatteryEnergyType
void GlobalNamespace::GameEnergyUIPanel::CreateUIForBatteryEnergyType(int batteryLives) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::CreateUIForBatteryEnergyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateUIForBatteryEnergyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(batteryLives)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, batteryLives);
}
// Autogenerated method: GameEnergyUIPanel.RefreshEnergyUI
void GlobalNamespace::GameEnergyUIPanel::RefreshEnergyUI(float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::RefreshEnergyUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshEnergyUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, energy);
}
// Autogenerated method: GameEnergyUIPanel.HandleGameEnergyCounterDidInit
void GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyCounterDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyCounterDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyCounterDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.HandleGameEnergyDidChange
void GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyDidChange(float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, energy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ImmediateRankUIPanel
#include "GlobalNamespace/ImmediateRankUIPanel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: RelativeScoreAndImmediateRankCounter
#include "GlobalNamespace/RelativeScoreAndImmediateRankCounter.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _rankText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::ImmediateRankUIPanel::dyn__rankText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__rankText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rankText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _relativeScoreText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::ImmediateRankUIPanel::dyn__relativeScoreText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__relativeScoreText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_relativeScoreText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly RelativeScoreAndImmediateRankCounter _relativeScoreAndImmediateRankCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RelativeScoreAndImmediateRankCounter*& GlobalNamespace::ImmediateRankUIPanel::dyn__relativeScoreAndImmediateRankCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__relativeScoreAndImmediateRankCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_relativeScoreAndImmediateRankCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RelativeScoreAndImmediateRankCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder _stringBuilder
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& GlobalNamespace::ImmediateRankUIPanel::dyn__stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__stringBuilder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringBuilder"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevRelativeScore
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ImmediateRankUIPanel::dyn__prevRelativeScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__prevRelativeScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRelativeScore"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RankModel/Rank _prevImmediateRank
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RankModel::Rank& GlobalNamespace::ImmediateRankUIPanel::dyn__prevImmediateRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::dyn__prevImmediateRank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevImmediateRank"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RankModel::Rank*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ImmediateRankUIPanel.Start
void GlobalNamespace::ImmediateRankUIPanel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ImmediateRankUIPanel.HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange
void GlobalNamespace::ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ImmediateRankUIPanel.RefreshUI
void GlobalNamespace::ImmediateRankUIPanel::RefreshUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImmediateRankUIPanel::RefreshUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveGameUIView
#include "GlobalNamespace/MissionObjectiveGameUIView.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: MissionObjectiveChecker
#include "GlobalNamespace/MissionObjectiveChecker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _notFailedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MissionObjectiveGameUIView::dyn__notFailedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__notFailedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notFailedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _failedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MissionObjectiveGameUIView::dyn__failedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__failedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _notClearedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MissionObjectiveGameUIView::dyn__notClearedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__notClearedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notClearedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _clearedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MissionObjectiveGameUIView::dyn__clearedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__clearedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clearedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _resultIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::MissionObjectiveGameUIView::dyn__resultIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__resultIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _finalClearIconColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MissionObjectiveGameUIView::dyn__finalClearIconColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__finalClearIconColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finalClearIconColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _finalFailIconColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MissionObjectiveGameUIView::dyn__finalFailIconColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__finalFailIconColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finalFailIconColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _nonFinalIconColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MissionObjectiveGameUIView::dyn__nonFinalIconColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__nonFinalIconColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nonFinalIconColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _clearedPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::MissionObjectiveGameUIView::dyn__clearedPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__clearedPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clearedPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfParticles
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MissionObjectiveGameUIView::dyn__numberOfParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__numberOfParticles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfParticles"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _nameText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MissionObjectiveGameUIView::dyn__nameText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__nameText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _valueText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MissionObjectiveGameUIView::dyn__valueText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__valueText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valueText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _conditionText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MissionObjectiveGameUIView::dyn__conditionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__conditionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_conditionText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveChecker _missionObjectiveChecker
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveChecker*& GlobalNamespace::MissionObjectiveGameUIView::dyn__missionObjectiveChecker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::dyn__missionObjectiveChecker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveChecker"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveChecker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionObjectiveGameUIView.SetMissionObjectiveChecker
void GlobalNamespace::MissionObjectiveGameUIView::SetMissionObjectiveChecker(::GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::SetMissionObjectiveChecker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMissionObjectiveChecker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.HandleMissionObjectiveStatusDidChange
void GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange(::GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveStatusDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.HandleMissionObjectiveCheckedValueDidChange
void GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange(::GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.RefreshIcon
void GlobalNamespace::MissionObjectiveGameUIView::RefreshIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::RefreshIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveGameUIView.RefreshValue
void GlobalNamespace::MissionObjectiveGameUIView::RefreshValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveGameUIView::RefreshValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectivesGameUIController
#include "GlobalNamespace/MissionObjectivesGameUIController.hpp"
// Including type: MissionObjectiveGameUIView
#include "GlobalNamespace/MissionObjectiveGameUIView.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveGameUIView _missionObjectiveGameUIViewPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveGameUIView*& GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveGameUIViewPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveGameUIViewPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveGameUIViewPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveGameUIView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _separator
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MissionObjectivesGameUIController::dyn__separator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::dyn__separator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separator"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elementWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MissionObjectivesGameUIController::dyn__elementWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::dyn__elementWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elementWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveCheckersManager _missionObjectiveCheckersManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveCheckersManager*& GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveCheckersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveCheckersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveCheckersManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveCheckersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<MissionObjectiveGameUIView> _missionObjectiveGameUIViews
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MissionObjectiveGameUIView*>*& GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveGameUIViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::dyn__missionObjectiveGameUIViews");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveGameUIViews"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::MissionObjectiveGameUIView*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionObjectivesGameUIController.Start
void GlobalNamespace::MissionObjectivesGameUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.OnDestroy
void GlobalNamespace::MissionObjectivesGameUIController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.HandleMissionObjectiveCheckersManagerObjectivesListDidChange
void GlobalNamespace::MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectivesListDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.CreateUIElements
void GlobalNamespace::MissionObjectivesGameUIController::CreateUIElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectivesGameUIController::CreateUIElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateUIElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLeaderboardPanelController
#include "GlobalNamespace/MultiplayerLeaderboardPanelController.hpp"
// Including type: MultiplayerLeaderboardPanelItem
#include "GlobalNamespace/MultiplayerLeaderboardPanelItem.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerLeaderboardPanelItem[] _items
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MultiplayerLeaderboardPanelItem*>& GlobalNamespace::MultiplayerLeaderboardPanelController::dyn__items() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelController::dyn__items");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MultiplayerLeaderboardPanelItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerLeaderboardPanelController::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelController::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLeaderboardPanelController.Start
void GlobalNamespace::MultiplayerLeaderboardPanelController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeaderboardPanelController.Update
void GlobalNamespace::MultiplayerLeaderboardPanelController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLeaderboardPanelItem
#include "GlobalNamespace/MultiplayerLeaderboardPanelItem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _playerNameText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__playerNameText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__playerNameText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerNameText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _scoreText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__scoreText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__scoreText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _positionText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__positionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__positionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _backgroundImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__backgroundImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__backgroundImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_backgroundImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _normalPlayerTextColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__normalPlayerTextColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__normalPlayerTextColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalPlayerTextColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _failedPlayerTextColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__failedPlayerTextColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__failedPlayerTextColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failedPlayerTextColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _firstPlayerBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__firstPlayerBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__firstPlayerBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPlayerBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _lastPlayerBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__lastPlayerBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__lastPlayerBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPlayerBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevPosition
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPosition"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _prevPlayerName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevPlayerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevPlayerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPlayerName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _prevFailed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevFailed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevFailed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevNumberOfPlayers
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevNumberOfPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::dyn__prevNumberOfPlayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevNumberOfPlayers"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLeaderboardPanelItem.set_hide
void GlobalNamespace::MultiplayerLeaderboardPanelItem::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLeaderboardPanelItem.SetData
void GlobalNamespace::MultiplayerLeaderboardPanelItem::SetData(int position, ::StringW playerName, int score, bool failed, int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLeaderboardPanelItem::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(playerName), ::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(failed), ::il2cpp_utils::ExtractType(numberOfPlayers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, playerName, score, failed, numberOfPlayers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPositionHUDController
#include "GlobalNamespace/MultiplayerPositionHUDController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _playerCountText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerPositionHUDController::dyn__playerCountText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__playerCountText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerCountText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _positionText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerPositionHUDController::dyn__positionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__positionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup _canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& GlobalNamespace::MultiplayerPositionHUDController::dyn__canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__canvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _firstPlayerAnimationGo
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::MultiplayerPositionHUDController::dyn__firstPlayerAnimationGo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__firstPlayerAnimationGo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPlayerAnimationGo"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerPositionHUDController::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _playersManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerPositionHUDController::dyn__playersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__playersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly CoreGameHUDController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController::InitData*& GlobalNamespace::MultiplayerPositionHUDController::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CoreGameHUDController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevPosition
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerPositionHUDController::dyn__prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::dyn__prevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPosition"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerPositionHUDController.set_alpha
void GlobalNamespace::MultiplayerPositionHUDController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPositionHUDController.Start
void GlobalNamespace::MultiplayerPositionHUDController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionHUDController.Update
void GlobalNamespace::MultiplayerPositionHUDController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPositionHUDController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RecordingUIController
#include "GlobalNamespace/RecordingUIController.hpp"
// Including type: RecordingUIController/InitData
#include "GlobalNamespace/RecordingUIController_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _circle
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::RecordingUIController::dyn__circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::dyn__circle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_circle"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _updateTimeSpan
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RecordingUIController::dyn__updateTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::dyn__updateTimeSpan");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateTimeSpan"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly RecordingUIController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RecordingUIController::InitData*& GlobalNamespace::RecordingUIController::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RecordingUIController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastUpdateTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RecordingUIController::dyn__lastUpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::dyn__lastUpdateTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastUpdateTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RecordingUIController.Init
void GlobalNamespace::RecordingUIController::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RecordingUIController.Update
void GlobalNamespace::RecordingUIController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RecordingUIController/InitData
#include "GlobalNamespace/RecordingUIController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean recordingEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RecordingUIController::InitData::dyn_recordingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingUIController::InitData::dyn_recordingEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "recordingEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RelativeScoreAndImmediateRankCounter
#include "GlobalNamespace/RelativeScoreAndImmediateRankCounter.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameplayModifiersModelSO _gameplayModifiersModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiersModelSO*& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__gameplayModifiersModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__gameplayModifiersModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayModifiersModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiersModelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayModifiers _gameplayModifiers
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn__gameplayModifiers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayModifiers"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayModifiers**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action relativeScoreOrImmediateRankDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_relativeScoreOrImmediateRankDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_relativeScoreOrImmediateRankDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "relativeScoreOrImmediateRankDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <relativeScore>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_$relativeScore$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_$relativeScore$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<relativeScore>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RankModel/Rank <immediateRank>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RankModel::Rank& GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_$immediateRank$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::dyn_$immediateRank$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<immediateRank>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RankModel::Rank*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.get_relativeScore
float GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_relativeScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_relativeScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_relativeScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.set_relativeScore
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_relativeScore(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_relativeScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_relativeScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.get_immediateRank
::GlobalNamespace::RankModel::Rank GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_immediateRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_immediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_immediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::RankModel::Rank, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.set_immediateRank
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_immediateRank(::GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_immediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_immediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.add_relativeScoreOrImmediateRankDidChangeEvent
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.remove_relativeScoreOrImmediateRankDidChangeEvent
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.Start
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.OnDestroy
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.HandleScoreDidChange
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::HandleScoreDidChange(int scoreWithoutModifiers, int scoreWithModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::HandleScoreDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreWithoutModifiers), ::il2cpp_utils::ExtractType(scoreWithModifiers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scoreWithoutModifiers, scoreWithModifiers);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.UpdateRelativeScoreAndImmediateRank
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank(int score, int modifiedScore, int maxPossibleScore, int maxPossibleModifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRelativeScoreAndImmediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(modifiedScore), ::il2cpp_utils::ExtractType(maxPossibleScore), ::il2cpp_utils::ExtractType(maxPossibleModifiedScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, score, modifiedScore, maxPossibleScore, maxPossibleModifiedScore);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreMultiplierUIController
#include "GlobalNamespace/ScoreMultiplierUIController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI[] _multiplierTexts
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TextMeshProUGUI*>& GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierTexts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierTexts"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TextMeshProUGUI*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _multiplierProgressImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierProgressImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierProgressImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierProgressImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _multiplierAnimator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierAnimator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::ScoreMultiplierUIController::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevMultiplier
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScoreMultiplierUIController::dyn__prevMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__prevMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevMultiplier"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _multiplierIncreasedTriggerId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierIncreasedTriggerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__multiplierIncreasedTriggerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierIncreasedTriggerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _progressTarget
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ScoreMultiplierUIController::dyn__progressTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::dyn__progressTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progressTarget"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScoreMultiplierUIController.Start
void GlobalNamespace::ScoreMultiplierUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.OnEnable
void GlobalNamespace::ScoreMultiplierUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.OnDisable
void GlobalNamespace::ScoreMultiplierUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.RegisterForEvents
void GlobalNamespace::ScoreMultiplierUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.UnregisterFromEvents
void GlobalNamespace::ScoreMultiplierUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.Update
void GlobalNamespace::ScoreMultiplierUIController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.HandleMultiplierDidChange
void GlobalNamespace::ScoreMultiplierUIController::HandleMultiplierDidChange(int multiplier, float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMultiplierUIController::HandleMultiplierDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplierDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multiplier, progress);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController
#include "GlobalNamespace/ScoreUIController.hpp"
// Including type: ScoreUIController/InitData
#include "GlobalNamespace/ScoreUIController_InitData.hpp"
// Including type: ScoreUIController/ScoreDisplayType
#include "GlobalNamespace/ScoreUIController_ScoreDisplayType.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfDigits
int GlobalNamespace::ScoreUIController::_get_kMaxNumberOfDigits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::_get_kMaxNumberOfDigits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreUIController", "kMaxNumberOfDigits"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfDigits
void GlobalNamespace::ScoreUIController::_set_kMaxNumberOfDigits(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::_set_kMaxNumberOfDigits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController", "kMaxNumberOfDigits", value));
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _scoreText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::ScoreUIController::dyn__scoreText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::dyn__scoreText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ScoreUIController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScoreUIController::InitData*& GlobalNamespace::ScoreUIController::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScoreUIController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::ScoreUIController::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder _stringBuilder
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& GlobalNamespace::ScoreUIController::dyn__stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::dyn__stringBuilder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringBuilder"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScoreUIController.Start
void GlobalNamespace::ScoreUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.OnEnable
void GlobalNamespace::ScoreUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.OnDisable
void GlobalNamespace::ScoreUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.RegisterForEvents
void GlobalNamespace::ScoreUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.UnregisterFromEvents
void GlobalNamespace::ScoreUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.HandleScoreDidChangeRealtime
void GlobalNamespace::ScoreUIController::HandleScoreDidChangeRealtime(int multipliedScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::HandleScoreDidChangeRealtime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreDidChangeRealtime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipliedScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multipliedScore, modifiedScore);
}
// Autogenerated method: ScoreUIController.UpdateScore
void GlobalNamespace::ScoreUIController::UpdateScore(int multipliedScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::UpdateScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipliedScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multipliedScore, modifiedScore);
}
// Autogenerated method: ScoreUIController.Append000Number
void GlobalNamespace::ScoreUIController::Append000Number(::System::Text::StringBuilder* stringBuilder, int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::Append000Number");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreUIController", "Append000Number", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringBuilder), ::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stringBuilder, number);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController/InitData
#include "GlobalNamespace/ScoreUIController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly ScoreUIController/ScoreDisplayType scoreDisplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScoreUIController::ScoreDisplayType& GlobalNamespace::ScoreUIController::InitData::dyn_scoreDisplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::InitData::dyn_scoreDisplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scoreDisplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScoreUIController::ScoreDisplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController/ScoreDisplayType
#include "GlobalNamespace/ScoreUIController_ScoreDisplayType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScoreUIController/ScoreDisplayType MultipliedScore
::GlobalNamespace::ScoreUIController::ScoreDisplayType GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_MultipliedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_MultipliedScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScoreUIController::ScoreDisplayType>("", "ScoreUIController/ScoreDisplayType", "MultipliedScore"));
}
// Autogenerated static field setter
// Set static field: static public ScoreUIController/ScoreDisplayType MultipliedScore
void GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_MultipliedScore(::GlobalNamespace::ScoreUIController::ScoreDisplayType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_MultipliedScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController/ScoreDisplayType", "MultipliedScore", value));
}
// Autogenerated static field getter
// Get static field: static public ScoreUIController/ScoreDisplayType ModifiedScore
::GlobalNamespace::ScoreUIController::ScoreDisplayType GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_ModifiedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_ModifiedScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScoreUIController::ScoreDisplayType>("", "ScoreUIController/ScoreDisplayType", "ModifiedScore"));
}
// Autogenerated static field setter
// Set static field: static public ScoreUIController/ScoreDisplayType ModifiedScore
void GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_ModifiedScore(::GlobalNamespace::ScoreUIController::ScoreDisplayType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_ModifiedScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController/ScoreDisplayType", "ModifiedScore", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScoreUIController::ScoreDisplayType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreUIController::ScoreDisplayType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetApplicationVersionText
#include "GlobalNamespace/SetApplicationVersionText.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _versionText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& GlobalNamespace::SetApplicationVersionText::dyn__versionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetApplicationVersionText::dyn__versionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_versionText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SetApplicationVersionText.Start
void GlobalNamespace::SetApplicationVersionText::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetApplicationVersionText::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongProgressUIController
#include "GlobalNamespace/SongProgressUIController.hpp"
// Including type: UnityEngine.UI.Slider
#include "UnityEngine/UI/Slider.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Slider _slider
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Slider*& GlobalNamespace::SongProgressUIController::dyn__slider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__slider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_slider"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Slider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _progressImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::SongProgressUIController::dyn__progressImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__progressImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progressImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _durationMinutesText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SongProgressUIController::dyn__durationMinutesText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__durationMinutesText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_durationMinutesText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _durationSecondsText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SongProgressUIController::dyn__durationSecondsText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__durationSecondsText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_durationSecondsText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _progressMinutesText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SongProgressUIController::dyn__progressMinutesText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__progressMinutesText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progressMinutesText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _progressSecondsText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SongProgressUIController::dyn__progressSecondsText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__progressSecondsText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progressSecondsText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::SongProgressUIController::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevMinutes
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SongProgressUIController::dyn__prevMinutes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__prevMinutes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevMinutes"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevSeconds
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SongProgressUIController::dyn__prevSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__prevSeconds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevSeconds"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder _stringBuilder
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& GlobalNamespace::SongProgressUIController::dyn__stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__stringBuilder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringBuilder"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _progressImageRectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& GlobalNamespace::SongProgressUIController::dyn__progressImageRectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::dyn__progressImageRectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_progressImageRectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SongProgressUIController.Start
void GlobalNamespace::SongProgressUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongProgressUIController.Update
void GlobalNamespace::SongProgressUIController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongProgressUIController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager
#include "GlobalNamespace/EventsTestGameplayManager.hpp"
// Including type: EventsTestGameplayManager/MockBeatToTimeConvertor
#include "GlobalNamespace/EventsTestGameplayManager_MockBeatToTimeConvertor.hpp"
// Including type: EventsTestGameplayManager/<>c__DisplayClass18_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass18_0.hpp"
// Including type: EventsTestGameplayManager/<>c__DisplayClass19_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass19_0.hpp"
// Including type: EventsTestGameplayManager/<>c__DisplayClass20_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass20_0.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapEventDataBoxGroupList
#include "GlobalNamespace/BeatmapEventDataBoxGroupList.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kNumberOfLightGroups
int GlobalNamespace::EventsTestGameplayManager::_get_kNumberOfLightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::_get_kNumberOfLightGroups");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EventsTestGameplayManager", "kNumberOfLightGroups"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kNumberOfLightGroups
void GlobalNamespace::EventsTestGameplayManager::_set_kNumberOfLightGroups(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::_set_kNumberOfLightGroups");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EventsTestGameplayManager", "kNumberOfLightGroups", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _moveTime
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EventsTestGameplayManager::dyn__moveTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__moveTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveTime"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _spawnTestBox
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EventsTestGameplayManager::dyn__spawnTestBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__spawnTestBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnTestBox"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::EventsTestGameplayManager::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapData _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapData*& GlobalNamespace::EventsTestGameplayManager::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::EventsTestGameplayManager::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BasicBeatmapEventType _basicBeatmapEventType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& GlobalNamespace::EventsTestGameplayManager::dyn__basicBeatmapEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__basicBeatmapEventType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_basicBeatmapEventType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BasicBeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _floatValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EventsTestGameplayManager::dyn__floatValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__floatValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floatValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapEventDataBoxGroupList[] _beatmapEventDataBoxGroupLists
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapEventDataBoxGroupList*>& GlobalNamespace::EventsTestGameplayManager::dyn__beatmapEventDataBoxGroupLists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__beatmapEventDataBoxGroupLists");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventDataBoxGroupLists"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapEventDataBoxGroupList*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] groupState
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::EventsTestGameplayManager::dyn_groupState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn_groupState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groupState"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.KeyCode,BasicBeatmapEventType> _beatmapEventTypeBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::GlobalNamespace::BasicBeatmapEventType>*& GlobalNamespace::EventsTestGameplayManager::dyn__beatmapEventTypeBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__beatmapEventTypeBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventTypeBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::GlobalNamespace::BasicBeatmapEventType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.KeyCode,System.Int32> _intBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, int>*& GlobalNamespace::EventsTestGameplayManager::dyn__intBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__intBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.KeyCode,System.Int32> _beatmapValuesBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, int>*& GlobalNamespace::EventsTestGameplayManager::dyn__beatmapValuesBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__beatmapValuesBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapValuesBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.KeyCode,System.Single> _floatValuesBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, float>*& GlobalNamespace::EventsTestGameplayManager::dyn__floatValuesBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__floatValuesBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floatValuesBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _rotatingLasers
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EventsTestGameplayManager::dyn__rotatingLasers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::dyn__rotatingLasers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotatingLasers"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventsTestGameplayManager.Start
void GlobalNamespace::EventsTestGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EventsTestGameplayManager.Update
void GlobalNamespace::EventsTestGameplayManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EventsTestGameplayManager.AddEventsForLightGroup
void GlobalNamespace::EventsTestGameplayManager::AddEventsForLightGroup(int lightGroupId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::AddEventsForLightGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEventsForLightGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightGroupId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightGroupId);
}
// Autogenerated method: EventsTestGameplayManager.AddInstantToggleEventsForLightGroup
void GlobalNamespace::EventsTestGameplayManager::AddInstantToggleEventsForLightGroup(int lightGroupId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::AddInstantToggleEventsForLightGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstantToggleEventsForLightGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightGroupId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightGroupId);
}
// Autogenerated method: EventsTestGameplayManager.AddToggleEventsForLightGroup
void GlobalNamespace::EventsTestGameplayManager::AddToggleEventsForLightGroup(int lightGroupId, ::GlobalNamespace::EnvironmentColorType color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::AddToggleEventsForLightGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToggleEventsForLightGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightGroupId), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightGroupId, color);
}
// Autogenerated method: EventsTestGameplayManager.AddTestBox
void GlobalNamespace::EventsTestGameplayManager::AddTestBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::AddTestBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTestBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager/MockBeatToTimeConvertor
#include "GlobalNamespace/EventsTestGameplayManager_MockBeatToTimeConvertor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _bpm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::dyn__bpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::dyn__bpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventsTestGameplayManager/MockBeatToTimeConvertor.ConvertBeatToTime
float GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::ConvertBeatToTime(float beat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::ConvertBeatToTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertBeatToTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, beat);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager/<>c__DisplayClass18_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass18_0.hpp"
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 lightGroupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass18_0::dyn_lightGroupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass18_0::dyn_lightGroupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightGroupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventsTestGameplayManager/<>c__DisplayClass18_0.<AddEventsForLightGroup>b__0
bool GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass18_0::$AddEventsForLightGroup$b__0(::GlobalNamespace::LightGroup* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass18_0::<AddEventsForLightGroup>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddEventsForLightGroup>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager/<>c__DisplayClass19_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass19_0.hpp"
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 lightGroupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass19_0::dyn_lightGroupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass19_0::dyn_lightGroupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightGroupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventsTestGameplayManager/<>c__DisplayClass19_0.<AddInstantToggleEventsForLightGroup>b__0
bool GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass19_0::$AddInstantToggleEventsForLightGroup$b__0(::GlobalNamespace::LightGroup* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass19_0::<AddInstantToggleEventsForLightGroup>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddInstantToggleEventsForLightGroup>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager/<>c__DisplayClass20_0
#include "GlobalNamespace/EventsTestGameplayManager_--c__DisplayClass20_0.hpp"
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 lightGroupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass20_0::dyn_lightGroupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass20_0::dyn_lightGroupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightGroupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventsTestGameplayManager/<>c__DisplayClass20_0.<AddToggleEventsForLightGroup>b__0
bool GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass20_0::$AddToggleEventsForLightGroup$b__0(::GlobalNamespace::LightGroup* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::$$c__DisplayClass20_0::<AddToggleEventsForLightGroup>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddToggleEventsForLightGroup>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILevelEndActions.add_levelFailedEvent
void GlobalNamespace::ILevelEndActions::add_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelEndActions::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.remove_levelFailedEvent
void GlobalNamespace::ILevelEndActions::remove_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelEndActions::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.add_levelFinishedEvent
void GlobalNamespace::ILevelEndActions::add_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelEndActions::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.remove_levelFinishedEvent
void GlobalNamespace::ILevelEndActions::remove_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelEndActions::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILevelStartController
#include "GlobalNamespace/ILevelStartController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILevelStartController.add_levelWillStartIntroEvent
void GlobalNamespace::ILevelStartController::add_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelStartController::add_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelStartController.remove_levelWillStartIntroEvent
void GlobalNamespace::ILevelStartController::remove_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelStartController::remove_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelStartController.add_levelDidStartEvent
void GlobalNamespace::ILevelStartController::add_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelStartController::add_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelStartController.remove_levelDidStartEvent
void GlobalNamespace::ILevelStartController::remove_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILevelStartController::remove_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmappingGameplayManager
#include "GlobalNamespace/LightmappingGameplayManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::LightmappingGameplayManager::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmappingGameplayManager::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmappingGameplayManager.Start
void GlobalNamespace::LightmappingGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmappingGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager
#include "GlobalNamespace/MissionLevelGameplayManager.hpp"
// Including type: MissionLevelGameplayManager/InitData
#include "GlobalNamespace/MissionLevelGameplayManager_InitData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MissionLevelGameplayManager/<Start>d__23
#include "GlobalNamespace/MissionLevelGameplayManager_-Start-d__23.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveCheckersManager _missionObjectiveCheckersManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveCheckersManager*& GlobalNamespace::MissionLevelGameplayManager::dyn__missionObjectiveCheckersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__missionObjectiveCheckersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveCheckersManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveCheckersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameScenesManager _gameScenesManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::MissionLevelGameplayManager::dyn__gameScenesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__gameScenesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameScenesManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::MissionLevelGameplayManager::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameEnergyCounter _gameEnergyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& GlobalNamespace::MissionLevelGameplayManager::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PauseController _pauseController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PauseController*& GlobalNamespace::MissionLevelGameplayManager::dyn__pauseController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__pauseController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pauseController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PauseController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MissionLevelGameplayManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::InitData*& GlobalNamespace::MissionLevelGameplayManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionLevelGameplayManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelWillStartIntroEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionLevelGameplayManager::dyn_levelWillStartIntroEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn_levelWillStartIntroEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelWillStartIntroEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionLevelGameplayManager::dyn_levelDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn_levelDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelFailedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionLevelGameplayManager::dyn_levelFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn_levelFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFailedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelFinishedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionLevelGameplayManager::dyn_levelFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn_levelFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFinishedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionLevelGameplayManager/GameState _gameState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::GameState& GlobalNamespace::MissionLevelGameplayManager::dyn__gameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__gameState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionLevelGameplayManager::GameState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionLevelGameplayManager/GameState _prePauseGameState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::GameState& GlobalNamespace::MissionLevelGameplayManager::dyn__prePauseGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::dyn__prePauseGameState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prePauseGameState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionLevelGameplayManager::GameState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionLevelGameplayManager.add_levelWillStartIntroEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::add_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelWillStartIntroEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::remove_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.add_levelDidStartEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::add_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelDidStartEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::remove_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.add_levelFailedEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelFailedEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.add_levelFinishedEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelFinishedEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.Awake
void GlobalNamespace::MissionLevelGameplayManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.Start
::System::Collections::IEnumerator* GlobalNamespace::MissionLevelGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.OnDestroy
void GlobalNamespace::MissionLevelGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleMissionObjectiveCheckersManagerObjectiveDidFail
void GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectiveDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleSongDidFinish
void GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerCanPause
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause(::System::Action_1<bool>* canPause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerCanPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canPause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canPause);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerDidPause
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerDidResume
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager/InitData
#include "GlobalNamespace/MissionLevelGameplayManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean failOn0Energy
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MissionLevelGameplayManager::InitData::dyn_failOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::InitData::dyn_failOn0Energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "failOn0Energy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager/GameState
#include "GlobalNamespace/MissionLevelGameplayManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Intro
::GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Intro
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Intro(::GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Playing
::GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Playing
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Playing(::GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Playing", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Paused
::GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Paused
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Paused(::GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Finished
::GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Finished
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Finished(::GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Finished", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Failed
::GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Failed
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Failed(::GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Failed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MissionLevelGameplayManager::GameState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::GameState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionLevelGameplayManager/<Start>d__23
#include "GlobalNamespace/MissionLevelGameplayManager_-Start-d__23.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MissionLevelGameplayManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager*& GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionLevelGameplayManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__23.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__23.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__23.System.IDisposable.Dispose
void GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__23.MoveNext
bool GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__23.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockLevelEndActions
#include "GlobalNamespace/MockLevelEndActions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action levelFailedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MockLevelEndActions::dyn_levelFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::dyn_levelFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFailedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelFinishedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MockLevelEndActions::dyn_levelFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::dyn_levelFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFinishedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockLevelEndActions.add_levelFailedEvent
void GlobalNamespace::MockLevelEndActions::add_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.remove_levelFailedEvent
void GlobalNamespace::MockLevelEndActions::remove_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.add_levelFinishedEvent
void GlobalNamespace::MockLevelEndActions::add_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.remove_levelFinishedEvent
void GlobalNamespace::MockLevelEndActions::remove_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockLevelEndActions::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager
#include "GlobalNamespace/StandardLevelGameplayManager.hpp"
// Including type: StandardLevelGameplayManager/InitData
#include "GlobalNamespace/StandardLevelGameplayManager_InitData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: StandardLevelGameplayManager/<Start>d__22
#include "GlobalNamespace/StandardLevelGameplayManager_-Start-d__22.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly GameScenesManager _gameScenesManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::StandardLevelGameplayManager::dyn__gameScenesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__gameScenesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameScenesManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::StandardLevelGameplayManager::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameEnergyCounter _gameEnergyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& GlobalNamespace::StandardLevelGameplayManager::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PauseController _pauseController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PauseController*& GlobalNamespace::StandardLevelGameplayManager::dyn__pauseController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__pauseController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pauseController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PauseController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly StandardLevelGameplayManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelGameplayManager::InitData*& GlobalNamespace::StandardLevelGameplayManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelGameplayManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelWillStartIntroEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::StandardLevelGameplayManager::dyn_levelWillStartIntroEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn_levelWillStartIntroEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelWillStartIntroEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::StandardLevelGameplayManager::dyn_levelDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn_levelDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelFailedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::StandardLevelGameplayManager::dyn_levelFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn_levelFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFailedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action levelFinishedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::StandardLevelGameplayManager::dyn_levelFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn_levelFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFinishedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private StandardLevelGameplayManager/GameState _gameState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelGameplayManager::GameState& GlobalNamespace::StandardLevelGameplayManager::dyn__gameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__gameState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelGameplayManager::GameState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private StandardLevelGameplayManager/GameState _prePauseGameState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelGameplayManager::GameState& GlobalNamespace::StandardLevelGameplayManager::dyn__prePauseGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::dyn__prePauseGameState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prePauseGameState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelGameplayManager::GameState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelGameplayManager.add_levelWillStartIntroEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::add_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelWillStartIntroEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelWillStartIntroEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::remove_levelWillStartIntroEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelWillStartIntroEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.add_levelDidStartEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::add_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelDidStartEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::remove_levelDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.add_levelFailedEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelFailedEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelFailedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.add_levelFinishedEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelFinishedEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelFinishedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.Awake
void GlobalNamespace::StandardLevelGameplayManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.Start
::System::Collections::IEnumerator* GlobalNamespace::StandardLevelGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.OnDestroy
void GlobalNamespace::StandardLevelGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.Update
void GlobalNamespace::StandardLevelGameplayManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::StandardLevelGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandleSongDidFinish
void GlobalNamespace::StandardLevelGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerCanPause
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerCanPause(::System::Action_1<bool>* canPause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerCanPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerCanPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canPause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canPause);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerDidPause
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerDidResume
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager/InitData
#include "GlobalNamespace/StandardLevelGameplayManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean failOn0Energy
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::StandardLevelGameplayManager::InitData::dyn_failOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::InitData::dyn_failOn0Energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "failOn0Energy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager/GameState
#include "GlobalNamespace/StandardLevelGameplayManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Intro
::GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Intro
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Intro(::GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Playing
::GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Playing
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Playing(::GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Playing", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Paused
::GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Paused
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Paused(::GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Finished
::GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Finished
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Finished(::GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Finished", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Failed
::GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Failed
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Failed(::GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Failed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StandardLevelGameplayManager::GameState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::GameState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelGameplayManager/<Start>d__22
#include "GlobalNamespace/StandardLevelGameplayManager_-Start-d__22.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public StandardLevelGameplayManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelGameplayManager*& GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelGameplayManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__22.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__22.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__22.System.IDisposable.Dispose
void GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__22.MoveNext
bool GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__22.System.Collections.IEnumerator.Reset
void GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelGameplayManager::$Start$d__22::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrailerGameplayManager
#include "GlobalNamespace/TrailerGameplayManager.hpp"
// Including type: TrailerGameplayManager/<Start>d__4
#include "GlobalNamespace/TrailerGameplayManager_-Start-d__4.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disableMainCamera
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TrailerGameplayManager::dyn__disableMainCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::dyn__disableMainCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disableMainCamera"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameScenesManager _gameScenesManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::TrailerGameplayManager::dyn__gameScenesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::dyn__gameScenesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameScenesManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::TrailerGameplayManager::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MainCamera _mainCamera
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MainCamera*& GlobalNamespace::TrailerGameplayManager::dyn__mainCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::dyn__mainCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainCamera"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MainCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrailerGameplayManager.Start
::System::Collections::IEnumerator* GlobalNamespace::TrailerGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TrailerGameplayManager/<Start>d__4
#include "GlobalNamespace/TrailerGameplayManager_-Start-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TrailerGameplayManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrailerGameplayManager*& GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrailerGameplayManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.IDisposable.Dispose
void GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.MoveNext
bool GlobalNamespace::TrailerGameplayManager::$Start$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: WaypointsTestGameplayManager
#include "GlobalNamespace/WaypointsTestGameplayManager.hpp"
// Including type: BTSCharacterSpawnController
#include "GlobalNamespace/BTSCharacterSpawnController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: StandardGameplaySceneSetupData
#include "GlobalNamespace/StandardGameplaySceneSetupData.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _outerCapsuleStart
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outerCapsuleStart"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _outerCapsuleEnd
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outerCapsuleEnd"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _outerCapsuleRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__outerCapsuleRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outerCapsuleRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _innerSphereOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WaypointsTestGameplayManager::dyn__innerSphereOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__innerSphereOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_innerSphereOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _innerSphereRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__innerSphereRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__innerSphereRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_innerSphereRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask _layersToColliderWith
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::WaypointsTestGameplayManager::dyn__layersToColliderWith() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__layersToColliderWith");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layersToColliderWith"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BTSCharacterSpawnController _characterSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BTSCharacterSpawnController*& GlobalNamespace::WaypointsTestGameplayManager::dyn__characterSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__characterSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_characterSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BTSCharacterSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::WaypointsTestGameplayManager::dyn__audioTimeSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__audioTimeSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly StandardGameplaySceneSetupData _standardSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardGameplaySceneSetupData*& GlobalNamespace::WaypointsTestGameplayManager::dyn__standardSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__standardSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_standardSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardGameplaySceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _levelSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::WaypointsTestGameplayManager::dyn__levelSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__levelSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::WaypointsTestGameplayManager::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _firstPosSaved
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WaypointsTestGameplayManager::dyn__firstPosSaved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__firstPosSaved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPosSaved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _speedSaved
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WaypointsTestGameplayManager::dyn__speedSaved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__speedSaved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speedSaved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _lastFramePos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WaypointsTestGameplayManager::dyn__lastFramePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__lastFramePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFramePos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastFrameSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__lastFrameSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__lastFrameSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _biggestFrameSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestFrameSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestFrameSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_biggestFrameSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _biggestFrameSpeedSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestFrameSpeedSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestFrameSpeedSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_biggestFrameSpeedSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _biggestAcceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestAcceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_biggestAcceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _biggestAccelerationSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestAccelerationSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::dyn__biggestAccelerationSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_biggestAccelerationSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WaypointsTestGameplayManager.Start
void GlobalNamespace::WaypointsTestGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.LateUpdate
void GlobalNamespace::WaypointsTestGameplayManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.OnDestroy
void GlobalNamespace::WaypointsTestGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.GetBar
::StringW GlobalNamespace::WaypointsTestGameplayManager::GetBar(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::GetBar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, songTime);
}
// Autogenerated method: WaypointsTestGameplayManager.OnDrawGizmos
void GlobalNamespace::WaypointsTestGameplayManager::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaypointsTestGameplayManager::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GamePause
#include "GlobalNamespace/GamePause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: AudioListenerController
#include "GlobalNamespace/AudioListenerController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action didPauseEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::GamePause::dyn_didPauseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn_didPauseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didPauseEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action willResumeEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::GamePause::dyn_willResumeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn_willResumeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "willResumeEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action didResumeEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::GamePause::dyn_didResumeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn_didResumeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didResumeEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameEnergyCounter _gameEnergyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& GlobalNamespace::GamePause::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerHeadAndObstacleInteraction*& GlobalNamespace::GamePause::dyn__playerHeadAndObstacleInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__playerHeadAndObstacleInteraction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerHeadAndObstacleInteraction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerHeadAndObstacleInteraction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::GamePause::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapObjectExecutionRatingsRecorder _beatmapObjectExecutionRatingsRecorder
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectExecutionRatingsRecorder*& GlobalNamespace::GamePause::dyn__beatmapObjectExecutionRatingsRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__beatmapObjectExecutionRatingsRecorder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectExecutionRatingsRecorder"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectExecutionRatingsRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SongController _songController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongController*& GlobalNamespace::GamePause::dyn__songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__songController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::GamePause::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AudioListenerController _audioListenerController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioListenerController*& GlobalNamespace::GamePause::dyn__audioListenerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__audioListenerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioListenerController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioListenerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _pause
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GamePause::dyn__pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::dyn__pause");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pause"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GamePause.get_isPaused
bool GlobalNamespace::GamePause::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GamePause.add_didPauseEvent
void GlobalNamespace::GamePause::add_didPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_didPauseEvent
void GlobalNamespace::GamePause::remove_didPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.add_willResumeEvent
void GlobalNamespace::GamePause::add_willResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_willResumeEvent
void GlobalNamespace::GamePause::remove_willResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.add_didResumeEvent
void GlobalNamespace::GamePause::add_didResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_didResumeEvent
void GlobalNamespace::GamePause::remove_didResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.Pause
void GlobalNamespace::GamePause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GamePause.WillResume
void GlobalNamespace::GamePause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GamePause.Resume
void GlobalNamespace::GamePause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GamePause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGamePause.get_isPaused
bool GlobalNamespace::IGamePause::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IGamePause.add_didPauseEvent
void GlobalNamespace::IGamePause::add_didPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_didPauseEvent
void GlobalNamespace::IGamePause::remove_didPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.add_willResumeEvent
void GlobalNamespace::IGamePause::add_willResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_willResumeEvent
void GlobalNamespace::IGamePause::remove_willResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.add_didResumeEvent
void GlobalNamespace::IGamePause::add_didResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_didResumeEvent
void GlobalNamespace::IGamePause::remove_didResumeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.Pause
void GlobalNamespace::IGamePause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGamePause.WillResume
void GlobalNamespace::IGamePause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGamePause.Resume
void GlobalNamespace::IGamePause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGamePause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalPlayerInGameMenuInitData
#include "GlobalNamespace/LocalPlayerInGameMenuInitData.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly IPreviewBeatmapLevel previewBeatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_previewBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_previewBeatmapLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewBeatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapDifficulty beatmapDifficulty
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_beatmapDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_beatmapDifficulty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapDifficulty"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficulty*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapCharacteristicSO beatmapCharacteristic
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_beatmapCharacteristic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapCharacteristic"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean hasSong
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_hasSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalPlayerInGameMenuInitData::dyn_hasSong");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasSong"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DelayedMenuButtonTrigger
#include "GlobalNamespace/DelayedMenuButtonTrigger.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action menuButtonTriggeredEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DelayedMenuButtonTrigger::dyn_menuButtonTriggeredEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::dyn_menuButtonTriggeredEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "menuButtonTriggeredEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _pressDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DelayedMenuButtonTrigger::dyn__pressDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::dyn__pressDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pressDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DelayedMenuButtonTrigger::dyn__timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::dyn__timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _waitingForButtonRelease
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DelayedMenuButtonTrigger::dyn__waitingForButtonRelease() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::dyn__waitingForButtonRelease");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitingForButtonRelease"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRControllersInputManager _vrControllersInputManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRControllersInputManager*& GlobalNamespace::DelayedMenuButtonTrigger::dyn__vrControllersInputManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::dyn__vrControllersInputManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrControllersInputManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRControllersInputManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DelayedMenuButtonTrigger.add_menuButtonTriggeredEvent
void GlobalNamespace::DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DelayedMenuButtonTrigger.remove_menuButtonTriggeredEvent
void GlobalNamespace::DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DelayedMenuButtonTrigger.Tick
void GlobalNamespace::DelayedMenuButtonTrigger::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedMenuButtonTrigger::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
