// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DefaultEnvironmentEventsFactory
#include "GlobalNamespace/DefaultEnvironmentEventsFactory.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: BeatmapEventDataBoxGroupLists
#include "GlobalNamespace/BeatmapEventDataBoxGroupLists.hpp"
// Including type: DefaultEnvironmentEvents
#include "GlobalNamespace/DefaultEnvironmentEvents.hpp"
// Including type: EnvironmentLightGroups
#include "GlobalNamespace/EnvironmentLightGroups.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DefaultEnvironmentEventsFactory.InsertDefaultEnvironmentEvents
void GlobalNamespace::DefaultEnvironmentEventsFactory::InsertDefaultEnvironmentEvents(::GlobalNamespace::BeatmapData* beatmapData, ::GlobalNamespace::BeatmapEventDataBoxGroupLists* beatmapEventDataBoxGroupLists, ::GlobalNamespace::DefaultEnvironmentEvents* defaultEnvironmentEvents, ::GlobalNamespace::EnvironmentLightGroups* environmentLightGroups) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DefaultEnvironmentEventsFactory::InsertDefaultEnvironmentEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DefaultEnvironmentEventsFactory", "InsertDefaultEnvironmentEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData), ::il2cpp_utils::ExtractType(beatmapEventDataBoxGroupLists), ::il2cpp_utils::ExtractType(defaultEnvironmentEvents), ::il2cpp_utils::ExtractType(environmentLightGroups)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapData, beatmapEventDataBoxGroupLists, defaultEnvironmentEvents, environmentLightGroups);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEnvironmentHelper
#include "GlobalNamespace/BeatmapEnvironmentHelper.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapEnvironmentHelper.GetEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::BeatmapEnvironmentHelper::GetEnvironmentInfo(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEnvironmentHelper::GetEnvironmentInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEnvironmentHelper", "GetEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBox
#include "GlobalNamespace/BeatmapEventDataBox.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IndexFilter <indexFilter>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter*& GlobalNamespace::BeatmapEventDataBox::dyn_$indexFilter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn_$indexFilter$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<indexFilter>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IndexFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _beatDistributionParam
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapEventDataBox::dyn__beatDistributionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__beatDistributionParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatDistributionParam"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapEventDataBox/DistributionParamType _beatDistributionParamType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType& GlobalNamespace::BeatmapEventDataBox::dyn__beatDistributionParamType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__beatDistributionParamType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatDistributionParamType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBox::DistributionParamType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _eventDistributionCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventDistributionCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapEventDataBox/DistributionParamType _eventDistributionParamType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType& GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionParamType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionParamType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventDistributionParamType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBox::DistributionParamType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _eventDistributionParam
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventDistributionParam"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _eventDistributionShouldAffectFirstBaseEvent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionShouldAffectFirstBaseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionShouldAffectFirstBaseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventDistributionShouldAffectFirstBaseEvent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EaseType _eventDistributionEaseType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionEaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::dyn__eventDistributionEaseType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventDistributionEaseType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBox.get_subtypeIdentifier
int GlobalNamespace::BeatmapEventDataBox::get_subtypeIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::get_subtypeIdentifier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtypeIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBox.get_beatStep
float GlobalNamespace::BeatmapEventDataBox::get_beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::get_beatStep");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBox.get_indexFilter
::GlobalNamespace::IndexFilter* GlobalNamespace::BeatmapEventDataBox::get_indexFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::get_indexFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_indexFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IndexFilter*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBox.Unpack
void GlobalNamespace::BeatmapEventDataBox::Unpack(float groupBoxBeat, int groupId, int elementId, int durationOrderIndex, int distributionOrderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::Unpack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupBoxBeat), ::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(elementId), ::il2cpp_utils::ExtractType(durationOrderIndex), ::il2cpp_utils::ExtractType(distributionOrderIndex), ::il2cpp_utils::ExtractType(maxBeat), ::il2cpp_utils::ExtractType(beatToTimeConvertor), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupBoxBeat, groupId, elementId, durationOrderIndex, distributionOrderIndex, maxBeat, beatToTimeConvertor, output);
}
// Autogenerated method: BeatmapEventDataBox.GetBeatStep
float GlobalNamespace::BeatmapEventDataBox::GetBeatStep(float lastBaseEventRelativeBeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::GetBeatStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastBaseEventRelativeBeat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, lastBaseEventRelativeBeat);
}
// Autogenerated method: BeatmapEventDataBox.GetDistribution
float GlobalNamespace::BeatmapEventDataBox::GetDistribution(bool isFirstBaseDataEvent, int distributionOrderIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::GetDistribution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDistribution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isFirstBaseDataEvent), ::il2cpp_utils::ExtractType(distributionOrderIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, isFirstBaseDataEvent, distributionOrderIndex);
}
// Autogenerated method: BeatmapEventDataBox.BeatDistributionParamToStep
float GlobalNamespace::BeatmapEventDataBox::BeatDistributionParamToStep(float distributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType distributionParamType, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::BeatDistributionParamToStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBox", "BeatDistributionParamToStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distributionParam), ::il2cpp_utils::ExtractType(distributionParamType), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, distributionParam, distributionParamType, count);
}
// Autogenerated method: BeatmapEventDataBox.EventDistributionParamToStep
float GlobalNamespace::BeatmapEventDataBox::EventDistributionParamToStep(int index, float distributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType distributionParamType, int count, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::EventDistributionParamToStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBox", "EventDistributionParamToStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(distributionParam), ::il2cpp_utils::ExtractType(distributionParamType), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(easeType)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, index, distributionParam, distributionParamType, count, easeType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBox/DistributionParamType
#include "GlobalNamespace/BeatmapEventDataBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapEventDataBox/DistributionParamType Wave
::GlobalNamespace::BeatmapEventDataBox::DistributionParamType GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_get_Wave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_get_Wave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapEventDataBox::DistributionParamType>("", "BeatmapEventDataBox/DistributionParamType", "Wave"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventDataBox/DistributionParamType Wave
void GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_set_Wave(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_set_Wave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventDataBox/DistributionParamType", "Wave", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventDataBox/DistributionParamType Step
::GlobalNamespace::BeatmapEventDataBox::DistributionParamType GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_get_Step() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_get_Step");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapEventDataBox::DistributionParamType>("", "BeatmapEventDataBox/DistributionParamType", "Step"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventDataBox/DistributionParamType Step
void GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_set_Step(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::DistributionParamType::_set_Step");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventDataBox/DistributionParamType", "Step", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBox::DistributionParamType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::DistributionParamType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroup
#include "GlobalNamespace/BeatmapEventDataBoxGroup.hpp"
// Including type: BeatmapEventDataBoxGroup/ElementData
#include "GlobalNamespace/BeatmapEventDataBoxGroup_ElementData.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: BeatmapEventDataBox
#include "GlobalNamespace/BeatmapEventDataBox.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Single beat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapEventDataBoxGroup::dyn_beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::dyn_beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.ValueTuple`3<System.Int32,System.Type,System.Int32>,BeatmapEventDataBoxGroup/ElementData> _elementDataDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>*& GlobalNamespace::BeatmapEventDataBoxGroup::dyn__elementDataDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::dyn__elementDataDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elementDataDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<BeatmapEventData> _unpackedBeatmapEventData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>*& GlobalNamespace::BeatmapEventDataBoxGroup::dyn__unpackedBeatmapEventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::dyn__unpackedBeatmapEventData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unpackedBeatmapEventData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyCollection`1<BeatmapEventDataBox> _beatmapEventDataBoxList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>*& GlobalNamespace::BeatmapEventDataBoxGroup::dyn__beatmapEventDataBoxList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::dyn__beatmapEventDataBoxList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventDataBoxList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBoxGroup.get_elementDataDict
::System::Collections::Generic::IReadOnlyDictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>* GlobalNamespace::BeatmapEventDataBoxGroup::get_elementDataDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::get_elementDataDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elementDataDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyDictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroup.GetCopyWithNewBeat
::GlobalNamespace::BeatmapEventDataBoxGroup* GlobalNamespace::BeatmapEventDataBoxGroup::GetCopyWithNewBeat(float newBeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::GetCopyWithNewBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopyWithNewBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBeat)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup*, false>(this, ___internal__method, newBeat);
}
// Autogenerated method: BeatmapEventDataBoxGroup.RemoveBeatmapEventDataFromBeatmapData
void GlobalNamespace::BeatmapEventDataBoxGroup::RemoveBeatmapEventDataFromBeatmapData(::GlobalNamespace::BeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::RemoveBeatmapEventDataFromBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventDataFromBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapData);
}
// Autogenerated method: BeatmapEventDataBoxGroup.SyncWithBeatmapData
void GlobalNamespace::BeatmapEventDataBoxGroup::SyncWithBeatmapData(int groupId, ::GlobalNamespace::BeatmapData* beatmapData, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::SyncWithBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncWithBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(beatmapData), ::il2cpp_utils::ExtractType(beatToTimeConvertor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupId, beatmapData, beatToTimeConvertor);
}
// Autogenerated method: BeatmapEventDataBoxGroup.CompareTo
int GlobalNamespace::BeatmapEventDataBoxGroup::CompareTo(::GlobalNamespace::BeatmapEventDataBoxGroup* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroup/ElementData
#include "GlobalNamespace/BeatmapEventDataBoxGroup_ElementData.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: BeatmapEventDataBox
#include "GlobalNamespace/BeatmapEventDataBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startBeat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_startBeat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_startBeat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startBeat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 elementId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_elementId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_elementId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elementId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 durationOrderIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_durationOrderIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_durationOrderIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "durationOrderIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 distributionOrderIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_distributionOrderIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_distributionOrderIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distributionOrderIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Type eventBoxType
[[deprecated("Use field access instead!")]] ::System::Type*& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBoxType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBoxType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventBoxType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 eventBoxSubtypeIdentifier
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBoxSubtypeIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBoxSubtypeIdentifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventBoxSubtypeIdentifier"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapEventDataBox eventBox
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBox*& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_eventBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventBox"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBox**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapEventDataBoxGroup boxGroup
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBoxGroup*& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_boxGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn_boxGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boxGroup"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBoxGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapEventDataBoxGroup/ElementData _next
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn__next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn__next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_next"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapEventDataBoxGroup/ElementData _previous
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*& GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn__previous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::dyn__previous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previous"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBoxGroup/ElementData.get_next
::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData* GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::get_next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::get_next");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroup/ElementData.get_previous
::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData* GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::get_previous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::get_previous");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previous", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroup/ElementData.ResetConnections
void GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ResetConnections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ResetConnections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetConnections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroup/ElementData.ConnectWithPrevious
void GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ConnectWithPrevious(::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData* prevElementData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ConnectWithPrevious");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectWithPrevious", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevElementData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prevElementData);
}
// Autogenerated method: BeatmapEventDataBoxGroup/ElementData.ConnectWithNext
void GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ConnectWithNext(::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData* nextElementData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData::ConnectWithNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectWithNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nextElementData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nextElementData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroupFactory
#include "GlobalNamespace/BeatmapEventDataBoxGroupFactory.hpp"
// Including type: BeatmapEventDataBoxGroupFactory/<>c__DisplayClass2_0
#include "GlobalNamespace/BeatmapEventDataBoxGroupFactory_--c__DisplayClass2_0.hpp"
// Including type: BeatmapEventDataBoxGroup
#include "GlobalNamespace/BeatmapEventDataBoxGroup.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: DefaultEnvironmentEvents/LightGroupEvent
#include "GlobalNamespace/DefaultEnvironmentEvents_LightGroupEvent.hpp"
// Including type: DefaultEnvironmentEvents/LightGroupFiltering
#include "GlobalNamespace/DefaultEnvironmentEvents_LightGroupFiltering.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapEventDataBoxGroupFactory.CreateExtendColorBeatmapEventDataBoxGroup
::GlobalNamespace::BeatmapEventDataBoxGroup* GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendColorBeatmapEventDataBoxGroup(float beat, int numberOfElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendColorBeatmapEventDataBoxGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupFactory", "CreateExtendColorBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat), ::il2cpp_utils::ExtractType(numberOfElements)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beat, numberOfElements);
}
// Autogenerated method: BeatmapEventDataBoxGroupFactory.CreateExtendRotationBeatmapEventDataBoxGroup
::GlobalNamespace::BeatmapEventDataBoxGroup* GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendRotationBeatmapEventDataBoxGroup(float beat, int numberOfElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendRotationBeatmapEventDataBoxGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupFactory", "CreateExtendRotationBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat), ::il2cpp_utils::ExtractType(numberOfElements)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beat, numberOfElements);
}
// Autogenerated method: BeatmapEventDataBoxGroupFactory.CreateSingleLightBeatmapEventDataBoxGroup
::GlobalNamespace::BeatmapEventDataBoxGroup* GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateSingleLightBeatmapEventDataBoxGroup(float beat, int numberOfElements, ::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent* lightGroupEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateSingleLightBeatmapEventDataBoxGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupFactory", "CreateSingleLightBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat), ::il2cpp_utils::ExtractType(numberOfElements), ::il2cpp_utils::ExtractType(lightGroupEvent)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapEventDataBoxGroup*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beat, numberOfElements, lightGroupEvent);
}
// Autogenerated method: BeatmapEventDataBoxGroupFactory.<CreateSingleLightBeatmapEventDataBoxGroup>g__CreateIndexFilter|2_0
::GlobalNamespace::IndexFilter* GlobalNamespace::BeatmapEventDataBoxGroupFactory::$CreateSingleLightBeatmapEventDataBoxGroup$g__CreateIndexFilter_2_0(::GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering* filtering, ByRef<::GlobalNamespace::BeatmapEventDataBoxGroupFactory::$$c__DisplayClass2_0> param_00011bf1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupFactory::<CreateSingleLightBeatmapEventDataBoxGroup>g__CreateIndexFilter|2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupFactory", "<CreateSingleLightBeatmapEventDataBoxGroup>g__CreateIndexFilter|2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filtering), ::il2cpp_utils::ExtractType(param_00011bf1)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IndexFilter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, filtering, byref(param_00011bf1));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroupList
#include "GlobalNamespace/BeatmapEventDataBoxGroupList.hpp"
// Including type: BeatmapEventDataBoxGroupProcessor
#include "GlobalNamespace/BeatmapEventDataBoxGroupProcessor.hpp"
// Including type: SortedList`2
#include "GlobalNamespace/SortedList_2.hpp"
// Including type: BeatmapEventDataBoxGroup
#include "GlobalNamespace/BeatmapEventDataBoxGroup.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.LinkedListNode`1
#include "System/Collections/Generic/LinkedListNode_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.HashSet`1<BeatmapEventDataBoxGroup> _usedBeatmapEventDataBoxes
::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* GlobalNamespace::BeatmapEventDataBoxGroupList::_get__usedBeatmapEventDataBoxes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::_get__usedBeatmapEventDataBoxes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*>("", "BeatmapEventDataBoxGroupList", "_usedBeatmapEventDataBoxes"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.HashSet`1<BeatmapEventDataBoxGroup> _usedBeatmapEventDataBoxes
void GlobalNamespace::BeatmapEventDataBoxGroupList::_set__usedBeatmapEventDataBoxes(::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::_set__usedBeatmapEventDataBoxes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventDataBoxGroupList", "_usedBeatmapEventDataBoxes", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updateBeatmapDataOnInsert
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn_updateBeatmapDataOnInsert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn_updateBeatmapDataOnInsert");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateBeatmapDataOnInsert"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapEventDataBoxGroupProcessor _beatmapEventDataBoxGroupProcessor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBoxGroupProcessor*& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatmapEventDataBoxGroupProcessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatmapEventDataBoxGroupProcessor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventDataBoxGroupProcessor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventDataBoxGroupProcessor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SortedList`2<BeatmapEventDataBoxGroup,BeatmapEventDataBoxGroup> _sortedList
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SortedList_2<::GlobalNamespace::BeatmapEventDataBoxGroup*, ::GlobalNamespace::BeatmapEventDataBoxGroup*>*& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__sortedList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__sortedList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sortedList"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SortedList_2<::GlobalNamespace::BeatmapEventDataBoxGroup*, ::GlobalNamespace::BeatmapEventDataBoxGroup*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _groupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__groupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__groupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapData _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapData*& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatToTimeConvertor _beatToTimeConvertor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatToTimeConvertor*& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatToTimeConvertor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__beatToTimeConvertor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatToTimeConvertor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _nonSyncedInsertsExist
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__nonSyncedInsertsExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::dyn__nonSyncedInsertsExist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nonSyncedInsertsExist"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBoxGroupList..cctor
void GlobalNamespace::BeatmapEventDataBoxGroupList::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupList", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroupList.NoDomainReloadInit
void GlobalNamespace::BeatmapEventDataBoxGroupList::NoDomainReloadInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::NoDomainReloadInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventDataBoxGroupList", "NoDomainReloadInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroupList.Insert
::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* GlobalNamespace::BeatmapEventDataBoxGroupList::Insert(::GlobalNamespace::BeatmapEventDataBoxGroup* beatmapEventDataBoxGroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventDataBoxGroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*, false>(this, ___internal__method, beatmapEventDataBoxGroup);
}
// Autogenerated method: BeatmapEventDataBoxGroupList.Remove
void GlobalNamespace::BeatmapEventDataBoxGroupList::Remove(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* nodeToDelete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeToDelete)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeToDelete);
}
// Autogenerated method: BeatmapEventDataBoxGroupList.SyncWithBeatmapData
void GlobalNamespace::BeatmapEventDataBoxGroupList::SyncWithBeatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupList::SyncWithBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncWithBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroupLists
#include "GlobalNamespace/BeatmapEventDataBoxGroupLists.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BeatmapEventDataBoxGroupList
#include "GlobalNamespace/BeatmapEventDataBoxGroupList.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: System.Collections.Generic.LinkedListNode`1
#include "System/Collections/Generic/LinkedListNode_1.hpp"
// Including type: BeatmapEventDataBoxGroup
#include "GlobalNamespace/BeatmapEventDataBoxGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,BeatmapEventDataBoxGroupList> _beatmapEventDataBoxGroupListDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BeatmapEventDataBoxGroupList*>*& GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatmapEventDataBoxGroupListDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatmapEventDataBoxGroupListDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapEventDataBoxGroupListDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BeatmapEventDataBoxGroupList*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapData _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapData*& GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatToTimeConvertor _beatToTimeConvertor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatToTimeConvertor*& GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatToTimeConvertor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__beatToTimeConvertor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatToTimeConvertor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _updateBeatmapDataOnInsert
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__updateBeatmapDataOnInsert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::dyn__updateBeatmapDataOnInsert");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateBeatmapDataOnInsert"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBoxGroupLists.Insert
::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* GlobalNamespace::BeatmapEventDataBoxGroupLists::Insert(int groupId, ::GlobalNamespace::BeatmapEventDataBoxGroup* beatmapEventDataBoxGroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(beatmapEventDataBoxGroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*, false>(this, ___internal__method, groupId, beatmapEventDataBoxGroup);
}
// Autogenerated method: BeatmapEventDataBoxGroupLists.Remove
void GlobalNamespace::BeatmapEventDataBoxGroupLists::Remove(int groupId, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* nodeToDelete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(nodeToDelete)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupId, nodeToDelete);
}
// Autogenerated method: BeatmapEventDataBoxGroupLists.ToggleUpdateBeatmapDataOnInsert
void GlobalNamespace::BeatmapEventDataBoxGroupLists::ToggleUpdateBeatmapDataOnInsert(bool enableUpdateOnInsert) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::ToggleUpdateBeatmapDataOnInsert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleUpdateBeatmapDataOnInsert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableUpdateOnInsert)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enableUpdateOnInsert);
}
// Autogenerated method: BeatmapEventDataBoxGroupLists.SyncWithBeatmapData
void GlobalNamespace::BeatmapEventDataBoxGroupLists::SyncWithBeatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::SyncWithBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncWithBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventDataBoxGroupProcessor
#include "GlobalNamespace/BeatmapEventDataBoxGroupProcessor.hpp"
// Including type: BeatmapEventDataBoxGroup
#include "GlobalNamespace/BeatmapEventDataBoxGroup.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Collections.Generic.LinkedListNode`1
#include "System/Collections/Generic/LinkedListNode_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<BeatmapEventDataBoxGroup> _dirtyBoxGroups
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*& GlobalNamespace::BeatmapEventDataBoxGroupProcessor::dyn__dirtyBoxGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::dyn__dirtyBoxGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dirtyBoxGroups"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapEventDataBoxGroupProcessor.get_dirtyBoxGroups
::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* GlobalNamespace::BeatmapEventDataBoxGroupProcessor::get_dirtyBoxGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::get_dirtyBoxGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dirtyBoxGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapEventDataBoxGroupProcessor.ProcessInsertedData
void GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessInsertedData(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* insertedNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessInsertedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInsertedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(insertedNode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, insertedNode);
}
// Autogenerated method: BeatmapEventDataBoxGroupProcessor.ProcessBeforeDeleteData
void GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessBeforeDeleteData(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* nodeToDelete) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessBeforeDeleteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBeforeDeleteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeToDelete)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeToDelete);
}
// Autogenerated method: BeatmapEventDataBoxGroupProcessor.ClearDirtyData
void GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ClearDirtyData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ClearDirtyData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDirtyData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: IndexFilter/<GetEnumerator>d__19
#include "GlobalNamespace/IndexFilter_-GetEnumerator-d__19.hpp"
// Including type: IndexFilter/<GetValues>d__20
#include "GlobalNamespace/IndexFilter_-GetValues-d__20.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IndexFilter/IndexFilterRandomType _random
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter::IndexFilterRandomType& GlobalNamespace::IndexFilter::dyn__random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__random");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_random"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IndexFilter::IndexFilterRandomType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _seed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__seed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__seed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_seed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _groupSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__groupSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__groupSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _chunkSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__chunkSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__chunkSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chunkSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _visibleCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__visibleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__visibleCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_visibleCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IndexFilter/IndexFilterLimitAlsoAffectType _limitAlsoAffectType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType& GlobalNamespace::IndexFilter::dyn__limitAlsoAffectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__limitAlsoAffectType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_limitAlsoAffectType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _start
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_start"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _step
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__step() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__step");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_step"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _count
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::dyn__count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: IndexFilter.get_Count
int GlobalNamespace::IndexFilter::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::get_Count");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter.get_VisibleCount
int GlobalNamespace::IndexFilter::get_VisibleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::get_VisibleCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VisibleCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter.get_limitAlsoAffectType
::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType GlobalNamespace::IndexFilter::get_limitAlsoAffectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::get_limitAlsoAffectType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_limitAlsoAffectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>* GlobalNamespace::IndexFilter::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_3<int, int, int>>*, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter.GetValues
::System::Collections::Generic::IEnumerable_1<int>* GlobalNamespace::IndexFilter::GetValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::GetValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<int>*, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* GlobalNamespace::IndexFilter::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IndexFilter/IndexFilterRandomType
#include "GlobalNamespace/IndexFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterRandomType NoRandom
::GlobalNamespace::IndexFilter::IndexFilterRandomType GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_NoRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_NoRandom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterRandomType>("", "IndexFilter/IndexFilterRandomType", "NoRandom"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterRandomType NoRandom
void GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_NoRandom(::GlobalNamespace::IndexFilter::IndexFilterRandomType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_NoRandom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterRandomType", "NoRandom", value));
}
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterRandomType KeepOrder
::GlobalNamespace::IndexFilter::IndexFilterRandomType GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_KeepOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_KeepOrder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterRandomType>("", "IndexFilter/IndexFilterRandomType", "KeepOrder"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterRandomType KeepOrder
void GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_KeepOrder(::GlobalNamespace::IndexFilter::IndexFilterRandomType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_KeepOrder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterRandomType", "KeepOrder", value));
}
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterRandomType RandomElements
::GlobalNamespace::IndexFilter::IndexFilterRandomType GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_RandomElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_get_RandomElements");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterRandomType>("", "IndexFilter/IndexFilterRandomType", "RandomElements"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterRandomType RandomElements
void GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_RandomElements(::GlobalNamespace::IndexFilter::IndexFilterRandomType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::_set_RandomElements");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterRandomType", "RandomElements", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::IndexFilterRandomType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterRandomType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IndexFilter/IndexFilterLimitAlsoAffectType
#include "GlobalNamespace/IndexFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterLimitAlsoAffectType None
::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType>("", "IndexFilter/IndexFilterLimitAlsoAffectType", "None"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterLimitAlsoAffectType None
void GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_None(::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterLimitAlsoAffectType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterLimitAlsoAffectType Duration
::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_Duration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType>("", "IndexFilter/IndexFilterLimitAlsoAffectType", "Duration"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterLimitAlsoAffectType Duration
void GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_Duration(::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_Duration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterLimitAlsoAffectType", "Duration", value));
}
// Autogenerated static field getter
// Get static field: static public IndexFilter/IndexFilterLimitAlsoAffectType Distribution
::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_Distribution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_get_Distribution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType>("", "IndexFilter/IndexFilterLimitAlsoAffectType", "Distribution"));
}
// Autogenerated static field setter
// Set static field: static public IndexFilter/IndexFilterLimitAlsoAffectType Distribution
void GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_Distribution(::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::_set_Distribution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "IndexFilter/IndexFilterLimitAlsoAffectType", "Distribution", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: IndexFilter/<GetEnumerator>d__19
#include "GlobalNamespace/IndexFilter_-GetEnumerator-d__19.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.ValueTuple`3<System.Int32,System.Int32,System.Int32> <>2__current
[[deprecated("Use field access instead!")]] ::System::ValueTuple_3<int, int, int>& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::System::ValueTuple_3<int, int, int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IndexFilter <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter*& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IndexFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <shouldLimitDurationOrder>5__2
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$shouldLimitDurationOrder$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$shouldLimitDurationOrder$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<shouldLimitDurationOrder>5__2"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <shouldLimitDistributionOrder>5__3
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$shouldLimitDistributionOrder$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$shouldLimitDistributionOrder$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<shouldLimitDistributionOrder>5__3"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <limitedOrderIndex>5__4
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$limitedOrderIndex$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$limitedOrderIndex$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<limitedOrderIndex>5__4"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<System.ValueTuple`2<System.Int32,System.Int32>> <>7__wrap4
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<int, int>>*& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$7__wrap4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$$7__wrap4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap4"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<int, int>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <elementId>5__6
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$elementId$5__6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$elementId$5__6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elementId>5__6"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <index>5__7
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$index$5__7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$index$5__7");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<index>5__7"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <localChunkIndex>5__8
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$localChunkIndex$5__8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::dyn_$localChunkIndex$5__8");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<localChunkIndex>5__8"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.System.Collections.Generic.IEnumerator<(System.Int32element,System.Int32durationOrder,System.Int32distributionOrder)>.get_Current
::System::ValueTuple_3<int, int, int> GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_Generic_IEnumerator$_System_Int32element_System_Int32durationOrder_System_Int32distributionOrder_$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System.Collections.Generic.IEnumerator<_System.Int32element,System.Int32durationOrder,System.Int32distributionOrder_>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<(System.Int32element,System.Int32durationOrder,System.Int32distributionOrder)>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_3<int, int, int>, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.System.IDisposable.Dispose
void GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.MoveNext
bool GlobalNamespace::IndexFilter::$GetEnumerator$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.<>m__Finally1
void GlobalNamespace::IndexFilter::$GetEnumerator$d__19::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetEnumerator>d__19.System.Collections.IEnumerator.Reset
void GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetEnumerator$d__19::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: IndexFilter/<GetValues>d__20
#include "GlobalNamespace/IndexFilter_-GetValues-d__20.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>2__current
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IndexFilter <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter*& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IndexFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <value>5__2
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$value$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$value$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<value>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <i>5__3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$i$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::dyn_$i$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.Collections.Generic.IEnumerator<System.Int32>.get_Current
int GlobalNamespace::IndexFilter::$GetValues$d__20::System_Collections_Generic_IEnumerator$System_Int32$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.Collections.Generic.IEnumerator<System.Int32>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Int32>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::IndexFilter::$GetValues$d__20::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.IDisposable.Dispose
void GlobalNamespace::IndexFilter::$GetValues$d__20::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.MoveNext
bool GlobalNamespace::IndexFilter::$GetValues$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.Collections.IEnumerator.Reset
void GlobalNamespace::IndexFilter::$GetValues$d__20::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<int>* GlobalNamespace::IndexFilter::$GetValues$d__20::System_Collections_Generic_IEnumerable$System_Int32$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<int>*, false>(this, ___internal__method);
}
// Autogenerated method: IndexFilter/<GetValues>d__20.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* GlobalNamespace::IndexFilter::$GetValues$d__20::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IndexFilter::$GetValues$d__20::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorBeatmapEventDataBox
#include "GlobalNamespace/LightColorBeatmapEventDataBox.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: LightColorBaseData
#include "GlobalNamespace/LightColorBaseData.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<LightColorBaseData> _lightColorBaseDataList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightColorBaseData*>*& GlobalNamespace::LightColorBeatmapEventDataBox::dyn__lightColorBaseDataList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::dyn__lightColorBaseDataList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColorBaseDataList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightColorBaseData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _brightnessStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorBeatmapEventDataBox::dyn__brightnessStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::dyn__brightnessStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_brightnessStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _beatStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorBeatmapEventDataBox::dyn__beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::dyn__beatStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _brightnessDistributionShouldAffectFirstBaseEvent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightColorBeatmapEventDataBox::dyn__brightnessDistributionShouldAffectFirstBaseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::dyn__brightnessDistributionShouldAffectFirstBaseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_brightnessDistributionShouldAffectFirstBaseEvent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightColorBeatmapEventDataBox.get_subtypeIdentifier
int GlobalNamespace::LightColorBeatmapEventDataBox::get_subtypeIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::get_subtypeIdentifier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtypeIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightColorBeatmapEventDataBox.get_beatStep
float GlobalNamespace::LightColorBeatmapEventDataBox::get_beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::get_beatStep");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightColorBeatmapEventDataBox.Unpack
void GlobalNamespace::LightColorBeatmapEventDataBox::Unpack(float groupBoxBeat, int groupId, int elementId, int durationOrderIndex, int distributionOrderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBeatmapEventDataBox::Unpack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupBoxBeat), ::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(elementId), ::il2cpp_utils::ExtractType(durationOrderIndex), ::il2cpp_utils::ExtractType(distributionOrderIndex), ::il2cpp_utils::ExtractType(maxBeat), ::il2cpp_utils::ExtractType(beatToTimeConvertor), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupBoxBeat, groupId, elementId, durationOrderIndex, distributionOrderIndex, maxBeat, beatToTimeConvertor, output);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorBaseData
#include "GlobalNamespace/LightColorBaseData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single beat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorBaseData::dyn_beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::dyn_beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapEventTransitionType transitionType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventTransitionType& GlobalNamespace::LightColorBaseData::dyn_transitionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::dyn_transitionType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transitionType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapEventTransitionType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly EnvironmentColorType colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentColorType& GlobalNamespace::LightColorBaseData::dyn_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::dyn_colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single brightness
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorBaseData::dyn_brightness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::dyn_brightness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "brightness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 strobeBeatFrequency
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightColorBaseData::dyn_strobeBeatFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::dyn_strobeBeatFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strobeBeatFrequency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightRotationBeatmapEventDataBox
#include "GlobalNamespace/LightRotationBeatmapEventDataBox.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: LightRotationBaseData
#include "GlobalNamespace/LightRotationBaseData.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<LightRotationBaseData> _lightRotationBaseDataList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>*& GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__lightRotationBaseDataList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__lightRotationBaseDataList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightRotationBaseDataList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LightAxis _axis
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightAxis& GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_axis"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightAxis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _rotationDirection
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__rotationDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__rotationDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationDirection"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _rotationStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__rotationStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__rotationStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _beatStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::dyn__beatStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightRotationBeatmapEventDataBox.get_subtypeIdentifier
int GlobalNamespace::LightRotationBeatmapEventDataBox::get_subtypeIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::get_subtypeIdentifier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtypeIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationBeatmapEventDataBox.get_beatStep
float GlobalNamespace::LightRotationBeatmapEventDataBox::get_beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::get_beatStep");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationBeatmapEventDataBox.Unpack
void GlobalNamespace::LightRotationBeatmapEventDataBox::Unpack(float groupBoxBeat, int groupId, int elementId, int durationOrderIndex, int distributionOrderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::Unpack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupBoxBeat), ::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(elementId), ::il2cpp_utils::ExtractType(durationOrderIndex), ::il2cpp_utils::ExtractType(distributionOrderIndex), ::il2cpp_utils::ExtractType(maxBeat), ::il2cpp_utils::ExtractType(beatToTimeConvertor), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupBoxBeat, groupId, elementId, durationOrderIndex, distributionOrderIndex, maxBeat, beatToTimeConvertor, output);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightRotationBaseData
#include "GlobalNamespace/LightRotationBaseData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single beat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationBaseData::dyn_beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean usePreviousEventRotationValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightRotationBaseData::dyn_usePreviousEventRotationValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_usePreviousEventRotationValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "usePreviousEventRotationValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly EaseType easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::LightRotationBaseData::dyn_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightRotationBaseData::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 loopsCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightRotationBaseData::dyn_loopsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_loopsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopsCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LightRotationDirection rotationDirection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightRotationDirection& GlobalNamespace::LightRotationBaseData::dyn_rotationDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBaseData::dyn_rotationDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationDirection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightRotationDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightTranslationBeatmapEventDataBox
#include "GlobalNamespace/LightTranslationBeatmapEventDataBox.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: LightTranslationBaseData
#include "GlobalNamespace/LightTranslationBaseData.hpp"
// Including type: IndexFilter
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<LightTranslationBaseData> _lightTranslationBaseDataList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightTranslationBaseData*>*& GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__lightTranslationBaseDataList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__lightTranslationBaseDataList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightTranslationBaseDataList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightTranslationBaseData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LightAxis _axis
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightAxis& GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_axis"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightAxis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _translationDirection
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__translationDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__translationDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_translationDirection"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _beatStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::dyn__beatStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightTranslationBeatmapEventDataBox.get_subtypeIdentifier
int GlobalNamespace::LightTranslationBeatmapEventDataBox::get_subtypeIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::get_subtypeIdentifier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtypeIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightTranslationBeatmapEventDataBox.get_beatStep
float GlobalNamespace::LightTranslationBeatmapEventDataBox::get_beatStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::get_beatStep");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightTranslationBeatmapEventDataBox.Unpack
void GlobalNamespace::LightTranslationBeatmapEventDataBox::Unpack(float groupBoxBeat, int groupId, int elementId, int durationOrderIndex, int distributionOrderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBeatmapEventDataBox::Unpack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupBoxBeat), ::il2cpp_utils::ExtractType(groupId), ::il2cpp_utils::ExtractType(elementId), ::il2cpp_utils::ExtractType(durationOrderIndex), ::il2cpp_utils::ExtractType(distributionOrderIndex), ::il2cpp_utils::ExtractType(maxBeat), ::il2cpp_utils::ExtractType(beatToTimeConvertor), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, groupBoxBeat, groupId, elementId, durationOrderIndex, distributionOrderIndex, maxBeat, beatToTimeConvertor, output);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightTranslationBaseData
#include "GlobalNamespace/LightTranslationBaseData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single beat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightTranslationBaseData::dyn_beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBaseData::dyn_beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean usePreviousEventTranslationValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightTranslationBaseData::dyn_usePreviousEventTranslationValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBaseData::dyn_usePreviousEventTranslationValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "usePreviousEventTranslationValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly EaseType easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::LightTranslationBaseData::dyn_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBaseData::dyn_easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single translation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightTranslationBaseData::dyn_translation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationBaseData::dyn_translation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "translation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDataAssetsModel
#include "GlobalNamespace/BeatmapDataAssetsModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapDataAssetsModel.BeatmapLevelDataAssetNameForBeatmapLevel
::StringW GlobalNamespace::BeatmapDataAssetsModel::BeatmapLevelDataAssetNameForBeatmapLevel(::StringW levelID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataAssetsModel::BeatmapLevelDataAssetNameForBeatmapLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDataAssetsModel", "BeatmapLevelDataAssetNameForBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelID)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, levelID);
}
// Autogenerated method: BeatmapDataAssetsModel.AssetBundleNameForBeatmapLevel
::StringW GlobalNamespace::BeatmapDataAssetsModel::AssetBundleNameForBeatmapLevel(::StringW levelID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataAssetsModel::AssetBundleNameForBeatmapLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDataAssetsModel", "AssetBundleNameForBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelID)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, levelID);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO
#include "GlobalNamespace/BeatmapLevelDataLoaderSO.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview.hpp"
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelFormAssetBundleAsync>d__4
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelFormAssetBundleAsync-d__4.hpp"
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelAsync>d__5
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelAsync-d__5.hpp"
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_0
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_0.hpp"
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_1
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_1.hpp"
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_2
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_2.hpp"
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelDataAsync>d__6
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelDataAsync-d__6.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: AsyncCache`2
#include "GlobalNamespace/AsyncCache_2.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapCharacteristicCollectionSO _allBeatmapCharacteristicCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicCollectionSO*& GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__allBeatmapCharacteristicCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__allBeatmapCharacteristicCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allBeatmapCharacteristicCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicCollectionSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AsyncCache`2<System.String,IBeatmapLevel> _beatmapLevelsAsyncCache
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AsyncCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>*& GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__beatmapLevelsAsyncCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__beatmapLevelsAsyncCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelsAsyncCache"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AsyncCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,BeatmapLevelDataLoaderSO/AssetBundleLevelInfo> _bundleLevelInfos
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>*& GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__bundleLevelInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::dyn__bundleLevelInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bundleLevelInfos"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO.LoadBeatmapLevelFormAssetBundleAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelFormAssetBundleAsync(::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, ::StringW assetBundlePath, ::StringW levelDataAssetName, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelFormAssetBundleAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadBeatmapLevelFormAssetBundleAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(assetBundlePath), ::il2cpp_utils::ExtractType(levelDataAssetName), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>*, false>(this, ___internal__method, previewBeatmapLevel, assetBundlePath, levelDataAssetName, cancellationToken);
}
// Autogenerated method: BeatmapLevelDataLoaderSO.LoadBeatmapLevelAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelAsync(::StringW levelID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadBeatmapLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelID)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>*, false>(this, ___internal__method, levelID);
}
// Autogenerated method: BeatmapLevelDataLoaderSO.LoadBeatmapLevelDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelDataSO*>* GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelDataAsync(::StringW assetBundlePath, ::StringW levelDataAssetName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelDataAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadBeatmapLevelDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assetBundlePath), ::il2cpp_utils::ExtractType(levelDataAssetName)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelDataSO*>*, false>(this, ___internal__method, assetBundlePath, levelDataAssetName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/AssetBundleLevelInfo
#include "GlobalNamespace/BeatmapLevelDataLoaderSO.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String assetBundlePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_assetBundlePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_assetBundlePath");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundlePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String levelDataAssetName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_levelDataAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_levelDataAssetName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDataAssetName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly IPreviewBeatmapLevel previewBeatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_previewBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::dyn_previewBeatmapLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewBeatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/AssetBundleLevelInfo..ctor
// ABORTED elsewhere.  GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo::AssetBundleLevelInfo(::StringW assetBundlePath, ::StringW levelDataAssetName, ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview.hpp"
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_BeatmapLevelData.hpp"
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/<GetCoverImageAsync>d__37
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_-GetCoverImageAsync-d__37.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IPreviewBeatmapLevel _level
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::dyn__level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::dyn__level");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_level"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData _beatmapLevelData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::dyn__beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::dyn__beatmapLevelData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_levelID
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songName
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songSubName
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songAuthorName
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_levelAuthorName
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_beatsPerMinute
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songTimeOffset
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songDuration
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_shuffle
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_shufflePeriod
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_previewStartTime
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_previewDuration
float GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_environmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_allDirectionsEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_previewDifficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_beatmapLevelData
::GlobalNamespace::IBeatmapLevelData* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songPreviewAudioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songPreviewAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songPreviewAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPreviewAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.get_songPreviewAudioClipPath
::StringW GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songPreviewAudioClipPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::get_songPreviewAudioClipPath");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPreviewAudioClipPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.GetCoverImageAsync
::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview.LoadData
void GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::LoadData(::GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection, ::GlobalNamespace::BeatmapLevelDataSO* beatmapLevelData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::LoadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapCharacteristicCollection), ::il2cpp_utils::ExtractType(beatmapLevelData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapCharacteristicCollection, beatmapLevelData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_BeatmapLevelData.hpp"
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_BeatmapLevelData_DifficultyBeatmapSet.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.AudioClip _audioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::dyn__audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::dyn__audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData/DifficultyBeatmapSet> _difficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet*>*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::dyn__difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::dyn__difficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData.get_audioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData.get_difficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_BeatmapLevelData_DifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: BeatmapLevelDataSO/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelDataSO_DifficultyBeatmapSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCharacteristicSO _beatmapCharacteristic
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::dyn__beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::dyn__beatmapCharacteristic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCharacteristic"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapLevelDataSO/DifficultyBeatmapSet _difficultyBeatmapSet
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::dyn__difficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::dyn__difficultyBeatmapSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmapSet"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData/DifficultyBeatmapSet.get_beatmapCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/BeatmapLevelData/DifficultyBeatmapSet.get_difficultyBeatmaps
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::BeatmapLevelData::DifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/<GetCoverImageAsync>d__37
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_BeatmapLevelFromPreview_-GetCoverImageAsync-d__37.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<UnityEngine.Sprite> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview*& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.Sprite> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>& GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/<GetCoverImageAsync>d__37.MoveNext
void GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/BeatmapLevelFromPreview/<GetCoverImageAsync>d__37.SetStateMachine
void GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview::$GetCoverImageAsync$d__37::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelFormAssetBundleAsync>d__4
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelFormAssetBundleAsync-d__4.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapLevel> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevel*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IPreviewBeatmapLevel previewBeatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_previewBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_previewBeatmapLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewBeatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelDataLoaderSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO*& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String assetBundlePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_assetBundlePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_assetBundlePath");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundlePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String levelDataAssetName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_levelDataAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_levelDataAssetName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDataAssetName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <levelID>5__2
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$levelID$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$levelID$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levelID>5__2"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IBeatmapLevel> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevel*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelFormAssetBundleAsync>d__4.MoveNext
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelFormAssetBundleAsync>d__4.SetStateMachine
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelAsync>d__5
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelAsync-d__5.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapLevel> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevel*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelDataLoaderSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO*& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String levelID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_levelID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapLevelDataSO> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelDataSO*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelDataSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelAsync>d__5.MoveNext
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelAsync>d__5.SetStateMachine
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_0
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_0.hpp"
// Including type: UnityEngine.AssetBundleCreateRequest
#include "UnityEngine/AssetBundleCreateRequest.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AssetBundleCreateRequest assetBundleCreateRequest
[[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundleCreateRequest*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_assetBundleCreateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_assetBundleCreateRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundleCreateRequest"))->offset;
  return *reinterpret_cast<::UnityEngine::AssetBundleCreateRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String levelDataAssetName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_levelDataAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_levelDataAssetName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDataAssetName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.Tasks.TaskCompletionSource`1<BeatmapLevelDataSO> taskSource
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<::GlobalNamespace::BeatmapLevelDataSO*>*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_taskSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::dyn_taskSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "taskSource"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskCompletionSource_1<::GlobalNamespace::BeatmapLevelDataSO*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_0.<LoadBeatmapLevelDataAsync>b__0
void GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::$LoadBeatmapLevelDataAsync$b__0(::UnityEngine::AsyncOperation* asyncOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0::<LoadBeatmapLevelDataAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LoadBeatmapLevelDataAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncOperation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asyncOperation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_1
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_1.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_0
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AssetBundle assetBundle
[[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundle*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1::dyn_assetBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1::dyn_assetBundle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundle"))->offset;
  return *reinterpret_cast<::UnityEngine::AssetBundle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelDataLoaderSO/<>c__DisplayClass6_0 CS$<>8__locals1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1::dyn_CS$$$8__locals1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1::dyn_CS$$$8__locals1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_2
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_2.hpp"
// Including type: UnityEngine.AssetBundleRequest
#include "UnityEngine/AssetBundleRequest.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_1
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_--c__DisplayClass6_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AssetBundleRequest assetBundleRequest
[[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundleRequest*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::dyn_assetBundleRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::dyn_assetBundleRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundleRequest"))->offset;
  return *reinterpret_cast<::UnityEngine::AssetBundleRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelDataLoaderSO/<>c__DisplayClass6_1 CS$<>8__locals2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1*& GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::dyn_CS$$$8__locals2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::dyn_CS$$$8__locals2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<>c__DisplayClass6_2.<LoadBeatmapLevelDataAsync>b__1
void GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::$LoadBeatmapLevelDataAsync$b__1(::UnityEngine::AsyncOperation* asyncOperation2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2::<LoadBeatmapLevelDataAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LoadBeatmapLevelDataAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncOperation2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asyncOperation2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelDataAsync>d__6
#include "GlobalNamespace/BeatmapLevelDataLoaderSO_-LoadBeatmapLevelDataAsync-d__6.hpp"
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<BeatmapLevelDataSO> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelDataSO*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelDataSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String levelDataAssetName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_levelDataAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_levelDataAssetName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDataAssetName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String assetBundlePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_assetBundlePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_assetBundlePath");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetBundlePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapLevelDataSO> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelDataSO*>& GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelDataSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelDataAsync>d__6.MoveNext
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataLoaderSO/<LoadBeatmapLevelDataAsync>d__6.SetStateMachine
void GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelLoader
#include "GlobalNamespace/BeatmapLevelLoader.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapLevelLoader/<LoadBeatmapLevelAsync>d__4
#include "GlobalNamespace/BeatmapLevelLoader_-LoadBeatmapLevelAsync-d__4.hpp"
// Including type: BeatmapLevelDataLoaderSO
#include "GlobalNamespace/BeatmapLevelDataLoaderSO.hpp"
// Including type: IBeatmapDataAssetFileModel
#include "GlobalNamespace/IBeatmapDataAssetFileModel.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelDataLoaderSO _beatmapLevelDataLoader
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO*& GlobalNamespace::BeatmapLevelLoader::dyn__beatmapLevelDataLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::dyn__beatmapLevelDataLoader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelDataLoader"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapDataAssetFileModel _beatmapDataAssetFileModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapDataAssetFileModel*& GlobalNamespace::BeatmapLevelLoader::dyn__beatmapDataAssetFileModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::dyn__beatmapDataAssetFileModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataAssetFileModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapDataAssetFileModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelLoader.LoadBeatmapLevelAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>* GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelAsync(::GlobalNamespace::IPreviewBeatmapLevel* previewLevel, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadBeatmapLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewLevel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>*, false>(this, ___internal__method, previewLevel, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelLoader/LoadBeatmapLevelResult
#include "GlobalNamespace/BeatmapLevelLoader.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean isError
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult::dyn_isError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult::dyn_isError");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly IBeatmapLevel beatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult::dyn_beatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult::dyn_beatmapLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelLoader/LoadBeatmapLevelResult..ctor
// ABORTED elsewhere.  GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult::LoadBeatmapLevelResult(bool isError, ::GlobalNamespace::IBeatmapLevel* beatmapLevel)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelLoader/<LoadBeatmapLevelAsync>d__4
#include "GlobalNamespace/BeatmapLevelLoader_-LoadBeatmapLevelAsync-d__4.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<BeatmapLevelLoader/LoadBeatmapLevelResult> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelLoader <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelLoader*& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IPreviewBeatmapLevel previewLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_previewLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_previewLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevel <level>5__2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$level$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$level$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<level>5__2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<GetAssetBundleFileResult> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::GetAssetBundleFileResult>& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::GetAssetBundleFileResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Boolean> <>u__2
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<bool>& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__2"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IBeatmapLevel> <>u__3
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevel*>& GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::dyn_$$u__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__3"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelLoader/<LoadBeatmapLevelAsync>d__4.MoveNext
void GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelLoader/<LoadBeatmapLevelAsync>d__4.SetStateMachine
void GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelLoader::$LoadBeatmapLevelAsync$d__4::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDifficultyMethods
#include "GlobalNamespace/BeatmapDifficultyMethods.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapDifficultyMethods.Name
::StringW GlobalNamespace::BeatmapDifficultyMethods::Name(::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDifficultyMethods::Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMethods", "Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultyMethods.ShortName
::StringW GlobalNamespace::BeatmapDifficultyMethods::ShortName(::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDifficultyMethods::ShortName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMethods", "ShortName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultyMethods.DefaultRating
int GlobalNamespace::BeatmapDifficultyMethods::DefaultRating(::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDifficultyMethods::DefaultRating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMethods", "DefaultRating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultyMethods.NoteJumpMovementSpeed
float GlobalNamespace::BeatmapDifficultyMethods::NoteJumpMovementSpeed(::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDifficultyMethods::NoteJumpMovementSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMethods", "NoteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapIdentifierNetSerializableHelper
#include "GlobalNamespace/BeatmapIdentifierNetSerializableHelper.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: PreviewDifficultyBeatmap
#include "GlobalNamespace/PreviewDifficultyBeatmap.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapIdentifierNetSerializableHelper.GetIdentifier
::GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::BeatmapIdentifierNetSerializableHelper::GetIdentifier(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializableHelper::GetIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapIdentifierNetSerializableHelper", "GetIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Autogenerated method: BeatmapIdentifierNetSerializableHelper.HasIdentifier
bool GlobalNamespace::BeatmapIdentifierNetSerializableHelper::HasIdentifier(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, ::GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializableHelper::HasIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapIdentifierNetSerializableHelper", "HasIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(beatmapId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficultyBeatmap, beatmapId);
}
// Autogenerated method: BeatmapIdentifierNetSerializableHelper.ToPreviewDifficultyBeatmap
::GlobalNamespace::PreviewDifficultyBeatmap* GlobalNamespace::BeatmapIdentifierNetSerializableHelper::ToPreviewDifficultyBeatmap(::GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, ::GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, ::GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializableHelper::ToPreviewDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapIdentifierNetSerializableHelper", "ToPreviewDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(beatmapLevelsModel), ::il2cpp_utils::ExtractType(beatmapCharacteristicCollection)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PreviewDifficultyBeatmap*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapId, beatmapLevelsModel, beatmapCharacteristicCollection);
}
// Autogenerated method: BeatmapIdentifierNetSerializableHelper.ToIdentifier
::GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::BeatmapIdentifierNetSerializableHelper::ToIdentifier(::GlobalNamespace::PreviewDifficultyBeatmap* previewDifficultyBeatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapIdentifierNetSerializableHelper::ToIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapIdentifierNetSerializableHelper", "ToIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewDifficultyBeatmapLevel)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, previewDifficultyBeatmapLevel);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevelCollection.get_beatmapLevels
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::IBeatmapLevelCollection::get_beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelCollection::get_beatmapLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelCollection
#include "GlobalNamespace/BeatmapLevelCollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<IPreviewBeatmapLevel> _levels
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>*& GlobalNamespace::BeatmapLevelCollection::dyn__levels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelCollection::dyn__levels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levels"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelCollection.get_beatmapLevels
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::BeatmapLevelCollection::get_beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelCollection::get_beatmapLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelCollection.CreateBeatmapLevelCollectionByUsingBeatmapCharacteristicFiltering
::GlobalNamespace::BeatmapLevelCollection* GlobalNamespace::BeatmapLevelCollection::CreateBeatmapLevelCollectionByUsingBeatmapCharacteristicFiltering(::GlobalNamespace::IBeatmapLevelCollection* beatmapLevelCollection, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelCollection::CreateBeatmapLevelCollectionByUsingBeatmapCharacteristicFiltering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelCollection", "CreateBeatmapLevelCollectionByUsingBeatmapCharacteristicFiltering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelCollection), ::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelCollection*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelCollection, beatmapCharacteristic);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelCollectionSO
#include "GlobalNamespace/BeatmapLevelCollectionSO.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSO[] _beatmapLevels
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelSO*>& GlobalNamespace::BeatmapLevelCollectionSO::dyn__beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelCollectionSO::dyn__beatmapLevels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevels"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelCollectionSO.get_beatmapLevels
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::BeatmapLevelCollectionSO::get_beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelCollectionSO::get_beatmapLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelData
#include "GlobalNamespace/BeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.AudioClip _audioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::BeatmapLevelData::dyn__audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelData::dyn__audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<IDifficultyBeatmapSet> _difficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*& GlobalNamespace::BeatmapLevelData::dyn__difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelData::dyn__difficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelData.get_audioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelData.get_difficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::BeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataSO
#include "GlobalNamespace/BeatmapLevelDataSO.hpp"
// Including type: BeatmapLevelDataSO/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelDataSO_DifficultyBeatmapSet.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _audioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::BeatmapLevelDataSO::dyn__audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::dyn__audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelDataSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>& GlobalNamespace::BeatmapLevelDataSO::dyn__difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::dyn__difficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelDataSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>& GlobalNamespace::BeatmapLevelDataSO::dyn__no360MovementDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::dyn__no360MovementDifficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_no360MovementDifficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataSO.get_audioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelDataSO::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::get_audioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataSO.get_difficultyBeatmapSets
::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*> GlobalNamespace::BeatmapLevelDataSO::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::get_difficultyBeatmapSets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataSO/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelDataSO_DifficultyBeatmapSet.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmap
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _beatmapCharacteristicSerializedName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::dyn__beatmapCharacteristicSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::dyn__beatmapCharacteristicSerializedName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCharacteristicSerializedName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSO/DifficultyBeatmap[] _difficultyBeatmaps
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*>& GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::dyn__difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::dyn__difficultyBeatmaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmaps"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelDataSO/DifficultyBeatmapSet.get_beatmapCharacteristicSerializedName
::StringW GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::get_beatmapCharacteristicSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::get_beatmapCharacteristicSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristicSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelDataSO/DifficultyBeatmapSet.get_difficultyBeatmaps
::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*> GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet::get_difficultyBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelFilterModel
#include "GlobalNamespace/BeatmapLevelFilterModel.hpp"
// Including type: BeatmapLevelFilterModel/<>c__DisplayClass0_0
#include "GlobalNamespace/BeatmapLevelFilterModel_--c__DisplayClass0_0.hpp"
// Including type: BeatmapLevelFilterModel/<FilerBeatmapLevelPackCollectionAsync>d__0
#include "GlobalNamespace/BeatmapLevelFilterModel_-FilerBeatmapLevelPackCollectionAsync-d__0.hpp"
// Including type: BeatmapLevelFilterModel/<GetAllBeatmapLevelsAsync>d__2
#include "GlobalNamespace/BeatmapLevelFilterModel_-GetAllBeatmapLevelsAsync-d__2.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapLevelFilterModel.FilerBeatmapLevelPackCollectionAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevelCollection*>* GlobalNamespace::BeatmapLevelFilterModel::FilerBeatmapLevelPackCollectionAsync(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> beatmapLevelPacks, ::GlobalNamespace::LevelFilterParams* levelFilterParams, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::AdditionalContentModel* additionalContentModel, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::FilerBeatmapLevelPackCollectionAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelFilterModel", "FilerBeatmapLevelPackCollectionAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelPacks), ::il2cpp_utils::ExtractType(levelFilterParams), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(additionalContentModel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevelCollection*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelPacks, levelFilterParams, playerDataModel, additionalContentModel, cancellationToken);
}
// Autogenerated method: BeatmapLevelFilterModel.LevelContainsText
bool GlobalNamespace::BeatmapLevelFilterModel::LevelContainsText(::GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel, ::ArrayW<::StringW> searchTexts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::LevelContainsText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelFilterModel", "LevelContainsText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevel), ::il2cpp_utils::ExtractType(searchTexts)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevel, searchTexts);
}
// Autogenerated method: BeatmapLevelFilterModel.GetAllBeatmapLevelsAsync
::System::Threading::Tasks::Task_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>* GlobalNamespace::BeatmapLevelFilterModel::GetAllBeatmapLevelsAsync(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> beatmapLevelPacks, ::GlobalNamespace::SongPackMask songPackMask, bool onlyOwned, bool onlyNotOwned, ::GlobalNamespace::AdditionalContentModel* additionalContentModel, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::GetAllBeatmapLevelsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelFilterModel", "GetAllBeatmapLevelsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelPacks), ::il2cpp_utils::ExtractType(songPackMask), ::il2cpp_utils::ExtractType(onlyOwned), ::il2cpp_utils::ExtractType(onlyNotOwned), ::il2cpp_utils::ExtractType(additionalContentModel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelPacks, songPackMask, onlyOwned, onlyNotOwned, additionalContentModel, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelFilterModel/<>c__DisplayClass0_0
#include "GlobalNamespace/BeatmapLevelFilterModel_--c__DisplayClass0_0.hpp"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean searchByText
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_searchByText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_searchByText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "searchByText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] searchTexts
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_searchTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_searchTexts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "searchTexts"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LevelFilterParams levelFilterParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelFilterParams*& GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_levelFilterParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_levelFilterParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFilterParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelFilterParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayerDataModel playerDataModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_playerDataModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::dyn_playerDataModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDataModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerDataModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelFilterModel/<>c__DisplayClass0_0.<FilerBeatmapLevelPackCollectionAsync>b__0
bool GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::$FilerBeatmapLevelPackCollectionAsync$b__0(::GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0::<FilerBeatmapLevelPackCollectionAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FilerBeatmapLevelPackCollectionAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevel)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, beatmapLevel);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelFilterModel/<FilerBeatmapLevelPackCollectionAsync>d__0
#include "GlobalNamespace/BeatmapLevelFilterModel_-FilerBeatmapLevelPackCollectionAsync-d__0.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapLevelFilterModel/<>c__DisplayClass0_0
#include "GlobalNamespace/BeatmapLevelFilterModel_--c__DisplayClass0_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapLevelCollection> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevelCollection*>& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevelCollection*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LevelFilterParams levelFilterParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelFilterParams*& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_levelFilterParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_levelFilterParams");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFilterParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelFilterParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayerDataModel playerDataModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_playerDataModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_playerDataModel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDataModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerDataModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IBeatmapLevelPack[] beatmapLevelPacks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_beatmapLevelPacks");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapLevelPacks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AdditionalContentModel additionalContentModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdditionalContentModel*& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_additionalContentModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_additionalContentModel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "additionalContentModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdditionalContentModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelFilterModel/<>c__DisplayClass0_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0*& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelFilterModel::$$c__DisplayClass0_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Collections.Generic.List`1<IPreviewBeatmapLevel>> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>& GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelFilterModel/<FilerBeatmapLevelPackCollectionAsync>d__0.MoveNext
void GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelFilterModel/<FilerBeatmapLevelPackCollectionAsync>d__0.SetStateMachine
void GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$FilerBeatmapLevelPackCollectionAsync$d__0::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelFilterModel/<GetAllBeatmapLevelsAsync>d__2
#include "GlobalNamespace/BeatmapLevelFilterModel_-GetAllBeatmapLevelsAsync-d__2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Collections.Generic.List`1<IPreviewBeatmapLevel>> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IBeatmapLevelPack[] beatmapLevelPacks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_beatmapLevelPacks");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapLevelPacks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SongPackMask songPackMask
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPackMask& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_songPackMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_songPackMask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songPackMask"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongPackMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean onlyOwned
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_onlyOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_onlyOwned");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onlyOwned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AdditionalContentModel additionalContentModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdditionalContentModel*& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_additionalContentModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_additionalContentModel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "additionalContentModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdditionalContentModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean onlyNotOwned
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_onlyNotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_onlyNotOwned");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onlyNotOwned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<IPreviewBeatmapLevel> <levels>5__2
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>*& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$levels$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$levels$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levels>5__2"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::IPreviewBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPack[] <>7__wrap2
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap2"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>7__wrap3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<IPreviewBeatmapLevel> <>7__wrap4
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::IPreviewBeatmapLevel*>*& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$7__wrap4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap4"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::IPreviewBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IPreviewBeatmapLevel <beatmapLevel>5__6
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$beatmapLevel$5__6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$beatmapLevel$5__6");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapLevel>5__6"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<AdditionalContentModel/EntitlementStatus> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::AdditionalContentModel::EntitlementStatus>& GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::AdditionalContentModel::EntitlementStatus>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelFilterModel/<GetAllBeatmapLevelsAsync>d__2.MoveNext
void GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelFilterModel/<GetAllBeatmapLevelsAsync>d__2.SetStateMachine
void GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelFilterModel::$GetAllBeatmapLevelsAsync$d__2::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevelPack.get_packID
::StringW GlobalNamespace::IBeatmapLevelPack::get_packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelPack::get_packID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapLevelPack.get_packName
::StringW GlobalNamespace::IBeatmapLevelPack::get_packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelPack::get_packName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapLevelPack.get_shortPackName
::StringW GlobalNamespace::IBeatmapLevelPack::get_shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelPack::get_shortPackName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shortPackName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelPack
#include "GlobalNamespace/BeatmapLevelPack.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _levelPackID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPack::dyn__levelPackID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__levelPackID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelPackID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _packName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPack::dyn__packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__packName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _shortPackName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPack::dyn__shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__shortPackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortPackName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _coverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::BeatmapLevelPack::dyn__coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__coverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _smallCoverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::BeatmapLevelPack::dyn__smallCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__smallCoverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smallCoverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelCollection _beatmapLevelCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelCollection*& GlobalNamespace::BeatmapLevelPack::dyn__beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::dyn__beatmapLevelCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelPack.get_packID
::StringW GlobalNamespace::BeatmapLevelPack::get_packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_packID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_packName
::StringW GlobalNamespace::BeatmapLevelPack::get_packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_packName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_shortPackName
::StringW GlobalNamespace::BeatmapLevelPack::get_shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_shortPackName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shortPackName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_collectionName
::StringW GlobalNamespace::BeatmapLevelPack::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_coverImage
::UnityEngine::Sprite* GlobalNamespace::BeatmapLevelPack::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_smallCoverImage
::UnityEngine::Sprite* GlobalNamespace::BeatmapLevelPack::get_smallCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_smallCoverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_smallCoverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.get_beatmapLevelCollection
::GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::BeatmapLevelPack::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPack.CreateBeatmapLevelPackByUsingBeatmapCharacteristicFiltering
::GlobalNamespace::BeatmapLevelPack* GlobalNamespace::BeatmapLevelPack::CreateBeatmapLevelPackByUsingBeatmapCharacteristicFiltering(::GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPack::CreateBeatmapLevelPackByUsingBeatmapCharacteristicFiltering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelPack", "CreateBeatmapLevelPackByUsingBeatmapCharacteristicFiltering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelPack), ::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelPack*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelPack, beatmapCharacteristic);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevelPackCollection
#include "GlobalNamespace/IBeatmapLevelPackCollection.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevelPackCollection.get_beatmapLevelPacks
::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> GlobalNamespace::IBeatmapLevelPackCollection::get_beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelPackCollection::get_beatmapLevelPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelPackCollection
#include "GlobalNamespace/BeatmapLevelPackCollection.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPack[] _beatmapLevelPacks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& GlobalNamespace::BeatmapLevelPackCollection::dyn__beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollection::dyn__beatmapLevelPacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelPacks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelPackCollection.get_beatmapLevelPacks
::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> GlobalNamespace::BeatmapLevelPackCollection::get_beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollection::get_beatmapLevelPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelPackCollectionContainerSO
#include "GlobalNamespace/BeatmapLevelPackCollectionContainerSO.hpp"
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelPackCollectionSO _beatmapLevelPackCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelPackCollectionSO*& GlobalNamespace::BeatmapLevelPackCollectionContainerSO::dyn__beatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionContainerSO::dyn__beatmapLevelPackCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelPackCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelPackCollectionSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelPackCollectionContainerSO.get_beatmapLevelPackCollection
::GlobalNamespace::BeatmapLevelPackCollectionSO* GlobalNamespace::BeatmapLevelPackCollectionContainerSO::get_beatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionContainerSO::get_beatmapLevelPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelPackCollectionSO*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: PreviewBeatmapLevelPackSO
#include "GlobalNamespace/PreviewBeatmapLevelPackSO.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelPackSO[] _beatmapLevelPacks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelPackSO*>& GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__beatmapLevelPacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelPacks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelPackSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PreviewBeatmapLevelPackSO[] _previewBeatmapLevelPack
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PreviewBeatmapLevelPackSO*>& GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__previewBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__previewBeatmapLevelPack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewBeatmapLevelPack"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::PreviewBeatmapLevelPackSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPack[] _allBeatmapLevelPacks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__allBeatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::dyn__allBeatmapLevelPacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allBeatmapLevelPacks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelPackCollectionSO.get_previewBeatmapLevelPack
::ArrayW<::GlobalNamespace::PreviewBeatmapLevelPackSO*> GlobalNamespace::BeatmapLevelPackCollectionSO::get_previewBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::get_previewBeatmapLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewBeatmapLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::PreviewBeatmapLevelPackSO*>, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackCollectionSO.set_previewBeatmapLevelPack
void GlobalNamespace::BeatmapLevelPackCollectionSO::set_previewBeatmapLevelPack(::ArrayW<::GlobalNamespace::PreviewBeatmapLevelPackSO*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::set_previewBeatmapLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_previewBeatmapLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapLevelPackCollectionSO.get_beatmapLevelPacks
::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> GlobalNamespace::BeatmapLevelPackCollectionSO::get_beatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::get_beatmapLevelPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackCollectionSO.set_beatmapLevelPacks
void GlobalNamespace::BeatmapLevelPackCollectionSO::set_beatmapLevelPacks(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::set_beatmapLevelPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapLevelPackCollectionSO.LoadAllBeatmapLevelPacks
void GlobalNamespace::BeatmapLevelPackCollectionSO::LoadAllBeatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollectionSO::LoadAllBeatmapLevelPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAllBeatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: BeatmapLevelCollectionSO
#include "GlobalNamespace/BeatmapLevelCollectionSO.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _packID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPackSO::dyn__packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__packID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _packName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPackSO::dyn__packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__packName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _shortPackName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelPackSO::dyn__shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__shortPackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortPackName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _coverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::BeatmapLevelPackSO::dyn__coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__coverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _smallCoverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::BeatmapLevelPackSO::dyn__smallCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__smallCoverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smallCoverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelCollectionSO _beatmapLevelCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelCollectionSO*& GlobalNamespace::BeatmapLevelPackSO::dyn__beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::dyn__beatmapLevelCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelCollectionSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelPackSO.get_packID
::StringW GlobalNamespace::BeatmapLevelPackSO::get_packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_packID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_packName
::StringW GlobalNamespace::BeatmapLevelPackSO::get_packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_packName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_shortPackName
::StringW GlobalNamespace::BeatmapLevelPackSO::get_shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_shortPackName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shortPackName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_collectionName
::StringW GlobalNamespace::BeatmapLevelPackSO::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_coverImage
::UnityEngine::Sprite* GlobalNamespace::BeatmapLevelPackSO::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_smallCoverImage
::UnityEngine::Sprite* GlobalNamespace::BeatmapLevelPackSO::get_smallCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_smallCoverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_smallCoverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelPackSO.get_beatmapLevelCollection
::GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::BeatmapLevelPackSO::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmapSet.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmap
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapLevelSO/<GetPreviewAudioClipAsync>d__65
#include "GlobalNamespace/BeatmapLevelSO_-GetPreviewAudioClipAsync-d__65.hpp"
// Including type: BeatmapLevelSO/<GetCoverImageAsync>d__66
#include "GlobalNamespace/BeatmapLevelSO_-GetCoverImageAsync-d__66.hpp"
// Including type: BeatmapLevelSO/<GetBeatmapLevelDataAsync>d__69
#include "GlobalNamespace/BeatmapLevelSO_-GetBeatmapLevelDataAsync-d__69.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _levelID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelSO::dyn__levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__levelID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _songName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelSO::dyn__songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__songName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _songSubName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelSO::dyn__songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__songSubName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songSubName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _songAuthorName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelSO::dyn__songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__songAuthorName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songAuthorName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _levelAuthorName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelSO::dyn__levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__levelAuthorName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelAuthorName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _audioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::BeatmapLevelSO::dyn__audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _beatsPerMinute
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__beatsPerMinute");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatsPerMinute"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _songTimeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__songTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shuffle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__shuffle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shuffle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shufflePeriod
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__shufflePeriod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shufflePeriod"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _previewStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__previewStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _previewDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::dyn__previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__previewDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _coverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::BeatmapLevelSO::dyn__coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__coverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EnvironmentInfoSO _environmentInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::BeatmapLevelSO::dyn__environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__environmentInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_environmentInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::BeatmapLevelSO::dyn__allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__allDirectionsEnvironmentInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allDirectionsEnvironmentInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>& GlobalNamespace::BeatmapLevelSO::dyn__difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__difficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _ignore360MovementBeatmaps
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelSO::dyn__ignore360MovementBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__ignore360MovementBeatmaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ignore360MovementBeatmaps"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<BeatmapLevelSO/DifficultyBeatmapSet> _no360MovementDifficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*& GlobalNamespace::BeatmapLevelSO::dyn__no360MovementDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__no360MovementDifficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_no360MovementDifficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _previewDifficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*& GlobalNamespace::BeatmapLevelSO::dyn__previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__previewDifficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewDifficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _no360MovementPreviewDifficultyBeatmapSets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*& GlobalNamespace::BeatmapLevelSO::dyn__no360MovementPreviewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__no360MovementPreviewDifficultyBeatmapSets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_no360MovementPreviewDifficultyBeatmapSets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelData _beatmapLevelData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelData*& GlobalNamespace::BeatmapLevelSO::dyn__beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__beatmapLevelData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult& GlobalNamespace::BeatmapLevelSO::dyn__getBeatmapLevelDataResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::dyn__getBeatmapLevelDataResult");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_getBeatmapLevelDataResult"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO.get_levelID
::StringW GlobalNamespace::BeatmapLevelSO::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songName
::StringW GlobalNamespace::BeatmapLevelSO::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songSubName
::StringW GlobalNamespace::BeatmapLevelSO::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songAuthorName
::StringW GlobalNamespace::BeatmapLevelSO::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_levelAuthorName
::StringW GlobalNamespace::BeatmapLevelSO::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_beatsPerMinute
float GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songTimeOffset
float GlobalNamespace::BeatmapLevelSO::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_shuffle
float GlobalNamespace::BeatmapLevelSO::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_shufflePeriod
float GlobalNamespace::BeatmapLevelSO::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_previewStartTime
float GlobalNamespace::BeatmapLevelSO::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_previewDuration
float GlobalNamespace::BeatmapLevelSO::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_coverImage
::UnityEngine::Sprite* GlobalNamespace::BeatmapLevelSO::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_coverImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_environmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::BeatmapLevelSO::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_allDirectionsEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_difficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songDuration
float GlobalNamespace::BeatmapLevelSO::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_previewDifficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songPreviewAudioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelSO::get_songPreviewAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songPreviewAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPreviewAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_songAudioClip
::UnityEngine::AudioClip* GlobalNamespace::BeatmapLevelSO::get_songAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_songAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.get_beatmapLevelData
::GlobalNamespace::IBeatmapLevelData* GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.InitData
void GlobalNamespace::BeatmapLevelSO::InitData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::InitData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO.GetPreviewAudioClipAsync
::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>* GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: BeatmapLevelSO.GetCoverImageAsync
::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: BeatmapLevelSO.GetBeatmapLevelDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>* GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync(::System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapLevelDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>*, false>(this, ___internal__method, token);
}
// Autogenerated method: BeatmapLevelSO.GetDifficultyBeatmap
::GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap(::GlobalNamespace::BeatmapCharacteristicSO* characteristic, ::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(characteristic), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmap*, false>(this, ___internal__method, characteristic, difficulty);
}
// Autogenerated method: BeatmapLevelSO.InitFull
void GlobalNamespace::BeatmapLevelSO::InitFull(::StringW levelID, ::StringW songName, ::StringW songSubName, ::StringW songAuthorName, ::StringW levelAuthorName, ::UnityEngine::AudioClip* audioClip, float beatsPerMinute, float songTimeOffset, float shuffle, float shufflePeriod, float previewStartTime, float previewDuration, ::UnityEngine::Sprite* coverImage, ::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo, ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*> difficultyBeatmapSets) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::InitFull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitFull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelID), ::il2cpp_utils::ExtractType(songName), ::il2cpp_utils::ExtractType(songSubName), ::il2cpp_utils::ExtractType(songAuthorName), ::il2cpp_utils::ExtractType(levelAuthorName), ::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(beatsPerMinute), ::il2cpp_utils::ExtractType(songTimeOffset), ::il2cpp_utils::ExtractType(shuffle), ::il2cpp_utils::ExtractType(shufflePeriod), ::il2cpp_utils::ExtractType(previewStartTime), ::il2cpp_utils::ExtractType(previewDuration), ::il2cpp_utils::ExtractType(coverImage), ::il2cpp_utils::ExtractType(environmentInfo), ::il2cpp_utils::ExtractType(allDirectionsEnvironmentInfo), ::il2cpp_utils::ExtractType(difficultyBeatmapSets)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, levelID, songName, songSubName, songAuthorName, levelAuthorName, audioClip, beatsPerMinute, songTimeOffset, shuffle, shufflePeriod, previewStartTime, previewDuration, coverImage, environmentInfo, allDirectionsEnvironmentInfo, difficultyBeatmapSets);
}
// Autogenerated method: BeatmapLevelSO.OnEnable
void GlobalNamespace::BeatmapLevelSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/DifficultyBeatmapSet
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmap
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapCharacteristicSO _beatmapCharacteristic
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::dyn__beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::dyn__beatmapCharacteristic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCharacteristic"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSO/DifficultyBeatmap[] _difficultyBeatmaps
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*>& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::dyn__difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::dyn__difficultyBeatmaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmaps"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmapSet.get_beatmapCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmapSet.get_difficultyBeatmaps
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmapSet.SetParentLevel
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::SetParentLevel(::GlobalNamespace::IBeatmapLevel* level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet::SetParentLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParentLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/DifficultyBeatmap
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__13
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__13.hpp"
// Including type: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataAsync>d__14
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap_-GetBeatmapDataAsync-d__14.hpp"
// Including type: BeatmapDataSO
#include "GlobalNamespace/BeatmapDataSO.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapDifficulty _difficulty
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__difficulty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficulty"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficulty*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _difficultyRank
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__difficultyRank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyRank"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noteJumpMovementSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__noteJumpMovementSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteJumpMovementSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noteJumpStartBeatOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__noteJumpStartBeatOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteJumpStartBeatOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataSO _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataSO*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevel _parentLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__parentLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__parentLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IDifficultyBeatmapSet _parentDifficultyBeatmapSet
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDifficultyBeatmapSet*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::dyn__parentDifficultyBeatmapSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentDifficultyBeatmapSet"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDifficultyBeatmapSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_difficulty
::GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_difficultyRank
int GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_level
::GlobalNamespace::IBeatmapLevel* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.get_parentDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.GetBeatmapDataBasicInfoAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::GetBeatmapDataBasicInfoAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::GetBeatmapDataBasicInfoAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataBasicInfoAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.GetBeatmapDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>* GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::GetBeatmapDataAsync(::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::GetBeatmapDataAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(environmentInfo), ::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>*, false>(this, ___internal__method, environmentInfo, playerSpecificSettings);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap.SetParents
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::SetParents(::GlobalNamespace::IBeatmapLevel* parentLevel, ::GlobalNamespace::IDifficultyBeatmapSet* parentDifficultyBeatmapSet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::SetParents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentLevel), ::il2cpp_utils::ExtractType(parentDifficultyBeatmapSet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parentLevel, parentDifficultyBeatmapSet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__13
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__13.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapDataBasicInfo> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelSO/DifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IBeatmapDataBasicInfo> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapDataBasicInfo*>& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__13.MoveNext
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__13.SetStateMachine
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__13::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataAsync>d__14
#include "GlobalNamespace/BeatmapLevelSO_DifficultyBeatmap_-GetBeatmapDataAsync-d__14.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IReadonlyBeatmapData> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelSO/DifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EnvironmentInfoSO environmentInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_environmentInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayerSpecificSettings playerSpecificSettings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_playerSpecificSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_playerSpecificSettings");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerSpecificSettings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerSpecificSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IReadonlyBeatmapData> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataAsync>d__14.MoveNext
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/DifficultyBeatmap/<GetBeatmapDataAsync>d__14.SetStateMachine
void GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap::$GetBeatmapDataAsync$d__14::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/GetBeatmapLevelDataResult
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: BeatmapLevelSO/GetBeatmapLevelDataResult/Result
// Already included the same include: GlobalNamespace/BeatmapLevelSO.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result& GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::dyn_result() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::dyn_result");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly IBeatmapLevelData beatmapLevelData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelData*& GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::dyn_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::dyn_beatmapLevelData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapLevelData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/GetBeatmapLevelDataResult..ctor
// ABORTED elsewhere.  GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::GetBeatmapLevelDataResult(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result, ::GlobalNamespace::IBeatmapLevelData* beatmapLevelData)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/GetBeatmapLevelDataResult/Result
#include "GlobalNamespace/BeatmapLevelSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result>("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "OK"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
void GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_OK(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_NotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_NotOwned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result>("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "NotOwned"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
void GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_NotOwned(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_NotOwned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "NotOwned", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_Fail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_get_Fail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result>("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "Fail"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
void GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_Fail(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::_set_Fail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result", "Fail", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/<GetPreviewAudioClipAsync>d__65
#include "GlobalNamespace/BeatmapLevelSO_-GetPreviewAudioClipAsync-d__65.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<UnityEngine.AudioClip> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::AudioClip*>& GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO*& GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.AudioClip> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::AudioClip*>& GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/<GetPreviewAudioClipAsync>d__65.MoveNext
void GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/<GetPreviewAudioClipAsync>d__65.SetStateMachine
void GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/<GetCoverImageAsync>d__66
#include "GlobalNamespace/BeatmapLevelSO_-GetCoverImageAsync-d__66.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<UnityEngine.Sprite> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>& GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO*& GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.Sprite> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>& GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/<GetCoverImageAsync>d__66.MoveNext
void GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/<GetCoverImageAsync>d__66.SetStateMachine
void GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelSO/<GetBeatmapLevelDataAsync>d__69
#include "GlobalNamespace/BeatmapLevelSO_-GetBeatmapLevelDataAsync-d__69.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<BeatmapLevelSO/GetBeatmapLevelDataResult> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>& GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO*& GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapLevelSO/GetBeatmapLevelDataResult> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>& GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelSO/<GetBeatmapLevelDataAsync>d__69.MoveNext
void GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSO/<GetBeatmapLevelDataAsync>d__69.SetStateMachine
void GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: LevelDataAssetDownloadUpdate
#include "GlobalNamespace/LevelDataAssetDownloadUpdate.hpp"
// Including type: IBeatmapLevelPackCollection
#include "GlobalNamespace/IBeatmapLevelPackCollection.hpp"
// Including type: BeatmapLevelsModel/<ReloadCustomLevelPackCollectionAsync>d__32
#include "GlobalNamespace/BeatmapLevelsModel_-ReloadCustomLevelPackCollectionAsync-d__32.hpp"
// Including type: BeatmapLevelsModel/<>c__DisplayClass35_0
#include "GlobalNamespace/BeatmapLevelsModel_--c__DisplayClass35_0.hpp"
// Including type: BeatmapLevelsModel/<>c
#include "GlobalNamespace/BeatmapLevelsModel_--c.hpp"
// Including type: BeatmapLevelsModel/<GetBeatmapLevelAsync>d__38
#include "GlobalNamespace/BeatmapLevelsModel_-GetBeatmapLevelAsync-d__38.hpp"
// Including type: BeatmapLevelPackCollectionContainerSO
#include "GlobalNamespace/BeatmapLevelPackCollectionContainerSO.hpp"
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
// Including type: BeatmapLevelDataLoaderSO
#include "GlobalNamespace/BeatmapLevelDataLoaderSO.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: IBeatmapDataAssetFileModel
#include "GlobalNamespace/IBeatmapDataAssetFileModel.hpp"
// Including type: AudioClipAsyncLoader
#include "GlobalNamespace/AudioClipAsyncLoader.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMCache`2
#include "GlobalNamespace/HMCache_2.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapLevelLoader
#include "GlobalNamespace/BeatmapLevelLoader.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelPackCollectionContainerSO _dlcLevelPackCollectionContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelPackCollectionContainerSO*& GlobalNamespace::BeatmapLevelsModel::dyn__dlcLevelPackCollectionContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__dlcLevelPackCollectionContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dlcLevelPackCollectionContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelPackCollectionContainerSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelPackCollectionSO _ostAndExtrasPackCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelPackCollectionSO*& GlobalNamespace::BeatmapLevelsModel::dyn__ostAndExtrasPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__ostAndExtrasPackCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ostAndExtrasPackCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelPackCollectionSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelDataLoaderSO _beatmapLevelDataLoader
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelDataLoaderSO*& GlobalNamespace::BeatmapLevelsModel::dyn__beatmapLevelDataLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__beatmapLevelDataLoader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelDataLoader"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelDataLoaderSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxCachedBeatmapLevels
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelsModel::dyn__maxCachedBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__maxCachedBeatmapLevels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxCachedBeatmapLevels"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AdditionalContentModel _additionalContentModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdditionalContentModel*& GlobalNamespace::BeatmapLevelsModel::dyn__additionalContentModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__additionalContentModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_additionalContentModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdditionalContentModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapDataAssetFileModel _beatmapDataAssetFileModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapDataAssetFileModel*& GlobalNamespace::BeatmapLevelsModel::dyn__beatmapDataAssetFileModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__beatmapDataAssetFileModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataAssetFileModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapDataAssetFileModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AudioClipAsyncLoader _audioClipAsyncLoader
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioClipAsyncLoader*& GlobalNamespace::BeatmapLevelsModel::dyn__audioClipAsyncLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__audioClipAsyncLoader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioClipAsyncLoader"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioClipAsyncLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<BeatmapLevelsModel/LevelDownloadingUpdate> levelDownloadingUpdateEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>*& GlobalNamespace::BeatmapLevelsModel::dyn_levelDownloadingUpdateEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn_levelDownloadingUpdateEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelDownloadingUpdateEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPackCollection _allLoadedBeatmapLevelPackCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelPackCollection*& GlobalNamespace::BeatmapLevelsModel::dyn__allLoadedBeatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__allLoadedBeatmapLevelPackCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allLoadedBeatmapLevelPackCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPackCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPackCollection _allLoadedBeatmapLevelWithoutCustomLevelPackCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelPackCollection*& GlobalNamespace::BeatmapLevelsModel::dyn__allLoadedBeatmapLevelWithoutCustomLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__allLoadedBeatmapLevelWithoutCustomLevelPackCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allLoadedBeatmapLevelWithoutCustomLevelPackCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPackCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevelPackCollection _customLevelPackCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelPackCollection*& GlobalNamespace::BeatmapLevelsModel::dyn__customLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__customLevelPackCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_customLevelPackCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPackCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMCache`2<System.String,IBeatmapLevel> _loadedBeatmapLevels
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>*& GlobalNamespace::BeatmapLevelsModel::dyn__loadedBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__loadedBeatmapLevels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loadedBeatmapLevels"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,IPreviewBeatmapLevel> _loadedPreviewBeatmapLevels
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::IPreviewBeatmapLevel*>*& GlobalNamespace::BeatmapLevelsModel::dyn__loadedPreviewBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__loadedPreviewBeatmapLevels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loadedPreviewBeatmapLevels"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::IPreviewBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelLoader _beatmapLevelLoader
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelLoader*& GlobalNamespace::BeatmapLevelsModel::dyn__beatmapLevelLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::dyn__beatmapLevelLoader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelLoader"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel.get_ostAndExtrasPackCollection
::GlobalNamespace::BeatmapLevelPackCollectionSO* GlobalNamespace::BeatmapLevelsModel::get_ostAndExtrasPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::get_ostAndExtrasPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ostAndExtrasPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelPackCollectionSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.get_dlcBeatmapLevelPackCollection
::GlobalNamespace::IBeatmapLevelPackCollection* GlobalNamespace::BeatmapLevelsModel::get_dlcBeatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::get_dlcBeatmapLevelPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dlcBeatmapLevelPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPackCollection*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.get_allLoadedBeatmapLevelPackCollection
::GlobalNamespace::IBeatmapLevelPackCollection* GlobalNamespace::BeatmapLevelsModel::get_allLoadedBeatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::get_allLoadedBeatmapLevelPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allLoadedBeatmapLevelPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPackCollection*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection
::GlobalNamespace::IBeatmapLevelPackCollection* GlobalNamespace::BeatmapLevelsModel::get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPackCollection*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.get_customLevelPackCollection
::GlobalNamespace::IBeatmapLevelPackCollection* GlobalNamespace::BeatmapLevelsModel::get_customLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::get_customLevelPackCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customLevelPackCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPackCollection*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.add_levelDownloadingUpdateEvent
void GlobalNamespace::BeatmapLevelsModel::add_levelDownloadingUpdateEvent(::System::Action_1<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::add_levelDownloadingUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDownloadingUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapLevelsModel.remove_levelDownloadingUpdateEvent
void GlobalNamespace::BeatmapLevelsModel::remove_levelDownloadingUpdateEvent(::System::Action_1<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::remove_levelDownloadingUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDownloadingUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapLevelsModel.Init
void GlobalNamespace::BeatmapLevelsModel::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.Start
void GlobalNamespace::BeatmapLevelsModel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.OnDestroy
void GlobalNamespace::BeatmapLevelsModel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.ClearLoadedBeatmapLevelsCaches
void GlobalNamespace::BeatmapLevelsModel::ClearLoadedBeatmapLevelsCaches() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::ClearLoadedBeatmapLevelsCaches");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLoadedBeatmapLevelsCaches", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.ReloadCustomLevelPackCollectionAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevelPackCollection*>* GlobalNamespace::BeatmapLevelsModel::ReloadCustomLevelPackCollectionAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::ReloadCustomLevelPackCollectionAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadCustomLevelPackCollectionAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevelPackCollection*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: BeatmapLevelsModel.GetLevelPackForLevelId
::GlobalNamespace::IBeatmapLevelPack* GlobalNamespace::BeatmapLevelsModel::GetLevelPackForLevelId(::StringW levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetLevelPackForLevelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelPackForLevelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPack*, false>(this, ___internal__method, levelId);
}
// Autogenerated method: BeatmapLevelsModel.GetLevelPack
::GlobalNamespace::IBeatmapLevelPack* GlobalNamespace::BeatmapLevelsModel::GetLevelPack(::StringW levePacklId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levePacklId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelPack*, false>(this, ___internal__method, levePacklId);
}
// Autogenerated method: BeatmapLevelsModel.GetLevelPreviewForLevelId
::GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::BeatmapLevelsModel::GetLevelPreviewForLevelId(::StringW levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetLevelPreviewForLevelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelPreviewForLevelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method, levelId);
}
// Autogenerated method: BeatmapLevelsModel.IsBeatmapLevelLoaded
bool GlobalNamespace::BeatmapLevelsModel::IsBeatmapLevelLoaded(::StringW levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::IsBeatmapLevelLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsBeatmapLevelLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, levelId);
}
// Autogenerated method: BeatmapLevelsModel.GetBeatmapLevelIfLoaded
::GlobalNamespace::IBeatmapLevel* GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelIfLoaded(::StringW levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelIfLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapLevelIfLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method, levelId);
}
// Autogenerated method: BeatmapLevelsModel.GetBeatmapLevelAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>* GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelAsync(::StringW levelID, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelID), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>*, false>(this, ___internal__method, levelID, cancellationToken);
}
// Autogenerated method: BeatmapLevelsModel.HandleLevelDataAssetDownloadUpdate
void GlobalNamespace::BeatmapLevelsModel::HandleLevelDataAssetDownloadUpdate(::GlobalNamespace::LevelDataAssetDownloadUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::HandleLevelDataAssetDownloadUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelDataAssetDownloadUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: BeatmapLevelsModel.HandleItemWillBeRemovedFromCache
void GlobalNamespace::BeatmapLevelsModel::HandleItemWillBeRemovedFromCache(::GlobalNamespace::IBeatmapLevel* beatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::HandleItemWillBeRemovedFromCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleItemWillBeRemovedFromCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapLevel);
}
// Autogenerated method: BeatmapLevelsModel.UpdateLoadedPreviewLevels
void GlobalNamespace::BeatmapLevelsModel::UpdateLoadedPreviewLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::UpdateLoadedPreviewLevels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLoadedPreviewLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel.UpdateAllLoadedBeatmapLevelPacks
void GlobalNamespace::BeatmapLevelsModel::UpdateAllLoadedBeatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::UpdateAllLoadedBeatmapLevelPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAllLoadedBeatmapLevelPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/GetBeatmapLevelResult
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean isError
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult::dyn_isError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult::dyn_isError");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly IBeatmapLevel beatmapLevel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult::dyn_beatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult::dyn_beatmapLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapLevel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel/GetBeatmapLevelResult..ctor
// ABORTED elsewhere.  GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult::GetBeatmapLevelResult(bool isError, ::GlobalNamespace::IBeatmapLevel* beatmapLevel)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/LevelDownloadingUpdate
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState
// Already included the same include: GlobalNamespace/BeatmapLevelsModel.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String levelID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_levelID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.UInt32 bytesTotal
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_bytesTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_bytesTotal");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bytesTotal"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.UInt32 bytesTransferred
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_bytesTransferred() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_bytesTransferred");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bytesTransferred"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState downloadingState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState& GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_downloadingState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::dyn_downloadingState");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "downloadingState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel/LevelDownloadingUpdate..ctor
// ABORTED elsewhere.  GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::LevelDownloadingUpdate(::StringW levelID, uint bytesTotal, uint bytesTransferred, ::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState downloadingState)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState PreparingToDownload
::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_PreparingToDownload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_PreparingToDownload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState>("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "PreparingToDownload"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState PreparingToDownload
void GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_PreparingToDownload(::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_PreparingToDownload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "PreparingToDownload", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Downloading
::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_Downloading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_Downloading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState>("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "Downloading"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Downloading
void GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_Downloading(::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_Downloading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "Downloading", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Completed
::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState>("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Completed
void GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_Completed(::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState", "Completed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/<ReloadCustomLevelPackCollectionAsync>d__32
#include "GlobalNamespace/BeatmapLevelsModel_-ReloadCustomLevelPackCollectionAsync-d__32.hpp"
// Including type: IBeatmapLevelPackCollection
#include "GlobalNamespace/IBeatmapLevelPackCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapLevelPackCollection> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevelPackCollection*>& GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapLevelPackCollection*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IBeatmapLevelPackCollection> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevelPackCollection*>& GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapLevelPackCollection*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel/<ReloadCustomLevelPackCollectionAsync>d__32.MoveNext
void GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel/<ReloadCustomLevelPackCollectionAsync>d__32.SetStateMachine
void GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__32::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/<>c__DisplayClass35_0
#include "GlobalNamespace/BeatmapLevelsModel_--c__DisplayClass35_0.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String levelId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelsModel::$$c__DisplayClass35_0::dyn_levelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c__DisplayClass35_0::dyn_levelId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel/<>c__DisplayClass35_0.<GetLevelPreviewForLevelId>b__1
bool GlobalNamespace::BeatmapLevelsModel::$$c__DisplayClass35_0::$GetLevelPreviewForLevelId$b__1(::GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c__DisplayClass35_0::<GetLevelPreviewForLevelId>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetLevelPreviewForLevelId>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevel)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, beatmapLevel);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/<>c
#include "GlobalNamespace/BeatmapLevelsModel_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BeatmapLevelsModel/<>c <>9
::GlobalNamespace::BeatmapLevelsModel::$$c* GlobalNamespace::BeatmapLevelsModel::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::BeatmapLevelsModel::$$c*>("", "BeatmapLevelsModel/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BeatmapLevelsModel/<>c <>9
void GlobalNamespace::BeatmapLevelsModel::$$c::_set_$$9(::GlobalNamespace::BeatmapLevelsModel::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapLevelsModel/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IBeatmapLevelPack,System.Collections.Generic.IEnumerable`1<IPreviewBeatmapLevel>> <>9__35_0
::System::Func_2<::GlobalNamespace::IBeatmapLevelPack*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>* GlobalNamespace::BeatmapLevelsModel::$$c::_get_$$9__35_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::_get_$$9__35_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::IBeatmapLevelPack*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>*>("", "BeatmapLevelsModel/<>c", "<>9__35_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IBeatmapLevelPack,System.Collections.Generic.IEnumerable`1<IPreviewBeatmapLevel>> <>9__35_0
void GlobalNamespace::BeatmapLevelsModel::$$c::_set_$$9__35_0(::System::Func_2<::GlobalNamespace::IBeatmapLevelPack*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IPreviewBeatmapLevel*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::_set_$$9__35_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapLevelsModel/<>c", "<>9__35_0", value)));
}
// Autogenerated method: BeatmapLevelsModel/<>c..cctor
void GlobalNamespace::BeatmapLevelsModel::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelsModel/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel/<>c.<GetLevelPreviewForLevelId>b__35_0
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::BeatmapLevelsModel::$$c::$GetLevelPreviewForLevelId$b__35_0(::GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$$c::<GetLevelPreviewForLevelId>b__35_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetLevelPreviewForLevelId>b__35_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelPack)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method, beatmapLevelPack);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelsModel/<GetBeatmapLevelAsync>d__38
#include "GlobalNamespace/BeatmapLevelsModel_-GetBeatmapLevelAsync-d__38.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<BeatmapLevelsModel/GetBeatmapLevelResult> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapLevelsModel <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsModel*& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelsModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String levelID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_levelID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<AdditionalContentModel/EntitlementStatus> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::AdditionalContentModel::EntitlementStatus>& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::AdditionalContentModel::EntitlementStatus>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBeatmapLevel <beatmapLevel>5__2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$beatmapLevel$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$beatmapLevel$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapLevel>5__2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelLoader/LoadBeatmapLevelResult <loadLevelResult>5__3
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$loadLevelResult$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$loadLevelResult$5__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<loadLevelResult>5__3"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.AudioClip> <>u__2
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::AudioClip*>& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__2"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapLevelLoader/LoadBeatmapLevelResult> <>u__3
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>& GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::dyn_$$u__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__3"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelLoader::LoadBeatmapLevelResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapLevelsModel/<GetBeatmapLevelAsync>d__38.MoveNext
void GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelsModel/<GetBeatmapLevelAsync>d__38.SetStateMachine
void GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__38::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBeatmapLevelPack
#include "GlobalNamespace/CustomBeatmapLevelPack.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
// Including type: CustomBeatmapLevelCollection
#include "GlobalNamespace/CustomBeatmapLevelCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String <packID>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomBeatmapLevelPack::dyn_$packID$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$packID$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<packID>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <packName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomBeatmapLevelPack::dyn_$packName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$packName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<packName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <shortPackName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomBeatmapLevelPack::dyn_$shortPackName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$shortPackName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<shortPackName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Sprite <coverImage>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::CustomBeatmapLevelPack::dyn_$coverImage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$coverImage$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<coverImage>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Sprite <smallCoverImage>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::CustomBeatmapLevelPack::dyn_$smallCoverImage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$smallCoverImage$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<smallCoverImage>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapLevelCollection <beatmapLevelCollection>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelCollection*& GlobalNamespace::CustomBeatmapLevelPack::dyn_$beatmapLevelCollection$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::dyn_$beatmapLevelCollection$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapLevelCollection>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomBeatmapLevelPack.get_packID
::StringW GlobalNamespace::CustomBeatmapLevelPack::get_packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_packID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_packName
::StringW GlobalNamespace::CustomBeatmapLevelPack::get_packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_packName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_shortPackName
::StringW GlobalNamespace::CustomBeatmapLevelPack::get_shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_shortPackName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shortPackName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_collectionName
::StringW GlobalNamespace::CustomBeatmapLevelPack::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_coverImage
::UnityEngine::Sprite* GlobalNamespace::CustomBeatmapLevelPack::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_smallCoverImage
::UnityEngine::Sprite* GlobalNamespace::CustomBeatmapLevelPack::get_smallCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_smallCoverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_smallCoverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_beatmapLevelCollection
::GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::CustomBeatmapLevelPack::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevelPack.get_isPackAlwaysOwned
bool GlobalNamespace::CustomBeatmapLevelPack::get_isPackAlwaysOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::get_isPackAlwaysOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPackAlwaysOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBeatmapLevelCollection
#include "GlobalNamespace/CustomBeatmapLevelCollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: CustomPreviewBeatmapLevel
#include "GlobalNamespace/CustomPreviewBeatmapLevel.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<CustomPreviewBeatmapLevel> _customPreviewBeatmapLevels
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::CustomPreviewBeatmapLevel*>*& GlobalNamespace::CustomBeatmapLevelCollection::dyn__customPreviewBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelCollection::dyn__customPreviewBeatmapLevels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_customPreviewBeatmapLevels"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::CustomPreviewBeatmapLevel*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomBeatmapLevelCollection.get_beatmapLevels
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::CustomBeatmapLevelCollection::get_beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelCollection::get_beatmapLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomDifficultyBeatmapSet
#include "GlobalNamespace/CustomDifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: CustomDifficultyBeatmap
#include "GlobalNamespace/CustomDifficultyBeatmap.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCharacteristicSO _beatmapCharacteristic
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::CustomDifficultyBeatmapSet::dyn__beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmapSet::dyn__beatmapCharacteristic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCharacteristic"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<CustomDifficultyBeatmap> _difficultyBeatmaps
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::CustomDifficultyBeatmap*>*& GlobalNamespace::CustomDifficultyBeatmapSet::dyn__difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmapSet::dyn__difficultyBeatmaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmaps"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::CustomDifficultyBeatmap*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomDifficultyBeatmapSet.get_beatmapCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::CustomDifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmapSet.get_difficultyBeatmaps
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::CustomDifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmapSet.SetCustomDifficultyBeatmaps
void GlobalNamespace::CustomDifficultyBeatmapSet::SetCustomDifficultyBeatmaps(::ArrayW<::GlobalNamespace::CustomDifficultyBeatmap*> difficultyBeatmaps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmapSet::SetCustomDifficultyBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCustomDifficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmaps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, difficultyBeatmaps);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomDifficultyBeatmap
#include "GlobalNamespace/CustomDifficultyBeatmap.hpp"
// Including type: CustomDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__27
#include "GlobalNamespace/CustomDifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__27.hpp"
// Including type: CustomDifficultyBeatmap/<>c__DisplayClass28_0
#include "GlobalNamespace/CustomDifficultyBeatmap_--c__DisplayClass28_0.hpp"
// Including type: CustomDifficultyBeatmap/<GetBeatmapDataAsync>d__28
#include "GlobalNamespace/CustomDifficultyBeatmap_-GetBeatmapDataAsync-d__28.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapLevel <level>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::CustomDifficultyBeatmap::dyn_$level$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$level$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<level>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IDifficultyBeatmapSet <parentDifficultyBeatmapSet>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDifficultyBeatmapSet*& GlobalNamespace::CustomDifficultyBeatmap::dyn_$parentDifficultyBeatmapSet$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$parentDifficultyBeatmapSet$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<parentDifficultyBeatmapSet>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDifficultyBeatmapSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDifficulty <difficulty>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& GlobalNamespace::CustomDifficultyBeatmap::dyn_$difficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$difficulty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficulty>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficulty*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <difficultyRank>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CustomDifficultyBeatmap::dyn_$difficultyRank$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$difficultyRank$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficultyRank>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <noteJumpMovementSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomDifficultyBeatmap::dyn_$noteJumpMovementSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$noteJumpMovementSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteJumpMovementSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <noteJumpStartBeatOffset>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomDifficultyBeatmap::dyn_$noteJumpStartBeatOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$noteJumpStartBeatOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteJumpStartBeatOffset>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapDataBasicInfo <beatmapDataBasicInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapDataBasicInfo*& GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatmapDataBasicInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatmapDataBasicInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapDataBasicInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapDataBasicInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <beatsPerMinute>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatsPerMinute$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatsPerMinute$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatsPerMinute>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapSaveDataVersion3.BeatmapSaveData <beatmapSaveData>k__BackingField
[[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData*& GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatmapSaveData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::dyn_$beatmapSaveData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapSaveData>k__BackingField"))->offset;
  return *reinterpret_cast<::BeatmapSaveDataVersion3::BeatmapSaveData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomDifficultyBeatmap.get_level
::GlobalNamespace::IBeatmapLevel* GlobalNamespace::CustomDifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_parentDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::CustomDifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_difficulty
::GlobalNamespace::BeatmapDifficulty GlobalNamespace::CustomDifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_difficultyRank
int GlobalNamespace::CustomDifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::CustomDifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::CustomDifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_beatmapDataBasicInfo
::GlobalNamespace::IBeatmapDataBasicInfo* GlobalNamespace::CustomDifficultyBeatmap::get_beatmapDataBasicInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_beatmapDataBasicInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDataBasicInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapDataBasicInfo*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_beatsPerMinute
float GlobalNamespace::CustomDifficultyBeatmap::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_beatsPerMinute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.get_beatmapSaveData
::BeatmapSaveDataVersion3::BeatmapSaveData* GlobalNamespace::CustomDifficultyBeatmap::get_beatmapSaveData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::get_beatmapSaveData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapSaveData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::BeatmapSaveDataVersion3::BeatmapSaveData*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.GetBeatmapDataBasicInfoAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>* GlobalNamespace::CustomDifficultyBeatmap::GetBeatmapDataBasicInfoAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::GetBeatmapDataBasicInfoAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataBasicInfoAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap.GetBeatmapDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>* GlobalNamespace::CustomDifficultyBeatmap::GetBeatmapDataAsync(::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::GetBeatmapDataAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(environmentInfo), ::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>*, false>(this, ___internal__method, environmentInfo, playerSpecificSettings);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__27
#include "GlobalNamespace/CustomDifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__27.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapDataBasicInfo> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CustomDifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomDifficultyBeatmap*& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CustomDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IBeatmapDataBasicInfo> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapDataBasicInfo*>& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__27.MoveNext
void GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__27.SetStateMachine
void GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__27::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomDifficultyBeatmap/<>c__DisplayClass28_0
#include "GlobalNamespace/CustomDifficultyBeatmap_--c__DisplayClass28_0.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public IReadonlyBeatmapData readonlyBeatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IReadonlyBeatmapData*& GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_readonlyBeatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_readonlyBeatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readonlyBeatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IReadonlyBeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CustomDifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomDifficultyBeatmap*& GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CustomDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EnvironmentInfoSO environmentInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_environmentInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayerSpecificSettings playerSpecificSettings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_playerSpecificSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::dyn_playerSpecificSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerSpecificSettings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerSpecificSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomDifficultyBeatmap/<>c__DisplayClass28_0.<GetBeatmapDataAsync>b__0
void GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::$GetBeatmapDataAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0::<GetBeatmapDataAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapDataAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomDifficultyBeatmap/<GetBeatmapDataAsync>d__28
#include "GlobalNamespace/CustomDifficultyBeatmap_-GetBeatmapDataAsync-d__28.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
// Including type: CustomDifficultyBeatmap/<>c__DisplayClass28_0
#include "GlobalNamespace/CustomDifficultyBeatmap_--c__DisplayClass28_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IReadonlyBeatmapData> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CustomDifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomDifficultyBeatmap*& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CustomDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EnvironmentInfoSO environmentInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_environmentInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayerSpecificSettings playerSpecificSettings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_playerSpecificSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_playerSpecificSettings");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerSpecificSettings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerSpecificSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private CustomDifficultyBeatmap/<>c__DisplayClass28_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0*& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CustomDifficultyBeatmap::$$c__DisplayClass28_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomDifficultyBeatmap/<GetBeatmapDataAsync>d__28.MoveNext
void GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CustomDifficultyBeatmap/<GetBeatmapDataAsync>d__28.SetStateMachine
void GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomDifficultyBeatmap::$GetBeatmapDataAsync$d__28::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBeatmapLevel
#include "GlobalNamespace/CustomBeatmapLevel.hpp"
// Including type: BeatmapLevelData
#include "GlobalNamespace/BeatmapLevelData.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelData _beatmapLevelData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelData*& GlobalNamespace::CustomBeatmapLevel::dyn__beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevel::dyn__beatmapLevelData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomBeatmapLevel.get_beatmapLevelData
::GlobalNamespace::IBeatmapLevelData* GlobalNamespace::CustomBeatmapLevel::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevel::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevel.get_songAudioClipPath
::StringW GlobalNamespace::CustomBeatmapLevel::get_songAudioClipPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevel::get_songAudioClipPath");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAudioClipPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomBeatmapLevel.SetBeatmapLevelData
void GlobalNamespace::CustomBeatmapLevel::SetBeatmapLevelData(::GlobalNamespace::BeatmapLevelData* beatmapLevelData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevel::SetBeatmapLevelData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatmapLevelData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomPreviewBeatmapLevel
#include "GlobalNamespace/CustomPreviewBeatmapLevel.hpp"
// Including type: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__60
#include "GlobalNamespace/CustomPreviewBeatmapLevel_-GetCoverImageAsync-d__60.hpp"
// Including type: ISpriteAsyncLoader
#include "GlobalNamespace/ISpriteAsyncLoader.hpp"
// Including type: StandardLevelInfoSaveData
#include "GlobalNamespace/StandardLevelInfoSaveData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly ISpriteAsyncLoader <spriteAsyncLoader>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ISpriteAsyncLoader*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$spriteAsyncLoader$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$spriteAsyncLoader$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<spriteAsyncLoader>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ISpriteAsyncLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly StandardLevelInfoSaveData <standardLevelInfoSaveData>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelInfoSaveData*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$standardLevelInfoSaveData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$standardLevelInfoSaveData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<standardLevelInfoSaveData>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelInfoSaveData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <customLevelPath>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$customLevelPath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$customLevelPath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<customLevelPath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <levelID>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$levelID$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$levelID$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levelID>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <songName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <songSubName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songSubName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songSubName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songSubName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <songAuthorName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songAuthorName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songAuthorName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songAuthorName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <levelAuthorName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$levelAuthorName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$levelAuthorName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levelAuthorName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <beatsPerMinute>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$beatsPerMinute$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$beatsPerMinute$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatsPerMinute>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <songTimeOffset>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songTimeOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songTimeOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songTimeOffset>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <songDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$songDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <shuffle>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$shuffle$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$shuffle$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<shuffle>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <shufflePeriod>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$shufflePeriod$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$shufflePeriod$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<shufflePeriod>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <previewStartTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewStartTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewStartTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<previewStartTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <previewDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<previewDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentInfoSO <environmentInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$environmentInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$environmentInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<environmentInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly EnvironmentInfoSO <allDirectionsEnvironmentInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$allDirectionsEnvironmentInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$allDirectionsEnvironmentInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<allDirectionsEnvironmentInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnvironmentInfoSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Sprite <defaultCoverImage>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$defaultCoverImage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$defaultCoverImage$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<defaultCoverImage>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> <previewDifficultyBeatmapSets>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewDifficultyBeatmapSets$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn_$previewDifficultyBeatmapSets$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<previewDifficultyBeatmapSets>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _coverImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::CustomPreviewBeatmapLevel::dyn__coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::dyn__coverImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coverImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_spriteAsyncLoader
::GlobalNamespace::ISpriteAsyncLoader* GlobalNamespace::CustomPreviewBeatmapLevel::get_spriteAsyncLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_spriteAsyncLoader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteAsyncLoader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ISpriteAsyncLoader*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_standardLevelInfoSaveData
::GlobalNamespace::StandardLevelInfoSaveData* GlobalNamespace::CustomPreviewBeatmapLevel::get_standardLevelInfoSaveData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_standardLevelInfoSaveData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_standardLevelInfoSaveData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::StandardLevelInfoSaveData*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_customLevelPath
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_customLevelPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_customLevelPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customLevelPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_levelID
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songName
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songSubName
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songAuthorName
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_levelAuthorName
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_beatsPerMinute
float GlobalNamespace::CustomPreviewBeatmapLevel::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songTimeOffset
float GlobalNamespace::CustomPreviewBeatmapLevel::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songDuration
float GlobalNamespace::CustomPreviewBeatmapLevel::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_shuffle
float GlobalNamespace::CustomPreviewBeatmapLevel::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_shufflePeriod
float GlobalNamespace::CustomPreviewBeatmapLevel::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_previewStartTime
float GlobalNamespace::CustomPreviewBeatmapLevel::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_previewDuration
float GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_environmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::CustomPreviewBeatmapLevel::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_allDirectionsEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::CustomPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_defaultCoverImage
::UnityEngine::Sprite* GlobalNamespace::CustomPreviewBeatmapLevel::get_defaultCoverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_defaultCoverImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultCoverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_previewDifficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.get_songPreviewAudioClipPath
::StringW GlobalNamespace::CustomPreviewBeatmapLevel::get_songPreviewAudioClipPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::get_songPreviewAudioClipPath");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPreviewAudioClipPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel.GetCoverImageAsync
::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GlobalNamespace::CustomPreviewBeatmapLevel::GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__60
#include "GlobalNamespace/CustomPreviewBeatmapLevel_-GetCoverImageAsync-d__60.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<UnityEngine.Sprite> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>& GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CustomPreviewBeatmapLevel <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomPreviewBeatmapLevel*& GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CustomPreviewBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.Sprite> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>& GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__60.MoveNext
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__60.SetStateMachine
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__60::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyBeatmapLevel
#include "GlobalNamespace/EmptyBeatmapLevel.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapLevelData <beatmapLevelData>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelData*& GlobalNamespace::EmptyBeatmapLevel::dyn_$beatmapLevelData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::dyn_$beatmapLevelData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapLevelData>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EmptyBeatmapLevel.get_levelID
::StringW GlobalNamespace::EmptyBeatmapLevel::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songName
::StringW GlobalNamespace::EmptyBeatmapLevel::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songSubName
::StringW GlobalNamespace::EmptyBeatmapLevel::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songAuthorName
::StringW GlobalNamespace::EmptyBeatmapLevel::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_levelAuthorName
::StringW GlobalNamespace::EmptyBeatmapLevel::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_beatsPerMinute
float GlobalNamespace::EmptyBeatmapLevel::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songTimeOffset
float GlobalNamespace::EmptyBeatmapLevel::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_shuffle
float GlobalNamespace::EmptyBeatmapLevel::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_shufflePeriod
float GlobalNamespace::EmptyBeatmapLevel::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewStartTime
float GlobalNamespace::EmptyBeatmapLevel::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewDuration
float GlobalNamespace::EmptyBeatmapLevel::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songDuration
float GlobalNamespace::EmptyBeatmapLevel::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_environmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::EmptyBeatmapLevel::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_allDirectionsEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewDifficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::EmptyBeatmapLevel::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_beatmapLevelData
::GlobalNamespace::IBeatmapLevelData* GlobalNamespace::EmptyBeatmapLevel::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.GetPreviewAudioClipAsync
::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>* GlobalNamespace::EmptyBeatmapLevel::GetPreviewAudioClipAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::GetPreviewAudioClipAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: EmptyBeatmapLevel.GetCoverImageAsync
::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GlobalNamespace::EmptyBeatmapLevel::GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevel::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyBeatmapLevelData
#include "GlobalNamespace/EmptyBeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EmptyBeatmapLevelData.get_audioClip
::UnityEngine::AudioClip* GlobalNamespace::EmptyBeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevelData.get_difficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::EmptyBeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyBeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyDifficultyBeatmap
#include "GlobalNamespace/EmptyDifficultyBeatmap.hpp"
// Including type: EmptyDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__20
#include "GlobalNamespace/EmptyDifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__20.hpp"
// Including type: EmptyDifficultyBeatmap/<GetBeatmapDataAsync>d__21
#include "GlobalNamespace/EmptyDifficultyBeatmap_-GetBeatmapDataAsync-d__21.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapLevel <level>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevel*& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$level$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$level$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<level>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IDifficultyBeatmapSet <parentDifficultyBeatmapSet>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDifficultyBeatmapSet*& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$parentDifficultyBeatmapSet$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$parentDifficultyBeatmapSet$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<parentDifficultyBeatmapSet>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDifficultyBeatmapSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDifficulty <difficulty>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$difficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$difficulty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficulty>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficulty*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <difficultyRank>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$difficultyRank$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$difficultyRank$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficultyRank>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <noteJumpMovementSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$noteJumpMovementSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$noteJumpMovementSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteJumpMovementSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <noteJumpStartBeatOffset>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EmptyDifficultyBeatmap::dyn_$noteJumpStartBeatOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn_$noteJumpStartBeatOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteJumpStartBeatOffset>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapData _beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapData*& GlobalNamespace::EmptyDifficultyBeatmap::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_level
::GlobalNamespace::IBeatmapLevel* GlobalNamespace::EmptyDifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_parentDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_difficulty
::GlobalNamespace::BeatmapDifficulty GlobalNamespace::EmptyDifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_difficultyRank
int GlobalNamespace::EmptyDifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_beatmapDataBasicInfo
::GlobalNamespace::IBeatmapDataBasicInfo* GlobalNamespace::EmptyDifficultyBeatmap::get_beatmapDataBasicInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::get_beatmapDataBasicInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDataBasicInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapDataBasicInfo*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.GetBeatmapDataBasicInfoAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>* GlobalNamespace::EmptyDifficultyBeatmap::GetBeatmapDataBasicInfoAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::GetBeatmapDataBasicInfoAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataBasicInfoAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.GetBeatmapDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>* GlobalNamespace::EmptyDifficultyBeatmap::GetBeatmapDataAsync(::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::GetBeatmapDataAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(environmentInfo), ::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>*, false>(this, ___internal__method, environmentInfo, playerSpecificSettings);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__20
#include "GlobalNamespace/EmptyDifficultyBeatmap_-GetBeatmapDataBasicInfoAsync-d__20.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IBeatmapDataBasicInfo> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EmptyDifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EmptyDifficultyBeatmap*& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EmptyDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapData> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapData*>& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EmptyDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__20.MoveNext
void GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap/<GetBeatmapDataBasicInfoAsync>d__20.SetStateMachine
void GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataBasicInfoAsync$d__20::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyDifficultyBeatmap/<GetBeatmapDataAsync>d__21
#include "GlobalNamespace/EmptyDifficultyBeatmap_-GetBeatmapDataAsync-d__21.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<IReadonlyBeatmapData> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EmptyDifficultyBeatmap <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EmptyDifficultyBeatmap*& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EmptyDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IReadonlyBeatmapData> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EmptyDifficultyBeatmap/<GetBeatmapDataAsync>d__21.MoveNext
void GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap/<GetBeatmapDataAsync>d__21.SetStateMachine
void GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmptyDifficultyBeatmap::$GetBeatmapDataAsync$d__21::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevel.get_beatmapLevelData
::GlobalNamespace::IBeatmapLevelData* GlobalNamespace::IBeatmapLevel::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevel::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevelData.get_audioClip
::UnityEngine::AudioClip* GlobalNamespace::IBeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapLevelData.get_difficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::IBeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLevelDataExtensions
#include "GlobalNamespace/BeatmapLevelDataExtensions.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: PreviewDifficultyBeatmap
#include "GlobalNamespace/PreviewDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmap
::GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap(::GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, ::GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmap*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristic, difficulty);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet(::GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristic);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmap
::GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap(::GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::GlobalNamespace::PreviewDifficultyBeatmap* previewDifficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(previewDifficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmap*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelData, previewDifficultyBeatmap);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet(::GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::StringW beatmapCharacteristicName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristicName)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristicName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDifficultyBeatmap.get_level
::GlobalNamespace::IBeatmapLevel* GlobalNamespace::IDifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_parentDifficultyBeatmapSet
::GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::IDifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_difficulty
::GlobalNamespace::BeatmapDifficulty GlobalNamespace::IDifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_difficultyRank
int GlobalNamespace::IDifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::IDifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::IDifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.GetBeatmapDataBasicInfoAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>* GlobalNamespace::IDifficultyBeatmap::GetBeatmapDataBasicInfoAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::GetBeatmapDataBasicInfoAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataBasicInfoAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapDataBasicInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.GetBeatmapDataAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>* GlobalNamespace::IDifficultyBeatmap::GetBeatmapDataAsync(::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmap::GetBeatmapDataAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(environmentInfo), ::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::IReadonlyBeatmapData*>*, false>(this, ___internal__method, environmentInfo, playerSpecificSettings);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DifficultyBeatmapSerializedMethods
#include "GlobalNamespace/DifficultyBeatmapSerializedMethods.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DifficultyBeatmapSerializedMethods.SerializedName
::StringW GlobalNamespace::DifficultyBeatmapSerializedMethods::SerializedName(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyBeatmapSerializedMethods::SerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DifficultyBeatmapSerializedMethods", "SerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDifficultyBeatmapSet.get_beatmapCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::IDifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmapSet.get_difficultyBeatmaps
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::IDifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DifficultyBeatmapSet
#include "GlobalNamespace/DifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCharacteristicSO <beatmapCharacteristic>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::DifficultyBeatmapSet::dyn_$beatmapCharacteristic$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyBeatmapSet::dyn_$beatmapCharacteristic$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapCharacteristic>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<IDifficultyBeatmap> <difficultyBeatmaps>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*& GlobalNamespace::DifficultyBeatmapSet::dyn_$difficultyBeatmaps$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyBeatmapSet::dyn_$difficultyBeatmaps$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<difficultyBeatmaps>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DifficultyBeatmapSet.get_beatmapCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::DifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: DifficultyBeatmapSet.get_difficultyBeatmaps
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DifficultyBeatmapSetExtensions
#include "GlobalNamespace/DifficultyBeatmapSetExtensions.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IPreviewBeatmapLevel.get_levelID
::StringW GlobalNamespace::IPreviewBeatmapLevel::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songName
::StringW GlobalNamespace::IPreviewBeatmapLevel::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songSubName
::StringW GlobalNamespace::IPreviewBeatmapLevel::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songAuthorName
::StringW GlobalNamespace::IPreviewBeatmapLevel::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_levelAuthorName
::StringW GlobalNamespace::IPreviewBeatmapLevel::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_beatsPerMinute
float GlobalNamespace::IPreviewBeatmapLevel::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songTimeOffset
float GlobalNamespace::IPreviewBeatmapLevel::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_shuffle
float GlobalNamespace::IPreviewBeatmapLevel::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_shufflePeriod
float GlobalNamespace::IPreviewBeatmapLevel::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewStartTime
float GlobalNamespace::IPreviewBeatmapLevel::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewDuration
float GlobalNamespace::IPreviewBeatmapLevel::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songDuration
float GlobalNamespace::IPreviewBeatmapLevel::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_environmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::IPreviewBeatmapLevel::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_allDirectionsEnvironmentInfo
::GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewDifficultyBeatmapSets
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.GetCoverImageAsync
::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GlobalNamespace::IPreviewBeatmapLevel::GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreviewBeatmapLevel::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111C640
// Autogenerated static field getter
// Get static field: static public readonly System.Single[] bpmValues
::ArrayW<float> GlobalNamespace::LevelFilterParams::_get_bpmValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::_get_bpmValues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<float>>("", "LevelFilterParams", "bpmValues"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single[] bpmValues
void GlobalNamespace::LevelFilterParams::_set_bpmValues(::ArrayW<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::_set_bpmValues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelFilterParams", "bpmValues", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByLevelIds>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByLevelIds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByLevelIds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByLevelIds>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.String> <beatmapLevelIds>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::LevelFilterParams::dyn_$beatmapLevelIds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$beatmapLevelIds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapLevelIds>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByOwned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByOwned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByOwned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByOwned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByNotOwned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByNotOwned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByNotOwned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByNotOwned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <searchText>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LevelFilterParams::dyn_$searchText$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$searchText$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<searchText>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByDifficulty>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByDifficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByDifficulty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByDifficulty>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDifficultyMask <filteredDifficulty>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficultyMask& GlobalNamespace::LevelFilterParams::dyn_$filteredDifficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filteredDifficulty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filteredDifficulty>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDifficultyMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterBySongPacks>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterBySongPacks$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterBySongPacks$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterBySongPacks>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SongPackMask <filteredSongPacks>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPackMask& GlobalNamespace::LevelFilterParams::dyn_$filteredSongPacks$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filteredSongPacks$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filteredSongPacks>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongPackMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByCharacteristic>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByCharacteristic$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByCharacteristic$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByCharacteristic>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapCharacteristicSO <filteredCharacteristic>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& GlobalNamespace::LevelFilterParams::dyn_$filteredCharacteristic$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filteredCharacteristic$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filteredCharacteristic>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCharacteristicSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByNotPlayedYet>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByNotPlayedYet$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByNotPlayedYet$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByNotPlayedYet>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByMinBpm>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByMinBpm$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByMinBpm$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByMinBpm>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <filteredMinBpm>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelFilterParams::dyn_$filteredMinBpm$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filteredMinBpm$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filteredMinBpm>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <filterByMaxBpm>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LevelFilterParams::dyn_$filterByMaxBpm$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filterByMaxBpm$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filterByMaxBpm>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <filteredMaxBpm>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LevelFilterParams::dyn_$filteredMaxBpm$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::dyn_$filteredMaxBpm$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<filteredMaxBpm>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LevelFilterParams.get_filterByLevelIds
bool GlobalNamespace::LevelFilterParams::get_filterByLevelIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByLevelIds
void GlobalNamespace::LevelFilterParams::set_filterByLevelIds(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_beatmapLevelIds
::System::Collections::Generic::HashSet_1<::StringW>* GlobalNamespace::LevelFilterParams::get_beatmapLevelIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_beatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::HashSet_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_beatmapLevelIds
void GlobalNamespace::LevelFilterParams::set_beatmapLevelIds(::System::Collections::Generic::HashSet_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_beatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByOwned
bool GlobalNamespace::LevelFilterParams::get_filterByOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByOwned
void GlobalNamespace::LevelFilterParams::set_filterByOwned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByNotOwned
bool GlobalNamespace::LevelFilterParams::get_filterByNotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByNotOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByNotOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByNotOwned
void GlobalNamespace::LevelFilterParams::set_filterByNotOwned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByNotOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByNotOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_searchText
::StringW GlobalNamespace::LevelFilterParams::get_searchText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_searchText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_searchText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_searchText
void GlobalNamespace::LevelFilterParams::set_searchText(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_searchText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_searchText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByDifficulty
bool GlobalNamespace::LevelFilterParams::get_filterByDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByDifficulty
void GlobalNamespace::LevelFilterParams::set_filterByDifficulty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredDifficulty
::GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LevelFilterParams::get_filteredDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filteredDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredDifficulty
void GlobalNamespace::LevelFilterParams::set_filteredDifficulty(::GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filteredDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterBySongPacks
bool GlobalNamespace::LevelFilterParams::get_filterBySongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterBySongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterBySongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterBySongPacks
void GlobalNamespace::LevelFilterParams::set_filterBySongPacks(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterBySongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterBySongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredSongPacks
::GlobalNamespace::SongPackMask GlobalNamespace::LevelFilterParams::get_filteredSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filteredSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredSongPacks
void GlobalNamespace::LevelFilterParams::set_filteredSongPacks(::GlobalNamespace::SongPackMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filteredSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByCharacteristic
bool GlobalNamespace::LevelFilterParams::get_filterByCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByCharacteristic
void GlobalNamespace::LevelFilterParams::set_filterByCharacteristic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredCharacteristic
::GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::LevelFilterParams::get_filteredCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filteredCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredCharacteristic
void GlobalNamespace::LevelFilterParams::set_filteredCharacteristic(::GlobalNamespace::BeatmapCharacteristicSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filteredCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByNotPlayedYet
bool GlobalNamespace::LevelFilterParams::get_filterByNotPlayedYet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByNotPlayedYet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByNotPlayedYet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByNotPlayedYet
void GlobalNamespace::LevelFilterParams::set_filterByNotPlayedYet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByNotPlayedYet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByNotPlayedYet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByMinBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMinBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByMinBpm
void GlobalNamespace::LevelFilterParams::set_filterByMinBpm(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredMinBpm
float GlobalNamespace::LevelFilterParams::get_filteredMinBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filteredMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredMinBpm
void GlobalNamespace::LevelFilterParams::set_filteredMinBpm(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filteredMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByMaxBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMaxBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filterByMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByMaxBpm
void GlobalNamespace::LevelFilterParams::set_filterByMaxBpm(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filterByMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredMaxBpm
float GlobalNamespace::LevelFilterParams::get_filteredMaxBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::get_filteredMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredMaxBpm
void GlobalNamespace::LevelFilterParams::set_filteredMaxBpm(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::set_filteredMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams..cctor
void GlobalNamespace::LevelFilterParams::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LevelFilterParams.IsWithoutFilter
bool GlobalNamespace::LevelFilterParams::IsWithoutFilter(bool ignoreFilterBySongs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::IsWithoutFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWithoutFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreFilterBySongs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ignoreFilterBySongs);
}
// Autogenerated method: LevelFilterParams.NoFilter
::GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::NoFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::NoFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "NoFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LevelFilterParams.ByBeatmapLevelIds
::GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapLevelIds(::System::Collections::Generic::HashSet_1<::StringW>* beatmapLevelIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::ByBeatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "ByBeatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelIds)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapLevelIds);
}
// Autogenerated method: LevelFilterParams.ByBeatmapCharacteristic
::GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapCharacteristic(::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilterParams::ByBeatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "ByBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapCharacteristic);
}
