// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.AtomicBoolean
#include "System/Threading/AtomicBoolean.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 flag
[[deprecated("Use field access instead!")]] int& System::Threading::AtomicBoolean::dyn_flag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::dyn_flag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flag"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.AtomicBoolean.TryRelaxedSet
bool System::Threading::AtomicBoolean::TryRelaxedSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::TryRelaxedSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRelaxedSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.AtomicBoolean.Exchange
bool System::Threading::AtomicBoolean::Exchange(bool newVal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newVal)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newVal);
}
// Autogenerated method: System.Threading.AtomicBoolean.Equals
bool System::Threading::AtomicBoolean::Equals(::System::Threading::AtomicBoolean* rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, rhs);
}
// Autogenerated method: System.Threading.AtomicBoolean.Equals
bool System::Threading::AtomicBoolean::Equals(::Il2CppObject* rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, rhs);
}
// Autogenerated method: System.Threading.AtomicBoolean.GetHashCode
int System::Threading::AtomicBoolean::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AtomicBoolean::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_ActionToActionObjShunt
::System::Action_1<::Il2CppObject*>* System::Threading::CancellationToken::_get_s_ActionToActionObjShunt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::_get_s_ActionToActionObjShunt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "CancellationToken", "s_ActionToActionObjShunt"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_ActionToActionObjShunt
void System::Threading::CancellationToken::_set_s_ActionToActionObjShunt(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::_set_s_ActionToActionObjShunt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationToken", "s_ActionToActionObjShunt", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationTokenSource m_source
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::CancellationToken::dyn_m_source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::dyn_m_source");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_source"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationToken.get_None
::System::Threading::CancellationToken System::Threading::CancellationToken::get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_None");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "get_None", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.get_IsCancellationRequested
bool System::Threading::CancellationToken::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.get_CanBeCanceled
bool System::Threading::CancellationToken::get_CanBeCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_CanBeCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CanBeCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken..ctor
// ABORTED elsewhere.  System::Threading::CancellationToken::CancellationToken(::System::Threading::CancellationTokenSource* source)
// Autogenerated method: System.Threading.CancellationToken..cctor
void System::Threading::CancellationToken::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.ActionToActionObjShunt
void System::Threading::CancellationToken::ActionToActionObjShunt(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ActionToActionObjShunt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "ActionToActionObjShunt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: System.Threading.CancellationToken.InternalRegisterWithoutEC
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::InternalRegisterWithoutEC(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::InternalRegisterWithoutEC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InternalRegisterWithoutEC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state, bool useSynchronizationContext, bool useExecutionContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(useSynchronizationContext), ::il2cpp_utils::ExtractType(useExecutionContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state, useSynchronizationContext, useExecutionContext);
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(::System::Threading::CancellationToken other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowIfCancellationRequested
void System::Threading::CancellationToken::ThrowIfCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowIfCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowIfCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowIfSourceDisposed
void System::Threading::CancellationToken::ThrowIfSourceDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowIfSourceDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowIfSourceDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowOperationCanceledException
void System::Threading::CancellationToken::ThrowOperationCanceledException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowOperationCanceledException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowOperationCanceledException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowObjectDisposedException
void System::Threading::CancellationToken::ThrowObjectDisposedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowObjectDisposedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "ThrowObjectDisposedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationToken.GetHashCode
int System::Threading::CancellationToken::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.op_Equality
bool System::Threading::operator ==(const ::System::Threading::CancellationToken& left, const ::System::Threading::CancellationToken& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: System.Threading.CancellationToken.op_Inequality
bool System::Threading::operator !=(const ::System::Threading::CancellationToken& left, const ::System::Threading::CancellationToken& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationCallbackInfo m_callbackInfo
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationCallbackInfo*& System::Threading::CancellationTokenRegistration::dyn_m_callbackInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::dyn_m_callbackInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_callbackInfo"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationCallbackInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.SparselyPopulatedArrayAddInfo`1<System.Threading.CancellationCallbackInfo> m_registrationInfo
[[deprecated("Use field access instead!")]] ::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*>& System::Threading::CancellationTokenRegistration::dyn_m_registrationInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::dyn_m_registrationInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_registrationInfo"))->offset;
  return *reinterpret_cast<::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration..ctor
// ABORTED elsewhere.  System::Threading::CancellationTokenRegistration::CancellationTokenRegistration(::System::Threading::CancellationCallbackInfo* callbackInfo, ::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*> registrationInfo)
// Autogenerated method: System.Threading.CancellationTokenRegistration.TryDeregister
bool System::Threading::CancellationTokenRegistration::TryDeregister() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::TryDeregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryDeregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Dispose
void System::Threading::CancellationTokenRegistration::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Equals
bool System::Threading::CancellationTokenRegistration::Equals(::System::Threading::CancellationTokenRegistration other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Equals
bool System::Threading::CancellationTokenRegistration::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.GetHashCode
int System::Threading::CancellationTokenRegistration::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Threading.SparselyPopulatedArray`1
#include "System/Threading/SparselyPopulatedArray_1.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.CancellationCallbackCoreWorkArguments
#include "System/Threading/CancellationCallbackCoreWorkArguments.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.CancellationTokenSource _staticSource_Set
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::_get__staticSource_Set() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get__staticSource_Set");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::CancellationTokenSource*>("System.Threading", "CancellationTokenSource", "_staticSource_Set"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.CancellationTokenSource _staticSource_Set
void System::Threading::CancellationTokenSource::_set__staticSource_Set(::System::Threading::CancellationTokenSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set__staticSource_Set");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "_staticSource_Set", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.CancellationTokenSource _staticSource_NotCancelable
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::_get__staticSource_NotCancelable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get__staticSource_NotCancelable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::CancellationTokenSource*>("System.Threading", "CancellationTokenSource", "_staticSource_NotCancelable"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.CancellationTokenSource _staticSource_NotCancelable
void System::Threading::CancellationTokenSource::_set__staticSource_NotCancelable(::System::Threading::CancellationTokenSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set__staticSource_NotCancelable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "_staticSource_NotCancelable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 s_nLists
int System::Threading::CancellationTokenSource::_get_s_nLists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_nLists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "s_nLists"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 s_nLists
void System::Threading::CancellationTokenSource::_set_s_nLists(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_nLists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_nLists", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANNOT_BE_CANCELED
int System::Threading::CancellationTokenSource::_get_CANNOT_BE_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_CANNOT_BE_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "CANNOT_BE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANNOT_BE_CANCELED
void System::Threading::CancellationTokenSource::_set_CANNOT_BE_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_CANNOT_BE_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "CANNOT_BE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NOT_CANCELED
int System::Threading::CancellationTokenSource::_get_NOT_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NOT_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NOT_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NOT_CANCELED
void System::Threading::CancellationTokenSource::_set_NOT_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NOT_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NOT_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NOTIFYING
int System::Threading::CancellationTokenSource::_get_NOTIFYING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NOTIFYING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NOTIFYING"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NOTIFYING
void System::Threading::CancellationTokenSource::_set_NOTIFYING(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NOTIFYING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NOTIFYING", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NOTIFYINGCOMPLETE
int System::Threading::CancellationTokenSource::_get_NOTIFYINGCOMPLETE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NOTIFYINGCOMPLETE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NOTIFYINGCOMPLETE"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NOTIFYINGCOMPLETE
void System::Threading::CancellationTokenSource::_set_NOTIFYINGCOMPLETE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NOTIFYINGCOMPLETE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NOTIFYINGCOMPLETE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_LinkedTokenCancelDelegate
::System::Action_1<::Il2CppObject*>* System::Threading::CancellationTokenSource::_get_s_LinkedTokenCancelDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_LinkedTokenCancelDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "CancellationTokenSource", "s_LinkedTokenCancelDelegate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_LinkedTokenCancelDelegate
void System::Threading::CancellationTokenSource::_set_s_LinkedTokenCancelDelegate(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_LinkedTokenCancelDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_LinkedTokenCancelDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.TimerCallback s_timerCallback
::System::Threading::TimerCallback* System::Threading::CancellationTokenSource::_get_s_timerCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_timerCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::TimerCallback*>("System.Threading", "CancellationTokenSource", "s_timerCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.TimerCallback s_timerCallback
void System::Threading::CancellationTokenSource::_set_s_timerCallback(::System::Threading::TimerCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_timerCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_timerCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent m_kernelEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::CancellationTokenSource::dyn_m_kernelEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_kernelEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_kernelEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SparselyPopulatedArray`1<System.Threading.CancellationCallbackInfo>[] m_registeredCallbacksLists
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>& System::Threading::CancellationTokenSource::dyn_m_registeredCallbacksLists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_registeredCallbacksLists");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_registeredCallbacksLists"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_state
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationTokenSource::dyn_m_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_threadIDExecutingCallbacks
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationTokenSource::dyn_m_threadIDExecutingCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_threadIDExecutingCallbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_threadIDExecutingCallbacks"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::CancellationTokenSource::dyn_m_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationTokenRegistration[] m_linkingRegistrations
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::CancellationTokenRegistration>& System::Threading::CancellationTokenSource::dyn_m_linkingRegistrations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_linkingRegistrations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_linkingRegistrations"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::CancellationTokenRegistration>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationCallbackInfo m_executingCallback
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationCallbackInfo*& System::Threading::CancellationTokenSource::dyn_m_executingCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_executingCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_executingCallback"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationCallbackInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Timer m_timer
[[deprecated("Use field access instead!")]] ::System::Threading::Timer*& System::Threading::CancellationTokenSource::dyn_m_timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn_m_timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_timer"))->offset;
  return *reinterpret_cast<::System::Threading::Timer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsCancellationRequested
bool System::Threading::CancellationTokenSource::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsCancellationCompleted
bool System::Threading::CancellationTokenSource::get_IsCancellationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsCancellationCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsDisposed
bool System::Threading::CancellationTokenSource::get_IsDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_ThreadIDExecutingCallbacks
int System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.set_ThreadIDExecutingCallbacks
void System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_Token
::System::Threading::CancellationToken System::Threading::CancellationTokenSource::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_CanBeCanceled
bool System::Threading::CancellationTokenSource::get_CanBeCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_CanBeCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanBeCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_ExecutingCallback
::System::Threading::CancellationCallbackInfo* System::Threading::CancellationTokenSource::get_ExecutingCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_ExecutingCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationCallbackInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource..cctor
void System::Threading::CancellationTokenSource::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.LinkedTokenCancelDelegate
void System::Threading::CancellationTokenSource::LinkedTokenCancelDelegate(::Il2CppObject* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedTokenCancelDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "LinkedTokenCancelDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Cancel
void System::Threading::CancellationTokenSource::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Cancel
void System::Threading::CancellationTokenSource::Cancel(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancelAfter
void System::Threading::CancellationTokenSource::CancelAfter(::System::TimeSpan delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancelAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancelAfter
void System::Threading::CancellationTokenSource::CancelAfter(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancelAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.CancellationTokenSource.TimerCallbackLogic
void System::Threading::CancellationTokenSource::TimerCallbackLogic(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::TimerCallbackLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "TimerCallbackLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ThrowIfDisposed
void System::Threading::CancellationTokenSource::ThrowIfDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ThrowIfDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ThrowObjectDisposedException
void System::Threading::CancellationTokenSource::ThrowObjectDisposedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ThrowObjectDisposedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "ThrowObjectDisposedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.InternalGetStaticSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::InternalGetStaticSource(bool set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::InternalGetStaticSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "InternalGetStaticSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenSource*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, set);
}
// Autogenerated method: System.Threading.CancellationTokenSource.InternalRegister
::System::Threading::CancellationTokenRegistration System::Threading::CancellationTokenSource::InternalRegister(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* stateForCallback, ::System::Threading::SynchronizationContext* targetSyncContext, ::System::Threading::ExecutionContext* executionContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::InternalRegister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(stateForCallback), ::il2cpp_utils::ExtractType(targetSyncContext), ::il2cpp_utils::ExtractType(executionContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, stateForCallback, targetSyncContext, executionContext);
}
// Autogenerated method: System.Threading.CancellationTokenSource.NotifyCancellation
void System::Threading::CancellationTokenSource::NotifyCancellation(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::NotifyCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ExecuteCallbackHandlers
void System::Threading::CancellationTokenSource::ExecuteCallbackHandlers(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ExecuteCallbackHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCallbackHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancellationCallbackCoreWork_OnSyncContext
void System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCallbackCoreWork_OnSyncContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancellationCallbackCoreWork
void System::Threading::CancellationTokenSource::CancellationCallbackCoreWork(::System::Threading::CancellationCallbackCoreWorkArguments args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancellationCallbackCoreWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCallbackCoreWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CreateLinkedTokenSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::CreateLinkedTokenSource(::System::Threading::CancellationToken token1, ::System::Threading::CancellationToken token2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CreateLinkedTokenSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "CreateLinkedTokenSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token1), ::il2cpp_utils::ExtractType(token2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenSource*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, token1, token2);
}
// Autogenerated method: System.Threading.CancellationTokenSource.WaitForCallbackToComplete
void System::Threading::CancellationTokenSource::WaitForCallbackToComplete(::System::Threading::CancellationCallbackInfo* callbackInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::WaitForCallbackToComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForCallbackToComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callbackInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.CancellationCallbackCoreWorkArguments
#include "System/Threading/CancellationCallbackCoreWorkArguments.hpp"
// Including type: System.Threading.SparselyPopulatedArrayFragment`1
#include "System/Threading/SparselyPopulatedArrayFragment_1.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.SparselyPopulatedArrayFragment`1<System.Threading.CancellationCallbackInfo> m_currArrayFragment
[[deprecated("Use field access instead!")]] ::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>*& System::Threading::CancellationCallbackCoreWorkArguments::dyn_m_currArrayFragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackCoreWorkArguments::dyn_m_currArrayFragment");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currArrayFragment"))->offset;
  return *reinterpret_cast<::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_currArrayIndex
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationCallbackCoreWorkArguments::dyn_m_currArrayIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackCoreWorkArguments::dyn_m_currArrayIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currArrayIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationCallbackCoreWorkArguments..ctor
// ABORTED elsewhere.  System::Threading::CancellationCallbackCoreWorkArguments::CancellationCallbackCoreWorkArguments(::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>* currArrayFragment, int currArrayIndex)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_executionContextCallback
::System::Threading::ContextCallback* System::Threading::CancellationCallbackInfo::_get_s_executionContextCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::_get_s_executionContextCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "CancellationCallbackInfo", "s_executionContextCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_executionContextCallback
void System::Threading::CancellationCallbackInfo::_set_s_executionContextCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::_set_s_executionContextCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationCallbackInfo", "s_executionContextCallback", value));
}
// Autogenerated instance field getter
// Get instance field: readonly System.Action`1<System.Object> Callback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& System::Threading::CancellationCallbackInfo::dyn_Callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_Callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Callback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Object StateForCallback
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::CancellationCallbackInfo::dyn_StateForCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_StateForCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StateForCallback"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.SynchronizationContext TargetSyncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::CancellationCallbackInfo::dyn_TargetSyncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_TargetSyncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetSyncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.ExecutionContext TargetExecutionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::CancellationCallbackInfo::dyn_TargetExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_TargetExecutionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetExecutionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.CancellationTokenSource CancellationTokenSource
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::CancellationCallbackInfo::dyn_CancellationTokenSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_CancellationTokenSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CancellationTokenSource"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationCallbackInfo.ExecuteCallback
void System::Threading::CancellationCallbackInfo::ExecuteCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::ExecuteCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationCallbackInfo.ExecutionContextCallback
void System::Threading::CancellationCallbackInfo::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationCallbackInfo", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.CountdownEvent
#include "System/Threading/CountdownEvent.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_initialCount
[[deprecated("Use field access instead!")]] int& System::Threading::CountdownEvent::dyn_m_initialCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::dyn_m_initialCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_initialCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_currentCount
[[deprecated("Use field access instead!")]] int& System::Threading::CountdownEvent::dyn_m_currentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::dyn_m_currentCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEventSlim m_event
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEventSlim*& System::Threading::CountdownEvent::dyn_m_event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::dyn_m_event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_event"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEventSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::CountdownEvent::dyn_m_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::dyn_m_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CountdownEvent.get_CurrentCount
int System::Threading::CountdownEvent::get_CurrentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::get_CurrentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CountdownEvent.Dispose
void System::Threading::CountdownEvent::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CountdownEvent.Dispose
void System::Threading::CountdownEvent::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.CountdownEvent.Signal
bool System::Threading::CountdownEvent::Signal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::Signal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Signal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CountdownEvent.ThrowIfDisposed
void System::Threading::CountdownEvent::ThrowIfDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CountdownEvent::ThrowIfDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.LazyThreadSafetyMode
#include "System/Threading/LazyThreadSafetyMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.LazyThreadSafetyMode None
::System::Threading::LazyThreadSafetyMode System::Threading::LazyThreadSafetyMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::LazyThreadSafetyMode>("System.Threading", "LazyThreadSafetyMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.LazyThreadSafetyMode None
void System::Threading::LazyThreadSafetyMode::_set_None(::System::Threading::LazyThreadSafetyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "LazyThreadSafetyMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.LazyThreadSafetyMode PublicationOnly
::System::Threading::LazyThreadSafetyMode System::Threading::LazyThreadSafetyMode::_get_PublicationOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_get_PublicationOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::LazyThreadSafetyMode>("System.Threading", "LazyThreadSafetyMode", "PublicationOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.LazyThreadSafetyMode PublicationOnly
void System::Threading::LazyThreadSafetyMode::_set_PublicationOnly(::System::Threading::LazyThreadSafetyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_set_PublicationOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "LazyThreadSafetyMode", "PublicationOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.LazyThreadSafetyMode ExecutionAndPublication
::System::Threading::LazyThreadSafetyMode System::Threading::LazyThreadSafetyMode::_get_ExecutionAndPublication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_get_ExecutionAndPublication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::LazyThreadSafetyMode>("System.Threading", "LazyThreadSafetyMode", "ExecutionAndPublication"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.LazyThreadSafetyMode ExecutionAndPublication
void System::Threading::LazyThreadSafetyMode::_set_ExecutionAndPublication(::System::Threading::LazyThreadSafetyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::_set_ExecutionAndPublication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "LazyThreadSafetyMode", "ExecutionAndPublication", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::LazyThreadSafetyMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LazyThreadSafetyMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.LazyInitializer
#include "System/Threading/LazyInitializer.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 DEFAULT_SPIN_SP
int System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_SP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_SP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_SP"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 DEFAULT_SPIN_SP
void System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_SP(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_SP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_SP", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 DEFAULT_SPIN_MP
int System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_MP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_MP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_MP"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 DEFAULT_SPIN_MP
void System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_MP(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_MP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_MP", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SignalledState_BitMask
int System::Threading::ManualResetEventSlim::_get_SignalledState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SignalledState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SignalledState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SignalledState_BitMask
void System::Threading::ManualResetEventSlim::_set_SignalledState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SignalledState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SignalledState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SignalledState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_SignalledState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SignalledState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SignalledState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SignalledState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_SignalledState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SignalledState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SignalledState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 Dispose_BitMask
int System::Threading::ManualResetEventSlim::_get_Dispose_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_Dispose_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "Dispose_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 Dispose_BitMask
void System::Threading::ManualResetEventSlim::_set_Dispose_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_Dispose_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "Dispose_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_BitMask
int System::Threading::ManualResetEventSlim::_get_SpinCountState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_BitMask
void System::Threading::ManualResetEventSlim::_set_SpinCountState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_SpinCountState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_SpinCountState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_MaxValue
int System::Threading::ManualResetEventSlim::_get_SpinCountState_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_MaxValue
void System::Threading::ManualResetEventSlim::_set_SpinCountState_MaxValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_MaxValue", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_BitMask
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_BitMask
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_MaxValue
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_MaxValue
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_MaxValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_MaxValue", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> s_cancellationTokenCallback
::System::Action_1<::Il2CppObject*>* System::Threading::ManualResetEventSlim::_get_s_cancellationTokenCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_s_cancellationTokenCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "ManualResetEventSlim", "s_cancellationTokenCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> s_cancellationTokenCallback
void System::Threading::ManualResetEventSlim::_set_s_cancellationTokenCallback(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_s_cancellationTokenCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "s_cancellationTokenCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_lock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ManualResetEventSlim::dyn_m_lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_lock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent m_eventObj
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::ManualResetEventSlim::dyn_m_eventObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_eventObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_eventObj"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_combinedState
[[deprecated("Use field access instead!")]] int& System::Threading::ManualResetEventSlim::dyn_m_combinedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_combinedState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_combinedState"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_WaitHandle
::System::Threading::WaitHandle* System::Threading::ManualResetEventSlim::get_WaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_WaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_IsSet
bool System::Threading::ManualResetEventSlim::get_IsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_IsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_IsSet
void System::Threading::ManualResetEventSlim::set_IsSet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_IsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_SpinCount
int System::Threading::ManualResetEventSlim::get_SpinCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_SpinCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SpinCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_SpinCount
void System::Threading::ManualResetEventSlim::set_SpinCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_SpinCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SpinCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_Waiters
int System::Threading::ManualResetEventSlim::get_Waiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_Waiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Waiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_Waiters
void System::Threading::ManualResetEventSlim::set_Waiters(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_Waiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Waiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim..cctor
void System::Threading::ManualResetEventSlim::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Initialize
void System::Threading::ManualResetEventSlim::Initialize(bool initialState, int spinCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialState), ::il2cpp_utils::ExtractType(spinCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initialState, spinCount);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.EnsureLockObjectCreated
void System::Threading::ManualResetEventSlim::EnsureLockObjectCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::EnsureLockObjectCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureLockObjectCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.LazyInitializeEvent
bool System::Threading::ManualResetEventSlim::LazyInitializeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::LazyInitializeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInitializeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Set
void System::Threading::ManualResetEventSlim::Set() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Set
void System::Threading::ManualResetEventSlim::Set(bool duringCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duringCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duringCancellation);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Wait
bool System::Threading::ManualResetEventSlim::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Dispose
void System::Threading::ManualResetEventSlim::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Dispose
void System::Threading::ManualResetEventSlim::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ThrowIfDisposed
void System::Threading::ManualResetEventSlim::ThrowIfDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ThrowIfDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.CancellationTokenCallback
void System::Threading::ManualResetEventSlim::CancellationTokenCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::CancellationTokenCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "CancellationTokenCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.UpdateStateAtomically
void System::Threading::ManualResetEventSlim::UpdateStateAtomically(int newBits, int updateBitsMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::UpdateStateAtomically");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStateAtomically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(updateBitsMask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newBits, updateBitsMask);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ExtractStatePortionAndShiftRight
int System::Threading::ManualResetEventSlim::ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ExtractStatePortionAndShiftRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "ExtractStatePortionAndShiftRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(rightBitShiftCount)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state, mask, rightBitShiftCount);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ExtractStatePortion
int System::Threading::ManualResetEventSlim::ExtractStatePortion(int state, int mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ExtractStatePortion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "ExtractStatePortion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state, mask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SemaphoreSlim
#include "System/Threading/SemaphoreSlim.hpp"
// Including type: System.Threading.SemaphoreSlim/System.Threading.TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
// Including type: System.Threading.SemaphoreSlim/System.Threading.<WaitUntilCountOrTimeoutAsync>d__31
#include "System/Threading/SemaphoreSlim_-WaitUntilCountOrTimeoutAsync-d__31.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_trueTask
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::_get_s_trueTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_s_trueTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task_1<bool>*>("System.Threading", "SemaphoreSlim", "s_trueTask"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_trueTask
void System::Threading::SemaphoreSlim::_set_s_trueTask(::System::Threading::Tasks::Task_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_s_trueTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "s_trueTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NO_MAXIMUM
int System::Threading::SemaphoreSlim::_get_NO_MAXIMUM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_NO_MAXIMUM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SemaphoreSlim", "NO_MAXIMUM"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NO_MAXIMUM
void System::Threading::SemaphoreSlim::_set_NO_MAXIMUM(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_NO_MAXIMUM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "NO_MAXIMUM", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> s_cancellationTokenCanceledEventHandler
::System::Action_1<::Il2CppObject*>* System::Threading::SemaphoreSlim::_get_s_cancellationTokenCanceledEventHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_s_cancellationTokenCanceledEventHandler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "SemaphoreSlim", "s_cancellationTokenCanceledEventHandler"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> s_cancellationTokenCanceledEventHandler
void System::Threading::SemaphoreSlim::_set_s_cancellationTokenCanceledEventHandler(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_s_cancellationTokenCanceledEventHandler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "s_cancellationTokenCanceledEventHandler", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_currentCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_currentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_currentCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 m_maxCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_maxCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_maxCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_maxCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_waitCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_waitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_waitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_waitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_lockObj
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::SemaphoreSlim::dyn_m_lockObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_lockObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lockObj"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent m_waitHandle
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::SemaphoreSlim::dyn_m_waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_waitHandle"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SemaphoreSlim/System.Threading.TaskNode m_asyncHead
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::dyn_m_asyncHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_asyncHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_asyncHead"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SemaphoreSlim/System.Threading.TaskNode m_asyncTail
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::dyn_m_asyncTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_asyncTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_asyncTail"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim.get_CurrentCount
int System::Threading::SemaphoreSlim::get_CurrentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::get_CurrentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim..cctor
void System::Threading::SemaphoreSlim::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
void System::Threading::SemaphoreSlim::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
bool System::Threading::SemaphoreSlim::Wait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
bool System::Threading::SemaphoreSlim::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout
bool System::Threading::SemaphoreSlim::WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitUntilCountOrTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitUntilCountOrTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, startTime, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitAsync
::System::Threading::Tasks::Task* System::Threading::SemaphoreSlim::WaitAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitAsync
::System::Threading::Tasks::Task* System::Threading::SemaphoreSlim::WaitAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitAsync
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::WaitAsync(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CreateAndAddAsyncWaiter
::System::Threading::SemaphoreSlim::TaskNode* System::Threading::SemaphoreSlim::CreateAndAddAsyncWaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CreateAndAddAsyncWaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndAddAsyncWaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SemaphoreSlim::TaskNode*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.RemoveAsyncWaiter
bool System::Threading::SemaphoreSlim::RemoveAsyncWaiter(::System::Threading::SemaphoreSlim::TaskNode* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::RemoveAsyncWaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAsyncWaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitUntilCountOrTimeoutAsync
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::WaitUntilCountOrTimeoutAsync(::System::Threading::SemaphoreSlim::TaskNode* asyncWaiter, int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitUntilCountOrTimeoutAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitUntilCountOrTimeoutAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncWaiter), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, asyncWaiter, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Release
int System::Threading::SemaphoreSlim::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Release
int System::Threading::SemaphoreSlim::Release(int releaseCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(releaseCount)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, releaseCount);
}
// Autogenerated method: System.Threading.SemaphoreSlim.QueueWaiterTask
void System::Threading::SemaphoreSlim::QueueWaiterTask(::System::Threading::SemaphoreSlim::TaskNode* waiterTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::QueueWaiterTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "QueueWaiterTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waiterTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waiterTask);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Dispose
void System::Threading::SemaphoreSlim::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Dispose
void System::Threading::SemaphoreSlim::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CancellationTokenCanceledEventHandler
void System::Threading::SemaphoreSlim::CancellationTokenCanceledEventHandler(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CancellationTokenCanceledEventHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "CancellationTokenCanceledEventHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CheckDispose
void System::Threading::SemaphoreSlim::CheckDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CheckDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.GetResourceString
::StringW System::Threading::SemaphoreSlim::GetResourceString(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::GetResourceString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "GetResourceString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SemaphoreSlim/System.Threading.TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.SemaphoreSlim/System.Threading.TaskNode Prev
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::TaskNode::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.SemaphoreSlim/System.Threading.TaskNode Next
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::TaskNode::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim/System.Threading.TaskNode.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::SemaphoreSlim::TaskNode::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim/System.Threading.TaskNode.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::SemaphoreSlim::TaskNode::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SemaphoreSlim/System.Threading.<WaitUntilCountOrTimeoutAsync>d__31
#include "System/Threading/SemaphoreSlim_-WaitUntilCountOrTimeoutAsync-d__31.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.SemaphoreSlim/System.Threading.TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Boolean> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.SemaphoreSlim/System.Threading.TaskNode asyncWaiter
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_asyncWaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_asyncWaiter");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncWaiter"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 millisecondsTimeout
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_millisecondsTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_millisecondsTimeout");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "millisecondsTimeout"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationTokenSource <cts>5__1
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$cts$5__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$cts$5__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<cts>5__1"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.SemaphoreSlim <>4__this
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>7__wrap1
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$7__wrap1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1
[[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::System::Threading::Tasks::Task*>::ConfiguredTaskAwaiter& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::System::Threading::Tasks::Task*>::ConfiguredTaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Boolean> <>u__2
[[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<bool>::ConfiguredTaskAwaiter& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::dyn_$$u__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__2"))->offset;
  return *reinterpret_cast<typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<bool>::ConfiguredTaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim/System.Threading.<WaitUntilCountOrTimeoutAsync>d__31.MoveNext
void System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim/System.Threading.<WaitUntilCountOrTimeoutAsync>d__31.SetStateMachine
void System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__31::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SpinLock
#include "System/Threading/SpinLock.hpp"
// Including type: System.Threading.SpinLock/System.Threading.SystemThreading_SpinLockDebugView
#include "System/Threading/SpinLock_SystemThreading_SpinLockDebugView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAXIMUM_WAITERS
int System::Threading::SpinLock::_get_MAXIMUM_WAITERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::_get_MAXIMUM_WAITERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SpinLock", "MAXIMUM_WAITERS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAXIMUM_WAITERS
void System::Threading::SpinLock::_set_MAXIMUM_WAITERS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::_set_MAXIMUM_WAITERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SpinLock", "MAXIMUM_WAITERS", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_owner
[[deprecated("Use field access instead!")]] int& System::Threading::SpinLock::dyn_m_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::dyn_m_owner");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_owner"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SpinLock.get_IsHeldByCurrentThread
bool System::Threading::SpinLock::get_IsHeldByCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::get_IsHeldByCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsHeldByCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.get_IsThreadOwnerTrackingEnabled
bool System::Threading::SpinLock::get_IsThreadOwnerTrackingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::get_IsThreadOwnerTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsThreadOwnerTrackingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock..ctor
System::Threading::SpinLock::SpinLock(bool enableThreadOwnerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableThreadOwnerTracking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enableThreadOwnerTracking);
}
// Autogenerated method: System.Threading.SpinLock..cctor
void System::Threading::SpinLock::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SpinLock", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.Enter
void System::Threading::SpinLock::Enter(ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.TryEnter
void System::Threading::SpinLock::TryEnter(int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnter
void System::Threading::SpinLock::ContinueTryEnter(int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ContinueTryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContinueTryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.DecrementWaiters
void System::Threading::SpinLock::DecrementWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::DecrementWaiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DecrementWaiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnterWithThreadTracking
void System::Threading::SpinLock::ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ContinueTryEnterWithThreadTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContinueTryEnterWithThreadTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, startTime, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.Exit
void System::Threading::SpinLock::Exit(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useMemoryBarrier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, useMemoryBarrier);
}
// Autogenerated method: System.Threading.SpinLock.ExitSlowPath
void System::Threading::SpinLock::ExitSlowPath(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ExitSlowPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ExitSlowPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useMemoryBarrier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, useMemoryBarrier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SpinWait
#include "System/Threading/SpinWait.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_count
[[deprecated("Use field access instead!")]] int& System::Threading::SpinWait::dyn_m_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::dyn_m_count");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SpinWait.get_NextSpinWillYield
bool System::Threading::SpinWait::get_NextSpinWillYield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::get_NextSpinWillYield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_NextSpinWillYield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinWait.SpinOnce
void System::Threading::SpinWait::SpinOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::SpinOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SpinOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinWait.Reset
void System::Threading::SpinWait::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.PlatformHelper
#include "System/Threading/PlatformHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 s_processorCount
int System::Threading::PlatformHelper::_get_s_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_get_s_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "PlatformHelper", "s_processorCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_processorCount
void System::Threading::PlatformHelper::_set_s_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_set_s_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "PlatformHelper", "s_processorCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 s_lastProcessorCountRefreshTicks
int System::Threading::PlatformHelper::_get_s_lastProcessorCountRefreshTicks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_get_s_lastProcessorCountRefreshTicks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "PlatformHelper", "s_lastProcessorCountRefreshTicks"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_lastProcessorCountRefreshTicks
void System::Threading::PlatformHelper::_set_s_lastProcessorCountRefreshTicks(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_set_s_lastProcessorCountRefreshTicks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "PlatformHelper", "s_lastProcessorCountRefreshTicks", value));
}
// Autogenerated method: System.Threading.PlatformHelper.get_ProcessorCount
int System::Threading::PlatformHelper::get_ProcessorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::get_ProcessorCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "PlatformHelper", "get_ProcessorCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.PlatformHelper.get_IsSingleProcessor
bool System::Threading::PlatformHelper::get_IsSingleProcessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::get_IsSingleProcessor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "PlatformHelper", "get_IsSingleProcessor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.TimeoutHelper
#include "System/Threading/TimeoutHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimeoutHelper.GetTime
uint System::Threading::TimeoutHelper::GetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimeoutHelper::GetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "TimeoutHelper", "GetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.TimeoutHelper.UpdateTimeOut
int System::Threading::TimeoutHelper::UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimeoutHelper::UpdateTimeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "TimeoutHelper", "UpdateTimeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(originalWaitMillisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, startTime, originalWaitMillisecondsTimeout);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.AbandonedMutexException
#include "System/Threading/AbandonedMutexException.hpp"
// Including type: System.Threading.Mutex
#include "System/Threading/Mutex.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_MutexIndex
[[deprecated("Use field access instead!")]] int& System::Threading::AbandonedMutexException::dyn_m_MutexIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::dyn_m_MutexIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MutexIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Mutex m_Mutex
[[deprecated("Use field access instead!")]] ::System::Threading::Mutex*& System::Threading::AbandonedMutexException::dyn_m_Mutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::dyn_m_Mutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Mutex"))->offset;
  return *reinterpret_cast<::System::Threading::Mutex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.AbandonedMutexException.SetupException
void System::Threading::AbandonedMutexException::SetupException(int location, ::System::Threading::WaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::SetupException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, location, handle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.IAsyncLocal
#include "System/Threading/IAsyncLocal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.IAsyncLocal.OnValueChanged
void System::Threading::IAsyncLocal::OnValueChanged(::Il2CppObject* previousValue, ::Il2CppObject* currentValue, bool contextChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IAsyncLocal::OnValueChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previousValue), ::il2cpp_utils::ExtractType(currentValue), ::il2cpp_utils::ExtractType(contextChanged)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, previousValue, currentValue, contextChanged);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.AutoResetEvent
#include "System/Threading/AutoResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.EventResetMode
#include "System/Threading/EventResetMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.EventResetMode AutoReset
::System::Threading::EventResetMode System::Threading::EventResetMode::_get_AutoReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventResetMode::_get_AutoReset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::EventResetMode>("System.Threading", "EventResetMode", "AutoReset"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.EventResetMode AutoReset
void System::Threading::EventResetMode::_set_AutoReset(::System::Threading::EventResetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventResetMode::_set_AutoReset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "EventResetMode", "AutoReset", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.EventResetMode ManualReset
::System::Threading::EventResetMode System::Threading::EventResetMode::_get_ManualReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventResetMode::_get_ManualReset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::EventResetMode>("System.Threading", "EventResetMode", "ManualReset"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.EventResetMode ManualReset
void System::Threading::EventResetMode::_set_ManualReset(::System::Threading::EventResetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventResetMode::_set_ManualReset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "EventResetMode", "ManualReset", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::EventResetMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventResetMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.EventWaitHandle
#include "System/Threading/EventWaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.EventWaitHandle.Reset
bool System::Threading::EventWaitHandle::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventWaitHandle::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.EventWaitHandle.Set
bool System::Threading::EventWaitHandle::Set() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventWaitHandle::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ContextCallback.Invoke
void System::Threading::ContextCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ContextCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.ContextCallback.BeginInvoke
::System::IAsyncResult* System::Threading::ContextCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ContextCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.ContextCallback.EndInvoke
void System::Threading::ContextCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ContextCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ExecutionContextSwitcher
#include "System/Threading/ExecutionContextSwitcher.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.ExecutionContext/System.Threading.Reader outerEC
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext::Reader& System::Threading::ExecutionContextSwitcher::dyn_outerEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_outerEC");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerEC"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext::Reader*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean outerECBelongsToScope
[[deprecated("Use field access instead!")]] bool& System::Threading::ExecutionContextSwitcher::dyn_outerECBelongsToScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_outerECBelongsToScope");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerECBelongsToScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object hecsw
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ExecutionContextSwitcher::dyn_hecsw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_hecsw");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hecsw"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Thread thread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& System::Threading::ExecutionContextSwitcher::dyn_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_thread");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContextSwitcher.UndoNoThrow
bool System::Threading::ExecutionContextSwitcher::UndoNoThrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::UndoNoThrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UndoNoThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContextSwitcher.Undo
void System::Threading::ExecutionContextSwitcher::Undo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::Undo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Undo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Threading.ExecutionContext/System.Threading.Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
// Including type: System.Threading.ExecutionContext/System.Threading.CaptureOptions
#include "System/Threading/ExecutionContext_CaptureOptions.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.LogicalCallContext
#include "System/Runtime/Remoting/Messaging/LogicalCallContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.IllogicalCallContext
#include "System/Runtime/Remoting/Messaging/IllogicalCallContext.hpp"
// Including type: System.Threading.IAsyncLocal
#include "System/Threading/IAsyncLocal.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ExecutionContextSwitcher
#include "System/Threading/ExecutionContextSwitcher.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::_get_s_dummyDefaultEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_get_s_dummyDefaultEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext*>("System.Threading", "ExecutionContext", "s_dummyDefaultEC"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
void System::Threading::ExecutionContext::_set_s_dummyDefaultEC(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_set_s_dummyDefaultEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext", "s_dummyDefaultEC", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContext _syncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::ExecutionContext::dyn__syncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__syncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContext _syncContextNoFlow
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::ExecutionContext::dyn__syncContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__syncContextNoFlow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncContextNoFlow"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext
[[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::LogicalCallContext*& System::Threading::ExecutionContext::dyn__logicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__logicalCallContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_logicalCallContext"))->offset;
  return *reinterpret_cast<::System::Runtime::Remoting::Messaging::LogicalCallContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext
[[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::IllogicalCallContext*& System::Threading::ExecutionContext::dyn__illogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__illogicalCallContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_illogicalCallContext"))->offset;
  return *reinterpret_cast<::System::Runtime::Remoting::Messaging::IllogicalCallContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext/System.Threading.Flags _flags
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext::Flags& System::Threading::ExecutionContext::dyn__flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flags"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext::Flags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Threading.IAsyncLocal,System.Object> _localValues
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>*& System::Threading::ExecutionContext::dyn__localValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__localValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localValues"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Threading.IAsyncLocal> _localChangeNotifications
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>*& System::Threading::ExecutionContext::dyn__localChangeNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__localChangeNotifications");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localChangeNotifications"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContext.get_isNewCapture
bool System::Threading::ExecutionContext::get_isNewCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_isNewCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNewCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_isNewCapture
void System::Threading::ExecutionContext::set_isNewCapture(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_isNewCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isNewCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_isFlowSuppressed
bool System::Threading::ExecutionContext::get_isFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_isFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_isFlowSuppressed
void System::Threading::ExecutionContext::set_isFlowSuppressed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_isFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_PreAllocatedDefault
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::get_PreAllocatedDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_PreAllocatedDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "get_PreAllocatedDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.get_IsPreAllocatedDefault
bool System::Threading::ExecutionContext::get_IsPreAllocatedDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_IsPreAllocatedDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPreAllocatedDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.get_LogicalCallContext
::System::Runtime::Remoting::Messaging::LogicalCallContext* System::Threading::ExecutionContext::get_LogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::LogicalCallContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_LogicalCallContext
void System::Threading::ExecutionContext::set_LogicalCallContext(::System::Runtime::Remoting::Messaging::LogicalCallContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_IllogicalCallContext
::System::Runtime::Remoting::Messaging::IllogicalCallContext* System::Threading::ExecutionContext::get_IllogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_IllogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IllogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::IllogicalCallContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_IllogicalCallContext
void System::Threading::ExecutionContext::set_IllogicalCallContext(::System::Runtime::Remoting::Messaging::IllogicalCallContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_IllogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IllogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_SynchronizationContext
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::get_SynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_SynchronizationContext
void System::Threading::ExecutionContext::set_SynchronizationContext(::System::Threading::SynchronizationContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_SynchronizationContextNoFlow
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::get_SynchronizationContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_SynchronizationContextNoFlow
void System::Threading::ExecutionContext::set_SynchronizationContextNoFlow(::System::Threading::SynchronizationContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext..cctor
void System::Threading::ExecutionContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.SetLocalValue
void System::Threading::ExecutionContext::SetLocalValue(::System::Threading::IAsyncLocal* local, ::Il2CppObject* newValue, bool needChangeNotifications) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::SetLocalValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "SetLocalValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(local), ::il2cpp_utils::ExtractType(newValue), ::il2cpp_utils::ExtractType(needChangeNotifications)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, local, newValue, needChangeNotifications);
}
// Autogenerated method: System.Threading.ExecutionContext.OnAsyncLocalContextChanged
void System::Threading::ExecutionContext::OnAsyncLocalContextChanged(::System::Threading::ExecutionContext* previous, ::System::Threading::ExecutionContext* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::OnAsyncLocalContextChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "OnAsyncLocalContextChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previous), ::il2cpp_utils::ExtractType(current)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, previous, current);
}
// Autogenerated method: System.Threading.ExecutionContext.Dispose
void System::Threading::ExecutionContext::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Run
void System::Threading::ExecutionContext::Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state);
}
// Autogenerated method: System.Threading.ExecutionContext.Run
void System::Threading::ExecutionContext::Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.RunInternal
void System::Threading::ExecutionContext::RunInternal(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::RunInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.EstablishCopyOnWriteScope
void System::Threading::ExecutionContext::EstablishCopyOnWriteScope(ByRef<::System::Threading::ExecutionContextSwitcher> ecsw) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::EstablishCopyOnWriteScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ecsw)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(ecsw));
}
// Autogenerated method: System.Threading.ExecutionContext.EstablishCopyOnWriteScope
void System::Threading::ExecutionContext::EstablishCopyOnWriteScope(::System::Threading::Thread* currentThread, bool knownNullWindowsIdentity, ByRef<::System::Threading::ExecutionContextSwitcher> ecsw) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::EstablishCopyOnWriteScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentThread), ::il2cpp_utils::ExtractType(knownNullWindowsIdentity), ::il2cpp_utils::ExtractType(ecsw)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, currentThread, knownNullWindowsIdentity, byref(ecsw));
}
// Autogenerated method: System.Threading.ExecutionContext.SetExecutionContext
::System::Threading::ExecutionContextSwitcher System::Threading::ExecutionContext::SetExecutionContext(::System::Threading::ExecutionContext* executionContext, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContextSwitcher, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.CreateCopy
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CreateCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.CreateMutableCopy
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::CreateMutableCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CreateMutableCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMutableCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.IsFlowSuppressed
bool System::Threading::ExecutionContext::IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::IsFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "IsFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Capture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Capture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Capture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Capture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.FastCapture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::FastCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::FastCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "FastCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Capture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Capture(ByRef<::System::Threading::StackCrawlMark> stackMark, ::System::Threading::ExecutionContext::CaptureOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Capture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Capture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(stackMark), options);
}
// Autogenerated method: System.Threading.ExecutionContext.GetObjectData
void System::Threading::ExecutionContext::GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Threading.ExecutionContext.IsDefaultFTContext
bool System::Threading::ExecutionContext::IsDefaultFTContext(bool ignoreSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::IsDefaultFTContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefaultFTContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ignoreSyncCtx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/System.Threading.Flags
#include "System/Threading/ExecutionContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags None
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags None
void System::Threading::ExecutionContext::Flags::_set_None(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsNewCapture
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsNewCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsNewCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsNewCapture"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsNewCapture
void System::Threading::ExecutionContext::Flags::_set_IsNewCapture(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsNewCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsNewCapture", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsFlowSuppressed
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsFlowSuppressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsFlowSuppressed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsFlowSuppressed
void System::Threading::ExecutionContext::Flags::_set_IsFlowSuppressed(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsFlowSuppressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsFlowSuppressed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsPreAllocatedDefault
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsPreAllocatedDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsPreAllocatedDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsPreAllocatedDefault"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsPreAllocatedDefault
void System::Threading::ExecutionContext::Flags::_set_IsPreAllocatedDefault(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsPreAllocatedDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsPreAllocatedDefault", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ExecutionContext::Flags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/System.Threading.Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.LogicalCallContext/System.Runtime.Remoting.Messaging.Reader
#include "System/Runtime/Remoting/Messaging/LogicalCallContext_Reader.hpp"
// Including type: System.Runtime.Remoting.Messaging.IllogicalCallContext/System.Runtime.Remoting.Messaging.Reader
#include "System/Runtime/Remoting/Messaging/IllogicalCallContext_Reader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext m_ec
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::ExecutionContext::Reader::dyn_m_ec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::dyn_m_ec");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ec"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_IsNull
bool System::Threading::ExecutionContext::Reader::get_IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_IsFlowSuppressed
bool System::Threading::ExecutionContext::Reader::get_IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_IsFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_SynchronizationContext
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::Reader::get_SynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_SynchronizationContextNoFlow
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::Reader::get_SynchronizationContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_LogicalCallContext
::System::Runtime::Remoting::Messaging::LogicalCallContext::Reader System::Threading::ExecutionContext::Reader::get_LogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::LogicalCallContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.get_IllogicalCallContext
::System::Runtime::Remoting::Messaging::IllogicalCallContext::Reader System::Threading::ExecutionContext::Reader::get_IllogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_IllogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IllogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::IllogicalCallContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader..ctor
// ABORTED elsewhere.  System::Threading::ExecutionContext::Reader::Reader(::System::Threading::ExecutionContext* ec)
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.DangerousGetRawExecutionContext
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Reader::DangerousGetRawExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::DangerousGetRawExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DangerousGetRawExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.IsDefaultFTContext
bool System::Threading::ExecutionContext::Reader::IsDefaultFTContext(bool ignoreSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::IsDefaultFTContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsDefaultFTContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ignoreSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext/System.Threading.Reader.HasSameLocalValues
bool System::Threading::ExecutionContext::Reader::HasSameLocalValues(::System::Threading::ExecutionContext* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::HasSameLocalValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasSameLocalValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/System.Threading.CaptureOptions
#include "System/Threading/ExecutionContext_CaptureOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions None
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions None
void System::Threading::ExecutionContext::CaptureOptions::_set_None(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions IgnoreSyncCtx
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_IgnoreSyncCtx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_IgnoreSyncCtx");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "IgnoreSyncCtx"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions IgnoreSyncCtx
void System::Threading::ExecutionContext::CaptureOptions::_set_IgnoreSyncCtx(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_IgnoreSyncCtx");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "IgnoreSyncCtx", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions OptimizeDefaultCase
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_OptimizeDefaultCase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_OptimizeDefaultCase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "OptimizeDefaultCase"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/System.Threading.CaptureOptions OptimizeDefaultCase
void System::Threading::ExecutionContext::CaptureOptions::_set_OptimizeDefaultCase(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_OptimizeDefaultCase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "OptimizeDefaultCase", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ExecutionContext::CaptureOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.LockRecursionException
#include "System/Threading/LockRecursionException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Monitor
#include "System/Threading/Monitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ThrowLockTakenException
void System::Threading::Monitor::ThrowLockTakenException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ThrowLockTakenException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ThrowLockTakenException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Monitor.Exit
void System::Threading::Monitor::Exit(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Monitor.Pulse
void System::Threading::Monitor::Pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.PulseAll
void System::Threading::Monitor::PulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::PulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "PulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_test_synchronised
bool System::Threading::Monitor::Monitor_test_synchronised(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_test_synchronised");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_test_synchronised", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse
void System::Threading::Monitor::Monitor_pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulse
void System::Threading::Monitor::ObjPulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse_all
void System::Threading::Monitor::Monitor_pulse_all(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_pulse_all");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse_all", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulseAll
void System::Threading::Monitor::ObjPulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjPulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_wait
bool System::Threading::Monitor::Monitor_wait(::Il2CppObject* obj, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, ms);
}
// Autogenerated method: System.Threading.Monitor.ObjWait
bool System::Threading::Monitor::ObjWait(bool exitContext, int millisecondsTimeout, ::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exitContext, millisecondsTimeout, obj);
}
// Autogenerated method: System.Threading.Monitor.try_enter_with_atomic_var
void System::Threading::Monitor::try_enter_with_atomic_var(::Il2CppObject* obj, int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::try_enter_with_atomic_var");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "try_enter_with_atomic_var", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ReliableEnterTimeout
void System::Threading::Monitor::ReliableEnterTimeout(::Il2CppObject* obj, int timeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ReliableEnterTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnterTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, timeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ReliableEnter
void System::Threading::Monitor::ReliableEnter(::Il2CppObject* obj, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ReliableEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, byref(lockTaken));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ParameterizedThreadStart.Invoke
void System::Threading::ParameterizedThreadStart::Invoke(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ParameterizedThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ParameterizedThreadStart.BeginInvoke
::System::IAsyncResult* System::Threading::ParameterizedThreadStart::BeginInvoke(::Il2CppObject* obj, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ParameterizedThreadStart::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, obj, callback, object);
}
// Autogenerated method: System.Threading.ParameterizedThreadStart.EndInvoke
void System::Threading::ParameterizedThreadStart::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ParameterizedThreadStart::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SemaphoreFullException
#include "System/Threading/SemaphoreFullException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.SendOrPostCallback.Invoke
void System::Threading::SendOrPostCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SendOrPostCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.SendOrPostCallback.BeginInvoke
::System::IAsyncResult* System::Threading::SendOrPostCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SendOrPostCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.SendOrPostCallback.EndInvoke
void System::Threading::SendOrPostCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SendOrPostCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationContextProperties
#include "System/Threading/SynchronizationContextProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties None
::System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties None
void System::Threading::SynchronizationContextProperties::_set_None(::System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
::System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
void System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification(::System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::SynchronizationContextProperties::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType1
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType1"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType1
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType1(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType1", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType2
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType2"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType2
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType2(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType3
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType3"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType3
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType3(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType3", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType4
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType4"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType4
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType4(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType4", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType5
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType5"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType5
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType5(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType5", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContextProperties _props
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContextProperties& System::Threading::SynchronizationContext::dyn__props() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::dyn__props");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_props"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContextProperties*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_Current
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_CurrentNoFlow
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_CurrentNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::get_CurrentNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_CurrentNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.Send
void System::Threading::SynchronizationContext::Send(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.Post
void System::Threading::SynchronizationContext::Post(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationStarted
void System::Threading::SynchronizationContext::OperationStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::OperationStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationCompleted
void System::Threading::SynchronizationContext::OperationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::OperationCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.SetSynchronizationContext
void System::Threading::SynchronizationContext::SetSynchronizationContext(::System::Threading::SynchronizationContext* syncContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::SetSynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "SetSynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, syncContext);
}
// Autogenerated method: System.Threading.SynchronizationContext.GetThreadLocalContext
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::GetThreadLocalContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::GetThreadLocalContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "GetThreadLocalContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.CreateCopy
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext
#include "System/Threading/OSSpecificSynchronizationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.MonoPInvokeCallbackAttribute
#include "System/Threading/OSSpecificSynchronizationContext_MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>* System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>*>("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
void System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache(::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_OSSynchronizationContext
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::OSSpecificSynchronizationContext::dyn_m_OSSynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::dyn_m_OSSynchronizationContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OSSynchronizationContext"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext..cctor
void System::Threading::OSSpecificSynchronizationContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Get
::System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::OSSpecificSynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.InvocationEntry
void System::Threading::OSSpecificSynchronizationContext::InvocationEntry(::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "InvocationEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.GetOSContext
::Il2CppObject* System::Threading::OSSpecificSynchronizationContext::GetOSContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::GetOSContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "GetOSContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.PostInternal
void System::Threading::OSSpecificSynchronizationContext::PostInternal(::Il2CppObject* osSynchronizationContext, ::System::IntPtr callback, ::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::PostInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "PostInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(osSynchronizationContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, osSynchronizationContext, callback, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.CreateCopy
::System::Threading::SynchronizationContext* System::Threading::OSSpecificSynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Send
void System::Threading::OSSpecificSynchronizationContext::Send(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Post
void System::Threading::OSSpecificSynchronizationContext::Post(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke(::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.BeginInvoke
::System::IAsyncResult* System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke(::System::IntPtr arg, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, arg, callback, object);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.EndInvoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.MonoPInvokeCallbackAttribute
#include "System/Threading/OSSpecificSynchronizationContext_MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.SendOrPostCallback m_Delegate
[[deprecated("Use field access instead!")]] ::System::Threading::SendOrPostCallback*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::Threading::SendOrPostCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_State
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationContext.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c <>9
::System::Threading::OSSpecificSynchronizationContext::$$c* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::OSSpecificSynchronizationContext::$$c*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c <>9
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9(::System::Threading::OSSpecificSynchronizationContext::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/System.Runtime.CompilerServices.CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/System.Runtime.CompilerServices.CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0(typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0", value)));
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c..cctor
void System::Threading::OSSpecificSynchronizationContext::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c.<Get>b__3_0
::System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::$$c::$Get$b__3_0(::Il2CppObject* _osContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::<Get>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Get>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_osContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::OSSpecificSynchronizationContext*, false>(this, ___internal__method, _osContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationLockException
#include "System/Threading/SynchronizationLockException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadHelper
#include "System/Threading/ThreadHelper.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback _ccb
::System::Threading::ContextCallback* System::Threading::ThreadHelper::_get__ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_get__ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "ThreadHelper", "_ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback _ccb
void System::Threading::ThreadHelper::_set__ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_set__ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadHelper", "_ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Delegate _start
[[deprecated("Use field access instead!")]] ::System::Delegate*& System::Threading::ThreadHelper::dyn__start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_start"))->offset;
  return *reinterpret_cast<::System::Delegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _startArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ThreadHelper::dyn__startArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__startArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext _executionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::ThreadHelper::dyn__executionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__executionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadHelper..cctor
void System::Threading::ThreadHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadHelper.SetExecutionContextHelper
void System::Threading::ThreadHelper::SetExecutionContextHelper(::System::Threading::ExecutionContext* ec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::SetExecutionContextHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContextHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ec);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart_Context
void System::Threading::ThreadHelper::ThreadStart_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", "ThreadStart_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
// Including type: System.Security.Principal.IPrincipal
#include "System/Security/Principal/IPrincipal.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.LocalDataStoreMgr
#include "System/LocalDataStoreMgr.hpp"
// Including type: System.LocalDataStoreHolder
#include "System/LocalDataStoreHolder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Threading.AsyncLocal`1
#include "System/Threading/AsyncLocal_1.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Runtime.Remoting.Contexts.Context
#include "System/Runtime/Remoting/Contexts/Context.hpp"
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.AsyncLocalValueChangedArgs`1
#include "System/Threading/AsyncLocalValueChangedArgs_1.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.AppDomain
#include "System/AppDomain.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Threading.ExecutionContext/System.Threading.Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
::System::LocalDataStoreMgr* System::Threading::Thread::_get_s_LocalDataStoreMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStoreMgr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreMgr*>("System.Threading", "Thread", "s_LocalDataStoreMgr"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
void System::Threading::Thread::_set_s_LocalDataStoreMgr(::System::LocalDataStoreMgr* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStoreMgr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStoreMgr", value));
}
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
::System::LocalDataStoreHolder* System::Threading::Thread::_get_s_LocalDataStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreHolder*>("System.Threading", "Thread", "s_LocalDataStore"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
void System::Threading::Thread::_set_s_LocalDataStore(::System::LocalDataStoreHolder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStore", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentCulture
void System::Threading::Thread::_set_m_CurrentCulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
void System::Threading::Thread::_set_m_CurrentUICulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
void System::Threading::Thread::_set_s_asyncLocalCurrentCulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
void System::Threading::Thread::_set_s_asyncLocalCurrentUICulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Thread current_thread
::System::Threading::Thread* System::Threading::Thread::_get_current_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_current_thread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Thread*>("System.Threading", "Thread", "current_thread"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Thread current_thread
void System::Threading::Thread::_set_current_thread(::System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_current_thread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "current_thread", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.InternalThread internal_thread
[[deprecated("Use field access instead!")]] ::System::Threading::InternalThread*& System::Threading::Thread::dyn_internal_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_internal_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internal_thread"))->offset;
  return *reinterpret_cast<::System::Threading::InternalThread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_ThreadStartArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_m_ThreadStartArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ThreadStartArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ThreadStartArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object pending_exception
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_pending_exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_pending_exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pending_exception"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Security.Principal.IPrincipal principal
[[deprecated("Use field access instead!")]] ::System::Security::Principal::IPrincipal*& System::Threading::Thread::dyn_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal"))->offset;
  return *reinterpret_cast<::System::Security::Principal::IPrincipal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::Thread::dyn_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.MulticastDelegate m_Delegate
[[deprecated("Use field access instead!")]] ::System::MulticastDelegate*& System::Threading::Thread::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::MulticastDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext m_ExecutionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Thread::dyn_m_ExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ExecutionContextBelongsToOuterScope
[[deprecated("Use field access instead!")]] bool& System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContextBelongsToOuterScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Thread.get_ExecutionContextBelongsToCurrentScope
bool System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_ExecutionContextBelongsToCurrentScope
void System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.set_Priority
void System::Threading::Thread::set_Priority(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentUICulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentUICulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_CurrentCulture
void System::Threading::Thread::set_CurrentCulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_Internal
::System::Threading::InternalThread* System::Threading::Thread::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::InternalThread*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentContext
::System::Runtime::Remoting::Contexts::Context* System::Threading::Thread::get_CurrentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Contexts::Context*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentPrincipal
::System::Security::Principal::IPrincipal* System::Threading::Thread::get_CurrentPrincipal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentPrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentPrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Security::Principal::IPrincipal*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThread
::System::Threading::Thread* System::Threading::Thread::get_CurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThread
bool System::Threading::Thread::get_IsThreadPoolThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThreadInternal
bool System::Threading::Thread::get_IsThreadPoolThreadInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThreadInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsAlive
bool System::Threading::Thread::get_IsAlive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsAlive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAlive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_IsBackground
void System::Threading::Thread::set_IsBackground(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_IsBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.set_Name
void System::Threading::Thread::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_ThreadState
::System::Threading::ThreadState System::Threading::Thread::get_ThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_ManagedThreadId
int System::Threading::Thread::get_ManagedThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ManagedThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ManagedThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.AsyncLocalSetCurrentCulture
void System::Threading::Thread::AsyncLocalSetCurrentCulture(::System::Threading::AsyncLocalValueChangedArgs_1<::System::Globalization::CultureInfo*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::AsyncLocalSetCurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "AsyncLocalSetCurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, args);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(::Il2CppObject* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameter);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.GetExecutionContextReader
::System::Threading::ExecutionContext::Reader System::Threading::Thread::GetExecutionContextReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetExecutionContextReader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExecutionContextReader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetMutableExecutionContext
::System::Threading::ExecutionContext* System::Threading::Thread::GetMutableExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetMutableExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMutableExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext* value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.ResetAbort
void System::Threading::Thread::ResetAbort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ResetAbort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ResetAbort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ResetAbortNative
void System::Threading::Thread::ResetAbortNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ResetAbortNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetAbortNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetPriorityNative
void System::Threading::Thread::SetPriorityNative(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetPriorityNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, priority);
}
// Autogenerated method: System.Threading.Thread.JoinInternal
bool System::Threading::Thread::JoinInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::JoinInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Join
void System::Threading::Thread::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SleepInternal
void System::Threading::Thread::SleepInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SleepInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SleepInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Sleep
void System::Threading::Thread::Sleep(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.YieldInternal
bool System::Threading::Thread::YieldInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::YieldInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "YieldInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Yield
bool System::Threading::Thread::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetStartHelper
void System::Threading::Thread::SetStartHelper(::System::Delegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStartHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.GetCurrentUICultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentUICultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentUICultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentCultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentCultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentCultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.nativeInitCultureAccessors
void System::Threading::Thread::nativeInitCultureAccessors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::nativeInitCultureAccessors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "nativeInitCultureAccessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.MemoryBarrier
void System::Threading::Thread::MemoryBarrier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::MemoryBarrier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "MemoryBarrier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ConstructInternalThread
void System::Threading::Thread::ConstructInternalThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ConstructInternalThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstructInternalThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ByteArrayToCurrentDomain
::ArrayW<uint8_t> System::Threading::Thread::ByteArrayToCurrentDomain(::ArrayW<uint8_t> arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ByteArrayToCurrentDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ByteArrayToCurrentDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arr);
}
// Autogenerated method: System.Threading.Thread.DeserializePrincipal
void System::Threading::Thread::DeserializePrincipal(::System::Threading::Thread* th) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::DeserializePrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "DeserializePrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(th)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, th);
}
// Autogenerated method: System.Threading.Thread.GetCurrentThread
::System::Threading::Thread* System::Threading::Thread::GetCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomain
::System::AppDomain* System::Threading::Thread::GetDomain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AppDomain*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomainID
int System::Threading::Thread::GetDomainID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetDomainID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomainID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Thread_internal
::System::IntPtr System::Threading::Thread::Thread_internal(::System::MulticastDelegate* start) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Thread_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, start);
}
// Autogenerated method: System.Threading.Thread.SetName_internal
void System::Threading::Thread::SetName_internal(::System::Threading::InternalThread* thread, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetName_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetName_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, name);
}
// Autogenerated method: System.Threading.Thread.Abort_internal
void System::Threading::Thread::Abort_internal(::System::Threading::InternalThread* thread, ::Il2CppObject* stateInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Abort_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(stateInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, stateInfo);
}
// Autogenerated method: System.Threading.Thread.Abort
void System::Threading::Thread::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ClearAbortReason
void System::Threading::Thread::ClearAbortReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ClearAbortReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAbortReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait_nop
void System::Threading::Thread::SpinWait_nop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait_nop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait_nop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait
void System::Threading::Thread::SpinWait(int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, iterations);
}
// Autogenerated method: System.Threading.Thread.StartInternal
void System::Threading::Thread::StartInternal(::System::Security::Principal::IPrincipal* principal, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::StartInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(principal), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, principal, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.SetState
void System::Threading::Thread::SetState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(set)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, set);
}
// Autogenerated method: System.Threading.Thread.ClrState
void System::Threading::Thread::ClrState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ClrState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ClrState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, clr);
}
// Autogenerated method: System.Threading.Thread.GetState
::System::Threading::ThreadState System::Threading::Thread::GetState(::System::Threading::InternalThread* thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread);
}
// Autogenerated method: System.Threading.Thread.SystemMaxStackStize
int System::Threading::Thread::SystemMaxStackStize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SystemMaxStackStize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SystemMaxStackStize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetProcessDefaultStackSize
int System::Threading::Thread::GetProcessDefaultStackSize(int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetProcessDefaultStackSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetProcessDefaultStackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStackSize)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.SetStart
void System::Threading::Thread::SetStart(::System::MulticastDelegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.BeginCriticalRegion
void System::Threading::Thread::BeginCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::BeginCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "BeginCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.EndCriticalRegion
void System::Threading::Thread::EndCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::EndCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "EndCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ValidateThreadState
::System::Threading::ThreadState System::Threading::Thread::ValidateThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ValidateThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Finalize
void System::Threading::Thread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetHashCode
int System::Threading::Thread::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMe
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMe");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMe"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMe
void System::Threading::StackCrawlMark::_set_LookForMe(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMe");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMe", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCaller
void System::Threading::StackCrawlMark::_set_LookForMyCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCallersCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCallersCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCallersCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
void System::Threading::StackCrawlMark::_set_LookForMyCallersCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCallersCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCallersCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForThread
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForThread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForThread"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForThread
void System::Threading::StackCrawlMark::_set_LookForThread(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForThread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForThread", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::StackCrawlMark::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadInterruptedException
#include "System/Threading/ThreadInterruptedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::IThreadPoolWorkItem::MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitCallback.Invoke
void System::Threading::WaitCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.WaitCallback.BeginInvoke
::System::IAsyncResult* System::Threading::WaitCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.WaitCallback.EndInvoke
void System::Threading::WaitCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitOrTimerCallback.Invoke
void System::Threading::WaitOrTimerCallback::Invoke(::Il2CppObject* state, bool timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, timedOut);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.BeginInvoke
::System::IAsyncResult* System::Threading::WaitOrTimerCallback::BeginInvoke(::Il2CppObject* state, bool timedOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, timedOut, callback, object);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.EndInvoke
void System::Threading::WaitOrTimerCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolGlobals
#include "System/Threading/ThreadPoolGlobals.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 tpQuantum
uint System::Threading::ThreadPoolGlobals::_get_tpQuantum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_tpQuantum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ThreadPoolGlobals", "tpQuantum"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 tpQuantum
void System::Threading::ThreadPoolGlobals::_set_tpQuantum(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_tpQuantum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpQuantum", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 processorCount
int System::Threading::ThreadPoolGlobals::_get_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ThreadPoolGlobals", "processorCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 processorCount
void System::Threading::ThreadPoolGlobals::_set_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "processorCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean tpHosted
bool System::Threading::ThreadPoolGlobals::_get_tpHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_tpHosted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "tpHosted"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean tpHosted
void System::Threading::ThreadPoolGlobals::_set_tpHosted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_tpHosted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpHosted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean vmTpInitialized
bool System::Threading::ThreadPoolGlobals::_get_vmTpInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_vmTpInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "vmTpInitialized"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean vmTpInitialized
void System::Threading::ThreadPoolGlobals::_set_vmTpInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_vmTpInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "vmTpInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean enableWorkerTracking
bool System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean enableWorkerTracking
void System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueue workQueue
::System::Threading::ThreadPoolWorkQueue* System::Threading::ThreadPoolGlobals::_get_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_workQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue*>("System.Threading", "ThreadPoolGlobals", "workQueue"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueue workQueue
void System::Threading::ThreadPoolGlobals::_set_workQueue(::System::Threading::ThreadPoolWorkQueue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_workQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "workQueue", value));
}
// Autogenerated method: System.Threading.ThreadPoolGlobals..cctor
void System::Threading::ThreadPoolGlobals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolGlobals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1
#include "System/Threading/ThreadPoolWorkQueue_SparseArray_1.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1<System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue> allThreadQueues
::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>*>("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1<System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue> allThreadQueues
void System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues(::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues", value));
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment queueHead
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueHead"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment queueTail
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueTail"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numOutstandingThreadRequests
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numOutstandingThreadRequests"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue..cctor
void System::Threading::ThreadPoolWorkQueue::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureCurrentThreadHasQueue
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCurrentThreadHasQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadPoolWorkQueueThreadLocals*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureThreadRequested
void System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureThreadRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.MarkThreadRequestSatisfied
void System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkThreadRequestSatisfied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Enqueue
void System::Threading::ThreadPoolWorkQueue::Enqueue(::System::Threading::IThreadPoolWorkItem* callback, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dequeue
void System::Threading::ThreadPoolWorkQueue::Dequeue(::System::Threading::ThreadPoolWorkQueueThreadLocals* tl, ByRef<::System::Threading::IThreadPoolWorkItem*> callback, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tl, byref(callback), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dispatch
bool System::Threading::ThreadPoolWorkQueue::Dispatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", "Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.IThreadPoolWorkItem[] m_array
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_array"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_mask
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_mask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_headIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_headIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_tailIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tailIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SpinLock m_foreignLock
[[deprecated("Use field access instead!")]] ::System::Threading::SpinLock& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_foreignLock"))->offset;
  return *reinterpret_cast<::System::Threading::SpinLock*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalPush
void System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop(ByRef<::System::Threading::IThreadPoolWorkItem*> obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal), millisecondsTimeout);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.IThreadPoolWorkItem[] nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 indexes
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexes"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment Next
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.GetIndexes
void System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes(ByRef<int> upper, ByRef<int> lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(upper), byref(lower));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.CompareExchangeIndexes
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes(ByRef<int> prevUpper, int newUpper, ByRef<int> prevLower, int newLower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareExchangeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevUpper), ::il2cpp_utils::ExtractType(newUpper), ::il2cpp_utils::ExtractType(prevLower), ::il2cpp_utils::ExtractType(newLower)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(prevUpper), newUpper, byref(prevLower), newLower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.IsUsedUp
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUsedUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.TryEnqueue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue(::System::Threading::IThreadPoolWorkItem* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.TryDequeue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue(ByRef<::System::Threading::IThreadPoolWorkItem*> node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(node));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Random
#include "System/Random.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueueThreadLocals*>("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
void System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals(::System::Threading::ThreadPoolWorkQueueThreadLocals* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue workQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue workStealingQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workStealingQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Random random
[[deprecated("Use field access instead!")]] ::System::Random*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "random"))->offset;
  return *reinterpret_cast<::System::Random**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.CleanUp
void System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.Finalize
void System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading._ThreadPoolWaitCallback
#include "System/Threading/_ThreadPoolWaitCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading._ThreadPoolWaitCallback.PerformWaitCallback
bool System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "_ThreadPoolWaitCallback", "PerformWaitCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.QueueUserWorkItemCallback
#include "System/Threading/QueueUserWorkItemCallback.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback ccb
::System::Threading::ContextCallback* System::Threading::QueueUserWorkItemCallback::_get_ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_get_ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "QueueUserWorkItemCallback", "ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback ccb
void System::Threading::QueueUserWorkItemCallback::_set_ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_set_ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "QueueUserWorkItemCallback", "ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitCallback*& System::Threading::QueueUserWorkItemCallback::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext context
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::QueueUserWorkItemCallback::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::QueueUserWorkItemCallback::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback..cctor
void System::Threading::QueueUserWorkItemCallback::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.WaitCallback_Context
void System::Threading::QueueUserWorkItemCallback::WaitCallback_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::WaitCallback_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", "WaitCallback_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, byref(stackMark), compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, int millisecondsTimeOutInterval, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, ::System::TimeSpan timeout, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, timeout, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state, byref(stackMark), compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::TryPopCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "TryPopCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem);
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RequestWorkerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RequestWorkerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::EnsureVMInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "EnsureVMInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::ReportThreadStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "ReportThreadStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isWorking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, isWorking);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgressNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgressNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.IsThreadPoolHosted
bool System::Threading::ThreadPool::IsThreadPoolHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::IsThreadPoolHosted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "IsThreadPoolHosted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(ByRef<bool> enableWorkerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::InitializeVMTp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "InitializeVMTp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableWorkerTracking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(enableWorkerTracking));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Lowest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Lowest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Lowest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Lowest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Lowest
void System::Threading::ThreadPriority::_set_Lowest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Lowest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Lowest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority BelowNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_BelowNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_BelowNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "BelowNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority BelowNormal
void System::Threading::ThreadPriority::_set_BelowNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_BelowNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "BelowNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Normal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Normal
void System::Threading::ThreadPriority::_set_Normal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority AboveNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_AboveNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_AboveNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "AboveNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority AboveNormal
void System::Threading::ThreadPriority::_set_AboveNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_AboveNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "AboveNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Highest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Highest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Highest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Highest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Highest
void System::Threading::ThreadPriority::_set_Highest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Highest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Highest", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPriority::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadStart.Invoke
void System::Threading::ThreadStart::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadStart.BeginInvoke
::System::IAsyncResult* System::Threading::ThreadStart::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: System.Threading.ThreadStart.EndInvoke
void System::Threading::ThreadStart::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Running
::System::Threading::ThreadState System::Threading::ThreadState::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Running
void System::Threading::ThreadState::_set_Running(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState StopRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_StopRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_StopRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "StopRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState StopRequested
void System::Threading::ThreadState::_set_StopRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_StopRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "StopRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState SuspendRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_SuspendRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_SuspendRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "SuspendRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState SuspendRequested
void System::Threading::ThreadState::_set_SuspendRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_SuspendRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "SuspendRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Background
::System::Threading::ThreadState System::Threading::ThreadState::_get_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Background"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Background
void System::Threading::ThreadState::_set_Background(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Background", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Unstarted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Unstarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Unstarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Unstarted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Unstarted
void System::Threading::ThreadState::_set_Unstarted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Unstarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Unstarted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Stopped
::System::Threading::ThreadState System::Threading::ThreadState::_get_Stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Stopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Stopped"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Stopped
void System::Threading::ThreadState::_set_Stopped(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Stopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Stopped", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState WaitSleepJoin
::System::Threading::ThreadState System::Threading::ThreadState::_get_WaitSleepJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_WaitSleepJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "WaitSleepJoin"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState WaitSleepJoin
void System::Threading::ThreadState::_set_WaitSleepJoin(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_WaitSleepJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "WaitSleepJoin", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Suspended
::System::Threading::ThreadState System::Threading::ThreadState::_get_Suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Suspended");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Suspended"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Suspended
void System::Threading::ThreadState::_set_Suspended(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Suspended");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Suspended", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState AbortRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_AbortRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_AbortRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "AbortRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState AbortRequested
void System::Threading::ThreadState::_set_AbortRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_AbortRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "AbortRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Aborted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Aborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Aborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Aborted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Aborted
void System::Threading::ThreadState::_set_Aborted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Aborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Aborted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadStateException
#include "System/Threading/ThreadStateException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Timeout
#include "System/Threading/Timeout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ComVisibleAttribute] Offset: 0x1040D78
// Autogenerated static field getter
// Get static field: static public readonly System.TimeSpan InfiniteTimeSpan
::System::TimeSpan System::Threading::Timeout::_get_InfiniteTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_get_InfiniteTimeSpan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::TimeSpan>("System.Threading", "Timeout", "InfiniteTimeSpan"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.TimeSpan InfiniteTimeSpan
void System::Threading::Timeout::_set_InfiniteTimeSpan(::System::TimeSpan value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_set_InfiniteTimeSpan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timeout", "InfiniteTimeSpan", value));
}
// Autogenerated method: System.Threading.Timeout..cctor
void System::Threading::Timeout::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timeout", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Runtime.InteropServices.SafeHandle
#include "System/Runtime/InteropServices/SafeHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 WaitTimeout
int System::Threading::WaitHandle::_get_WaitTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WaitTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WaitTimeout"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 WaitTimeout
void System::Threading::WaitHandle::_set_WaitTimeout(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WaitTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WaitTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_WAITHANDLES
int System::Threading::WaitHandle::_get_MAX_WAITHANDLES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MAX_WAITHANDLES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MAX_WAITHANDLES"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_WAITHANDLES
void System::Threading::WaitHandle::_set_MAX_WAITHANDLES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MAX_WAITHANDLES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MAX_WAITHANDLES", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_OBJECT_0
int System::Threading::WaitHandle::_get_WAIT_OBJECT_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_OBJECT_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_OBJECT_0"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_OBJECT_0
void System::Threading::WaitHandle::_set_WAIT_OBJECT_0(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_OBJECT_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_OBJECT_0", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_ABANDONED
int System::Threading::WaitHandle::_get_WAIT_ABANDONED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_ABANDONED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_ABANDONED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_ABANDONED
void System::Threading::WaitHandle::_set_WAIT_ABANDONED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_ABANDONED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_ABANDONED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_FAILED
int System::Threading::WaitHandle::_get_WAIT_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_FAILED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_FAILED
void System::Threading::WaitHandle::_set_WAIT_FAILED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ERROR_TOO_MANY_POSTS
int System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ERROR_TOO_MANY_POSTS
void System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.IntPtr InvalidHandle
::System::IntPtr System::Threading::WaitHandle::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::IntPtr>("System.Threading", "WaitHandle", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.IntPtr InvalidHandle
void System::Threading::WaitHandle::_set_InvalidHandle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxWaitHandles
int System::Threading::WaitHandle::_get_MaxWaitHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MaxWaitHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MaxWaitHandles"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxWaitHandles
void System::Threading::WaitHandle::_set_MaxWaitHandles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MaxWaitHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MaxWaitHandles", value));
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr waitHandle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::WaitHandle::dyn_waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitHandle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle
[[deprecated("Use field access instead!")]] ::Microsoft::Win32::SafeHandles::SafeWaitHandle*& System::Threading::WaitHandle::dyn_safeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_safeWaitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "safeWaitHandle"))->offset;
  return *reinterpret_cast<::Microsoft::Win32::SafeHandles::SafeWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean hasThreadAffinity
[[deprecated("Use field access instead!")]] bool& System::Threading::WaitHandle::dyn_hasThreadAffinity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_hasThreadAffinity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasThreadAffinity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.WaitHandle.set_Handle
void System::Threading::WaitHandle::set_Handle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_Handle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.get_SafeWaitHandle
::Microsoft::Win32::SafeHandles::SafeWaitHandle* System::Threading::WaitHandle::get_SafeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::get_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Microsoft::Win32::SafeHandles::SafeWaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_SafeWaitHandle
void System::Threading::WaitHandle::set_SafeWaitHandle(::Microsoft::Win32::SafeHandles::SafeWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle..cctor
void System::Threading::WaitHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Init
void System::Threading::WaitHandle::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.SetHandleInternal
void System::Threading::WaitHandle::SetHandleInternal(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::SetHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handle);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int64_t timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.InternalWaitOne
bool System::Threading::WaitHandle::InternalWaitOne(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, int64_t millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::InternalWaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "InternalWaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, ::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException(int location, ::System::Threading::WaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, location, handle);
}
// Autogenerated method: System.Threading.WaitHandle.Close
void System::Threading::WaitHandle::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose(bool explicitDisposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(explicitDisposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, explicitDisposing);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitMultiple
int System::Threading::WaitHandle::WaitMultiple(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitMultiple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitMultiple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(WaitAll)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext, WaitAll);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOneNative
int System::Threading::WaitHandle::WaitOneNative(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOneNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitOneNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.Wait_internal
int System::Threading::WaitHandle::Wait_internal(::System::IntPtr* handles, int numHandles, bool waitAll, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Wait_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "Wait_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handles), ::il2cpp_utils::ExtractType(numHandles), ::il2cpp_utils::ExtractType(waitAll), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handles, numHandles, waitAll, ms);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandleCannotBeOpenedException
#include "System/Threading/WaitHandleCannotBeOpenedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Interlocked
#include "System/Threading/Interlocked.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand, ByRef<bool> succeeded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand), ::il2cpp_utils::ExtractType(succeeded)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand, byref(succeeded));
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::Il2CppObject* System::Threading::Interlocked::CompareExchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value, ::Il2CppObject* comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
float System::Threading::Interlocked::CompareExchange(ByRef<float> location1, float value, float comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Decrement
int System::Threading::Interlocked::Decrement(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Decrement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Decrement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int System::Threading::Interlocked::Increment(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int64_t System::Threading::Interlocked::Increment(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int System::Threading::Interlocked::Exchange(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::Il2CppObject* System::Threading::Interlocked::Exchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
float System::Threading::Interlocked::Exchange(ByRef<float> location1, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int64_t System::Threading::Interlocked::CompareExchange(ByRef<int64_t> location1, int64_t value, int64_t comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::System::IntPtr System::Threading::Interlocked::CompareExchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value, ::System::IntPtr comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
double System::Threading::Interlocked::CompareExchange(ByRef<double> location1, double value, double comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int64_t System::Threading::Interlocked::Exchange(ByRef<int64_t> location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::System::IntPtr System::Threading::Interlocked::Exchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
double System::Threading::Interlocked::Exchange(ByRef<double> location1, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Read
int64_t System::Threading::Interlocked::Read(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Add
int System::Threading::Interlocked::Add(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Add
int64_t System::Threading::Interlocked::Add(ByRef<int64_t> location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.NativeEventCalls
#include "System/Threading/NativeEventCalls.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.NativeEventCalls.CreateEvent_internal
::System::IntPtr System::Threading::NativeEventCalls::CreateEvent_internal(bool manual, bool initial, ::StringW name, ByRef<int> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CreateEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CreateEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manual), ::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manual, initial, name, byref(errorCode));
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent
bool System::Threading::NativeEventCalls::SetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent_internal
bool System::Threading::NativeEventCalls::SetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent
bool System::Threading::NativeEventCalls::ResetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent_internal
bool System::Threading::NativeEventCalls::ResetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.CloseEvent_internal
void System::Threading::NativeEventCalls::CloseEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CloseEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CloseEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _waitObject
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__waitObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__waitObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitObject"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitOrTimerCallback _callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitOrTimerCallback*& System::Threading::RegisteredWaitHandle::dyn__callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitOrTimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::RegisteredWaitHandle::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _finalEvent
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__finalEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__finalEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finalEvent"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent _cancelEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::RegisteredWaitHandle::dyn__cancelEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__cancelEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.TimeSpan _timeout
[[deprecated("Use field access instead!")]] ::System::TimeSpan& System::Threading::RegisteredWaitHandle::dyn__timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__timeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeout"))->offset;
  return *reinterpret_cast<::System::TimeSpan*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _callsInProcess
[[deprecated("Use field access instead!")]] int& System::Threading::RegisteredWaitHandle::dyn__callsInProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callsInProcess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callsInProcess"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _executeOnlyOnce
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executeOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _unregistered
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__unregistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__unregistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unregistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Wait
void System::Threading::RegisteredWaitHandle::Wait(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.DoCallBack
void System::Threading::RegisteredWaitHandle::DoCallBack(::Il2CppObject* timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::DoCallBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoCallBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timedOut);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Unregister
bool System::Threading::RegisteredWaitHandle::Unregister(::System::Threading::WaitHandle* waitObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, waitObject);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 lock_thread_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_lock_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_lock_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lock_thread_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr native_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_native_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_native_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "native_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused3
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused3"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr name
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 name_len
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_name_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ThreadState state
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadState& System::Threading::InternalThread::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object abort_exc
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_abort_exc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_exc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_exc"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 abort_state_handle
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_abort_state_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_state_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_state_handle"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 thread_id
[[deprecated("Use field access instead!")]] int64_t& System::Threading::InternalThread::dyn_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_id"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr debugger_thread
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_debugger_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_debugger_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugger_thread"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UIntPtr static_data
[[deprecated("Use field access instead!")]] ::System::UIntPtr& System::Threading::InternalThread::dyn_static_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_static_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "static_data"))->offset;
  return *reinterpret_cast<::System::UIntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr runtime_thread_info
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_runtime_thread_info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_runtime_thread_info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "runtime_thread_info"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object current_appcontext
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_current_appcontext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_current_appcontext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current_appcontext"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object root_domain_thread
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_root_domain_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_root_domain_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root_domain_thread"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] _serialized_principal
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& System::Threading::InternalThread::dyn__serialized_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _serialized_principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn__serialized_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr appdomain_refs
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_appdomain_refs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_appdomain_refs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appdomain_refs"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 interruption_requested
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_interruption_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_interruption_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interruption_requested"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr synch_cs
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_synch_cs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_synch_cs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "synch_cs"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean threadpool_thread
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_threadpool_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_threadpool_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "threadpool_thread"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean thread_interrupt_requested
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_thread_interrupt_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_interrupt_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_interrupt_requested"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 stack_size
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_stack_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_stack_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stack_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte apartment_state
[[deprecated("Use field access instead!")]] uint8_t& System::Threading::InternalThread::dyn_apartment_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_apartment_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "apartment_state"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 critical_region_level
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_critical_region_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_critical_region_level");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "critical_region_level"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 managed_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_managed_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_managed_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "managed_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 small_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_small_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_small_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "small_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr manage_callback
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_manage_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_manage_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "manage_callback"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused4
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused4"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr flags
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flags"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr thread_pinning_ref
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_thread_pinning_ref() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_pinning_ref");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_pinning_ref"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr abort_protected_block_count
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_abort_protected_block_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_protected_block_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_protected_block_count"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 priority
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr owned_mutex
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_owned_mutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_owned_mutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owned_mutex"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr suspended_event
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_suspended_event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_suspended_event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suspended_event"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 self_suspended
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_self_suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_self_suspended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self_suspended"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused1
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused1"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused2
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused2"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr last
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.InternalThread.Thread_free_internal
void System::Threading::InternalThread::Thread_free_internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Thread_free_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_free_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.InternalThread.Finalize
void System::Threading::InternalThread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.Timer/System.Threading.TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
// Including type: System.Threading.Timer/System.Threading.Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Timer/System.Threading.Scheduler scheduler
::System::Threading::Timer::Scheduler* System::Threading::Timer::_get_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_get_scheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Timer::Scheduler*>("System.Threading", "Timer", "scheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Timer/System.Threading.Scheduler scheduler
void System::Threading::Timer::_set_scheduler(::System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_set_scheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "scheduler", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 MaxValue
int64_t System::Threading::Timer::_get_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_get_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "Timer", "MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 MaxValue
void System::Threading::Timer::_set_MaxValue(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_set_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "MaxValue", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.TimerCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::TimerCallback*& System::Threading::Timer::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::TimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Timer::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 due_time_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_due_time_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_due_time_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "due_time_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 period_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_period_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_period_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "period_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 next_run
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_next_run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_next_run");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next_run"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::dyn_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer..cctor
void System::Threading::Timer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Init
void System::Threading::Timer::Init(::System::Threading::TimerCallback* callback, ::Il2CppObject* state, int64_t dueTime, int64_t period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, state, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int dueTime, int period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(::System::TimeSpan dueTime, ::System::TimeSpan period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Dispose
void System::Threading::Timer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int64_t dueTime, int64_t period, bool first) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period), ::il2cpp_utils::ExtractType(first)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period, first);
}
// Autogenerated method: System.Threading.Timer.KeepRootedWhileScheduled
void System::Threading::Timer::KeepRootedWhileScheduled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::KeepRootedWhileScheduled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeepRootedWhileScheduled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.GetTimeMonotonic
int64_t System::Threading::Timer::GetTimeMonotonic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::GetTimeMonotonic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", "GetTimeMonotonic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/System.Threading.TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Timer/System.Threading.TimerComparer.Compare
int System::Threading::Timer::TimerComparer::Compare(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::TimerComparer::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x, y);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/System.Threading.Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Collections.SortedList
#include "System/Collections/SortedList.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.Timer/System.Threading.Scheduler instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Timer::Scheduler*>("System.Threading", "Timer/Scheduler", "instance"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Timer/System.Threading.Scheduler instance
void System::Threading::Timer::Scheduler::_set_instance(::System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer/Scheduler", "instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.SortedList list
[[deprecated("Use field access instead!")]] ::System::Collections::SortedList*& System::Threading::Timer::Scheduler::dyn_list() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_list");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
  return *reinterpret_cast<::System::Collections::SortedList**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent changed
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::Timer::Scheduler::dyn_changed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_changed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "changed"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.get_Instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Timer::Scheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler..cctor
void System::Threading::Timer::Scheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Remove
void System::Threading::Timer::Scheduler::Remove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Change
void System::Threading::Timer::Scheduler::Change(::System::Threading::Timer* timer, int64_t new_next_run) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(new_next_run)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer, new_next_run);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.FindByDueTime
int System::Threading::Timer::Scheduler::FindByDueTime(int64_t nr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::FindByDueTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindByDueTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nr)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nr);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Add
void System::Threading::Timer::Scheduler::Add(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.InternalRemove
int System::Threading::Timer::Scheduler::InternalRemove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::InternalRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.TimerCB
void System::Threading::Timer::Scheduler::TimerCB(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::TimerCB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "TimerCB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.SchedulerThread
void System::Threading::Timer::Scheduler::SchedulerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::SchedulerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SchedulerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.ShrinkIfNeeded
void System::Threading::Timer::Scheduler::ShrinkIfNeeded(::System::Collections::Generic::List_1<::System::Threading::Timer*>* list, int initial) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::ShrinkIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShrinkIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(initial)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list, initial);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimerCallback.Invoke
void System::Threading::TimerCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.TimerCallback.BeginInvoke
::System::IAsyncResult* System::Threading::TimerCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.TimerCallback.EndInvoke
void System::Threading::TimerCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Volatile
#include "System/Threading/Volatile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Volatile.Read
bool System::Threading::Volatile::Read(ByRef<bool> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Read
int System::Threading::Volatile::Read(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<bool> location, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<int> location, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Required
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Required");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Required"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Required
void System::Threading::Tasks::CausalityTraceLevel::_set_Required(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Required");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Required", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Important
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Important() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Important");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Important"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Important
void System::Threading::Tasks::CausalityTraceLevel::_set_Important(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Important");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Important", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Verbose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Verbose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
void System::Threading::Tasks::CausalityTraceLevel::_set_Verbose(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Verbose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Verbose", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityTraceLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Started");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Started"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
void System::Threading::Tasks::AsyncCausalityStatus::_set_Started(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Started");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Started", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
void System::Threading::Tasks::AsyncCausalityStatus::_set_Completed(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Completed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
void System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
void System::Threading::Tasks::AsyncCausalityStatus::_set_Error(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::AsyncCausalityStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_AssignDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_AssignDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "AssignDelegate"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
void System::Threading::Tasks::CausalityRelation::_set_AssignDelegate(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_AssignDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "AssignDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Join
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Join");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Join"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Join
void System::Threading::Tasks::CausalityRelation::_set_Join(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Join");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Join", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Choice
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Choice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Choice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Choice"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Choice
void System::Threading::Tasks::CausalityRelation::_set_Choice(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Choice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Choice", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Cancel
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Cancel
void System::Threading::Tasks::CausalityRelation::_set_Cancel(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Error
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Error
void System::Threading::Tasks::CausalityRelation::_set_Error(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityRelation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_Execution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_Execution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "Execution"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
void System::Threading::Tasks::CausalitySynchronousWork::_set_Execution(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_Execution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "Execution", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalitySynchronousWork::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityTracer
#include "System/Threading/Tasks/AsyncCausalityTracer.hpp"
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.get_LoggingOn
bool System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "get_LoggingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCreation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::StringW operationName, uint64_t relatedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCreation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(operationName), ::il2cpp_utils::ExtractType(relatedContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, operationName, relatedContext);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::AsyncCausalityStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, status);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationRelation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::CausalityRelation relation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationRelation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(relation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, relation);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkStart
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, work);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, work);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Created
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Created() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Created");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Created"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Created
void System::Threading::Tasks::TaskStatus::_set_Created(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Created");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Created", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForActivation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForActivation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
void System::Threading::Tasks::TaskStatus::_set_WaitingForActivation(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForActivation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForActivation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingToRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingToRun");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingToRun"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
void System::Threading::Tasks::TaskStatus::_set_WaitingToRun(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingToRun");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingToRun", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Running
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Running
void System::Threading::Tasks::TaskStatus::_set_Running(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
void System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_RanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_RanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "RanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
void System::Threading::Tasks::TaskStatus::_set_RanToCompletion(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_RanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "RanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Canceled
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Canceled
void System::Threading::Tasks::TaskStatus::_set_Canceled(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Faulted
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Faulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Faulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Faulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Faulted
void System::Threading::Tasks::TaskStatus::_set_Faulted(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Faulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Faulted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise`1
#include "System/Threading/Tasks/Task_WhenAllPromise_1.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable
#include "System/Runtime/CompilerServices/YieldAwaitable.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.OperationCanceledException
#include "System/OperationCanceledException.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.Tasks.Task t_currentTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_t_currentTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_currentTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "t_currentTask"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.Tasks.Task t_currentTask
void System::Threading::Tasks::Task::_set_t_currentTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_currentTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_currentTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::_get_t_stackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_stackGuard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "t_stackGuard"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
void System::Threading::Tasks::Task::_set_t_stackGuard(::System::Threading::Tasks::StackGuard* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_stackGuard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_stackGuard", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskIdCounter
int System::Threading::Tasks::Task::_get_s_taskIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "s_taskIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskIdCounter
void System::Threading::Tasks::Task::_set_s_taskIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::_get_s_factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_factory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "s_factory"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
void System::Threading::Tasks::Task::_set_s_factory(::System::Threading::Tasks::TaskFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_factory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_factory", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OptionsMask
int System::Threading::Tasks::Task::_get_OptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_OptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "OptionsMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OptionsMask
void System::Threading::Tasks::Task::_set_OptionsMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_OptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "OptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_STARTED
int System::Threading::Tasks::Task::_get_TASK_STATE_STARTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_STARTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_STARTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_STARTED
void System::Threading::Tasks::Task::_set_TASK_STATE_STARTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_STARTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_STARTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
int System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
void System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DISPOSED
int System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DISPOSED
void System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
int System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
void System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_FAULTED
int System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_FAULTED
void System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
int System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
void System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
int System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
void System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
int System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
void System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
int System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
void System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANCELLATION_REQUESTED
int System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANCELLATION_REQUESTED
void System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_taskCompletionSentinel
::Il2CppObject* System::Threading::Tasks::Task::_get_s_taskCompletionSentinel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCompletionSentinel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_taskCompletionSentinel"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_taskCompletionSentinel
void System::Threading::Tasks::Task::_set_s_taskCompletionSentinel(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCompletionSentinel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCompletionSentinel", value));
}
// [FriendAccessAllowedAttribute] Offset: 0x1040DAC
// Autogenerated static field getter
// Get static field: static System.Boolean s_asyncDebuggingEnabled
bool System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled"));
}
// Autogenerated static field setter
// Set static field: static System.Boolean s_asyncDebuggingEnabled
void System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_currentActiveTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_currentActiveTasks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_currentActiveTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
void System::Threading::Tasks::Task::_set_s_currentActiveTasks(::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_currentActiveTasks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_currentActiveTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::Il2CppObject* System::Threading::Tasks::Task::_get_s_activeTasksLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_activeTasksLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::Task::_set_s_activeTasksLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_activeTasksLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_activeTasksLock", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_taskCancelCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCancelCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_taskCancelCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
void System::Threading::Tasks::Task::_set_s_taskCancelCallback(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCancelCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCancelCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties> s_createContingentProperties
::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* System::Threading::Tasks::Task::_get_s_createContingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_createContingentProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>*>("System.Threading.Tasks", "Task", "s_createContingentProperties"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties> s_createContingentProperties
void System::Threading::Tasks::Task::_set_s_createContingentProperties(::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_createContingentProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_createContingentProperties", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.Task s_completedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_s_completedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_completedTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "s_completedTask"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.Task s_completedTask
void System::Threading::Tasks::Task::_set_s_completedTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_completedTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_completedTask", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
::System::Predicate_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
void System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate(::System::Predicate_1<::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_ecCallback
::System::Threading::ContextCallback* System::Threading::Tasks::Task::_get_s_ecCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_ecCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "Task", "s_ecCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_ecCallback
void System::Threading::Tasks::Task::_set_s_ecCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_ecCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_ecCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
::System::Predicate_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
void System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate(::System::Predicate_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_taskId
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_taskId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_action
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_stateObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_stateObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.TaskScheduler m_taskScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::Task::dyn_m_taskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task m_parent
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::Task::dyn_m_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parent"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_stateFlags
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_stateFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateFlags"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_continuationObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_continuationObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_continuationObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_continuationObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties m_contingentProperties
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task::ContingentProperties*& System::Threading::Tasks::Task::dyn_m_contingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_contingentProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_contingentProperties"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task::ContingentProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Options
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_Options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Options");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Options", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabledOrNotRanToCompletion
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabledOrNotRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabled
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Id
int System::Threading::Tasks::Task::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_InternalCurrent
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CurrentStackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::get_CurrentStackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CurrentStackGuard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CurrentStackGuard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::StackGuard*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Exception
::System::AggregateException* System::Threading::Tasks::Task::get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Exception");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exception", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Status
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::Task::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskStatus, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCanceled
bool System::Threading::Tasks::Task::get_IsCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationRequested
bool System::Threading::Tasks::Task::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CancellationToken
::System::Threading::CancellationToken System::Threading::Tasks::Task::get_CancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationAcknowledged
bool System::Threading::Tasks::Task::get_IsCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompleted
bool System::Threading::Tasks::Task::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsRanToCompletion
bool System::Threading::Tasks::Task::get_IsRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CreationOptions
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_CreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* System::Threading::Tasks::Task::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_AsyncState
::Il2CppObject* System::Threading::Tasks::Task::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::Task::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExecutingTaskScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::Task::get_ExecutingTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExecutingTaskScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingTaskScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Factory
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::get_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Factory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_Factory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskFactory*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_CompletedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CompletedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedEvent
::System::Threading::ManualResetEventSlim* System::Threading::Tasks::Task::get_CompletedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompletedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ManualResetEventSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsSelfReplicatingRoot
bool System::Threading::Tasks::Task::get_IsSelfReplicatingRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsSelfReplicatingRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSelfReplicatingRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsChildReplica
bool System::Threading::Tasks::Task::get_IsChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsChildReplica");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExceptionRecorded
bool System::Threading::Tasks::Task::get_ExceptionRecorded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExceptionRecorded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExceptionRecorded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsFaulted
bool System::Threading::Tasks::Task::get_IsFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsFaulted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFaulted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CapturedContext
::System::Threading::ExecutionContext* System::Threading::Tasks::Task::get_CapturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_CapturedContext
void System::Threading::Tasks::Task::set_CapturedContext(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsExceptionObservedByParent
bool System::Threading::Tasks::Task::get_IsExceptionObservedByParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsExceptionObservedByParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExceptionObservedByParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsDelegateInvoked
bool System::Threading::Tasks::Task::get_IsDelegateInvoked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsDelegateInvoked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDelegateInvoked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_SavedStateForNextReplica
::Il2CppObject* System::Threading::Tasks::Task::get_SavedStateForNextReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_SavedStateForNextReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SavedStateForNextReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_SavedStateFromPreviousReplica
void System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SavedStateFromPreviousReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.get_HandedOverChildReplica
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_HandedOverChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_HandedOverChildReplica
void System::Threading::Tasks::Task::set_HandedOverChildReplica(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task..cctor
void System::Threading::Tasks::Task::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AddToActiveTasks
bool System::Threading::Tasks::Task::AddToActiveTasks(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddToActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AddToActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveFromActiveTasks
void System::Threading::Tasks::Task::RemoveFromActiveTasks(int taskId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveFromActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "RemoveFromActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, taskId);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskConstructorCore
void System::Threading::Tasks::Task::TaskConstructorCore(::Il2CppObject* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::InternalTaskOptions internalOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskConstructorCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskConstructorCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, state, cancellationToken, creationOptions, internalOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.AssignCancellationToken
void System::Threading::Tasks::Task::AssignCancellationToken(::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::Task* antecedent, ::System::Threading::Tasks::TaskContinuation* continuation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AssignCancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignCancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(continuation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cancellationToken, antecedent, continuation);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskCancelCallback
void System::Threading::Tasks::Task::TaskCancelCallback(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskCancelCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "TaskCancelCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Tasks.Task.PossiblyCaptureContext
void System::Threading::Tasks::Task::PossiblyCaptureContext(ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::PossiblyCaptureContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PossiblyCaptureContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.OptionsMethod
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::OptionsMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::OptionsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "OptionsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits, ByRef<int> oldFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits), ::il2cpp_utils::ExtractType(oldFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits, byref(oldFlags));
}
// Autogenerated method: System.Threading.Tasks.Task.SetNotificationForWaitCompletion
void System::Threading::Tasks::Task::SetNotificationForWaitCompletion(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetNotificationForWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNotificationForWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletionIfNecessary
bool System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletionIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AnyTaskRequiresNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AnyTaskRequiresNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletion
void System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.MarkStarted
bool System::Threading::Tasks::Task::MarkStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::MarkStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FireTaskScheduledIfNeeded
bool System::Threading::Tasks::Task::FireTaskScheduledIfNeeded(::System::Threading::Tasks::TaskScheduler* ts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FireTaskScheduledIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireTaskScheduledIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ts)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ts);
}
// Autogenerated method: System.Threading.Tasks.Task.AddNewChild
void System::Threading::Tasks::Task::AddNewChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddNewChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNewChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.DisregardChild
void System::Threading::Tasks::Task::DisregardChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DisregardChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisregardChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalStartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalStartNew(::System::Threading::Tasks::Task* creatingTask, ::System::Delegate* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::Tasks::TaskCreationOptions options, ::System::Threading::Tasks::InternalTaskOptions internalOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalStartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalStartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creatingTask), ::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creatingTask, action, state, cancellationToken, scheduler, options, internalOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.NewId
int System::Threading::Tasks::Task::NewId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NewId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "NewId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCurrentIfAttached
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalCurrentIfAttached(::System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCurrentIfAttached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalCurrentIfAttached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitialized
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitializedCore
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitializedCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.IsCompletedMethod
bool System::Threading::Tasks::Task::IsCompletedMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::IsCompletedMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "IsCompletedMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.CopyExecutionContext
::System::Threading::ExecutionContext* System::Threading::Tasks::Task::CopyExecutionContext(::System::Threading::ExecutionContext* capturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CopyExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CopyExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, capturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.Tasks.Task.ScheduleAndStart
void System::Threading::Tasks::Task::ScheduleAndStart(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ScheduleAndStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScheduleAndStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptions
::System::AggregateException* System::Threading::Tasks::Task::GetExceptions(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptionDispatchInfos
::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::Task::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.GetCancellationExceptionDispatchInfo
::System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ThrowIfExceptional
void System::Threading::Tasks::Task::ThrowIfExceptional(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ThrowIfExceptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfExceptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.UpdateExceptionObservedStatus
void System::Threading::Tasks::Task::UpdateExceptionObservedStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::UpdateExceptionObservedStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateExceptionObservedStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Finish
void System::Threading::Tasks::Task::Finish(bool bUserDelegateExecuted) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bUserDelegateExecuted)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bUserDelegateExecuted);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageTwo
void System::Threading::Tasks::Task::FinishStageTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageThree
void System::Threading::Tasks::Task::FinishStageThree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageThree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageThree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ProcessChildCompletion
void System::Threading::Tasks::Task::ProcessChildCompletion(::System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ProcessChildCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessChildCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.AddExceptionsFromChildren
void System::Threading::Tasks::Task::AddExceptionsFromChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddExceptionsFromChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddExceptionsFromChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishThreadAbortedTask
void System::Threading::Tasks::Task::FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishThreadAbortedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishThreadAbortedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bTAEAddedToExceptionHolder), ::il2cpp_utils::ExtractType(delegateRan)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bTAEAddedToExceptionHolder, delegateRan);
}
// Autogenerated method: System.Threading.Tasks.Task.Execute
void System::Threading::Tasks::Task::Execute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ShouldReplicate
bool System::Threading::Tasks::Task::ShouldReplicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ShouldReplicate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldReplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.CreateReplicaTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::CreateReplicaTask(::System::Action_1<::Il2CppObject*>* taskReplicaDelegate, ::Il2CppObject* stateObject, ::System::Threading::Tasks::Task* parentTask, ::System::Threading::Tasks::TaskScheduler* taskScheduler, ::System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, ::System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CreateReplicaTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReplicaTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskReplicaDelegate), ::il2cpp_utils::ExtractType(stateObject), ::il2cpp_utils::ExtractType(parentTask), ::il2cpp_utils::ExtractType(taskScheduler), ::il2cpp_utils::ExtractType(creationOptionsForReplica), ::il2cpp_utils::ExtractType(internalOptionsForReplica)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, taskReplicaDelegate, stateObject, parentTask, taskScheduler, creationOptionsForReplica, internalOptionsForReplica);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteSelfReplicating
void System::Threading::Tasks::Task::ExecuteSelfReplicating(::System::Threading::Tasks::Task* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteSelfReplicating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecuteSelfReplicating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, root);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteEntry
bool System::Threading::Tasks::Task::ExecuteEntry(bool bPreventDoubleExecution) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bPreventDoubleExecution)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bPreventDoubleExecution);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteWithThreadLocal
void System::Threading::Tasks::Task::ExecuteWithThreadLocal(ByRef<::System::Threading::Tasks::Task*> currentTaskSlot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteWithThreadLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWithThreadLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTaskSlot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(currentTaskSlot));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecutionContextCallback
void System::Threading::Tasks::Task::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvoke
void System::Threading::Tasks::Task::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvokeWithArg
void System::Threading::Tasks::Task::InnerInvokeWithArg(::System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InnerInvokeWithArg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvokeWithArg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.HandleException
void System::Threading::Tasks::Task::HandleException(::System::Exception* unhandledException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::HandleException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unhandledException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unhandledException);
}
// Autogenerated method: System.Threading.Tasks.Task.GetAwaiter
::System::Runtime::CompilerServices::TaskAwaiter System::Threading::Tasks::Task::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::TaskAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ConfigureAwait
::System::Runtime::CompilerServices::ConfiguredTaskAwaitable System::Threading::Tasks::Task::ConfigureAwait(bool continueOnCapturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ConfigureAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ConfiguredTaskAwaitable, false>(this, ___internal__method, continueOnCapturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.SetContinuationForAwait
void System::Threading::Tasks::Task::SetContinuationForAwait(::System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetContinuationForAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContinuationForAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(continueOnCapturedContext), ::il2cpp_utils::ExtractType(flowExecutionContext), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationAction, continueOnCapturedContext, flowExecutionContext, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.Yield
::System::Runtime::CompilerServices::YieldAwaitable System::Threading::Tasks::Task::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::YieldAwaitable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
void System::Threading::Tasks::Task::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
bool System::Threading::Tasks::Task::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WrappedTryRunInline
bool System::Threading::Tasks::Task::WrappedTryRunInline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WrappedTryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrappedTryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWait
bool System::Threading::Tasks::Task::InternalWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinThenBlockingWait
bool System::Threading::Tasks::Task::SpinThenBlockingWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinThenBlockingWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinThenBlockingWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinWait
bool System::Threading::Tasks::Task::SpinWait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCancel
bool System::Threading::Tasks::Task::InternalCancel(bool bCancelNonExecutingOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bCancelNonExecutingOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bCancelNonExecutingOnly);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord), ::il2cpp_utils::ExtractType(cancellationException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord, cancellationException);
}
// Autogenerated method: System.Threading.Tasks.Task.CancellationCleanupLogic
void System::Threading::Tasks::Task::CancellationCleanupLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CancellationCleanupLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCleanupLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.SetCancellationAcknowledged
void System::Threading::Tasks::Task::SetCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishContinuations
void System::Threading::Tasks::Task::FinishContinuations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishContinuations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishContinuations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.LogFinishCompletionNotification
void System::Threading::Tasks::Task::LogFinishCompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::LogFinishCompletionNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogFinishCompletionNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, scheduler, cancellationToken, continuationOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, cancellationToken, continuationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, scheduler, cancellationToken, continuationOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.CreationOptionsFromContinuationOptions
void System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions(::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::Tasks::TaskCreationOptions> creationOptions, ByRef<::System::Threading::Tasks::InternalTaskOptions> internalOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CreationOptionsFromContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::TaskCreationOptions&>(), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::InternalTaskOptions&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, continuationOptions, byref(creationOptions), byref(internalOptions));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWithCore
void System::Threading::Tasks::Task::ContinueWithCore(::System::Threading::Tasks::Task* continuationTask, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWithCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWithCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationTask), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationTask, scheduler, cancellationToken, options);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuationComplex
bool System::Threading::Tasks::Task::AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuationComplex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuationComplex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuation
bool System::Threading::Tasks::Task::AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveContinuation
void System::Threading::Tasks::Task::RemoveContinuation(::Il2CppObject* continuationObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationObject);
}
// Autogenerated method: System.Threading.Tasks.Task.FromException
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromException(::System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exception);
}
// Autogenerated method: System.Threading.Tasks.Task.FromCancellation
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCancellation(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(::System::TimeSpan delay, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, delay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::System::Collections::Generic::IEnumerable_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalWhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalWhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
