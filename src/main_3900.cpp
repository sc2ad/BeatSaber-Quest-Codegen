// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelFailedController/<LevelFailedCoroutine>d__13
#include "GlobalNamespace/StandardLevelFailedController_-LevelFailedCoroutine-d__13.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public StandardLevelFailedController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelFailedController*& GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelFailedController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LevelCompletionResults <levelCompletionResults>5__2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelCompletionResults*& GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$levelCompletionResults$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::dyn_$levelCompletionResults$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<levelCompletionResults>5__2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelFailedController/<LevelFailedCoroutine>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFailedController/<LevelFailedCoroutine>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFailedController/<LevelFailedCoroutine>d__13.System.IDisposable.Dispose
void GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFailedController/<LevelFailedCoroutine>d__13.MoveNext
bool GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFailedController/<LevelFailedCoroutine>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFailedController::$LevelFailedCoroutine$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelFinishedController
#include "GlobalNamespace/StandardLevelFinishedController.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private StandardLevelScenesTransitionSetupDataSO _standardLevelSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*& GlobalNamespace::StandardLevelFinishedController::dyn__standardLevelSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::dyn__standardLevelSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_standardLevelSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PrepareLevelCompletionResults _prepareLevelCompletionResults
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrepareLevelCompletionResults*& GlobalNamespace::StandardLevelFinishedController::dyn__prepareLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::dyn__prepareLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prepareLevelCompletionResults"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrepareLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ILevelEndActions _gameplayManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ILevelEndActions*& GlobalNamespace::StandardLevelFinishedController::dyn__gameplayManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::dyn__gameplayManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ILevelEndActions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelFinishedController.Start
void GlobalNamespace::StandardLevelFinishedController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFinishedController.OnDestroy
void GlobalNamespace::StandardLevelFinishedController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFinishedController.HandleLevelFinished
void GlobalNamespace::StandardLevelFinishedController::HandleLevelFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::HandleLevelFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelFinishedController.StartLevelFinished
void GlobalNamespace::StandardLevelFinishedController::StartLevelFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelFinishedController::StartLevelFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelRestartController
#include "GlobalNamespace/StandardLevelRestartController.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private StandardLevelScenesTransitionSetupDataSO _standardLevelSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*& GlobalNamespace::StandardLevelRestartController::dyn__standardLevelSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelRestartController::dyn__standardLevelSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_standardLevelSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PrepareLevelCompletionResults _prepareLevelCompletionResults
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrepareLevelCompletionResults*& GlobalNamespace::StandardLevelRestartController::dyn__prepareLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelRestartController::dyn__prepareLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prepareLevelCompletionResults"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrepareLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelRestartController.RestartLevel
void GlobalNamespace::StandardLevelRestartController::RestartLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelRestartController::RestartLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelReturnToMenuController
#include "GlobalNamespace/StandardLevelReturnToMenuController.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private StandardLevelScenesTransitionSetupDataSO _standardLevelSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*& GlobalNamespace::StandardLevelReturnToMenuController::dyn__standardLevelSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelReturnToMenuController::dyn__standardLevelSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_standardLevelSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PrepareLevelCompletionResults _prepareLevelCompletionResults
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrepareLevelCompletionResults*& GlobalNamespace::StandardLevelReturnToMenuController::dyn__prepareLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelReturnToMenuController::dyn__prepareLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prepareLevelCompletionResults"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrepareLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StandardLevelReturnToMenuController.ReturnToMenu
void GlobalNamespace::StandardLevelReturnToMenuController::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelReturnToMenuController::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialRestartController
#include "GlobalNamespace/TutorialRestartController.hpp"
// Including type: TutorialScenesTransitionSetupDataSO
#include "GlobalNamespace/TutorialScenesTransitionSetupDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TutorialScenesTransitionSetupDataSO _tutorialSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TutorialScenesTransitionSetupDataSO*& GlobalNamespace::TutorialRestartController::dyn__tutorialSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialRestartController::dyn__tutorialSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tutorialSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TutorialScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TutorialRestartController.RestartLevel
void GlobalNamespace::TutorialRestartController::RestartLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialRestartController::RestartLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialReturnToMenuController
#include "GlobalNamespace/TutorialReturnToMenuController.hpp"
// Including type: TutorialScenesTransitionSetupDataSO
#include "GlobalNamespace/TutorialScenesTransitionSetupDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TutorialScenesTransitionSetupDataSO _tutorialSceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TutorialScenesTransitionSetupDataSO*& GlobalNamespace::TutorialReturnToMenuController::dyn__tutorialSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialReturnToMenuController::dyn__tutorialSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tutorialSceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TutorialScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TutorialReturnToMenuController.ReturnToMenu
void GlobalNamespace::TutorialReturnToMenuController::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialReturnToMenuController::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BadCutsMissionObjectiveChecker
#include "GlobalNamespace/BadCutsMissionObjectiveChecker.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::BadCutsMissionObjectiveChecker::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadCutsMissionObjectiveChecker::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BadCutsMissionObjectiveChecker.OnDestroy
void GlobalNamespace::BadCutsMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadCutsMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadCutsMissionObjectiveChecker.HandleNoteWasCut
void GlobalNamespace::BadCutsMissionObjectiveChecker::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadCutsMissionObjectiveChecker::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: BadCutsMissionObjectiveChecker.Init
void GlobalNamespace::BadCutsMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadCutsMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ComboMissionObjectiveChecker
#include "GlobalNamespace/ComboMissionObjectiveChecker.hpp"
// Including type: ComboController
#include "GlobalNamespace/ComboController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly ComboController _comboController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ComboController*& GlobalNamespace::ComboMissionObjectiveChecker::dyn__comboController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboMissionObjectiveChecker::dyn__comboController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ComboController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ComboMissionObjectiveChecker.OnDestroy
void GlobalNamespace::ComboMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboMissionObjectiveChecker.HandleComboDidChange
void GlobalNamespace::ComboMissionObjectiveChecker::HandleComboDidChange(int combo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboMissionObjectiveChecker::HandleComboDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(combo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, combo);
}
// Autogenerated method: ComboMissionObjectiveChecker.Init
void GlobalNamespace::ComboMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComboMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnergyMissionObjectiveChecker
#include "GlobalNamespace/EnergyMissionObjectiveChecker.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameEnergyCounter _energyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& GlobalNamespace::EnergyMissionObjectiveChecker::dyn__energyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnergyMissionObjectiveChecker::dyn__energyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_energyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnergyMissionObjectiveChecker.OnDestroy
void GlobalNamespace::EnergyMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnergyMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnergyMissionObjectiveChecker.HandleEnergyDidChange
void GlobalNamespace::EnergyMissionObjectiveChecker::HandleEnergyDidChange(float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnergyMissionObjectiveChecker::HandleEnergyDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEnergyDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, energy);
}
// Autogenerated method: EnergyMissionObjectiveChecker.CheckAndUpdateStatus
void GlobalNamespace::EnergyMissionObjectiveChecker::CheckAndUpdateStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnergyMissionObjectiveChecker::CheckAndUpdateStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckAndUpdateStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnergyMissionObjectiveChecker.Init
void GlobalNamespace::EnergyMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnergyMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FullComboMissionObjectiveChecker
#include "GlobalNamespace/FullComboMissionObjectiveChecker.hpp"
// Including type: ComboController
#include "GlobalNamespace/ComboController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly ComboController _comboController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ComboController*& GlobalNamespace::FullComboMissionObjectiveChecker::dyn__comboController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullComboMissionObjectiveChecker::dyn__comboController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ComboController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FullComboMissionObjectiveChecker.OnDestroy
void GlobalNamespace::FullComboMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullComboMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullComboMissionObjectiveChecker.HandleComboBreakingEventHappened
void GlobalNamespace::FullComboMissionObjectiveChecker::HandleComboBreakingEventHappened() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullComboMissionObjectiveChecker::HandleComboBreakingEventHappened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboBreakingEventHappened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullComboMissionObjectiveChecker.Init
void GlobalNamespace::FullComboMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullComboMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GoodCutsMissionObjectiveChecker
#include "GlobalNamespace/GoodCutsMissionObjectiveChecker.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::GoodCutsMissionObjectiveChecker::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GoodCutsMissionObjectiveChecker::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GoodCutsMissionObjectiveChecker.OnDestroy
void GlobalNamespace::GoodCutsMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GoodCutsMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GoodCutsMissionObjectiveChecker.HandleNoteWasCut
void GlobalNamespace::GoodCutsMissionObjectiveChecker::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GoodCutsMissionObjectiveChecker::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: GoodCutsMissionObjectiveChecker.Init
void GlobalNamespace::GoodCutsMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GoodCutsMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HandsMovementMissionObjectiveChecker
#include "GlobalNamespace/HandsMovementMissionObjectiveChecker.hpp"
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SaberActivityCounter _saberActivityCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberActivityCounter*& GlobalNamespace::HandsMovementMissionObjectiveChecker::dyn__saberActivityCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandsMovementMissionObjectiveChecker::dyn__saberActivityCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberActivityCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberActivityCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HandsMovementMissionObjectiveChecker.OnDestroy
void GlobalNamespace::HandsMovementMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandsMovementMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HandsMovementMissionObjectiveChecker.HandleTotalDistanceDidChange
void GlobalNamespace::HandsMovementMissionObjectiveChecker::HandleTotalDistanceDidChange(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandsMovementMissionObjectiveChecker::HandleTotalDistanceDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTotalDistanceDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated method: HandsMovementMissionObjectiveChecker.Init
void GlobalNamespace::HandsMovementMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandsMovementMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissMissionObjectiveChecker
#include "GlobalNamespace/MissMissionObjectiveChecker.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MissMissionObjectiveChecker::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissMissionObjectiveChecker::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissMissionObjectiveChecker.OnDestroy
void GlobalNamespace::MissMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissMissionObjectiveChecker.HandleNoteWasMissed
void GlobalNamespace::MissMissionObjectiveChecker::HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissMissionObjectiveChecker::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MissMissionObjectiveChecker.Init
void GlobalNamespace::MissMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveChecker
#include "GlobalNamespace/MissionObjectiveChecker.hpp"
// Including type: MissionObjective
#include "GlobalNamespace/MissionObjective.hpp"
// Including type: MissionObjectiveTypeSO
#include "GlobalNamespace/MissionObjectiveTypeSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveTypeSO _missionObjectiveType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveTypeSO*& GlobalNamespace::MissionObjectiveChecker::dyn__missionObjectiveType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn__missionObjectiveType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveTypeSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MissionObjectiveChecker> statusDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>*& GlobalNamespace::MissionObjectiveChecker::dyn_statusDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn_statusDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "statusDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MissionObjectiveChecker> checkedValueDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>*& GlobalNamespace::MissionObjectiveChecker::dyn_checkedValueDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn_checkedValueDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "checkedValueDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveChecker/Status _status
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveChecker::Status& GlobalNamespace::MissionObjectiveChecker::dyn__status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn__status");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_status"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveChecker::Status*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _checkedValue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MissionObjectiveChecker::dyn__checkedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn__checkedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_checkedValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected MissionObjective _missionObjective
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjective*& GlobalNamespace::MissionObjectiveChecker::dyn__missionObjective() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn__missionObjective");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjective"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjective**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disableChecking
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MissionObjectiveChecker::dyn__disableChecking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::dyn__disableChecking");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disableChecking"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionObjectiveChecker.get_missionObjectiveType
::GlobalNamespace::MissionObjectiveTypeSO* GlobalNamespace::MissionObjectiveChecker::get_missionObjectiveType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::get_missionObjectiveType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionObjectiveType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MissionObjectiveTypeSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveChecker.get_missionObjective
::GlobalNamespace::MissionObjective* GlobalNamespace::MissionObjectiveChecker::get_missionObjective() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::get_missionObjective");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionObjective", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MissionObjective*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveChecker.get_disableChecking
bool GlobalNamespace::MissionObjectiveChecker::get_disableChecking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::get_disableChecking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disableChecking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveChecker.set_disableChecking
void GlobalNamespace::MissionObjectiveChecker::set_disableChecking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::set_disableChecking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableChecking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.get_status
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::get_status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::get_status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MissionObjectiveChecker::Status, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveChecker.set_status
void GlobalNamespace::MissionObjectiveChecker::set_status(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::set_status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.get_checkedValue
int GlobalNamespace::MissionObjectiveChecker::get_checkedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::get_checkedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_checkedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveChecker.set_checkedValue
void GlobalNamespace::MissionObjectiveChecker::set_checkedValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::set_checkedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_checkedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.add_statusDidChangeEvent
void GlobalNamespace::MissionObjectiveChecker::add_statusDidChangeEvent(::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::add_statusDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_statusDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.remove_statusDidChangeEvent
void GlobalNamespace::MissionObjectiveChecker::remove_statusDidChangeEvent(::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::remove_statusDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_statusDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.add_checkedValueDidChangeEvent
void GlobalNamespace::MissionObjectiveChecker::add_checkedValueDidChangeEvent(::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::add_checkedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_checkedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.remove_checkedValueDidChangeEvent
void GlobalNamespace::MissionObjectiveChecker::remove_checkedValueDidChangeEvent(::System::Action_1<::GlobalNamespace::MissionObjectiveChecker*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::remove_checkedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_checkedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveChecker.SetCheckedMissionObjective
void GlobalNamespace::MissionObjectiveChecker::SetCheckedMissionObjective(::GlobalNamespace::MissionObjective* missionObjective) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::SetCheckedMissionObjective");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCheckedMissionObjective", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjective)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, missionObjective);
}
// Autogenerated method: MissionObjectiveChecker.Init
void GlobalNamespace::MissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveChecker/Status
#include "GlobalNamespace/MissionObjectiveChecker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MissionObjectiveChecker/Status None
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::Status::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionObjectiveChecker::Status>("", "MissionObjectiveChecker/Status", "None"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjectiveChecker/Status None
void GlobalNamespace::MissionObjectiveChecker::Status::_set_None(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjectiveChecker/Status", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjectiveChecker/Status NotClearedYet
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::Status::_get_NotClearedYet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_get_NotClearedYet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionObjectiveChecker::Status>("", "MissionObjectiveChecker/Status", "NotClearedYet"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjectiveChecker/Status NotClearedYet
void GlobalNamespace::MissionObjectiveChecker::Status::_set_NotClearedYet(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_set_NotClearedYet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjectiveChecker/Status", "NotClearedYet", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjectiveChecker/Status NotFailedYet
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::Status::_get_NotFailedYet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_get_NotFailedYet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionObjectiveChecker::Status>("", "MissionObjectiveChecker/Status", "NotFailedYet"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjectiveChecker/Status NotFailedYet
void GlobalNamespace::MissionObjectiveChecker::Status::_set_NotFailedYet(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_set_NotFailedYet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjectiveChecker/Status", "NotFailedYet", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjectiveChecker/Status Cleared
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::Status::_get_Cleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_get_Cleared");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionObjectiveChecker::Status>("", "MissionObjectiveChecker/Status", "Cleared"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjectiveChecker/Status Cleared
void GlobalNamespace::MissionObjectiveChecker::Status::_set_Cleared(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_set_Cleared");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjectiveChecker/Status", "Cleared", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjectiveChecker/Status Failed
::GlobalNamespace::MissionObjectiveChecker::Status GlobalNamespace::MissionObjectiveChecker::Status::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MissionObjectiveChecker::Status>("", "MissionObjectiveChecker/Status", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjectiveChecker/Status Failed
void GlobalNamespace::MissionObjectiveChecker::Status::_set_Failed(::GlobalNamespace::MissionObjectiveChecker::Status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjectiveChecker/Status", "Failed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MissionObjectiveChecker::Status::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveChecker::Status::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: MissionObjectiveCheckersManager/InitData
#include "GlobalNamespace/MissionObjectiveCheckersManager_InitData.hpp"
// Including type: MissionObjectiveChecker
#include "GlobalNamespace/MissionObjectiveChecker.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: MissionObjectiveTypeSO
#include "GlobalNamespace/MissionObjectiveTypeSO.hpp"
// Including type: MissionObjectiveResult
#include "GlobalNamespace/MissionObjectiveResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveChecker[] _missionObjectiveCheckers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MissionObjectiveChecker*>& GlobalNamespace::MissionObjectiveCheckersManager::dyn__missionObjectiveCheckers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn__missionObjectiveCheckers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missionObjectiveCheckers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MissionObjectiveChecker*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveCheckersManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveCheckersManager::InitData*& GlobalNamespace::MissionObjectiveCheckersManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MissionObjectiveCheckersManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ILevelEndActions _gameplayManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ILevelEndActions*& GlobalNamespace::MissionObjectiveCheckersManager::dyn__gameplayManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn__gameplayManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ILevelEndActions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action objectiveDidFailEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectiveDidFailEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectiveDidFailEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectiveDidFailEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action objectiveWasClearedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectiveWasClearedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectiveWasClearedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectiveWasClearedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action objectivesListDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectivesListDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn_objectivesListDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectivesListDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MissionObjectiveChecker[] _activeMissionObjectiveCheckers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MissionObjectiveChecker*>& GlobalNamespace::MissionObjectiveCheckersManager::dyn__activeMissionObjectiveCheckers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::dyn__activeMissionObjectiveCheckers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeMissionObjectiveCheckers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MissionObjectiveChecker*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissionObjectiveCheckersManager.get_activeMissionObjectiveCheckers
::ArrayW<::GlobalNamespace::MissionObjectiveChecker*> GlobalNamespace::MissionObjectiveCheckersManager::get_activeMissionObjectiveCheckers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::get_activeMissionObjectiveCheckers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeMissionObjectiveCheckers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::MissionObjectiveChecker*>, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.add_objectiveDidFailEvent
void GlobalNamespace::MissionObjectiveCheckersManager::add_objectiveDidFailEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::add_objectiveDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_objectiveDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.remove_objectiveDidFailEvent
void GlobalNamespace::MissionObjectiveCheckersManager::remove_objectiveDidFailEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::remove_objectiveDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_objectiveDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.add_objectiveWasClearedEvent
void GlobalNamespace::MissionObjectiveCheckersManager::add_objectiveWasClearedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::add_objectiveWasClearedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_objectiveWasClearedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.remove_objectiveWasClearedEvent
void GlobalNamespace::MissionObjectiveCheckersManager::remove_objectiveWasClearedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::remove_objectiveWasClearedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_objectiveWasClearedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.add_objectivesListDidChangeEvent
void GlobalNamespace::MissionObjectiveCheckersManager::add_objectivesListDidChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::add_objectivesListDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_objectivesListDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.remove_objectivesListDidChangeEvent
void GlobalNamespace::MissionObjectiveCheckersManager::remove_objectivesListDidChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::remove_objectivesListDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_objectivesListDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveCheckersManager.Start
void GlobalNamespace::MissionObjectiveCheckersManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.OnDestroy
void GlobalNamespace::MissionObjectiveCheckersManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.HandleMissionObjectiveCheckerStatusDidChange
void GlobalNamespace::MissionObjectiveCheckersManager::HandleMissionObjectiveCheckerStatusDidChange(::GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::HandleMissionObjectiveCheckerStatusDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckerStatusDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveCheckersManager.GetMissionObjectiveChecker
::GlobalNamespace::MissionObjectiveChecker* GlobalNamespace::MissionObjectiveCheckersManager::GetMissionObjectiveChecker(::GlobalNamespace::MissionObjectiveTypeSO* missionObjectiveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::GetMissionObjectiveChecker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMissionObjectiveChecker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MissionObjectiveChecker*, false>(this, ___internal__method, missionObjectiveType);
}
// Autogenerated method: MissionObjectiveCheckersManager.GetResults
::ArrayW<::GlobalNamespace::MissionObjectiveResult*> GlobalNamespace::MissionObjectiveCheckersManager::GetResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::GetResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::MissionObjectiveResult*>, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.HandleLevelFailed
void GlobalNamespace::MissionObjectiveCheckersManager::HandleLevelFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::HandleLevelFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.HandleLevelFinished
void GlobalNamespace::MissionObjectiveCheckersManager::HandleLevelFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::HandleLevelFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveCheckersManager.StopChecking
void GlobalNamespace::MissionObjectiveCheckersManager::StopChecking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::StopChecking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopChecking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveCheckersManager/InitData
#include "GlobalNamespace/MissionObjectiveCheckersManager_InitData.hpp"
// Including type: MissionObjective
#include "GlobalNamespace/MissionObjective.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly MissionObjective[] missionObjectives
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MissionObjective*>& GlobalNamespace::MissionObjectiveCheckersManager::InitData::dyn_missionObjectives() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionObjectiveCheckersManager::InitData::dyn_missionObjectives");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "missionObjectives"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MissionObjective*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreMissionObjectiveChecker
#include "GlobalNamespace/ScoreMissionObjectiveChecker.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::ScoreMissionObjectiveChecker::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMissionObjectiveChecker::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScoreMissionObjectiveChecker.OnDestroy
void GlobalNamespace::ScoreMissionObjectiveChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMissionObjectiveChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMissionObjectiveChecker.HandleScoreDidChange
void GlobalNamespace::ScoreMissionObjectiveChecker::HandleScoreDidChange(int multipliedScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMissionObjectiveChecker::HandleScoreDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipliedScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multipliedScore, modifiedScore);
}
// Autogenerated method: ScoreMissionObjectiveChecker.Init
void GlobalNamespace::ScoreMissionObjectiveChecker::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreMissionObjectiveChecker::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleValueMissionObjectiveChecker
#include "GlobalNamespace/SimpleValueMissionObjectiveChecker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleValueMissionObjectiveChecker.CheckAndUpdateStatus
void GlobalNamespace::SimpleValueMissionObjectiveChecker::CheckAndUpdateStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleValueMissionObjectiveChecker::CheckAndUpdateStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckAndUpdateStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataComboSO
#include "GlobalNamespace/MultiplayerBadgeDataComboSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBadgeDataComboSO.GetValue
int GlobalNamespace::MultiplayerBadgeDataComboSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataComboSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataFullComboSO
#include "GlobalNamespace/MultiplayerBadgeDataFullComboSO.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _weight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerBadgeDataFullComboSO::dyn__weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataFullComboSO::dyn__weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeDataFullComboSO.CalculateBadgeData
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataFullComboSO::CalculateBadgeData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataFullComboSO::CalculateBadgeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBadgeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, playerDataModel, difficultyBeatmap, randomMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataGoodCutsSO
#include "GlobalNamespace/MultiplayerBadgeDataGoodCutsSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBadgeDataGoodCutsSO.GetValue
int GlobalNamespace::MultiplayerBadgeDataGoodCutsSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataGoodCutsSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataHandMovementSO
#include "GlobalNamespace/MultiplayerBadgeDataHandMovementSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBadgeDataHandMovementSO.GetValue
float GlobalNamespace::MultiplayerBadgeDataHandMovementSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataHandMovementSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataMinMaxFloatSO
#include "GlobalNamespace/MultiplayerBadgeDataMinMaxFloatSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerBadgeMinMax _minMax
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBadgeMinMax& GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::dyn__minMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::dyn__minMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minMax"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBadgeMinMax*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _weightMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::dyn__weightMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::dyn__weightMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weightMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxFloatSO.GetValue
float GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxFloatSO.CalculateMax
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateMax(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, randomMultiplier);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxFloatSO.CalculateMin
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateMin(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, randomMultiplier);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxFloatSO.CalculateBadgeData
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateBadgeData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::CalculateBadgeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBadgeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, playerDataModel, difficultyBeatmap, randomMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataMinMaxIntSO
#include "GlobalNamespace/MultiplayerBadgeDataMinMaxIntSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerBadgeMinMax _minMax
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBadgeMinMax& GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::dyn__minMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::dyn__minMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minMax"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBadgeMinMax*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _weightMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::dyn__weightMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::dyn__weightMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weightMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxIntSO.GetValue
int GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, result);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxIntSO.CalculateMax
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateMax(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, randomMultiplier);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxIntSO.CalculateMin
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateMin(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, randomMultiplier);
}
// Autogenerated method: MultiplayerBadgeDataMinMaxIntSO.CalculateBadgeData
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateBadgeData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO::CalculateBadgeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBadgeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, playerDataModel, difficultyBeatmap, randomMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataPersonalBestSO
#include "GlobalNamespace/MultiplayerBadgeDataPersonalBestSO.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _weight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerBadgeDataPersonalBestSO::dyn__weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataPersonalBestSO::dyn__weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeDataPersonalBestSO.CalculateBadgeData
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataPersonalBestSO::CalculateBadgeData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataPersonalBestSO::CalculateBadgeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBadgeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, playerDataModel, difficultyBeatmap, randomMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataPrecisionSO
#include "GlobalNamespace/MultiplayerBadgeDataPrecisionSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBadgeDataPrecisionSO.GetValue
float GlobalNamespace::MultiplayerBadgeDataPrecisionSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataPrecisionSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataSO
#include "GlobalNamespace/MultiplayerBadgeDataSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _titleLocalizationKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerBadgeDataSO::dyn__titleLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::dyn__titleLocalizationKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_titleLocalizationKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _subtitleLocalizationKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerBadgeDataSO::dyn__subtitleLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::dyn__subtitleLocalizationKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subtitleLocalizationKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _icon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MultiplayerBadgeDataSO::dyn__icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::dyn__icon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_icon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeDataSO.get_icon
::UnityEngine::Sprite* GlobalNamespace::MultiplayerBadgeDataSO::get_icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::get_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeDataSO.get_titleLocalizationKey
::StringW GlobalNamespace::MultiplayerBadgeDataSO::get_titleLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::get_titleLocalizationKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleLocalizationKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeDataSO.get_subtitleLocalizationKey
::StringW GlobalNamespace::MultiplayerBadgeDataSO::get_subtitleLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::get_subtitleLocalizationKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtitleLocalizationKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeDataSO.CalculateBadgeData
::GlobalNamespace::MultiplayerBadgeAwardData* GlobalNamespace::MultiplayerBadgeDataSO::CalculateBadgeData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, ::GlobalNamespace::PlayerDataModel* playerDataModel, ::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSO::CalculateBadgeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBadgeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(randomMultiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerBadgeAwardData*, false>(this, ___internal__method, resultsData, playerDataModel, difficultyBeatmap, randomMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeDataSaberMovementSO
#include "GlobalNamespace/MultiplayerBadgeDataSaberMovementSO.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBadgeDataSaberMovementSO.GetValue
float GlobalNamespace::MultiplayerBadgeDataSaberMovementSO::GetValue(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeDataSaberMovementSO::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgeMinMax
#include "GlobalNamespace/MultiplayerBadgeMinMax.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerBadgeMinMax Min
::GlobalNamespace::MultiplayerBadgeMinMax GlobalNamespace::MultiplayerBadgeMinMax::_get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeMinMax::_get_Min");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerBadgeMinMax>("", "MultiplayerBadgeMinMax", "Min"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerBadgeMinMax Min
void GlobalNamespace::MultiplayerBadgeMinMax::_set_Min(::GlobalNamespace::MultiplayerBadgeMinMax value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeMinMax::_set_Min");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgeMinMax", "Min", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerBadgeMinMax Max
::GlobalNamespace::MultiplayerBadgeMinMax GlobalNamespace::MultiplayerBadgeMinMax::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeMinMax::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerBadgeMinMax>("", "MultiplayerBadgeMinMax", "Max"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerBadgeMinMax Max
void GlobalNamespace::MultiplayerBadgeMinMax::_set_Max(::GlobalNamespace::MultiplayerBadgeMinMax value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeMinMax::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgeMinMax", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerBadgeMinMax::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeMinMax::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgesModelSO
#include "GlobalNamespace/MultiplayerBadgesModelSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MultiplayerBadgeDataSO
#include "GlobalNamespace/MultiplayerBadgeDataSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<MultiplayerBadgeDataSO> _positiveBadges
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MultiplayerBadgeDataSO*>*& GlobalNamespace::MultiplayerBadgesModelSO::dyn__positiveBadges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesModelSO::dyn__positiveBadges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positiveBadges"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::MultiplayerBadgeDataSO*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<MultiplayerBadgeDataSO> _negativeBadges
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MultiplayerBadgeDataSO*>*& GlobalNamespace::MultiplayerBadgesModelSO::dyn__negativeBadges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesModelSO::dyn__negativeBadges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_negativeBadges"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::MultiplayerBadgeDataSO*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgesModelSO.get_positiveBadges
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerBadgeDataSO*>* GlobalNamespace::MultiplayerBadgesModelSO::get_positiveBadges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesModelSO::get_positiveBadges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positiveBadges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerBadgeDataSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgesModelSO.get_negativeBadges
::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerBadgeDataSO*>* GlobalNamespace::MultiplayerBadgesModelSO::get_negativeBadges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesModelSO::get_negativeBadges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_negativeBadges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerBadgeDataSO*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: MultiplayerBadgeDataSO
#include "GlobalNamespace/MultiplayerBadgeDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _awardedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerBadgeAwardData::dyn__awardedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__awardedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_awardedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _weight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerBadgeAwardData::dyn__weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _title
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerBadgeAwardData::dyn__title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__title");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_title"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _subtitle
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MultiplayerBadgeAwardData::dyn__subtitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__subtitle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subtitle"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Sprite _icon
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::MultiplayerBadgeAwardData::dyn__icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__icon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_icon"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerBadgeDataSO _badgeData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBadgeDataSO*& GlobalNamespace::MultiplayerBadgeAwardData::dyn__badgeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::dyn__badgeData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBadgeDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgeAwardData.get_awardedPlayer
::GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerBadgeAwardData::get_awardedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::get_awardedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_awardedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeAwardData.get_titleLocalizationKey
::StringW GlobalNamespace::MultiplayerBadgeAwardData::get_titleLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::get_titleLocalizationKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleLocalizationKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeAwardData.get_title
::StringW GlobalNamespace::MultiplayerBadgeAwardData::get_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::get_title");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_title", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeAwardData.get_subtitle
::StringW GlobalNamespace::MultiplayerBadgeAwardData::get_subtitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::get_subtitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subtitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeAwardData.get_icon
::UnityEngine::Sprite* GlobalNamespace::MultiplayerBadgeAwardData::get_icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::get_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBadgeAwardData.CompareTo
int GlobalNamespace::MultiplayerBadgeAwardData::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgeAwardData::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgesProvider
#include "GlobalNamespace/MultiplayerBadgesProvider.hpp"
// Including type: MultiplayerBadgesProvider/<>c
#include "GlobalNamespace/MultiplayerBadgesProvider_--c.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: MultiplayerBadgesModelSO
#include "GlobalNamespace/MultiplayerBadgesModelSO.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kTargetPositiveBadgesCount
int GlobalNamespace::MultiplayerBadgesProvider::_get_kTargetPositiveBadgesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_get_kTargetPositiveBadgesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MultiplayerBadgesProvider", "kTargetPositiveBadgesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTargetPositiveBadgesCount
void GlobalNamespace::MultiplayerBadgesProvider::_set_kTargetPositiveBadgesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_set_kTargetPositiveBadgesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider", "kTargetPositiveBadgesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kTargetNegativeBadgesCount
int GlobalNamespace::MultiplayerBadgesProvider::_get_kTargetNegativeBadgesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_get_kTargetNegativeBadgesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MultiplayerBadgesProvider", "kTargetNegativeBadgesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTargetNegativeBadgesCount
void GlobalNamespace::MultiplayerBadgesProvider::_set_kTargetNegativeBadgesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_set_kTargetNegativeBadgesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider", "kTargetNegativeBadgesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinRandomMultiplierAmount
float GlobalNamespace::MultiplayerBadgesProvider::_get_kMinRandomMultiplierAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_get_kMinRandomMultiplierAmount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerBadgesProvider", "kMinRandomMultiplierAmount"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinRandomMultiplierAmount
void GlobalNamespace::MultiplayerBadgesProvider::_set_kMinRandomMultiplierAmount(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_set_kMinRandomMultiplierAmount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider", "kMinRandomMultiplierAmount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxRandomMultiplierAmount
float GlobalNamespace::MultiplayerBadgesProvider::_get_kMaxRandomMultiplierAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_get_kMaxRandomMultiplierAmount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerBadgesProvider", "kMaxRandomMultiplierAmount"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxRandomMultiplierAmount
void GlobalNamespace::MultiplayerBadgesProvider::_set_kMaxRandomMultiplierAmount(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::_set_kMaxRandomMultiplierAmount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider", "kMaxRandomMultiplierAmount", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerDataModel _playerDataModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& GlobalNamespace::MultiplayerBadgesProvider::dyn__playerDataModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::dyn__playerDataModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerDataModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerDataModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IDifficultyBeatmap _difficultyBeatmap
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDifficultyBeatmap*& GlobalNamespace::MultiplayerBadgesProvider::dyn__difficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::dyn__difficultyBeatmap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmap"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerBadgesModelSO _multiplayerBadgesModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBadgesModelSO*& GlobalNamespace::MultiplayerBadgesProvider::dyn__multiplayerBadgesModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::dyn__multiplayerBadgesModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerBadgesModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBadgesModelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBadgesProvider.SelectBadgesAndPutThemIntoResults
void GlobalNamespace::MultiplayerBadgesProvider::SelectBadgesAndPutThemIntoResults(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::MultiplayerPlayerResultsData*>* playerResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::SelectBadgesAndPutThemIntoResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBadgesAndPutThemIntoResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerResults)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playerResults);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBadgesProvider/<>c
#include "GlobalNamespace/MultiplayerBadgesProvider_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerBadgesProvider/<>c <>9
::GlobalNamespace::MultiplayerBadgesProvider::$$c* GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerBadgesProvider::$$c*>("", "MultiplayerBadgesProvider/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerBadgesProvider/<>c <>9
void GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9(::GlobalNamespace::MultiplayerBadgesProvider::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerPlayerResultsData,System.Boolean> <>9__7_0
::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, bool>* GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, bool>*>("", "MultiplayerBadgesProvider/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerPlayerResultsData,System.Boolean> <>9__7_0
void GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9__7_0(::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider/<>c", "<>9__7_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerPlayerResultsData,System.Int32> <>9__7_1
::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, int>* GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9__7_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_get_$$9__7_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, int>*>("", "MultiplayerBadgesProvider/<>c", "<>9__7_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerPlayerResultsData,System.Int32> <>9__7_1
void GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9__7_1(::System::Func_2<::GlobalNamespace::MultiplayerPlayerResultsData*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::_set_$$9__7_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerBadgesProvider/<>c", "<>9__7_1", value)));
}
// Autogenerated method: MultiplayerBadgesProvider/<>c..cctor
void GlobalNamespace::MultiplayerBadgesProvider::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerBadgesProvider/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerBadgesProvider/<>c.<SelectBadgesAndPutThemIntoResults>b__7_0
bool GlobalNamespace::MultiplayerBadgesProvider::$$c::$SelectBadgesAndPutThemIntoResults$b__7_0(::GlobalNamespace::MultiplayerPlayerResultsData* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::<SelectBadgesAndPutThemIntoResults>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SelectBadgesAndPutThemIntoResults>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: MultiplayerBadgesProvider/<>c.<SelectBadgesAndPutThemIntoResults>b__7_1
int GlobalNamespace::MultiplayerBadgesProvider::$$c::$SelectBadgesAndPutThemIntoResults$b__7_1(::GlobalNamespace::MultiplayerPlayerResultsData* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerBadgesProvider::$$c::<SelectBadgesAndPutThemIntoResults>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SelectBadgesAndPutThemIntoResults>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HologramRays
#include "GlobalNamespace/HologramRays.hpp"
// Including type: HologramRays/<FadingCoroutine>d__28
#include "GlobalNamespace/HologramRays_-FadingCoroutine-d__28.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2804
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _materialBottomPositionID
int GlobalNamespace::HologramRays::_get__materialBottomPositionID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_get__materialBottomPositionID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "HologramRays", "_materialBottomPositionID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _materialBottomPositionID
void GlobalNamespace::HologramRays::_set__materialBottomPositionID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_set__materialBottomPositionID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HologramRays", "_materialBottomPositionID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2814
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _materialTopPositionID
int GlobalNamespace::HologramRays::_get__materialTopPositionID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_get__materialTopPositionID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "HologramRays", "_materialTopPositionID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _materialTopPositionID
void GlobalNamespace::HologramRays::_set__materialTopPositionID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_set__materialTopPositionID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HologramRays", "_materialTopPositionID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2824
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _materialAlphaID
int GlobalNamespace::HologramRays::_get__materialAlphaID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_get__materialAlphaID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "HologramRays", "_materialAlphaID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _materialAlphaID
void GlobalNamespace::HologramRays::_set__materialAlphaID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_set__materialAlphaID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HologramRays", "_materialAlphaID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::HologramRays::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "HologramRays", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::HologramRays::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HologramRays", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _bloomLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::HologramRays::dyn__bloomLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__bloomLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _raysMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::HologramRays::dyn__raysMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__raysMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raysMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HologramRays::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _laserHolderTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HologramRays::dyn__laserHolderTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__laserHolderTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserHolderTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _hologramRaysTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HologramRays::dyn__hologramRaysTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__hologramRaysTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hologramRaysTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _hologramRaysMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::HologramRays::dyn__hologramRaysMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__hologramRaysMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hologramRaysMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _topYPosition
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::dyn__topYPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__topYPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_topYPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _bottomYPosition
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::dyn__bottomYPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__bottomYPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bottomYPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cachedExtent
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::dyn_cachedExtent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn_cachedExtent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedExtent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& GlobalNamespace::HologramRays::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.FloatTween _transitionTween
[[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& GlobalNamespace::HologramRays::dyn__transitionTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__transitionTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transitionTween"))->offset;
  return *reinterpret_cast<::Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _bloomColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::HologramRays::dyn__bloomColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__bloomColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _bloomTransparentColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::HologramRays::dyn__bloomTransparentColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__bloomTransparentColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomTransparentColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _raysDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::dyn__raysDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__raysDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raysDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _raysLocalScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::HologramRays::dyn__raysLocalScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn__raysLocalScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raysLocalScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean boundsInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HologramRays::dyn_boundsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::dyn_boundsInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boundsInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HologramRays..cctor
void GlobalNamespace::HologramRays::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HologramRays", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HologramRays.RuntimeInit
void GlobalNamespace::HologramRays::RuntimeInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::RuntimeInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HologramRays", "RuntimeInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HologramRays.Awake
void GlobalNamespace::HologramRays::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.OnDisable
void GlobalNamespace::HologramRays::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.OnValidate
void GlobalNamespace::HologramRays::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.Update
void GlobalNamespace::HologramRays::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.Refresh
void GlobalNamespace::HologramRays::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.Animate
void GlobalNamespace::HologramRays::Animate(bool turningOn, float duration, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(turningOn), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, turningOn, duration, easeType);
}
// Autogenerated method: HologramRays.FadingCoroutine
::System::Collections::IEnumerator* GlobalNamespace::HologramRays::FadingCoroutine(bool turningOn, float duration, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::FadingCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadingCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(turningOn), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, turningOn, duration, easeType);
}
// Autogenerated method: HologramRays.UpdateBounds
void GlobalNamespace::HologramRays::UpdateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::UpdateBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays.<Awake>b__22_0
void GlobalNamespace::HologramRays::$Awake$b__22_0(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::<Awake>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, f);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HologramRays/<FadingCoroutine>d__28
#include "GlobalNamespace/HologramRays_-FadingCoroutine-d__28.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean turningOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_turningOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_turningOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turningOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HologramRays <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HologramRays*& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HologramRays**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EaseType easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HologramRays/<FadingCoroutine>d__28.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays/<FadingCoroutine>d__28.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays/<FadingCoroutine>d__28.System.IDisposable.Dispose
void GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays/<FadingCoroutine>d__28.MoveNext
bool GlobalNamespace::HologramRays::$FadingCoroutine$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HologramRays/<FadingCoroutine>d__28.System.Collections.IEnumerator.Reset
void GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::$FadingCoroutine$d__28::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBeatmapObjectEventManager
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: MultiplayerConnectedPlayerSongTimeSyncController
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteSpawnInfoNetSerializable
#include "GlobalNamespace/NoteSpawnInfoNetSerializable.hpp"
// Including type: ObstacleSpawnInfoNetSerializable
#include "GlobalNamespace/ObstacleSpawnInfoNetSerializable.hpp"
// Including type: SliderSpawnInfoNetSerializable
#include "GlobalNamespace/SliderSpawnInfoNetSerializable.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGameplayRpcManager _gameplayRpcManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__gameplayRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__gameplayRpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayRpcManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerSongTimeSyncController _songTimeController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__songTimeController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__songTimeController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteSpawnInfoNetSerializable> connectedPlayerNoteWasSpawnedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteSpawnInfoNetSerializable*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasSpawnedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasSpawnedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayerNoteWasSpawnedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteSpawnInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleSpawnInfoNetSerializable> connectedPlayerObstacleWasSpawnedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleSpawnInfoNetSerializable*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerObstacleWasSpawnedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerObstacleWasSpawnedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayerObstacleWasSpawnedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleSpawnInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<SliderSpawnInfoNetSerializable> connectedPlayerSliderWasSpawnedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SliderSpawnInfoNetSerializable*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerSliderWasSpawnedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerSliderWasSpawnedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayerSliderWasSpawnedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::SliderSpawnInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteCutInfoNetSerializable> connectedPlayerNoteWasCutEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteCutInfoNetSerializable*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasCutEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayerNoteWasCutEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteCutInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteMissInfoNetSerializable> connectedPlayerNoteWasMissedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteMissInfoNetSerializable*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn_connectedPlayerNoteWasMissedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayerNoteWasMissedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteMissInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<MultiplayerConnectedPlayerBeatmapObjectEventManager/TimestampedBeatmapObjectEventData> _beatmapObjectEventQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__beatmapObjectEventQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__beatmapObjectEventQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectEventQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _paused
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::dyn__paused");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paused"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.add_connectedPlayerNoteWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasSpawnedEvent(::System::Action_1<::GlobalNamespace::NoteSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerNoteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.remove_connectedPlayerNoteWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasSpawnedEvent(::System::Action_1<::GlobalNamespace::NoteSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerNoteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.add_connectedPlayerObstacleWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerObstacleWasSpawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerObstacleWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerObstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.remove_connectedPlayerObstacleWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerObstacleWasSpawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerObstacleWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerObstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.add_connectedPlayerSliderWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerSliderWasSpawnedEvent(::System::Action_1<::GlobalNamespace::SliderSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerSliderWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerSliderWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.remove_connectedPlayerSliderWasSpawnedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerSliderWasSpawnedEvent(::System::Action_1<::GlobalNamespace::SliderSpawnInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerSliderWasSpawnedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerSliderWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.add_connectedPlayerNoteWasCutEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasCutEvent(::System::Action_1<::GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.remove_connectedPlayerNoteWasCutEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasCutEvent(::System::Action_1<::GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.add_connectedPlayerNoteWasMissedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasMissedEvent(::System::Action_1<::GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::add_connectedPlayerNoteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.remove_connectedPlayerNoteWasMissedEvent
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasMissedEvent(::System::Action_1<::GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::remove_connectedPlayerNoteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.Start
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.Update
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.Pause
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.Resume
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager.InvokeCallback
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::InvokeCallback(::LiteNetLib::Utils::INetSerializable* noteEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::InvokeCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBeatmapObjectEventManager/TimestampedBeatmapObjectEventData
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData::dyn_time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.Utils.INetSerializable beatmapObjectEventData
[[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::INetSerializable*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData::dyn_beatmapObjectEventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData::dyn_beatmapObjectEventData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapObjectEventData"))->offset;
  return *reinterpret_cast<::LiteNetLib::Utils::INetSerializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectEventManager/TimestampedBeatmapObjectEventData..ctor
// ABORTED elsewhere.  GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager::TimestampedBeatmapObjectEventData::TimestampedBeatmapObjectEventData(float time, ::LiteNetLib::Utils::INetSerializable* beatmapObjectEventData)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBeatmapObjectManager
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectManager.hpp"
// Including type: MultiplayerConnectedPlayerBeatmapObjectManager/InitData
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: SliderSpawnInfoNetSerializable
#include "GlobalNamespace/SliderSpawnInfoNetSerializable.hpp"
// Including type: ObstacleSpawnInfoNetSerializable
#include "GlobalNamespace/ObstacleSpawnInfoNetSerializable.hpp"
// Including type: MemoryPoolContainer`2
#include "GlobalNamespace/MemoryPoolContainer_2.hpp"
// Including type: NoteSpawnInfoNetSerializable
#include "GlobalNamespace/NoteSpawnInfoNetSerializable.hpp"
// Including type: IConnectedPlayerBeatmapObjectEventManager
#include "GlobalNamespace/IConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: MultiplayerConnectedPlayerGameNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController_Pool.hpp"
// Including type: MultiplayerConnectedPlayerBombNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerBombNoteController_Pool.hpp"
// Including type: MultiplayerConnectedPlayerObstacleController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Single> _firstBasicNoteTime
[[deprecated("Use field access instead!")]] ::System::Nullable_1<float>& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__firstBasicNoteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__firstBasicNoteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstBasicNoteTime"))->offset;
  return *reinterpret_cast<::System::Nullable_1<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`1<MultiplayerConnectedPlayerGameNoteController> _gameNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__gameNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__gameNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`1<MultiplayerConnectedPlayerGameNoteController> _burstSliderHeadGameNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderHeadGameNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderHeadGameNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderHeadGameNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`1<MultiplayerConnectedPlayerGameNoteController> _burstSliderGameNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderGameNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderGameNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderGameNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`1<MultiplayerConnectedPlayerGameNoteController> _burstSliderFillPoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderFillPoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__burstSliderFillPoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderFillPoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`1<MultiplayerConnectedPlayerBombNoteController> _bombNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerBombNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__bombNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__bombNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MultiplayerConnectedPlayerBombNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MemoryPoolContainer`2<MultiplayerConnectedPlayerObstacleController,ObstacleController> _obstaclePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_2<::GlobalNamespace::MultiplayerConnectedPlayerObstacleController*, ::GlobalNamespace::ObstacleController*>*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__obstaclePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__obstaclePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstaclePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_2<::GlobalNamespace::MultiplayerConnectedPlayerObstacleController*, ::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayerBeatmapObjectEventManager _beatmapObjectEventManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__beatmapObjectEventManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__beatmapObjectEventManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectEventManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerBeatmapObjectManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData*& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.Dispose
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasSpawned
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasSpawned(::GlobalNamespace::NoteSpawnInfoNetSerializable* noteSpawnInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteSpawnInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteSpawnInfo);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.HandleMultiplayerBeatmapObjectEventManagerObstacleWasSpawned
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerObstacleWasSpawned(::GlobalNamespace::ObstacleSpawnInfoNetSerializable* obstacleSpawnInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerObstacleWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerBeatmapObjectEventManagerObstacleWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleSpawnInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleSpawnInfo);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.HandleMultiplayerBeatmapObjectEventManagerSliderWasSpawned
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerSliderWasSpawned(::GlobalNamespace::SliderSpawnInfoNetSerializable* sliderSpawnInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerSliderWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerBeatmapObjectEventManagerSliderWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderSpawnInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderSpawnInfo);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasCut
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasCut(::GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerBeatmapObjectEventManagerBeatmapObjectWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteCutInfo);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.AreNotesSame
bool GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::AreNotesSame(::GlobalNamespace::NoteController* noteController, ::GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::AreNotesSame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerConnectedPlayerBeatmapObjectManager", "AreNotesSame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.get_activeObstacleControllers
::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>* GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.ProcessObstacleData
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessObstacleData(::GlobalNamespace::ObstacleData* obstacleData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData> obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessObstacleData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessObstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, byref(obstacleSpawnData), rotation);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.ProcessNoteData
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessNoteData(::GlobalNamespace::NoteData* noteData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData> noteSpawnData, float rotation, bool forceIsFirstNoteBehaviour) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessNoteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(forceIsFirstNoteBehaviour)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, byref(noteSpawnData), rotation, forceIsFirstNoteBehaviour);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.ProcessSliderData
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessSliderData(::GlobalNamespace::SliderData* sliderData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData> sliderSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::ProcessSliderData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(sliderSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, byref(sliderSpawnData), rotation);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.DespawnInternal
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.DespawnInternal
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal(::GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MultiplayerConnectedPlayerBeatmapObjectManager.DespawnInternal
void GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal(::GlobalNamespace::SliderController* sliderNoteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderNoteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderNoteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBeatmapObjectManager/InitData
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean disappearingArrows
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_disappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_disappearingArrows");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disappearingArrows"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean ghostNotes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_ghostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_ghostNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostNotes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single notesUniformScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_notesUniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectManager::InitData::dyn_notesUniformScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "notesUniformScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerEffectsSpawner
#include "GlobalNamespace/MultiplayerConnectedPlayerEffectsSpawner.hpp"
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: BombExplosionEffect
#include "GlobalNamespace/BombExplosionEffect.hpp"
// Including type: IConnectedPlayerBeatmapObjectEventManager
#include "GlobalNamespace/IConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private NoteDebrisSpawner _noteDebrisSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebrisSpawner*& GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__noteDebrisSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__noteDebrisSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDebrisSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebrisSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BombExplosionEffect _bombExplosionEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BombExplosionEffect*& GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__bombExplosionEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__bombExplosionEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombExplosionEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BombExplosionEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayerBeatmapObjectEventManager _beatmapObjectEventManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager*& GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__beatmapObjectEventManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::dyn__beatmapObjectEventManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectEventManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerEffectsSpawner.Start
void GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerEffectsSpawner.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerEffectsSpawner.HandleBeatmapObjectEventManagerConnectedPlayerBeatmapObjectWasCut
void GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::HandleBeatmapObjectEventManagerConnectedPlayerBeatmapObjectWasCut(::GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerEffectsSpawner::HandleBeatmapObjectEventManagerConnectedPlayerBeatmapObjectWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectEventManagerConnectedPlayerBeatmapObjectWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteCutInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerFacade
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade.hpp"
// Including type: MultiplayerConnectedPlayerFacade/Factory
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade_Factory.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerBigAvatarAnimator
#include "GlobalNamespace/MultiplayerBigAvatarAnimator.hpp"
// Including type: MultiplayerConnectedPlayerSongTimeSyncController
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController.hpp"
// Including type: MultiplayerConnectedPlayerIntroAnimator
#include "GlobalNamespace/MultiplayerConnectedPlayerIntroAnimator.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: MultiplayerConnectedPlayerScoreDiffText
#include "GlobalNamespace/MultiplayerConnectedPlayerScoreDiffText.hpp"
// Including type: IConnectedPlayerBeatmapObjectEventManager
#include "GlobalNamespace/IConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _outroAnimator
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__outroAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroAnimator"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerBigAvatarAnimator _bigAvatarAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBigAvatarAnimator*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigAvatarAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBigAvatarAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _bigAvatarDisappearDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarDisappearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarDisappearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigAvatarDisappearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EaseType _bigAvatarDisappearEasing
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarDisappearEasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__bigAvatarDisappearEasing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigAvatarDisappearEasing"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerSongTimeSyncController _songTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__songTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__songTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerIntroAnimator _introAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__introAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerScoreDiffText _scoreDiffText
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__scoreDiffText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__scoreDiffText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreDiffText"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayerBeatmapObjectEventManager _beatmapObjectEventManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager*& GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__beatmapObjectEventManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::dyn__beatmapObjectEventManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectEventManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayerBeatmapObjectEventManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.get_introAnimator
::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator* GlobalNamespace::MultiplayerConnectedPlayerFacade::get_introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::get_introAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_introAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.get_outroAnimator
::UnityEngine::GameObject* GlobalNamespace::MultiplayerConnectedPlayerFacade::get_outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::get_outroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.get_scoreDiffText
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText* GlobalNamespace::MultiplayerConnectedPlayerFacade::get_scoreDiffText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::get_scoreDiffText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scoreDiffText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.SetSongStartSyncTime
void GlobalNamespace::MultiplayerConnectedPlayerFacade::SetSongStartSyncTime(float songStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::SetSongStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songStartSyncTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, songStartSyncTime);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.PauseSpawning
void GlobalNamespace::MultiplayerConnectedPlayerFacade::PauseSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::PauseSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.ResumeSpawning
void GlobalNamespace::MultiplayerConnectedPlayerFacade::ResumeSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::ResumeSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.__ForceStopSong
void GlobalNamespace::MultiplayerConnectedPlayerFacade::__ForceStopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::__ForceStopSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ForceStopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.HideBigAvatar
void GlobalNamespace::MultiplayerConnectedPlayerFacade::HideBigAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::HideBigAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideBigAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerFacade.__GetPlayerAvatar
::GlobalNamespace::AvatarPoseController* GlobalNamespace::MultiplayerConnectedPlayerFacade::__GetPlayerAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerFacade::__GetPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__GetPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AvatarPoseController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerFacade/Factory
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade_Factory.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerGameplayAnimator
#include "GlobalNamespace/MultiplayerConnectedPlayerGameplayAnimator.hpp"
// Including type: MultiplayerBigAvatarAnimator
#include "GlobalNamespace/MultiplayerBigAvatarAnimator.hpp"
// Including type: ScaleAnimator
#include "GlobalNamespace/ScaleAnimator.hpp"
// Including type: MultiplayerConnectedPlayerLevelFailController
#include "GlobalNamespace/MultiplayerConnectedPlayerLevelFailController.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: MultiplayerConnectedPlayerSpectatingSpot
#include "GlobalNamespace/MultiplayerConnectedPlayerSpectatingSpot.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerBigAvatarAnimator _bigAvatarAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerBigAvatarAnimator*& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__bigAvatarAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__bigAvatarAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigAvatarAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerBigAvatarAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ScaleAnimator _avatarScaleAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScaleAnimator*& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__avatarScaleAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__avatarScaleAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarScaleAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScaleAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultLightsWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__defaultLightsWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__defaultLightsWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultLightsWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _observedLightsWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__observedLightsWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__observedLightsWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_observedLightsWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerLevelFailController _failController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController*& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__failController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__failController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _multiplayerLayoutProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__multiplayerLayoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__multiplayerLayoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerLayoutProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerSpectatingSpot _playerSpectatingSpot
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot*& GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__playerSpectatingSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::dyn__playerSpectatingSpot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerSpectatingSpot"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.TransitionIntoFailedState
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::TransitionIntoFailedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::TransitionIntoFailedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionIntoFailedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.HandlePlayerDidFail
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandlePlayerDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandlePlayerDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.HandleIsObservedChanged
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandleIsObservedChanged(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandleIsObservedChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleIsObservedChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isObserved);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.Start
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.AnimateNewLeaderSelected
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::AnimateNewLeaderSelected(bool isLeading) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::AnimateNewLeaderSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateNewLeaderSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeading)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeading);
}
// Autogenerated method: MultiplayerConnectedPlayerGameplayAnimator.HandleStateChanged
void GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandleStateChanged(::GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameplayAnimator::HandleStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerInstaller
#include "GlobalNamespace/MultiplayerConnectedPlayerInstaller.hpp"
// Including type: MultiplayerConnectedPlayerSongTimeSyncController
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController.hpp"
// Including type: MultiplayerConnectedPlayerBeatmapObjectEventManager
#include "GlobalNamespace/MultiplayerConnectedPlayerBeatmapObjectEventManager.hpp"
// Including type: MultiplayerConnectedPlayerGameNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController.hpp"
// Including type: MultiplayerConnectedPlayerBombNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerBombNoteController.hpp"
// Including type: MultiplayerConnectedPlayerObstacleController
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleController.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerSongTimeSyncController _connectedPlayerAudioTimeSyncControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayerAudioTimeSyncControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayerAudioTimeSyncControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerAudioTimeSyncControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerBeatmapObjectEventManager _connectedPlayerBeatmapObjectEventManagerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayerBeatmapObjectEventManagerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayerBeatmapObjectEventManagerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerBeatmapObjectEventManagerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerBeatmapObjectEventManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerGameNoteController _multiplayerGameNoteControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerGameNoteControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerGameNoteControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerGameNoteControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerGameNoteController _multiplayerBurstSliderHeadGameNoteControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderHeadGameNoteControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderHeadGameNoteControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerBurstSliderHeadGameNoteControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerGameNoteController _multiplayerBurstSliderGameNoteControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderGameNoteControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderGameNoteControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerBurstSliderGameNoteControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerGameNoteController _multiplayerBurstSliderFillControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderFillControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBurstSliderFillControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerBurstSliderFillControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerBombNoteController _multiplayerBombNoteControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerBombNoteController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBombNoteControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerBombNoteControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerBombNoteControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerBombNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerObstacleController _multiplayerObstacleControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerObstacleController*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerObstacleControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__multiplayerObstacleControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerObstacleControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerObstacleController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayerStartState _localPlayerStartState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerPlayerStartState& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__localPlayerStartState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__localPlayerStartState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerStartState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerPlayerStartState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _sceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayersSpecificSettingsAtGameStartModel _playersSpecificSettingsAtGameStartModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*& GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__playersSpecificSettingsAtGameStartModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::dyn__playersSpecificSettingsAtGameStartModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersSpecificSettingsAtGameStartModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerInstaller.InstallBindings
void GlobalNamespace::MultiplayerConnectedPlayerInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerIntroAnimator
#include "GlobalNamespace/MultiplayerConnectedPlayerIntroAnimator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _introPlayableDirector
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator::dyn__introPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator::dyn__introPlayableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introPlayableDirector"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerIntroAnimator.SetBeforeIntroValues
void GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator::SetBeforeIntroValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator::SetBeforeIntroValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeforeIntroValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerLevelFailController
#include "GlobalNamespace/MultiplayerConnectedPlayerLevelFailController.hpp"
// Including type: VFXController
#include "GlobalNamespace/VFXController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VFXController _failVFXController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VFXController*& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__failVFXController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__failVFXController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failVFXController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VFXController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action playerDidFailEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn_playerDidFailEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn_playerDidFailEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDidFailEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _wasActive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__wasActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::dyn__wasActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.add_playerDidFailEvent
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::add_playerDidFailEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::add_playerDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.remove_playerDidFailEvent
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::remove_playerDidFailEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::remove_playerDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.Start
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.CheckIfPlayerFailed
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::CheckIfPlayerFailed(::GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::CheckIfPlayerFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckIfPlayerFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::HandlePlayerDisconnected(::GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerConnectedPlayerLevelFailController.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::HandlePlayerStateChanged(::GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerScoreDiffText
#include "GlobalNamespace/MultiplayerConnectedPlayerScoreDiffText.hpp"
// Including type: MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition
#include "GlobalNamespace/MultiplayerConnectedPlayerScoreDiffText_HorizontalPosition.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerLeadPlayerProvider
#include "GlobalNamespace/MultiplayerLeadPlayerProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _activeTextColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__activeTextColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__activeTextColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeTextColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _normalBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__normalBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__normalBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _leadingBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__leadingBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__leadingBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadingBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _onPlatformText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__onPlatformText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__onPlatformText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onPlatformText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _backgroundSpriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__backgroundSpriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__backgroundSpriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_backgroundSpriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLeadPlayerProvider*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__leadPlayerProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__leadPlayerProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadPlayerProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLeadPlayerProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _currentBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__currentBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__currentBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerScoreDiffText/State _state
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.FloatTween _onPlatformTextAlphaTween
[[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__onPlatformTextAlphaTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::dyn__onPlatformTextAlphaTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onPlatformTextAlphaTween"))->offset;
  return *reinterpret_cast<::Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.Start
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.SetHorizontalPositionRelativeToLocalPlayer
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::SetHorizontalPositionRelativeToLocalPlayer(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition relativePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::SetHorizontalPositionRelativeToLocalPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHorizontalPositionRelativeToLocalPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relativePosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, relativePosition);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.AnimateScoreDiff
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::AnimateScoreDiff(int scoreDiff) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::AnimateScoreDiff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateScoreDiff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreDiff)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scoreDiff);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.AnimateHide
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::AnimateHide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::AnimateHide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateHide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.HandleNewLeaderWasSelected
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HandleNewLeaderWasSelected(::StringW userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HandleNewLeaderWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNewLeaderWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.<Start>b__13_0
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::$Start$b__13_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::<Start>b__13_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__13_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.<AnimateScoreDiff>b__16_0
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::$AnimateScoreDiff$b__16_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::<AnimateScoreDiff>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AnimateScoreDiff>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerScoreDiffText.<AnimateHide>b__17_0
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::$AnimateHide$b__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::<AnimateHide>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AnimateHide>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition
#include "GlobalNamespace/MultiplayerConnectedPlayerScoreDiffText_HorizontalPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition Left
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition>("", "MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition", "Left"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition Left
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_set_Left(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition Right
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition>("", "MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition", "Right"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition Right
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_set_Right(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition", "Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerScoreDiffText/State
#include "GlobalNamespace/MultiplayerConnectedPlayerScoreDiffText.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State Hidden
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State>("", "MultiplayerConnectedPlayerScoreDiffText/State", "Hidden"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State Hidden
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_Hidden(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/State", "Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State Displayed
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_Displayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_Displayed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State>("", "MultiplayerConnectedPlayerScoreDiffText/State", "Displayed"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State Displayed
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_Displayed(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_Displayed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/State", "Displayed", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingDisplay
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_AnimatingDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_AnimatingDisplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State>("", "MultiplayerConnectedPlayerScoreDiffText/State", "AnimatingDisplay"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingDisplay
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_AnimatingDisplay(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_AnimatingDisplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/State", "AnimatingDisplay", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingHide
::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_AnimatingHide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_get_AnimatingHide");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State>("", "MultiplayerConnectedPlayerScoreDiffText/State", "AnimatingHide"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingHide
void GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_AnimatingHide(::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::_set_AnimatingHide");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerScoreDiffText/State", "AnimatingHide", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerSongTimeSyncController
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController.hpp"
// Including type: MultiplayerConnectedPlayerSongTimeSyncController/InitData
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController_InitData.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _audioSyncLerpSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__audioSyncLerpSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__audioSyncLerpSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSyncLerpSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _forcedSyncDeltaTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__forcedSyncDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__forcedSyncDeltaTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forcedSyncDeltaTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startSyncDeltaTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__startSyncDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__startSyncDeltaTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startSyncDeltaTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stopSyncDeltaTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__stopSyncDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__stopSyncDeltaTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopSyncDeltaTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FloatSO _audioLatency
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSO*& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__audioLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__audioLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioLatency"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerSongTimeSyncController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData*& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <songTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn_$songTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn_$songTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<songTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <lastFrameDeltaSongTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn_$lastFrameDeltaSongTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn_$lastFrameDeltaSongTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<lastFrameDeltaSongTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__timeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startSongSyncTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__startSongSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__startSongSyncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startSongSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fixingAudioSyncError
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__fixingAudioSyncError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__fixingAudioSyncError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixingAudioSyncError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isReady
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::dyn__isReady");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isReady"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.get_songTime
float GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.set_songTime
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::set_songTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::set_songTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_songTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.get_lastFrameDeltaSongTime
float GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_lastFrameDeltaSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_lastFrameDeltaSongTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastFrameDeltaSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.set_lastFrameDeltaSongTime
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::set_lastFrameDeltaSongTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::set_lastFrameDeltaSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lastFrameDeltaSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.get_songEndTime
float GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.get_songLength
float GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_songLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.get_isReady
bool GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.Start
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.Update
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.StartSong
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::StartSong(float songStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songStartSyncTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, songStartSyncTime);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.SetConnectedPlayerSongTime
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::SetConnectedPlayerSongTime(float syncTime, float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::SetConnectedPlayerSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConnectedPlayerSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, syncTime, songTime);
}
// Autogenerated method: MultiplayerConnectedPlayerSongTimeSyncController.StopSong
void GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::StopSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerSongTimeSyncController/InitData
#include "GlobalNamespace/MultiplayerConnectedPlayerSongTimeSyncController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_startSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_startSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single songTimeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_songTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single timeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerSongTimeSyncController::InitData::dyn_timeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerDuelConnectedPlayerGameplayAnimator
#include "GlobalNamespace/MultiplayerDuelConnectedPlayerGameplayAnimator.hpp"
// Including type: ScaleAnimator
#include "GlobalNamespace/ScaleAnimator.hpp"
// Including type: MultiplayerConnectedPlayerLevelFailController
#include "GlobalNamespace/MultiplayerConnectedPlayerLevelFailController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ScaleAnimator _avatarScaleAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScaleAnimator*& GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::dyn__avatarScaleAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::dyn__avatarScaleAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarScaleAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScaleAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerConnectedPlayerLevelFailController _failController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController*& GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::dyn__failController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::dyn__failController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerLevelFailController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerDuelConnectedPlayerGameplayAnimator.TransitionIntoFailedState
void GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::TransitionIntoFailedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::TransitionIntoFailedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionIntoFailedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerDuelConnectedPlayerGameplayAnimator.HandlePlayerDidFail
void GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::HandlePlayerDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::HandlePlayerDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerDuelConnectedPlayerGameplayAnimator.OnDestroy
void GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerDuelConnectedPlayerGameplayAnimator.AnimateNewLeaderSelected
void GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::AnimateNewLeaderSelected(bool isLeading) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::AnimateNewLeaderSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateNewLeaderSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeading)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeading);
}
// Autogenerated method: MultiplayerDuelConnectedPlayerGameplayAnimator.HandleStateChanged
void GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::HandleStateChanged(::GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerDuelConnectedPlayerGameplayAnimator::HandleStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBombNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerBombNoteController.hpp"
// Including type: MultiplayerConnectedPlayerBombNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerBombNoteController_Pool.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerConnectedPlayerBombNoteController.Init
void GlobalNamespace::MultiplayerConnectedPlayerBombNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerBombNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerBombNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerBombNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerDisappearingArrowController
#include "GlobalNamespace/MultiplayerConnectedPlayerDisappearingArrowController.hpp"
// Including type: MultiplayerConnectedPlayerGameNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerGameNoteController _gameNoteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*& GlobalNamespace::MultiplayerConnectedPlayerDisappearingArrowController::dyn__gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerDisappearingArrowController::dyn__gameNoteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameNoteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerDisappearingArrowController.get_gameNoteController
::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController* GlobalNamespace::MultiplayerConnectedPlayerDisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerDisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerGameNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController.hpp"
// Including type: MultiplayerConnectedPlayerGameNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController_Pool.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerConnectedPlayerGameNoteController> cubeNoteControllerDidInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>*& GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn_cubeNoteControllerDidInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn_cubeNoteControllerDidInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubeNoteControllerDidInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteVisualModifierType _noteVisualModifierType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteVisualModifierType& GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn__noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn__noteVisualModifierType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteVisualModifierType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteVisualModifierType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteData/GameplayType _gameplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn__gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::dyn__gameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::GameplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.get_gameplayType
::GlobalNamespace::NoteData::GameplayType GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_gameplayType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData::GameplayType, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::add_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::remove_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerGameNoteController.Init
void GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, ::GlobalNamespace::NoteVisualModifierType noteVisualModifierType, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerGameNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(noteVisualModifierType), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, noteVisualModifierType, uniformScale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerGameNoteController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerGameNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerNoteController
#include "GlobalNamespace/MultiplayerConnectedPlayerNoteController.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _visualsWrapperGo
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::MultiplayerConnectedPlayerNoteController::dyn__visualsWrapperGo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerNoteController::dyn__visualsWrapperGo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_visualsWrapperGo"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerNoteController.HiddenStateDidChange
void GlobalNamespace::MultiplayerConnectedPlayerNoteController::HiddenStateDidChange(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerNoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: MultiplayerConnectedPlayerNoteController.Pause
void GlobalNamespace::MultiplayerConnectedPlayerNoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerNoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDataFromNoteSpawnInfoNetSerializable
#include "GlobalNamespace/NoteDataFromNoteSpawnInfoNetSerializable.hpp"
// Including type: NoteSpawnInfoNetSerializable
#include "GlobalNamespace/NoteSpawnInfoNetSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerObstacleClippingController
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleClippingController.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2DA0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _clippingPlanePositionID
int GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_get__clippingPlanePositionID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_get__clippingPlanePositionID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MultiplayerConnectedPlayerObstacleClippingController", "_clippingPlanePositionID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _clippingPlanePositionID
void GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_set__clippingPlanePositionID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_set__clippingPlanePositionID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerObstacleClippingController", "_clippingPlanePositionID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2DB0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _clippingPlaneNormalID
int GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_get__clippingPlaneNormalID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_get__clippingPlaneNormalID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MultiplayerConnectedPlayerObstacleClippingController", "_clippingPlaneNormalID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _clippingPlaneNormalID
void GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_set__clippingPlaneNormalID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_set__clippingPlaneNormalID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConnectedPlayerObstacleClippingController", "_clippingPlaneNormalID", value));
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController[] _materialPropertyBlockControllers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>& GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::dyn__materialPropertyBlockControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::dyn__materialPropertyBlockControllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockControllers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerObstacleClippingController..cctor
void GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerConnectedPlayerObstacleClippingController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerObstacleClippingController.SetClippingParams
void GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::SetClippingParams(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController::SetClippingParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetClippingParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(normal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, normal);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerObstacleController
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleController.hpp"
// Including type: MultiplayerConnectedPlayerObstacleController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleController_Pool.hpp"
// Including type: MultiplayerConnectedPlayerObstacleClippingController
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleClippingController.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerObstacleClippingController _multiplayerConnectedPlayerObstacleClippingController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController*& GlobalNamespace::MultiplayerConnectedPlayerObstacleController::dyn__multiplayerConnectedPlayerObstacleClippingController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleController::dyn__multiplayerConnectedPlayerObstacleClippingController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerConnectedPlayerObstacleClippingController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerConnectedPlayerObstacleClippingController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerObstacleController.Init
void GlobalNamespace::MultiplayerConnectedPlayerObstacleController::Init(::GlobalNamespace::ObstacleData* obstacleData, float worldRotation, ::UnityEngine::Vector3 startPos, ::UnityEngine::Vector3 midPos, ::UnityEngine::Vector3 endPos, float move1Duration, float move2Duration, float singleLineWidth, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerConnectedPlayerObstacleController::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(midPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(move1Duration), ::il2cpp_utils::ExtractType(move2Duration), ::il2cpp_utils::ExtractType(singleLineWidth), ::il2cpp_utils::ExtractType(height)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, worldRotation, startPos, midPos, endPos, move1Duration, move2Duration, singleLineWidth, height);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerObstacleController/Pool
#include "GlobalNamespace/MultiplayerConnectedPlayerObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerObservable.get_offsetSyncTime
float GlobalNamespace::IMultiplayerObservable::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerObservable::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerObservable.get_isFailed
bool GlobalNamespace::IMultiplayerObservable::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerObservable::get_isFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightsAnimator
#include "GlobalNamespace/LightsAnimator.hpp"
// Including type: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11
#include "GlobalNamespace/LightsAnimator_-DisableDirectionalLightsCoroutine-d__11.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight[] _lights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>& GlobalNamespace::LightsAnimator::dyn__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::dyn__lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLight[] _directionalLights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DirectionalLight*>& GlobalNamespace::LightsAnimator::dyn__directionalLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::dyn__directionalLights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DirectionalLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& GlobalNamespace::LightsAnimator::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.ColorTween _tween
[[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& GlobalNamespace::LightsAnimator::dyn__tween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::dyn__tween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tween"))->offset;
  return *reinterpret_cast<::Tweening::ColorTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightsAnimator.Awake
void GlobalNamespace::LightsAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator.OnDestroy
void GlobalNamespace::LightsAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator.AnimateToColor
void GlobalNamespace::LightsAnimator::AnimateToColor(::UnityEngine::Color color, float duration, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::AnimateToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, duration, easeType);
}
// Autogenerated method: LightsAnimator.SetColor
void GlobalNamespace::LightsAnimator::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: LightsAnimator.SetLightsColor
void GlobalNamespace::LightsAnimator::SetLightsColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::SetLightsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: LightsAnimator.SetLightsWidth
void GlobalNamespace::LightsAnimator::SetLightsWidth(float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::SetLightsWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightsWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, width);
}
// Autogenerated method: LightsAnimator.DisableDirectionalLights
void GlobalNamespace::LightsAnimator::DisableDirectionalLights(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::DisableDirectionalLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableDirectionalLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: LightsAnimator.DisableDirectionalLightsCoroutine
::System::Collections::IEnumerator* GlobalNamespace::LightsAnimator::DisableDirectionalLightsCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::DisableDirectionalLightsCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableDirectionalLightsCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11
#include "GlobalNamespace/LightsAnimator_-DisableDirectionalLightsCoroutine-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LightsAnimator <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightsAnimator*& GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightsAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11.System.IDisposable.Dispose
void GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11.MoveNext
bool GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightsAnimator/<DisableDirectionalLightsCoroutine>d__11.System.Collections.IEnumerator.Reset
void GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightsAnimator::$DisableDirectionalLightsCoroutine$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActiveCenterRingLightsController
#include "GlobalNamespace/MultiplayerLocalActiveCenterRingLightsController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerCenterResizeController
#include "GlobalNamespace/MultiplayerCenterResizeController.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single[] _verticalLinePositions
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__verticalLinePositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__verticalLinePositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_verticalLinePositions"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _horizontalLines
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__horizontalLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__horizontalLines");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_horizontalLines"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerCenterResizeController _centerResizeController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerCenterResizeController*& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__centerResizeController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__centerResizeController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centerResizeController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerCenterResizeController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnCenter*& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__beatmapObjectSpawnCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__beatmapObjectSpawnCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnCenter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectSpawnCenter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _edgeDistanceFromCenterCalculated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__edgeDistanceFromCenterCalculated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__edgeDistanceFromCenterCalculated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_edgeDistanceFromCenterCalculated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _spawnCenterDistanceFound
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__spawnCenterDistanceFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::dyn__spawnCenterDistanceFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnCenterDistanceFound"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.Start
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.OnDestroy
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.TryResize
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::TryResize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::TryResize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.Resize
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::Resize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::Resize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::HandleSpawnCenterDistanceWasFound(float spawnCenterDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spawnCenterDistance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, spawnCenterDistance);
}
// Autogenerated method: MultiplayerLocalActiveCenterRingLightsController.HandleEdgeDistanceFromCenterWasCalculated
void GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::HandleEdgeDistanceFromCenterWasCalculated(float constructEdgeDistanceFromCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveCenterRingLightsController::HandleEdgeDistanceFromCenterWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEdgeDistanceFromCenterWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(constructEdgeDistanceFromCenter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, constructEdgeDistanceFromCenter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActiveClient
#include "GlobalNamespace/MultiplayerLocalActiveClient.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: IScoreSyncStateManager
#include "GlobalNamespace/IScoreSyncStateManager.hpp"
// Including type: INodePoseSyncStateManager
#include "GlobalNamespace/INodePoseSyncStateManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: ComboController
#include "GlobalNamespace/ComboController.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/SliderSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_SliderSpawnData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreSyncStateManager _scoreSyncStateManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreSyncStateManager*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__scoreSyncStateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__scoreSyncStateManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreSyncStateManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreSyncStateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly INodePoseSyncStateManager _nodePoseSyncStateManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::INodePoseSyncStateManager*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__nodePoseSyncStateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__nodePoseSyncStateManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodePoseSyncStateManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::INodePoseSyncStateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGameplayRpcManager _rpcManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__rpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__rpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rpcManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ComboController _comboController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ComboController*& GlobalNamespace::MultiplayerLocalActiveClient::dyn__comboController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::dyn__comboController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comboController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ComboController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActiveClient.Start
void GlobalNamespace::MultiplayerLocalActiveClient::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveClient.OnDestroy
void GlobalNamespace::MultiplayerLocalActiveClient::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveClient.LateUpdate
void GlobalNamespace::MultiplayerLocalActiveClient::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleNoteWasAdded
void GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasAdded(::GlobalNamespace::NoteData* noteData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasAdded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleObstacleWasAdded
void GlobalNamespace::MultiplayerLocalActiveClient::HandleObstacleWasAdded(::GlobalNamespace::ObstacleData* obstacleData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleObstacleWasAdded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleWasAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleSliderWasAdded
void GlobalNamespace::MultiplayerLocalActiveClient::HandleSliderWasAdded(::GlobalNamespace::SliderData* sliderData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData sliderSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleSliderWasAdded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(sliderSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, sliderSpawnData, rotation);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleNoteWasMissed
void GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleNoteWasCut
void GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleComboDidChange
void GlobalNamespace::MultiplayerLocalActiveClient::HandleComboDidChange(int combo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleComboDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(combo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, combo);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleMultiplierDidChange
void GlobalNamespace::MultiplayerLocalActiveClient::HandleMultiplierDidChange(int multiplier, float multiplierProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleMultiplierDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplierDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(multiplierProgress)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multiplier, multiplierProgress);
}
// Autogenerated method: MultiplayerLocalActiveClient.HandleScoreDidChange
void GlobalNamespace::MultiplayerLocalActiveClient::HandleScoreDidChange(int multipliedScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveClient::HandleScoreDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipliedScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multipliedScore, modifiedScore);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActiveLevelFailController
#include "GlobalNamespace/MultiplayerLocalActiveLevelFailController.hpp"
// Including type: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8
#include "GlobalNamespace/MultiplayerLocalActiveLevelFailController_-PlayerFailedCoroutine-d__8.hpp"
// Including type: LevelFailedTextEffect
#include "GlobalNamespace/LevelFailedTextEffect.hpp"
// Including type: IMultiplayerLevelEndActionsPublisher
#include "GlobalNamespace/IMultiplayerLevelEndActionsPublisher.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LevelFailedTextEffect _levelFailedTextEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelFailedTextEffect*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__levelFailedTextEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__levelFailedTextEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelFailedTextEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LevelFailedTextEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerLevelEndActionsPublisher _levelEndActionsPublisher
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__levelEndActionsPublisher() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__levelEndActionsPublisher");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelEndActionsPublisher"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsPublisher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnController*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController.Start
void GlobalNamespace::MultiplayerLocalActiveLevelFailController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController.OnDestroy
void GlobalNamespace::MultiplayerLocalActiveLevelFailController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController.PlayerFailedCoroutine
::System::Collections::IEnumerator* GlobalNamespace::MultiplayerLocalActiveLevelFailController::PlayerFailedCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::PlayerFailedCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerFailedCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController.HandlePlayerDidFinish
void GlobalNamespace::MultiplayerLocalActiveLevelFailController::HandlePlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::HandlePlayerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, levelCompletionResults);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8
#include "GlobalNamespace/MultiplayerLocalActiveLevelFailController_-PlayerFailedCoroutine-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerLocalActiveLevelFailController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActiveLevelFailController*& GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalActiveLevelFailController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8.MoveNext
bool GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActiveLevelFailController/<PlayerFailedCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActiveLevelFailController::$PlayerFailedCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerFacade
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade.hpp"
// Including type: MultiplayerLocalActivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade_Factory.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: IStartSeekSongController
#include "GlobalNamespace/IStartSeekSongController.hpp"
// Including type: MultiplayerLocalActivePlayerIntroAnimator
#include "GlobalNamespace/MultiplayerLocalActivePlayerIntroAnimator.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: BeatmapCallbacksUpdater
#include "GlobalNamespace/BeatmapCallbacksUpdater.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _activeOnlyGameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__activeOnlyGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__activeOnlyGameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeOnlyGameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _outroAnimator
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__outroAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroAnimator"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IStartSeekSongController _songController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IStartSeekSongController*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__songController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IStartSeekSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalActivePlayerIntroAnimator _introAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__introAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PrepareLevelCompletionResults _prepareLevelCompletionResults
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrepareLevelCompletionResults*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__prepareLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__prepareLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prepareLevelCompletionResults"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrepareLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksUpdater _beatmapCallbacksUpdater
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksUpdater*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__beatmapCallbacksUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn__beatmapCallbacksUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksUpdater"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerLevelCompletionResults> playerDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn_playerDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn_playerDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerLevelCompletionResults> playerNetworkDidFailedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn_playerNetworkDidFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::dyn_playerNetworkDidFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerNetworkDidFailedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.get_introAnimator
::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator* GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_introAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_introAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.get_outroAnimator
::UnityEngine::GameObject* GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_outroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.get_songController
::GlobalNamespace::IStartSeekSongController* GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_songController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IStartSeekSongController*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.get_currentLocalPlayerLevelCompletionResult
::GlobalNamespace::LevelCompletionResults* GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_currentLocalPlayerLevelCompletionResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::get_currentLocalPlayerLevelCompletionResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLocalPlayerLevelCompletionResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.add_playerDidFinishEvent
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::add_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::add_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.remove_playerDidFinishEvent
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::remove_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::remove_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.add_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::add_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::add_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.remove_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::remove_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::remove_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.ReportPlayerDidFinish
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::ReportPlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::ReportPlayerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.ReportPlayerNetworkDidFailed
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::ReportPlayerNetworkDidFailed(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::ReportPlayerNetworkDidFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.DisablePlayer
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::DisablePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::DisablePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisablePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.PauseSpawning
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::PauseSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::PauseSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.ResumeSpawning
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::ResumeSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::ResumeSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.__ForceStopSong
void GlobalNamespace::MultiplayerLocalActivePlayerFacade::__ForceStopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::__ForceStopSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ForceStopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerFacade.__GetActiveOnlyGameObjects
::ArrayW<::UnityEngine::GameObject*> GlobalNamespace::MultiplayerLocalActivePlayerFacade::__GetActiveOnlyGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerFacade::__GetActiveOnlyGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__GetActiveOnlyGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::GameObject*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade_Factory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerGameplayAnimator
#include "GlobalNamespace/MultiplayerLocalActivePlayerGameplayAnimator.hpp"
// Including type: CoreGameHUDController
#include "GlobalNamespace/CoreGameHUDController.hpp"
// Including type: MultiplayerPositionHUDController
#include "GlobalNamespace/MultiplayerPositionHUDController.hpp"
// Including type: IMultiplayerLevelEndActionsPublisher
#include "GlobalNamespace/IMultiplayerLevelEndActionsPublisher.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private CoreGameHUDController _coreGameHUDController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__coreGameHUDController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__coreGameHUDController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coreGameHUDController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CoreGameHUDController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerPositionHUDController _multiplayerPositionHUDController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerPositionHUDController*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__multiplayerPositionHUDController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__multiplayerPositionHUDController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPositionHUDController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerPositionHUDController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerLevelEndActionsPublisher _levelEndActionsPublisher
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__levelEndActionsPublisher() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__levelEndActionsPublisher");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelEndActionsPublisher"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsPublisher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.FloatTween _fadeOutHUDTween
[[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__fadeOutHUDTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__fadeOutHUDTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutHUDTween"))->offset;
  return *reinterpret_cast<::Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.InitializeIfNeeded
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::InitializeIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::InitializeIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.TransitionIntoFailedState
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::TransitionIntoFailedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::TransitionIntoFailedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionIntoFailedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.HandlePlayerDidFinish
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::HandlePlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::HandlePlayerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, levelCompletionResults);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.<InitializeIfNeeded>b__6_0
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::$InitializeIfNeeded$b__6_0(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::<InitializeIfNeeded>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitializeIfNeeded>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, f);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.OnDestroy
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.HandleStateChanged
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::HandleStateChanged(::GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::HandleStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayAnimator.AnimateNewLeaderSelected
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::AnimateNewLeaderSelected(bool isLeading) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::AnimateNewLeaderSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateNewLeaderSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeading)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeading);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerGameplayManager
#include "GlobalNamespace/MultiplayerLocalActivePlayerGameplayManager.hpp"
// Including type: MultiplayerLocalActivePlayerGameplayManager/InitData
#include "GlobalNamespace/MultiplayerLocalActivePlayerGameplayManager_InitData.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IMultiplayerLevelEndActionsListener
#include "GlobalNamespace/IMultiplayerLevelEndActionsListener.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: MultiplayerLocalActivePlayerInGameMenuController
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuController.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: MultiplayerLocalPlayerDisconnectHelper
#include "GlobalNamespace/MultiplayerLocalPlayerDisconnectHelper.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerLevelEndActionsListener _multiplayerLevelEndActions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerLevelEndActionsListener*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__multiplayerLevelEndActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__multiplayerLevelEndActions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerLevelEndActions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PrepareLevelCompletionResults _prepareLevelCompletionResults
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrepareLevelCompletionResults*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__prepareLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__prepareLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prepareLevelCompletionResults"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrepareLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameEnergyCounter _gameEnergyCounter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalActivePlayerInGameMenuController _inGameMenuController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__inGameMenuController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__inGameMenuController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inGameMenuController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _platformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__platformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__platformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_platformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalPlayerDisconnectHelper _disconnectHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__disconnectHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__disconnectHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disconnectHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalActivePlayerGameplayManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::InitData*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _levelFinishedOrFailed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__levelFinishedOrFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::dyn__levelFinishedOrFailed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_levelFinishedOrFailed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.Start
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.OnDisable
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.PerformPlayerFail
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::PerformPlayerFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::PerformPlayerFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformPlayerFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.PerformPlayerGivenUp
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::PerformPlayerGivenUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::PerformPlayerGivenUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformPlayerGivenUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInGameMenuControllerDidGiveUp
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerDidGiveUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerDidGiveUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInGameMenuControllerDidGiveUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInGameMenuControllerRequestsDisconnect
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerRequestsDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerRequestsDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInGameMenuControllerRequestsDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleSongDidFinish
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleHmdUnmounted
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleHmdUnmounted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleHmdUnmounted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHmdUnmounted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleVrFocusWasCapturedEvent
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleVrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleVrFocusWasCapturedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleVrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInputFocusCaptured
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInputFocusReleased
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.OnApplicationFocus
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerGameplayManager/InitData
#include "GlobalNamespace/MultiplayerLocalActivePlayerGameplayManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean failOn0Energy
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::InitData::dyn_failOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::InitData::dyn_failOn0Energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "failOn0Energy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerInstaller
#include "GlobalNamespace/MultiplayerLocalActivePlayerInstaller.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _sceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::MultiplayerLocalActivePlayerInstaller::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerInstaller::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActivePlayerInstaller.InstallBindings
void GlobalNamespace::MultiplayerLocalActivePlayerInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerIntroAnimator
#include "GlobalNamespace/MultiplayerLocalActivePlayerIntroAnimator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _introPlayableDirector
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::dyn__introPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::dyn__introPlayableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introPlayableDirector"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalActivePlayerIntroAnimator.SetBeforeIntroValues
void GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::SetBeforeIntroValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::SetBeforeIntroValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeforeIntroValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerIntroAnimator.SetAfterIntroValues
void GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::SetAfterIntroValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalActivePlayerIntroAnimator::SetAfterIntroValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAfterIntroValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMultiplayerLevelEndActionsListener
#include "GlobalNamespace/IMultiplayerLevelEndActionsListener.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerLevelEndActionsListener.ReportPlayerDidFinish
void GlobalNamespace::IMultiplayerLevelEndActionsListener::ReportPlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsListener::ReportPlayerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: IMultiplayerLevelEndActionsListener.ReportPlayerNetworkDidFailed
void GlobalNamespace::IMultiplayerLevelEndActionsListener::ReportPlayerNetworkDidFailed(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsListener::ReportPlayerNetworkDidFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMultiplayerLevelEndActionsPublisher
#include "GlobalNamespace/IMultiplayerLevelEndActionsPublisher.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerLevelEndActionsPublisher.add_playerDidFinishEvent
void GlobalNamespace::IMultiplayerLevelEndActionsPublisher::add_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsPublisher::add_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerLevelEndActionsPublisher.remove_playerDidFinishEvent
void GlobalNamespace::IMultiplayerLevelEndActionsPublisher::remove_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsPublisher::remove_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerLevelEndActionsPublisher.add_playerNetworkDidFailedEvent
void GlobalNamespace::IMultiplayerLevelEndActionsPublisher::add_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsPublisher::add_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerLevelEndActionsPublisher.remove_playerNetworkDidFailedEvent
void GlobalNamespace::IMultiplayerLevelEndActionsPublisher::remove_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IMultiplayerLevelEndActionsPublisher::remove_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IStartSeekSongControllerProvider
#include "GlobalNamespace/IStartSeekSongControllerProvider.hpp"
// Including type: IStartSeekSongController
#include "GlobalNamespace/IStartSeekSongController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IStartSeekSongControllerProvider.get_songController
::GlobalNamespace::IStartSeekSongController* GlobalNamespace::IStartSeekSongControllerProvider::get_songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IStartSeekSongControllerProvider::get_songController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IStartSeekSongController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactiveClient
#include "GlobalNamespace/MultiplayerLocalInactiveClient.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: INodePoseSyncStateManager
#include "GlobalNamespace/INodePoseSyncStateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::MultiplayerLocalInactiveClient::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactiveClient::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly INodePoseSyncStateManager _nodePoseSyncStateManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::INodePoseSyncStateManager*& GlobalNamespace::MultiplayerLocalInactiveClient::dyn__nodePoseSyncStateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactiveClient::dyn__nodePoseSyncStateManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodePoseSyncStateManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::INodePoseSyncStateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalInactiveClient.LateUpdate
void GlobalNamespace::MultiplayerLocalInactiveClient::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactiveClient::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerFacade
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade.hpp"
// Including type: MultiplayerLocalInactivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade_Factory.hpp"
// Including type: MultiplayerLocalInactivePlayerSongSyncController
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController.hpp"
// Including type: MultiplayerSpectatorController
#include "GlobalNamespace/MultiplayerSpectatorController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: MultiplayerLocalInactivePlayerOutroAnimator
#include "GlobalNamespace/MultiplayerLocalInactivePlayerOutroAnimator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: IStartSeekSongController
#include "GlobalNamespace/IStartSeekSongController.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalInactivePlayerSongSyncController _inactivePlayerSongSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__inactivePlayerSongSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__inactivePlayerSongSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inactivePlayerSongSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerSpectatorController _spectatorController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerSpectatorController*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__spectatorController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__spectatorController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectatorController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerSpectatorController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _introAnimator
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__introAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introAnimator"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalInactivePlayerOutroAnimator _outroAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn__outroAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerLevelCompletionResults> playerDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn_playerDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn_playerDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerLevelCompletionResults> playerNetworkDidFailedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn_playerNetworkDidFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::dyn_playerNetworkDidFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerNetworkDidFailedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.get_songController
::GlobalNamespace::IStartSeekSongController* GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_songController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IStartSeekSongController*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.get_spectatorController
::GlobalNamespace::MultiplayerSpectatorController* GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_spectatorController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_spectatorController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spectatorController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerSpectatorController*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.get_introAnimator
::UnityEngine::GameObject* GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_introAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_introAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_introAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.get_introPlayableDirector
::UnityEngine::Playables::PlayableDirector* GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_introPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_introPlayableDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_introPlayableDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableDirector*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.get_outroAnimator
::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator* GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_outroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::get_outroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.add_playerDidFinishEvent
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::add_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::add_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.remove_playerDidFinishEvent
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::remove_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::remove_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.add_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::add_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::add_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.remove_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::remove_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::remove_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.ReportPlayerDidFinish
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::ReportPlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::ReportPlayerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: MultiplayerLocalInactivePlayerFacade.ReportPlayerNetworkDidFailed
void GlobalNamespace::MultiplayerLocalInactivePlayerFacade::ReportPlayerNetworkDidFailed(::GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::ReportPlayerNetworkDidFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, results);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade_Factory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerInstaller
#include "GlobalNamespace/MultiplayerLocalInactivePlayerInstaller.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: PerceivedLoudnessPerLevelModel
#include "GlobalNamespace/PerceivedLoudnessPerLevelModel.hpp"
// Including type: RelativeSfxVolumePerLevelModel
#include "GlobalNamespace/RelativeSfxVolumePerLevelModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private AudioManagerSO _audioManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioManagerSO*& GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__audioManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__audioManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioManagerSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _sceneSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PerceivedLoudnessPerLevelModel _beatmapLoudnessModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PerceivedLoudnessPerLevelModel*& GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__beatmapLoudnessModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__beatmapLoudnessModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLoudnessModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PerceivedLoudnessPerLevelModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly RelativeSfxVolumePerLevelModel _relativeSfxVolumePerLevelModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RelativeSfxVolumePerLevelModel*& GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__relativeSfxVolumePerLevelModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::dyn__relativeSfxVolumePerLevelModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_relativeSfxVolumePerLevelModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RelativeSfxVolumePerLevelModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInstaller.InstallBindings
void GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerOutroAnimator
#include "GlobalNamespace/MultiplayerLocalInactivePlayerOutroAnimator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _outroPlayableDirector
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::dyn__outroPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::dyn__outroPlayableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroPlayableDirector"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalInactivePlayerOutroAnimator.Start
void GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerOutroAnimator::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerSongSyncController
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController.hpp"
// Including type: MultiplayerLocalInactivePlayerSongSyncController/InitData
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController_InitData.hpp"
// Including type: CrossFadeAudioSource
#include "GlobalNamespace/CrossFadeAudioSource.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kReSyncThreshold
float GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::_get_kReSyncThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::_get_kReSyncThreshold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerLocalInactivePlayerSongSyncController", "kReSyncThreshold"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kReSyncThreshold
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::_set_kReSyncThreshold(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::_set_kReSyncThreshold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLocalInactivePlayerSongSyncController", "kReSyncThreshold", value));
}
// Autogenerated instance field getter
// Get instance field: private CrossFadeAudioSource _audioSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CrossFadeAudioSource*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CrossFadeAudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FloatSO _audioLatency
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSO*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioLatency"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalInactivePlayerSongSyncController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__timeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__startSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__startSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _songTimeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__songTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _songTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__songTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__songTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _audioStarted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__audioStarted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioStarted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _currentObservableIsFailed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__currentObservableIsFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__currentObservableIsFailed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentObservableIsFailed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerObservable _observable
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerObservable*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__observable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_observable"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerObservable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastLatencyOffsetTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__lastLatencyOffsetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::dyn__lastLatencyOffsetTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastLatencyOffsetTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.get_waitUntilIsReadyToStartTheSong
::UnityEngine::WaitUntil* GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::get_waitUntilIsReadyToStartTheSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::get_waitUntilIsReadyToStartTheSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilIsReadyToStartTheSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.get_isAudioLoaded
bool GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::get_isAudioLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::get_isAudioLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAudioLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.Awake
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.Start
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.OnDestroy
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.Update
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.StartSong
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::StartSong(float offsetTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::StartSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offsetTime);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.FollowOffsetSyncTime
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::FollowOffsetSyncTime(::GlobalNamespace::IMultiplayerObservable* observable, bool crossFade, bool forceUpdate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::FollowOffsetSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FollowOffsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(observable), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(forceUpdate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, observable, crossFade, forceUpdate);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.UpdateOffsetSyncTime
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::UpdateOffsetSyncTime(float offsetSyncTime, bool crossFade, bool forceUpdate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::UpdateOffsetSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOffsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetSyncTime), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(forceUpdate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offsetSyncTime, crossFade, forceUpdate);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.SeekTo
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::SeekTo(float offsetTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::SeekTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SeekTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offsetTime);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.SeekTo
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::SeekTo(float offsetTime, bool crossFade, float toVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::SeekTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SeekTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetTime), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(toVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offsetTime, crossFade, toVolume);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.HandleVrFocusWasReleased
void GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::HandleVrFocusWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::HandleVrFocusWasReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleVrFocusWasReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerSongSyncController.<get_waitUntilIsReadyToStartTheSong>b__7_0
bool GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::$get_waitUntilIsReadyToStartTheSong$b__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::<get_waitUntilIsReadyToStartTheSong>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_waitUntilIsReadyToStartTheSong>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerSongSyncController/InitData
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController_InitData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.AudioClip audioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startSongTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_startSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_startSongTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startSongTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single songTimeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_songTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single timeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController::InitData::dyn_timeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalPlayerDisconnectHelper
#include "GlobalNamespace/MultiplayerLocalPlayerDisconnectHelper.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: IMultiplayerLevelEndActionsListener
#include "GlobalNamespace/IMultiplayerLevelEndActionsListener.hpp"
// Including type: LobbyPlayerPermissionsModel
#include "GlobalNamespace/LobbyPlayerPermissionsModel.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectLabel
::StringW GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_get_kDisconnectLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_get_kDisconnectLabel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "MultiplayerLocalPlayerDisconnectHelper", "kDisconnectLabel"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectLabel
void GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_set_kDisconnectLabel(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_set_kDisconnectLabel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLocalPlayerDisconnectHelper", "kDisconnectLabel", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kEndGameLabel
::StringW GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_get_kEndGameLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_get_kEndGameLabel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "MultiplayerLocalPlayerDisconnectHelper", "kEndGameLabel"));
}
// Autogenerated static field setter
// Set static field: static private System.String kEndGameLabel
void GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_set_kEndGameLabel(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::_set_kEndGameLabel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLocalPlayerDisconnectHelper", "kEndGameLabel", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly IGameplayRpcManager _gameplayRpcManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__gameplayRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__gameplayRpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayRpcManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerLevelEndActionsListener _multiplayerLevelEndActions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerLevelEndActionsListener*& GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__multiplayerLevelEndActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__multiplayerLevelEndActions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerLevelEndActions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LobbyPlayerPermissionsModel _lobbyPlayerPermissionsModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LobbyPlayerPermissionsModel*& GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__lobbyPlayerPermissionsModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::dyn__lobbyPlayerPermissionsModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lobbyPlayerPermissionsModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LobbyPlayerPermissionsModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLocalPlayerDisconnectHelper.Disconnect
void GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::Disconnect(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState playerLevelEndState, ::GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerLevelEndState), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playerLevelEndState, levelCompletionResults);
}
// Autogenerated method: MultiplayerLocalPlayerDisconnectHelper.ResolveDisconnectButtonString
::StringW GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::ResolveDisconnectButtonString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerDisconnectHelper::ResolveDisconnectButtonString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveDisconnectButtonString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PS4LocalPlayerAudioSyncHelper
#include "GlobalNamespace/PS4LocalPlayerAudioSyncHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeterministicHitChanceScoreCalculator
#include "GlobalNamespace/DeterministicHitChanceScoreCalculator.hpp"
// Including type: MockNoteData
#include "GlobalNamespace/MockNoteData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kScorePerHit
int GlobalNamespace::DeterministicHitChanceScoreCalculator::_get_kScorePerHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeterministicHitChanceScoreCalculator::_get_kScorePerHit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DeterministicHitChanceScoreCalculator", "kScorePerHit"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kScorePerHit
void GlobalNamespace::DeterministicHitChanceScoreCalculator::_set_kScorePerHit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeterministicHitChanceScoreCalculator::_set_kScorePerHit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DeterministicHitChanceScoreCalculator", "kScorePerHit", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _hitChance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DeterministicHitChanceScoreCalculator::dyn__hitChance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeterministicHitChanceScoreCalculator::dyn__hitChance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hitChance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _chanceAggregated
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DeterministicHitChanceScoreCalculator::dyn__chanceAggregated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeterministicHitChanceScoreCalculator::dyn__chanceAggregated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chanceAggregated"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DeterministicHitChanceScoreCalculator.GetScoreForNote
int GlobalNamespace::DeterministicHitChanceScoreCalculator::GetScoreForNote(::GlobalNamespace::MockNoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DeterministicHitChanceScoreCalculator::GetScoreForNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreForNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, noteData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapDataConverter
#include "GlobalNamespace/MockBeatmapDataConverter.hpp"
// Including type: MockBeatmapDataConverter/<>c
#include "GlobalNamespace/MockBeatmapDataConverter_--c.hpp"
// Including type: MockBeatmapData
#include "GlobalNamespace/MockBeatmapData.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: MockNoteData
#include "GlobalNamespace/MockNoteData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: MockObstacleData
#include "GlobalNamespace/MockObstacleData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapDataConverter.ToMockBeatmapData
::GlobalNamespace::MockBeatmapData* GlobalNamespace::MockBeatmapDataConverter::ToMockBeatmapData(::GlobalNamespace::IReadonlyBeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::ToMockBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapDataConverter", "ToMockBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockBeatmapData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beatmapData);
}
// Autogenerated method: MockBeatmapDataConverter.ToMockNoteData
::GlobalNamespace::MockNoteData* GlobalNamespace::MockBeatmapDataConverter::ToMockNoteData(::GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::ToMockNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapDataConverter", "ToMockNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockNoteData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noteData);
}
// Autogenerated method: MockBeatmapDataConverter.ToMockObstacleData
::GlobalNamespace::MockObstacleData* GlobalNamespace::MockBeatmapDataConverter::ToMockObstacleData(::GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::ToMockObstacleData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapDataConverter", "ToMockObstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockObstacleData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obstacleData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapDataConverter/<>c
#include "GlobalNamespace/MockBeatmapDataConverter_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: MockNoteData
#include "GlobalNamespace/MockNoteData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: MockObstacleData
#include "GlobalNamespace/MockObstacleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MockBeatmapDataConverter/<>c <>9
::GlobalNamespace::MockBeatmapDataConverter::$$c* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::MockBeatmapDataConverter::$$c*>("", "MockBeatmapDataConverter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MockBeatmapDataConverter/<>c <>9
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9(::GlobalNamespace::MockBeatmapDataConverter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_0
::System::Func_2<::GlobalNamespace::NoteData*, bool>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, bool>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_0
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_0(::System::Func_2<::GlobalNamespace::NoteData*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_1
::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_1
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_1(::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_2
::System::Func_2<::GlobalNamespace::NoteData*, bool>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, bool>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_2
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_2(::System::Func_2<::GlobalNamespace::NoteData*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_3
::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_3
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_3(::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_3", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_4
::System::Func_2<::GlobalNamespace::NoteData*, bool>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, bool>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_4")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_4
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_4(::System::Func_2<::GlobalNamespace::NoteData*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_4", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_5
::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_5")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_5
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_5(::System::Func_2<::GlobalNamespace::NoteData*, ::GlobalNamespace::MockNoteData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_5", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ObstacleData,MockObstacleData> <>9__0_6
::System::Func_2<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::MockObstacleData*>* GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_get_$$9__0_6");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::MockObstacleData*>*>("", "MockBeatmapDataConverter/<>c", "<>9__0_6")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ObstacleData,MockObstacleData> <>9__0_6
void GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_6(::System::Func_2<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::MockObstacleData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::_set_$$9__0_6");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapDataConverter/<>c", "<>9__0_6", value)));
}
// Autogenerated method: MockBeatmapDataConverter/<>c..cctor
void GlobalNamespace::MockBeatmapDataConverter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapDataConverter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_0
bool GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_0(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_1
::GlobalNamespace::MockNoteData* GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_1(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockNoteData*, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_2
bool GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_2(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_3
::GlobalNamespace::MockNoteData* GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_3(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockNoteData*, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_4
bool GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_4(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_5
::GlobalNamespace::MockNoteData* GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_5(::GlobalNamespace::NoteData* nd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nd)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockNoteData*, false>(this, ___internal__method, nd);
}
// Autogenerated method: MockBeatmapDataConverter/<>c.<ToMockBeatmapData>b__0_6
::GlobalNamespace::MockObstacleData* GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_6(::GlobalNamespace::ObstacleData* od) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapDataConverter::$$c::<ToMockBeatmapData>b__0_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMockBeatmapData>b__0_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(od)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MockObstacleData*, false>(this, ___internal__method, od);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader
#include "GlobalNamespace/MockBeatmapLoader.hpp"
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0.hpp"
// Including type: MockBeatmapLoader/<>c
#include "GlobalNamespace/MockBeatmapLoader_--c.hpp"
// Including type: MockBeatmapLoader/<GetBeatmapData>d__2
#include "GlobalNamespace/MockBeatmapLoader_-GetBeatmapData-d__2.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MockBeatmapData
#include "GlobalNamespace/MockBeatmapData.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapLevelsModel _beatmapLevelsModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsModel*& GlobalNamespace::MockBeatmapLoader::dyn__beatmapLevelsModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::dyn__beatmapLevelsModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapLevelsModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelsModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockBeatmapLoader.GetBeatmapData
::System::Threading::Tasks::Task_1<::GlobalNamespace::MockBeatmapData*>* GlobalNamespace::MockBeatmapLoader::GetBeatmapData(::GlobalNamespace::BeatmapIdentifierNetSerializable* beatmap, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::GetBeatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmap), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::MockBeatmapData*>*, false>(this, ___internal__method, beatmap, cancellationToken);
}
// Autogenerated method: MockBeatmapLoader.Dispose
void GlobalNamespace::MockBeatmapLoader::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0.hpp"
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0/<<GetBeatmapData>b__3>d
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0_--GetBeatmapData-b__3-d.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BeatmapIdentifierNetSerializable beatmap
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapIdentifierNetSerializable*& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_beatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_beatmap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmap"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapIdentifierNetSerializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IReadonlyBeatmapData beatmapData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IReadonlyBeatmapData*& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmapData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IReadonlyBeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public IDifficultyBeatmap difficultyBeatmap
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDifficultyBeatmap*& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_difficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::dyn_difficultyBeatmap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "difficultyBeatmap"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0.<GetBeatmapData>b__0
bool GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$GetBeatmapData$b__0(::GlobalNamespace::IDifficultyBeatmapSet* bds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::<GetBeatmapData>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bds);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0.<GetBeatmapData>b__2
bool GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$GetBeatmapData$b__2(::GlobalNamespace::IDifficultyBeatmap* dbm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::<GetBeatmapData>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dbm)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dbm);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0.<GetBeatmapData>b__3
::System::Threading::Tasks::Task* GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$GetBeatmapData$b__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::<GetBeatmapData>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0/<<GetBeatmapData>b__3>d
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0_--GetBeatmapData-b__3-d.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MockBeatmapLoader/<>c__DisplayClass2_0 <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0*& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<IReadonlyBeatmapData> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>& GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::IReadonlyBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0/<<GetBeatmapData>b__3>d.MoveNext
void GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0/<<GetBeatmapData>b__3>d.SetStateMachine
void GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$$GetBeatmapData$b__3$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<>c
#include "GlobalNamespace/MockBeatmapLoader_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MockBeatmapLoader/<>c <>9
::GlobalNamespace::MockBeatmapLoader::$$c* GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::MockBeatmapLoader::$$c*>("", "MockBeatmapLoader/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MockBeatmapLoader/<>c <>9
void GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9(::GlobalNamespace::MockBeatmapLoader::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapLoader/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IDifficultyBeatmapSet,System.Collections.Generic.IEnumerable`1<IDifficultyBeatmap>> <>9__2_1
::System::Func_2<::GlobalNamespace::IDifficultyBeatmapSet*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IDifficultyBeatmap*>*>* GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::IDifficultyBeatmapSet*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IDifficultyBeatmap*>*>*>("", "MockBeatmapLoader/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IDifficultyBeatmapSet,System.Collections.Generic.IEnumerable`1<IDifficultyBeatmap>> <>9__2_1
void GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9__2_1(::System::Func_2<::GlobalNamespace::IDifficultyBeatmapSet*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IDifficultyBeatmap*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapLoader/<>c", "<>9__2_1", value)));
}
// Autogenerated method: MockBeatmapLoader/<>c..cctor
void GlobalNamespace::MockBeatmapLoader::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapLoader/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MockBeatmapLoader/<>c.<GetBeatmapData>b__2_1
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::MockBeatmapLoader::$$c::$GetBeatmapData$b__2_1(::GlobalNamespace::IDifficultyBeatmapSet* bds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$$c::<GetBeatmapData>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bds)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method, bds);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<GetBeatmapData>d__2
#include "GlobalNamespace/MockBeatmapLoader_-GetBeatmapData-d__2.hpp"
// Including type: MockBeatmapData
#include "GlobalNamespace/MockBeatmapData.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<MockBeatmapData> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::MockBeatmapData*>& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::GlobalNamespace::MockBeatmapData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BeatmapIdentifierNetSerializable beatmap
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapIdentifierNetSerializable*& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_beatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_beatmap");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beatmap"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapIdentifierNetSerializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MockBeatmapLoader <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MockBeatmapLoader*& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MockBeatmapLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MockBeatmapLoader/<>c__DisplayClass2_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0*& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<BeatmapLevelsModel/GetBeatmapLevelResult> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>& GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockBeatmapLoader/<GetBeatmapData>d__2.MoveNext
void GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapLoader/<GetBeatmapData>d__2.SetStateMachine
void GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapProvider
#include "GlobalNamespace/MockBeatmapProvider.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapProvider.VerifyBeatmapForSelectionMask
bool GlobalNamespace::MockBeatmapProvider::VerifyBeatmapForSelectionMask(::GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapProvider::VerifyBeatmapForSelectionMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyBeatmapForSelectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(selectionMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, beatmapId, selectionMask);
}
// Autogenerated method: MockBeatmapProvider.SelectBeatmapFromSuggestionsWithSelectionMaskAndOwnedSongPacks
::GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::MockBeatmapProvider::SelectBeatmapFromSuggestionsWithSelectionMaskAndOwnedSongPacks(int playerCount, ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapIdentifierNetSerializable*>* suggestedBeatmaps, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::SongPackMask>* ownedSongPacks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapProvider::SelectBeatmapFromSuggestionsWithSelectionMaskAndOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBeatmapFromSuggestionsWithSelectionMaskAndOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerCount), ::il2cpp_utils::ExtractType(suggestedBeatmaps), ::il2cpp_utils::ExtractType(selectionMask), ::il2cpp_utils::ExtractType(ownedSongPacks)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(this, ___internal__method, playerCount, suggestedBeatmaps, selectionMask, ownedSongPacks);
}
// Autogenerated method: MockBeatmapProvider.Dispose
void GlobalNamespace::MockBeatmapProvider::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockBeatmapProvider::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMultiplayerStatusModel
#include "GlobalNamespace/MockMultiplayerStatusModel.hpp"
// Including type: MultiplayerStatusData
#include "GlobalNamespace/MultiplayerStatusData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerStatusData _multiplayerStatusData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerStatusData*& GlobalNamespace::MockMultiplayerStatusModel::dyn__multiplayerStatusData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockMultiplayerStatusModel::dyn__multiplayerStatusData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerStatusData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerStatusData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockMultiplayerStatusModel.GetMultiplayerStatusAsync
::System::Threading::Tasks::Task_1<::GlobalNamespace::MultiplayerStatusData*>* GlobalNamespace::MockMultiplayerStatusModel::GetMultiplayerStatusAsync(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockMultiplayerStatusModel::GetMultiplayerStatusAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplayerStatusAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::GlobalNamespace::MultiplayerStatusData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
// Including type: MockPlayerFiniteStateMachine
#include "GlobalNamespace/MockPlayerFiniteStateMachine.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean <isMe>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isMe$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isMe$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isMe>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isConnected>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isConnected$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isConnected$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isConnected>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerAvatarData& GlobalNamespace::MockPlayer::dyn_$multiplayerAvatarData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$multiplayerAvatarData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerAvatarData>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isConnectionOwner>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isConnectionOwner$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isConnectionOwner$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isConnectionOwner>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isKicked>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isKicked$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isKicked$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isKicked>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <currentPartySize>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MockPlayer::dyn_$currentPartySize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$currentPartySize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<currentPartySize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSelectionMask <selectionMask>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& GlobalNamespace::MockPlayer::dyn_$selectionMask$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$selectionMask$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<selectionMask>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapLevelSelectionMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameplayServerConfiguration <configuration>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& GlobalNamespace::MockPlayer::dyn_$configuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$configuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<configuration>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameplayServerConfiguration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isMyPartyOwner>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isMyPartyOwner$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isMyPartyOwner$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isMyPartyOwner>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <requiresPassword>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$requiresPassword$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$requiresPassword$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<requiresPassword>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isWaitingOnJoin>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isWaitingOnJoin$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isWaitingOnJoin$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isWaitingOnJoin>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <canInvite>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$canInvite$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$canInvite$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canInvite>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isWaitingOnInvite>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$isWaitingOnInvite$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$isWaitingOnInvite$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isWaitingOnInvite>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <canKick>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$canKick$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$canKick$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canKick>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <canLeave>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$canLeave$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$canLeave$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canLeave>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <canBlock>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$canBlock$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$canBlock$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canBlock>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <canUnblock>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn_$canUnblock$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn_$canUnblock$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canUnblock>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isReady
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MockPlayer::dyn__isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn__isReady");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isReady"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.String> _playerState
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::MockPlayer::dyn__playerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn__playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerState"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MockPlayerSettings _settings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayerSettings*& GlobalNamespace::MockPlayer::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MockPlayerSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MockPlayerFiniteStateMachine _fsm
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayerFiniteStateMachine*& GlobalNamespace::MockPlayer::dyn__fsm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn__fsm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fsm"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MockPlayerFiniteStateMachine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IGameplayRpcManager _gameplayRpcManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& GlobalNamespace::MockPlayer::dyn__gameplayRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::dyn__gameplayRpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayRpcManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MockPlayer.get_isReady
bool GlobalNamespace::MockPlayer::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isReady
void GlobalNamespace::MockPlayer::set_isReady(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isMe
bool GlobalNamespace::MockPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_userId
::StringW GlobalNamespace::MockPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_userName
::StringW GlobalNamespace::MockPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_sortIndex
int GlobalNamespace::MockPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_autoConnect
bool GlobalNamespace::MockPlayer::get_autoConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_autoConnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoConnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_inactiveByDefault
bool GlobalNamespace::MockPlayer::get_inactiveByDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_inactiveByDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inactiveByDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_isConnected
bool GlobalNamespace::MockPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isConnected
void GlobalNamespace::MockPlayer::set_isConnected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_multiplayerAvatarData
::GlobalNamespace::MultiplayerAvatarData GlobalNamespace::MockPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_multiplayerAvatarData
void GlobalNamespace::MockPlayer::set_multiplayerAvatarData(::GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_multiplayerAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isConnectionOwner
bool GlobalNamespace::MockPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isConnectionOwner
void GlobalNamespace::MockPlayer::set_isConnectionOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_disconnectedReason
::GlobalNamespace::DisconnectedReason GlobalNamespace::MockPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_offsetSyncTime
float GlobalNamespace::MockPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_hasValidLatency
bool GlobalNamespace::MockPlayer::get_hasValidLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_hasValidLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasValidLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_currentLatency
float GlobalNamespace::MockPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_isKicked
bool GlobalNamespace::MockPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isKicked
void GlobalNamespace::MockPlayer::set_isKicked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isKicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_currentPartySize
int GlobalNamespace::MockPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_currentPartySize
void GlobalNamespace::MockPlayer::set_currentPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_currentPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_selectionMask
::GlobalNamespace::BeatmapLevelSelectionMask GlobalNamespace::MockPlayer::get_selectionMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_selectionMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeatmapLevelSelectionMask, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_selectionMask
void GlobalNamespace::MockPlayer::set_selectionMask(::GlobalNamespace::BeatmapLevelSelectionMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_selectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_configuration
::GlobalNamespace::GameplayServerConfiguration GlobalNamespace::MockPlayer::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_configuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_configuration
void GlobalNamespace::MockPlayer::set_configuration(::GlobalNamespace::GameplayServerConfiguration value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isMyPartyOwner
bool GlobalNamespace::MockPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isMyPartyOwner
void GlobalNamespace::MockPlayer::set_isMyPartyOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isMyPartyOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_connectedPlayer
::GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockPlayer::get_connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_connectedPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_canJoin
bool GlobalNamespace::MockPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_requiresPassword
bool GlobalNamespace::MockPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_requiresPassword
void GlobalNamespace::MockPlayer::set_requiresPassword(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_requiresPassword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isWaitingOnJoin
bool GlobalNamespace::MockPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isWaitingOnJoin
void GlobalNamespace::MockPlayer::set_isWaitingOnJoin(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isWaitingOnJoin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canInvite
bool GlobalNamespace::MockPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canInvite
void GlobalNamespace::MockPlayer::set_canInvite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_canInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isWaitingOnInvite
bool GlobalNamespace::MockPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isWaitingOnInvite
void GlobalNamespace::MockPlayer::set_isWaitingOnInvite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isWaitingOnInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canKick
bool GlobalNamespace::MockPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canKick
void GlobalNamespace::MockPlayer::set_canKick(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_canKick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canLeave
bool GlobalNamespace::MockPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canLeave
void GlobalNamespace::MockPlayer::set_canLeave(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_canLeave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canBlock
bool GlobalNamespace::MockPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canBlock
void GlobalNamespace::MockPlayer::set_canBlock(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_canBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canUnblock
bool GlobalNamespace::MockPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canUnblock
void GlobalNamespace::MockPlayer::set_canUnblock(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_canUnblock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isPlayer
bool GlobalNamespace::MockPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isPlayer
void GlobalNamespace::MockPlayer::set_isPlayer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isDedicatedServer
bool GlobalNamespace::MockPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isDedicatedServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isDedicatedServer
void GlobalNamespace::MockPlayer::set_isDedicatedServer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isDedicatedServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_wantsToPlayNextLevel
bool GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_wantsToPlayNextLevel
void GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_wasActiveAtLevelStart
bool GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_wasActiveAtLevelStart
void GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isActive
bool GlobalNamespace::MockPlayer::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isActive
void GlobalNamespace::MockPlayer::set_isActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_finishedLevel
bool GlobalNamespace::MockPlayer::get_finishedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_finishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_finishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_finishedLevel
void GlobalNamespace::MockPlayer::set_finishedLevel(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_finishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_finishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isTerminating
bool GlobalNamespace::MockPlayer::get_isTerminating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::get_isTerminating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isTerminating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isTerminating
void GlobalNamespace::MockPlayer::set_isTerminating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::set_isTerminating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isTerminating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.SetState
bool GlobalNamespace::MockPlayer::SetState(::StringW state, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, state, value);
}
// Autogenerated method: MockPlayer.HasState
bool GlobalNamespace::MockPlayer::HasState(::StringW state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: MockPlayer.Connect
void GlobalNamespace::MockPlayer::Connect(::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, ::GlobalNamespace::AvatarPartsModel* avatarPartsModel, ::GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, ::GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Connect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerSessionManager), ::il2cpp_utils::ExtractType(avatarPartsModel), ::il2cpp_utils::ExtractType(beatmapLevelsModel), ::il2cpp_utils::ExtractType(nodePoseSyncStateManager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multiplayerSessionManager, avatarPartsModel, beatmapLevelsModel, nodePoseSyncStateManager);
}
// Autogenerated method: MockPlayer.Disconnect
void GlobalNamespace::MockPlayer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Unblock
void GlobalNamespace::MockPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SendJoinResponse
void GlobalNamespace::MockPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: MockPlayer.SendInviteResponse
void GlobalNamespace::MockPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: MockPlayer.Block
void GlobalNamespace::MockPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Leave
void GlobalNamespace::MockPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Kick
void GlobalNamespace::MockPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Invite
void GlobalNamespace::MockPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join(::StringW password) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SimulateFail
void GlobalNamespace::MockPlayer::SimulateFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SimulateFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SimulateFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SimulateGiveUp
void GlobalNamespace::MockPlayer::SimulateGiveUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SimulateGiveUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SimulateGiveUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SimulateReturnToMainMenu
void GlobalNamespace::MockPlayer::SimulateReturnToMainMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::SimulateReturnToMainMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SimulateReturnToMainMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
