// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetChildrenLightId
#include "GlobalNamespace/SetChildrenLightId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SetChildrenLightId::dyn__ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetChildrenLightId::dyn__ID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteLightWithId
#include "GlobalNamespace/SpriteLightWithId.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::SpriteLightWithId::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hideIfAlphaOutOfRange
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__hideIfAlphaOutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideIfAlphaOutOfRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideIfAlphaOutOfRange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMin
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpriteLightWithId.get_color
::UnityEngine::Color GlobalNamespace::SpriteLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SpriteLightWithId.ColorWasSet
void GlobalNamespace::SpriteLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TubeBloomPrePassLightWithId
#include "GlobalNamespace/TubeBloomPrePassLightWithId.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _tubeBloomPrePassLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__tubeBloomPrePassLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__tubeBloomPrePassLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tubeBloomPrePassLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TubeBloomPrePassLightWithId.get_color
::UnityEngine::Color GlobalNamespace::TubeBloomPrePassLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLightWithId.ColorWasSet
void GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityLightWithId
#include "GlobalNamespace/UnityLightWithId.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Light _light
[[deprecated("Use field access instead!")]] ::UnityEngine::Light*& GlobalNamespace::UnityLightWithId::dyn__light() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__light");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_light"))->offset;
  return *reinterpret_cast<::UnityEngine::Light**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UnityLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UnityLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityLightWithId.get_color
::UnityEngine::Color GlobalNamespace::UnityLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: UnityLightWithId.ColorWasSet
void GlobalNamespace::UnityLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineLight
#include "GlobalNamespace/LineLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::_get__lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::_get__lineLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>*>("", "LineLight", "_lineLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
void GlobalNamespace::LineLight::_set__lineLights(::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::_set__lineLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLight", "_lineLights", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _p0
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LineLight::dyn__p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__p0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p0"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _p1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LineLight::dyn__p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__p1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LineLight::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LineLight.get_p0
::UnityEngine::Vector3 GlobalNamespace::LineLight::get_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_p0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_p1
::UnityEngine::Vector3 GlobalNamespace::LineLight::get_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_p1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_color
::UnityEngine::Color GlobalNamespace::LineLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_lineLights
::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::get_lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_lineLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", "get_lineLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLight..cctor
void GlobalNamespace::LineLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLight.OnEnable
void GlobalNamespace::LineLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDisable
void GlobalNamespace::LineLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDrawGizmos
void GlobalNamespace::LineLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineLightManager
#include "GlobalNamespace/LineLightManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfLights
int GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "kMaxNumberOfLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfLights
void GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "kMaxNumberOfLights", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C81FC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _activeLineLightsCountID
int GlobalNamespace::LineLightManager::_get__activeLineLightsCountID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__activeLineLightsCountID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_activeLineLightsCountID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _activeLineLightsCountID
void GlobalNamespace::LineLightManager::_set__activeLineLightsCountID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__activeLineLightsCountID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_activeLineLightsCountID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C820C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightPointsID
int GlobalNamespace::LineLightManager::_get__lineLightPointsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightPointsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightPointsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightPointsID
void GlobalNamespace::LineLightManager::_set__lineLightPointsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightPointsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightPointsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C821C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirsID
int GlobalNamespace::LineLightManager::_get__lineLightDirsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightDirsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirsID
void GlobalNamespace::LineLightManager::_set__lineLightDirsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightDirsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C822C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirLengthsID
int GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirLengthsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirLengthsID
void GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirLengthsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C823C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightColorsID
int GlobalNamespace::LineLightManager::_get__lineLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightColorsID
void GlobalNamespace::LineLightManager::_set__lineLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightColorsID", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _points
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_points"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _dirs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__dirs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__dirs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dirs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single[] _dirLengths
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::LineLightManager::dyn__dirLengths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__dirLengths");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dirLengths"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LineLightManager..cctor
void GlobalNamespace::LineLightManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLightManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLightManager.Update
void GlobalNamespace::LineLightManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockAnimator
#include "GlobalNamespace/MaterialPropertyBlockAnimator.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _property
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_property"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockAnimator::dyn_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn_propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockAnimator.get_materialPropertyBlockController
::GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController(::GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Awake
void GlobalNamespace::MaterialPropertyBlockAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Update
void GlobalNamespace::MaterialPropertyBlockAnimator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.LazyInit
void GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.RefreshProperty
void GlobalNamespace::MaterialPropertyBlockAnimator::RefreshProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::RefreshProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockColorAnimator
#include "GlobalNamespace/MaterialPropertyBlockColorAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialPropertyBlockColorAnimator::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.get_color
::UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.set_color
void GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useTestColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__useTestColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__useTestColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useTestColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _testColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__testColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__testColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_testColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _property
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_property"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _inverseAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__inverseAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__inverseAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyWithAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__multiplyWithAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__multiplyWithAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyWithAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.get_color
::UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorSetter::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.get_materialPropertyBlockController
::GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController(::GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.Awake
void GlobalNamespace::MaterialPropertyBlockColorSetter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.InitIfNeeded
void GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.SetColor
void GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.OnValidate
void GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] _renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::MaterialPropertyBlockController::dyn__renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::MaterialPropertyBlockController::dyn__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__materialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> _numberOfMaterialsInRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::MaterialPropertyBlockController::dyn__numberOfMaterialsInRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__numberOfMaterialsInRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfMaterialsInRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockController::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockController.get_renderers
::ArrayW<::UnityEngine::Renderer*> GlobalNamespace::MaterialPropertyBlockController::get_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::get_renderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Renderer*>, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.get_materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::MaterialPropertyBlock*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.ApplyChanges
void GlobalNamespace::MaterialPropertyBlockController::ApplyChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::ApplyChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockFloatAnimator
#include "GlobalNamespace/MaterialPropertyBlockFloatAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _value
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatAnimator::dyn__value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatAnimator::dyn__value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockFloatAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockFloatCurve
#include "GlobalNamespace/MaterialPropertyBlockFloatCurve.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _curve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _valueMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__valueMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__valueMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valueMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__speedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__speedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockFloatCurve.SetProperty
void GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockPositionUpdater
#include "GlobalNamespace/MaterialPropertyBlockPositionUpdater.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MaterialPropertyBlockPositionUpdater::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockPositionUpdater::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockPositionUpdater.SetProperty
void GlobalNamespace::MaterialPropertyBlockPositionUpdater::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockPositionUpdater::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockRandomValueSetter
#include "GlobalNamespace/MaterialPropertyBlockRandomValueSetter.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] _renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__minValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__maxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock[] _materialPropertyBlocks
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MaterialPropertyBlock*>& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__materialPropertyBlocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__materialPropertyBlocks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlocks"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MaterialPropertyBlock*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.Start
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.OnValidate
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.RefreshPropertyId
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::RefreshPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::RefreshPropertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.ApplyParams
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::ApplyParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::ApplyParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockVectorAnimator
#include "GlobalNamespace/MaterialPropertyBlockVectorAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 _vector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::MaterialPropertyBlockVectorAnimator::dyn__vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockVectorAnimator::dyn__vector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockVectorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter
#include "GlobalNamespace/MaterialPropertyValuesSetter.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameColorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameColorValuePair.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyValuesSetter::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameFloatValuePair[] _floats
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__floats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__floats");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floats"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameVectorValuePair[] _vectors
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__vectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__vectors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vectors"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameColorValuePair[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameIntValuePair[] _ints
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__ints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__ints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ints"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyValuesSetter.Start
void GlobalNamespace::MaterialPropertyValuesSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.OnValidate
void GlobalNamespace::MaterialPropertyValuesSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.RefreshPropertyIds
void GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.ApplyParams
void GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn__propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn__propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <propertyId>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn_$propertyId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn_$propertyId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<propertyId>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.get_propertyId
int GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.set_propertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.RefreshPropertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single value
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 value
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 vector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair::dyn_vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair::dyn_vector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameColorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameColorValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OnWillRenderObjectTrigger
#include "GlobalNamespace/OnWillRenderObjectTrigger.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _overrideShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::OnWillRenderObjectTrigger::dyn__overrideShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__overrideShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _renderQueue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OnWillRenderObjectTrigger::dyn__renderQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__renderQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderQueue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OnWillRenderObjectTrigger::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::OnWillRenderObjectTrigger::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::OnWillRenderObjectTrigger::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OnWillRenderObjectTrigger::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OnWillRenderObjectTrigger.OnEnable
void GlobalNamespace::OnWillRenderObjectTrigger::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OnWillRenderObjectTrigger.OnDisable
void GlobalNamespace::OnWillRenderObjectTrigger::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TextureEffectSO
#include "GlobalNamespace/TextureEffectSO.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextureEffectSO.Render
void GlobalNamespace::TextureEffectSO::Render(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IComponentRefresher
#include "GlobalNamespace/IComponentRefresher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IComponentRefresher.__Refresh
void GlobalNamespace::IComponentRefresher::__Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IComponentRefresher::__Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TextMeshProAutosizeGroup
#include "GlobalNamespace/TextMeshProAutosizeGroup.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text[] _texts
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_Text*>& GlobalNamespace::TextMeshProAutosizeGroup::dyn__texts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextMeshProAutosizeGroup::dyn__texts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texts"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_Text*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TextMeshProAutosizeGroup.Start
void GlobalNamespace::TextMeshProAutosizeGroup::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextMeshProAutosizeGroup::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorChangeUIEventType
#include "GlobalNamespace/ColorChangeUIEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ColorChangeUIEventType Drag
::GlobalNamespace::ColorChangeUIEventType GlobalNamespace::ColorChangeUIEventType::_get_Drag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorChangeUIEventType::_get_Drag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ColorChangeUIEventType>("", "ColorChangeUIEventType", "Drag"));
}
// Autogenerated static field setter
// Set static field: static public ColorChangeUIEventType Drag
void GlobalNamespace::ColorChangeUIEventType::_set_Drag(::GlobalNamespace::ColorChangeUIEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorChangeUIEventType::_set_Drag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorChangeUIEventType", "Drag", value));
}
// Autogenerated static field getter
// Get static field: static public ColorChangeUIEventType PointerUp
::GlobalNamespace::ColorChangeUIEventType GlobalNamespace::ColorChangeUIEventType::_get_PointerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorChangeUIEventType::_get_PointerUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ColorChangeUIEventType>("", "ColorChangeUIEventType", "PointerUp"));
}
// Autogenerated static field setter
// Set static field: static public ColorChangeUIEventType PointerUp
void GlobalNamespace::ColorChangeUIEventType::_set_PointerUp(::GlobalNamespace::ColorChangeUIEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorChangeUIEventType::_set_PointerUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorChangeUIEventType", "PointerUp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ColorChangeUIEventType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorChangeUIEventType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenBackButtonAnimationController
#include "GlobalNamespace/ScreenBackButtonAnimationController.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::ScreenBackButtonAnimationController::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<ScreenBackButtonAnimationController/AnimationType,System.Int32> _animationHashes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType, int>*& GlobalNamespace::ScreenBackButtonAnimationController::dyn__animationHashes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::dyn__animationHashes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animationHashes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScreenBackButtonAnimationController.Awake
void GlobalNamespace::ScreenBackButtonAnimationController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenBackButtonAnimationController.StartAnimation
void GlobalNamespace::ScreenBackButtonAnimationController::StartAnimation(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::StartAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, animationType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenBackButtonAnimationController/AnimationType
#include "GlobalNamespace/ScreenBackButtonAnimationController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType FadeIn
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_FadeIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "FadeIn"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType FadeIn
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_FadeIn(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_FadeIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "FadeIn", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType FadeOut
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_FadeOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "FadeOut"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType FadeOut
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_FadeOut(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_FadeOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "FadeOut", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType MoveIn
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "MoveIn"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType MoveIn
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveIn(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "MoveIn", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType MoveOut
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "MoveOut"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType MoveOut
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveOut(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "MoveOut", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType MoveIn2
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveIn2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveIn2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "MoveIn2"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType MoveIn2
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveIn2(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveIn2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "MoveIn2", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenBackButtonAnimationController/AnimationType MoveOut2
::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveOut2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_get_MoveOut2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType>("", "ScreenBackButtonAnimationController/AnimationType", "MoveOut2"));
}
// Autogenerated static field setter
// Set static field: static public ScreenBackButtonAnimationController/AnimationType MoveOut2
void GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveOut2(::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::_set_MoveOut2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenBackButtonAnimationController/AnimationType", "MoveOut2", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenBackButtonAnimationController::AnimationType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleTextTableCell
#include "GlobalNamespace/SimpleTextTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SimpleTextTableCell::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextTableCell::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SimpleTextTableCell.get_text
::StringW GlobalNamespace::SimpleTextTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextTableCell.set_text
void GlobalNamespace::SimpleTextTableCell::set_text(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleTextWithIconTableCell
#include "GlobalNamespace/SimpleTextWithIconTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::SimpleTextWithIconTableCell::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _icon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::SimpleTextWithIconTableCell::dyn__icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::dyn__icon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_icon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SimpleTextWithIconTableCell.get_icon
::UnityEngine::UI::Image* GlobalNamespace::SimpleTextWithIconTableCell::get_icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::get_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UI::Image*, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextWithIconTableCell.set_icon
void GlobalNamespace::SimpleTextWithIconTableCell::set_icon(::UnityEngine::UI::Image* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::set_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SimpleTextWithIconTableCell.get_text
::StringW GlobalNamespace::SimpleTextWithIconTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextWithIconTableCell.set_text
void GlobalNamespace::SimpleTextWithIconTableCell::set_text(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleTextWithIconTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TableCellWithSeparator
#include "GlobalNamespace/TableCellWithSeparator.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _separator
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TableCellWithSeparator::dyn__separator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableCellWithSeparator::dyn__separator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separator"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TableCellWithSeparator.TableViewSetup
void GlobalNamespace::TableCellWithSeparator::TableViewSetup(::HMUI::ITableCellOwner* tableCellOwner, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableCellWithSeparator::TableViewSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TableViewSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableCellOwner), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tableCellOwner, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TableViewWithDetailCell
#include "GlobalNamespace/TableViewWithDetailCell.hpp"
// Including type: TableViewWithDetailCell/IDataSource
#include "GlobalNamespace/TableViewWithDetailCell_IDataSource.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`2<TableViewWithDetailCell,System.Int32> didSelectContentCellEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>*& GlobalNamespace::TableViewWithDetailCell::dyn_didSelectContentCellEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::dyn_didSelectContentCellEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didSelectContentCellEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<TableViewWithDetailCell,System.Int32> didDeselectContentCellEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>*& GlobalNamespace::TableViewWithDetailCell::dyn_didDeselectContentCellEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::dyn_didDeselectContentCellEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didDeselectContentCellEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TableViewWithDetailCell/IDataSource _dataSource
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TableViewWithDetailCell::IDataSource*& GlobalNamespace::TableViewWithDetailCell::dyn__dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::dyn__dataSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataSource"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TableViewWithDetailCell::IDataSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _selectedId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TableViewWithDetailCell::dyn__selectedId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::dyn__selectedId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_selectedId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TableViewWithDetailCell.get_dataSource
::GlobalNamespace::TableViewWithDetailCell::IDataSource* GlobalNamespace::TableViewWithDetailCell::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TableViewWithDetailCell::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell.set_dataSource
void GlobalNamespace::TableViewWithDetailCell::set_dataSource(::GlobalNamespace::TableViewWithDetailCell::IDataSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::set_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TableViewWithDetailCell.add_didSelectContentCellEvent
void GlobalNamespace::TableViewWithDetailCell::add_didSelectContentCellEvent(::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::add_didSelectContentCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectContentCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TableViewWithDetailCell.remove_didSelectContentCellEvent
void GlobalNamespace::TableViewWithDetailCell::remove_didSelectContentCellEvent(::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::remove_didSelectContentCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectContentCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TableViewWithDetailCell.add_didDeselectContentCellEvent
void GlobalNamespace::TableViewWithDetailCell::add_didDeselectContentCellEvent(::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::add_didDeselectContentCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDeselectContentCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TableViewWithDetailCell.remove_didDeselectContentCellEvent
void GlobalNamespace::TableViewWithDetailCell::remove_didDeselectContentCellEvent(::System::Action_2<::GlobalNamespace::TableViewWithDetailCell*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::remove_didDeselectContentCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDeselectContentCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TableViewWithDetailCell.CellSize
float GlobalNamespace::TableViewWithDetailCell::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell.NumberOfCells
int GlobalNamespace::TableViewWithDetailCell::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell.CellForIdx
::HMUI::TableCell* GlobalNamespace::TableViewWithDetailCell::CellForIdx(::HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: TableViewWithDetailCell.ReloadData
void GlobalNamespace::TableViewWithDetailCell::ReloadData(int currentNewIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentNewIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentNewIndex);
}
// Autogenerated method: TableViewWithDetailCell.ReloadData
void GlobalNamespace::TableViewWithDetailCell::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::ReloadData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell.DidSelectCellWithIdx
void GlobalNamespace::TableViewWithDetailCell::DidSelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::DidSelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TableViewWithDetailCell/IDataSource
#include "GlobalNamespace/TableViewWithDetailCell_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TableViewWithDetailCell/IDataSource.CellSize
float GlobalNamespace::TableViewWithDetailCell::IDataSource::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::IDataSource::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell/IDataSource.NumberOfCells
int GlobalNamespace::TableViewWithDetailCell::IDataSource::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::IDataSource::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TableViewWithDetailCell/IDataSource.CellForContent
::HMUI::TableCell* GlobalNamespace::TableViewWithDetailCell::IDataSource::CellForContent(::GlobalNamespace::TableViewWithDetailCell* tableView, int idx, bool detailOpened) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::IDataSource::CellForContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(detailOpened)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::TableCell*, false>(this, ___internal__method, tableView, idx, detailOpened);
}
// Autogenerated method: TableViewWithDetailCell/IDataSource.CellForDetail
::HMUI::TableCell* GlobalNamespace::TableViewWithDetailCell::IDataSource::CellForDetail(::GlobalNamespace::TableViewWithDetailCell* tableView, int contentIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TableViewWithDetailCell::IDataSource::CellForDetail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForDetail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(contentIdx)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::TableCell*, false>(this, ___internal__method, tableView, contentIdx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ToggleableCanvasGroup
#include "GlobalNamespace/ToggleableCanvasGroup.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup _canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& GlobalNamespace::ToggleableCanvasGroup::dyn__canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::dyn__canvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Toggle _toggle
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& GlobalNamespace::ToggleableCanvasGroup::dyn__toggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::dyn__toggle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toggle"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Toggle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _invertToggle
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableCanvasGroup::dyn__invertToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::dyn__invertToggle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_invertToggle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ToggleableCanvasGroup.OnEnable
void GlobalNamespace::ToggleableCanvasGroup::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ToggleableCanvasGroup.OnDisable
void GlobalNamespace::ToggleableCanvasGroup::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ToggleableCanvasGroup.HandleToggleValueChanged
void GlobalNamespace::ToggleableCanvasGroup::HandleToggleValueChanged(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::HandleToggleValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleToggleValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ToggleableCanvasGroup.SetCanvasGroupData
void GlobalNamespace::ToggleableCanvasGroup::SetCanvasGroupData(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableCanvasGroup::SetCanvasGroupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCanvasGroupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AlphabetScrollbar
#include "HMUI/AlphabetScrollbar.hpp"
// Including type: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18
#include "HMUI/AlphabetScrollbar_-PointerMoveInsideCoroutine-d__18.hpp"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HMUI.TableView _tableView
[[deprecated("Use field access instead!")]] ::HMUI::TableView*& HMUI::AlphabetScrollbar::dyn__tableView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__tableView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tableView"))->offset;
  return *reinterpret_cast<::HMUI::TableView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _characterHeight
[[deprecated("Use field access instead!")]] float& HMUI::AlphabetScrollbar::dyn__characterHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__characterHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_characterHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _normalColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HMUI::AlphabetScrollbar::dyn__normalColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__normalColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _textPrefab
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::AlphabetScrollbar::dyn__textPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__textPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textPrefab"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI[] _prealocatedTexts
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TextMeshProUGUI*>& HMUI::AlphabetScrollbar::dyn__prealocatedTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__prealocatedTexts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prealocatedTexts"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TextMeshProUGUI*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _highlightImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& HMUI::AlphabetScrollbar::dyn__highlightImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__highlightImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<AlphabetScrollInfo/Data> _characterScrollData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::AlphabetScrollInfo::Data*>*& HMUI::AlphabetScrollbar::dyn__characterScrollData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__characterScrollData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_characterScrollData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::AlphabetScrollInfo::Data*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<TMPro.TextMeshProUGUI> _texts
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>*& HMUI::AlphabetScrollbar::dyn__texts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__texts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texts"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _highlightedCharacterIndex
[[deprecated("Use field access instead!")]] int& HMUI::AlphabetScrollbar::dyn__highlightedCharacterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__highlightedCharacterIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_highlightedCharacterIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _pointerIsDown
[[deprecated("Use field access instead!")]] bool& HMUI::AlphabetScrollbar::dyn__pointerIsDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::dyn__pointerIsDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerIsDown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.AlphabetScrollbar.Awake
void HMUI::AlphabetScrollbar::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar.SetData
void HMUI::AlphabetScrollbar::SetData(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::AlphabetScrollInfo::Data*>* characterScrollData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(characterScrollData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, characterScrollData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.OnPointerDown
void HMUI::AlphabetScrollbar::OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.OnPointerUp
void HMUI::AlphabetScrollbar::OnPointerUp(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::OnPointerUp");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.OnPointerEnter
void HMUI::AlphabetScrollbar::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.OnPointerExit
void HMUI::AlphabetScrollbar::OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.PrepareTransforms
void HMUI::AlphabetScrollbar::PrepareTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::PrepareTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar.RefreshHighlight
void HMUI::AlphabetScrollbar::RefreshHighlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::RefreshHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar.PointerMoveInsideCoroutine
::System::Collections::IEnumerator* HMUI::AlphabetScrollbar::PointerMoveInsideCoroutine(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::PointerMoveInsideCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointerMoveInsideCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.GetPointerCharacterIndex
int HMUI::AlphabetScrollbar::GetPointerCharacterIndex(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::GetPointerCharacterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointerCharacterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.AlphabetScrollbar.InitText
void HMUI::AlphabetScrollbar::InitText(::TMPro::TextMeshProUGUI* text, ::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::InitText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(character)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text, character);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18
#include "HMUI/AlphabetScrollbar_-PointerMoveInsideCoroutine-d__18.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.AlphabetScrollbar <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::AlphabetScrollbar*& HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::AlphabetScrollbar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.EventSystems.PointerEventData eventData
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData*& HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_eventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::dyn_eventData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventData"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18.System.IDisposable.Dispose
void HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18.MoveNext
bool HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AlphabetScrollbar/HMUI.<PointerMoveInsideCoroutine>d__18.System.Collections.IEnumerator.Reset
void HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::AlphabetScrollbar::$PointerMoveInsideCoroutine$d__18::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.PanelAnimation
#include "HMUI/PanelAnimation.hpp"
// Including type: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1
#include "HMUI/PanelAnimation_-AnimationCoroutine-d__1.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.PanelAnimation.StartAnimation
void HMUI::PanelAnimation::StartAnimation(::UnityEngine::CanvasGroup* canvasGroup, ::UnityEngine::CanvasGroup* parentCanvasGroup, float duration, ::UnityEngine::AnimationCurve* scaleXAnimationCurve, ::UnityEngine::AnimationCurve* scaleYAnimationCurve, ::UnityEngine::AnimationCurve* alphaAnimationCurve, ::UnityEngine::AnimationCurve* parentAlphaAnimationCurve, ::System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::StartAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvasGroup), ::il2cpp_utils::ExtractType(parentCanvasGroup), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(scaleXAnimationCurve), ::il2cpp_utils::ExtractType(scaleYAnimationCurve), ::il2cpp_utils::ExtractType(alphaAnimationCurve), ::il2cpp_utils::ExtractType(parentAlphaAnimationCurve), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canvasGroup, parentCanvasGroup, duration, scaleXAnimationCurve, scaleYAnimationCurve, alphaAnimationCurve, parentAlphaAnimationCurve, finishedCallback);
}
// Autogenerated method: HMUI.PanelAnimation.AnimationCoroutine
::System::Collections::IEnumerator* HMUI::PanelAnimation::AnimationCoroutine(float duration, ::UnityEngine::CanvasGroup* canvasGroup, ::UnityEngine::CanvasGroup* parentCanvasGroup, ::UnityEngine::AnimationCurve* scaleXAnimationCurve, ::UnityEngine::AnimationCurve* scaleYAnimationCurve, ::UnityEngine::AnimationCurve* alphaAnimationCurve, ::UnityEngine::AnimationCurve* parentAlphaAnimationCurve, ::System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(canvasGroup), ::il2cpp_utils::ExtractType(parentCanvasGroup), ::il2cpp_utils::ExtractType(scaleXAnimationCurve), ::il2cpp_utils::ExtractType(scaleYAnimationCurve), ::il2cpp_utils::ExtractType(alphaAnimationCurve), ::il2cpp_utils::ExtractType(parentAlphaAnimationCurve), ::il2cpp_utils::ExtractType(finishedCallback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, duration, canvasGroup, parentCanvasGroup, scaleXAnimationCurve, scaleYAnimationCurve, alphaAnimationCurve, parentAlphaAnimationCurve, finishedCallback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1
#include "HMUI/PanelAnimation_-AnimationCoroutine-d__1.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.CanvasGroup canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_canvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.CanvasGroup parentCanvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_parentCanvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_parentCanvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentCanvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve parentAlphaAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_parentAlphaAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_parentAlphaAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentAlphaAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve alphaAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_alphaAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_alphaAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve scaleXAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_scaleXAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_scaleXAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleXAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve scaleYAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_scaleYAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_scaleYAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleYAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.PanelAnimation <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::PanelAnimation*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::PanelAnimation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action finishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_finishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_finishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <canvasTransform>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$canvasTransform$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$canvasTransform$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<canvasTransform>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__3
[[deprecated("Use field access instead!")]] float& HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$elapsedTime$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::dyn_$elapsedTime$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::PanelAnimation::$AnimationCoroutine$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::PanelAnimation::$AnimationCoroutine$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1.System.IDisposable.Dispose
void HMUI::PanelAnimation::$AnimationCoroutine$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1.MoveNext
bool HMUI::PanelAnimation::$AnimationCoroutine$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.PanelAnimation/HMUI.<AnimationCoroutine>d__1.System.Collections.IEnumerator.Reset
void HMUI::PanelAnimation::$AnimationCoroutine$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimation::$AnimationCoroutine$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _duration
[[deprecated("Use field access instead!")]] float& HMUI::PanelAnimationSO::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _scaleXAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimationSO::dyn__scaleXAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::dyn__scaleXAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleXAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _scaleYAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimationSO::dyn__scaleYAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::dyn__scaleYAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleYAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _alphaAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimationSO::dyn__alphaAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::dyn__alphaAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _parentAlphaAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& HMUI::PanelAnimationSO::dyn__parentAlphaAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::dyn__parentAlphaAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentAlphaAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.PanelAnimationSO.ExecuteAnimation
void HMUI::PanelAnimationSO::ExecuteAnimation(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::ExecuteAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go);
}
// Autogenerated method: HMUI.PanelAnimationSO.ExecuteAnimation
void HMUI::PanelAnimationSO::ExecuteAnimation(::UnityEngine::GameObject* go, ::System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::ExecuteAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go, finishedCallback);
}
// Autogenerated method: HMUI.PanelAnimationSO.ExecuteAnimation
void HMUI::PanelAnimationSO::ExecuteAnimation(::UnityEngine::GameObject* go, ::UnityEngine::CanvasGroup* parentCanvasGroup, ::System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::ExecuteAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(parentCanvasGroup), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go, parentCanvasGroup, finishedCallback);
}
// Autogenerated method: HMUI.PanelAnimationSO.ExecuteAnimation
void HMUI::PanelAnimationSO::ExecuteAnimation(::UnityEngine::GameObject* go, ::UnityEngine::CanvasGroup* parentCanvasGroup, bool instant, ::System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PanelAnimationSO::ExecuteAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(parentCanvasGroup), ::il2cpp_utils::ExtractType(instant), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go, parentCanvasGroup, instant, finishedCallback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`2<UnityEngine.UI.Button,UnityEngine.Events.UnityAction>> _bindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Button*, ::UnityEngine::Events::UnityAction*>*>*& HMUI::ButtonBinder::dyn__bindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonBinder::dyn__bindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Button*, ::UnityEngine::Events::UnityAction*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ButtonBinder.Init
void HMUI::ButtonBinder::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonBinder::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonBinder.AddBindings
void HMUI::ButtonBinder::AddBindings(::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Button*, ::System::Action*>*>* bindingData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonBinder::AddBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingData);
}
// Autogenerated method: HMUI.ButtonBinder.AddBinding
void HMUI::ButtonBinder::AddBinding(::UnityEngine::UI::Button* button, ::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonBinder::AddBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, action);
}
// Autogenerated method: HMUI.ButtonBinder.ClearBindings
void HMUI::ButtonBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ButtonBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldDataBinder
#include "HMUI/InputFieldDataBinder.hpp"
// Including type: HMUI.InputFieldDataBinder/HMUI.<>c__DisplayClass2_0`2
#include "HMUI/InputFieldDataBinder_--c__DisplayClass2_0_2.hpp"
// Including type: HMUI.InputFieldDataBinder/HMUI.<>c__3`1
#include "HMUI/InputFieldDataBinder_--c__3_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Tuple`4
#include "System/Tuple_4.hpp"
// Including type: UnityEngine.UI.InputField
#include "UnityEngine/UI/InputField.hpp"
// Including type: IObservableChange
#include "GlobalNamespace/IObservableChange.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: IValue`1
#include "GlobalNamespace/IValue_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`4<UnityEngine.UI.InputField,IObservableChange,UnityEngine.Events.UnityAction`1<System.String>,System.Action>> _bindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_4<::UnityEngine::UI::InputField*, ::GlobalNamespace::IObservableChange*, ::UnityEngine::Events::UnityAction_1<::StringW>*, ::System::Action*>*>*& HMUI::InputFieldDataBinder::dyn__bindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldDataBinder::dyn__bindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_4<::UnityEngine::UI::InputField*, ::GlobalNamespace::IObservableChange*, ::UnityEngine::Events::UnityAction_1<::StringW>*, ::System::Action*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.InputFieldDataBinder.ClearBindings
void HMUI::InputFieldDataBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldDataBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldViewChangeBinder
#include "HMUI/InputFieldViewChangeBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: HMUI.InputFieldView
#include "HMUI/InputFieldView.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`2<HMUI.InputFieldView,UnityEngine.Events.UnityAction`1<HMUI.InputFieldView>>> _bindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_2<::HMUI::InputFieldView*, ::UnityEngine::Events::UnityAction_1<::HMUI::InputFieldView*>*>*>*& HMUI::InputFieldViewChangeBinder::dyn__bindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::dyn__bindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_2<::HMUI::InputFieldView*, ::UnityEngine::Events::UnityAction_1<::HMUI::InputFieldView*>*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enabled
[[deprecated("Use field access instead!")]] bool& HMUI::InputFieldViewChangeBinder::dyn__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::dyn__enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.Init
void HMUI::InputFieldViewChangeBinder::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.AddBindings
void HMUI::InputFieldViewChangeBinder::AddBindings(::System::Collections::Generic::List_1<::System::Tuple_2<::HMUI::InputFieldView*, ::System::Action_1<::HMUI::InputFieldView*>*>*>* bindings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::AddBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindings)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindings);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.AddBinding
void HMUI::InputFieldViewChangeBinder::AddBinding(::HMUI::InputFieldView* inputField, ::System::Action_1<::HMUI::InputFieldView*>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::AddBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputField), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inputField, action);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.ClearBindings
void HMUI::InputFieldViewChangeBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.Disable
void HMUI::InputFieldViewChangeBinder::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewChangeBinder.Enable
void HMUI::InputFieldViewChangeBinder::Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InputFieldViewChangeBinder::Enable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.KeyboardBinder
#include "HMUI/KeyboardBinder.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Tuple`3
#include "System/Tuple_3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <enabled>k__BackingField
[[deprecated("Use field access instead!")]] bool& HMUI::KeyboardBinder::dyn_$enabled$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::dyn_$enabled$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enabled>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`3<UnityEngine.KeyCode,HMUI.KeyboardBinder/HMUI.KeyBindingType,UnityEngine.Events.UnityAction`1<System.Boolean>>> _bindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_3<::UnityEngine::KeyCode, ::HMUI::KeyboardBinder::KeyBindingType, ::UnityEngine::Events::UnityAction_1<bool>*>*>*& HMUI::KeyboardBinder::dyn__bindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::dyn__bindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_3<::UnityEngine::KeyCode, ::HMUI::KeyboardBinder::KeyBindingType, ::UnityEngine::Events::UnityAction_1<bool>*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.KeyboardBinder.get_enabled
bool HMUI::KeyboardBinder::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.KeyboardBinder.set_enabled
void HMUI::KeyboardBinder::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.KeyboardBinder.Init
void HMUI::KeyboardBinder::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.KeyboardBinder.AddBindings
void HMUI::KeyboardBinder::AddBindings(::System::Collections::Generic::List_1<::System::Tuple_3<::UnityEngine::KeyCode, ::HMUI::KeyboardBinder::KeyBindingType, ::System::Action_1<bool>*>*>* bindingData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::AddBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingData);
}
// Autogenerated method: HMUI.KeyboardBinder.AddBinding
void HMUI::KeyboardBinder::AddBinding(::UnityEngine::KeyCode keyCode, ::HMUI::KeyboardBinder::KeyBindingType keyBindingType, ::System::Action_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::AddBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyCode), ::il2cpp_utils::ExtractType(keyBindingType), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyCode, keyBindingType, action);
}
// Autogenerated method: HMUI.KeyboardBinder.ClearBindings
void HMUI::KeyboardBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.KeyboardBinder.ManualUpdate
void HMUI::KeyboardBinder::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.KeyboardBinder/HMUI.KeyBindingType
#include "HMUI/KeyboardBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyDown
::HMUI::KeyboardBinder::KeyBindingType HMUI::KeyboardBinder::KeyBindingType::_get_KeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_get_KeyDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::KeyboardBinder::KeyBindingType>("HMUI", "KeyboardBinder/KeyBindingType", "KeyDown"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyDown
void HMUI::KeyboardBinder::KeyBindingType::_set_KeyDown(::HMUI::KeyboardBinder::KeyBindingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_set_KeyDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "KeyboardBinder/KeyBindingType", "KeyDown", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyUp
::HMUI::KeyboardBinder::KeyBindingType HMUI::KeyboardBinder::KeyBindingType::_get_KeyUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_get_KeyUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::KeyboardBinder::KeyBindingType>("HMUI", "KeyboardBinder/KeyBindingType", "KeyUp"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyUp
void HMUI::KeyboardBinder::KeyBindingType::_set_KeyUp(::HMUI::KeyboardBinder::KeyBindingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_set_KeyUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "KeyboardBinder/KeyBindingType", "KeyUp", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyPress
::HMUI::KeyboardBinder::KeyBindingType HMUI::KeyboardBinder::KeyBindingType::_get_KeyPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_get_KeyPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::KeyboardBinder::KeyBindingType>("HMUI", "KeyboardBinder/KeyBindingType", "KeyPress"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.KeyboardBinder/HMUI.KeyBindingType KeyPress
void HMUI::KeyboardBinder::KeyBindingType::_set_KeyPress(::HMUI::KeyboardBinder::KeyBindingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::_set_KeyPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "KeyboardBinder/KeyBindingType", "KeyPress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HMUI::KeyboardBinder::KeyBindingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::KeyboardBinder::KeyBindingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.MouseBinder
#include "HMUI/MouseBinder.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Tuple`3
#include "System/Tuple_3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <enabled>k__BackingField
[[deprecated("Use field access instead!")]] bool& HMUI::MouseBinder::dyn_$enabled$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::dyn_$enabled$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enabled>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Events.UnityAction`1<System.Single>> _scrollBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Events::UnityAction_1<float>*>*& HMUI::MouseBinder::dyn__scrollBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::dyn__scrollBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Events::UnityAction_1<float>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`3<HMUI.MouseBinder/HMUI.ButtonType,HMUI.MouseBinder/HMUI.MouseEventType,UnityEngine.Events.UnityAction>> _buttonBindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_3<::HMUI::MouseBinder::ButtonType, ::HMUI::MouseBinder::MouseEventType, ::UnityEngine::Events::UnityAction*>*>*& HMUI::MouseBinder::dyn__buttonBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::dyn__buttonBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buttonBindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_3<::HMUI::MouseBinder::ButtonType, ::HMUI::MouseBinder::MouseEventType, ::UnityEngine::Events::UnityAction*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.MouseBinder.get_enabled
bool HMUI::MouseBinder::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.MouseBinder.set_enabled
void HMUI::MouseBinder::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.MouseBinder.Init
void HMUI::MouseBinder::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.MouseBinder.AddScrollBindings
void HMUI::MouseBinder::AddScrollBindings(::System::Collections::Generic::List_1<::System::Action_1<float>*>* bindingData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::AddScrollBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddScrollBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingData);
}
// Autogenerated method: HMUI.MouseBinder.AddScrollBinding
void HMUI::MouseBinder::AddScrollBinding(::System::Action_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::AddScrollBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddScrollBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMUI.MouseBinder.AddButtonBindings
void HMUI::MouseBinder::AddButtonBindings(::System::Collections::Generic::List_1<::System::Tuple_3<::HMUI::MouseBinder::ButtonType, ::HMUI::MouseBinder::MouseEventType, ::UnityEngine::Events::UnityAction*>*>* bindingData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::AddButtonBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddButtonBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingData);
}
// Autogenerated method: HMUI.MouseBinder.AddButtonBinding
void HMUI::MouseBinder::AddButtonBinding(::HMUI::MouseBinder::ButtonType buttonType, ::HMUI::MouseBinder::MouseEventType keyBindingType, ::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::AddButtonBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddButtonBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonType), ::il2cpp_utils::ExtractType(keyBindingType), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttonType, keyBindingType, action);
}
// Autogenerated method: HMUI.MouseBinder.ClearBindings
void HMUI::MouseBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.MouseBinder.ManualUpdate
void HMUI::MouseBinder::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.MouseBinder/HMUI.MouseEventType
#include "HMUI/MouseBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonDown
::HMUI::MouseBinder::MouseEventType HMUI::MouseBinder::MouseEventType::_get_ButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_get_ButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::MouseEventType>("HMUI", "MouseBinder/MouseEventType", "ButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonDown
void HMUI::MouseBinder::MouseEventType::_set_ButtonDown(::HMUI::MouseBinder::MouseEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_set_ButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/MouseEventType", "ButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonUp
::HMUI::MouseBinder::MouseEventType HMUI::MouseBinder::MouseEventType::_get_ButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_get_ButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::MouseEventType>("HMUI", "MouseBinder/MouseEventType", "ButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonUp
void HMUI::MouseBinder::MouseEventType::_set_ButtonUp(::HMUI::MouseBinder::MouseEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_set_ButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/MouseEventType", "ButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonPress
::HMUI::MouseBinder::MouseEventType HMUI::MouseBinder::MouseEventType::_get_ButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_get_ButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::MouseEventType>("HMUI", "MouseBinder/MouseEventType", "ButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.MouseEventType ButtonPress
void HMUI::MouseBinder::MouseEventType::_set_ButtonPress(::HMUI::MouseBinder::MouseEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::_set_ButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/MouseEventType", "ButtonPress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HMUI::MouseBinder::MouseEventType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::MouseEventType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.MouseBinder/HMUI.ButtonType
#include "HMUI/MouseBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.ButtonType Primary
::HMUI::MouseBinder::ButtonType HMUI::MouseBinder::ButtonType::_get_Primary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_get_Primary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::ButtonType>("HMUI", "MouseBinder/ButtonType", "Primary"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.ButtonType Primary
void HMUI::MouseBinder::ButtonType::_set_Primary(::HMUI::MouseBinder::ButtonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_set_Primary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/ButtonType", "Primary", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.ButtonType Secondary
::HMUI::MouseBinder::ButtonType HMUI::MouseBinder::ButtonType::_get_Secondary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_get_Secondary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::ButtonType>("HMUI", "MouseBinder/ButtonType", "Secondary"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.ButtonType Secondary
void HMUI::MouseBinder::ButtonType::_set_Secondary(::HMUI::MouseBinder::ButtonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_set_Secondary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/ButtonType", "Secondary", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.MouseBinder/HMUI.ButtonType Middle
::HMUI::MouseBinder::ButtonType HMUI::MouseBinder::ButtonType::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::MouseBinder::ButtonType>("HMUI", "MouseBinder/ButtonType", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.MouseBinder/HMUI.ButtonType Middle
void HMUI::MouseBinder::ButtonType::_set_Middle(::HMUI::MouseBinder::ButtonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "MouseBinder/ButtonType", "Middle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HMUI::MouseBinder::ButtonType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::MouseBinder::ButtonType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleBinder
#include "HMUI/ToggleBinder.hpp"
// Including type: HMUI.ToggleBinder/HMUI.<>c__DisplayClass7_0
#include "HMUI/ToggleBinder_--c__DisplayClass7_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Tuple`2<UnityEngine.UI.Toggle,UnityEngine.Events.UnityAction`1<System.Boolean>>> _bindings
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Toggle*, ::UnityEngine::Events::UnityAction_1<bool>*>*>*& HMUI::ToggleBinder::dyn__bindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::dyn__bindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindings"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Toggle*, ::UnityEngine::Events::UnityAction_1<bool>*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enabled
[[deprecated("Use field access instead!")]] bool& HMUI::ToggleBinder::dyn__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::dyn__enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ToggleBinder.Init
void HMUI::ToggleBinder::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ToggleBinder.AddBindings
void HMUI::ToggleBinder::AddBindings(::System::Collections::Generic::List_1<::System::Tuple_2<::UnityEngine::UI::Toggle*, ::System::Action_1<bool>*>*>* bindingData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::AddBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingData);
}
// Autogenerated method: HMUI.ToggleBinder.AddBinding
void HMUI::ToggleBinder::AddBinding(::UnityEngine::UI::Toggle* toggle, ::System::Action_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::AddBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toggle), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toggle, action);
}
// Autogenerated method: HMUI.ToggleBinder.AddBinding
void HMUI::ToggleBinder::AddBinding(::UnityEngine::UI::Toggle* toggle, bool enabled, ::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::AddBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toggle), ::il2cpp_utils::ExtractType(enabled), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toggle, enabled, action);
}
// Autogenerated method: HMUI.ToggleBinder.ClearBindings
void HMUI::ToggleBinder::ClearBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::ClearBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ToggleBinder.Disable
void HMUI::ToggleBinder::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ToggleBinder.Enable
void HMUI::ToggleBinder::Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::Enable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleBinder/HMUI.<>c__DisplayClass7_0
#include "HMUI/ToggleBinder_--c__DisplayClass7_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean enabled
[[deprecated("Use field access instead!")]] bool& HMUI::ToggleBinder::$$c__DisplayClass7_0::dyn_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::$$c__DisplayClass7_0::dyn_enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::ToggleBinder::$$c__DisplayClass7_0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::$$c__DisplayClass7_0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ToggleBinder/HMUI.<>c__DisplayClass7_0.<AddBinding>b__0
void HMUI::ToggleBinder::$$c__DisplayClass7_0::$AddBinding$b__0(bool b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ToggleBinder::$$c__DisplayClass7_0::<AddBinding>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddBinding>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMaxElementWidth
float HMUI::CurvedCanvasSettings::_get_kMaxElementWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::_get_kMaxElementWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "CurvedCanvasSettings", "kMaxElementWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMaxElementWidth
void HMUI::CurvedCanvasSettings::_set_kMaxElementWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::_set_kMaxElementWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "CurvedCanvasSettings", "kMaxElementWidth", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _radius
[[deprecated("Use field access instead!")]] float& HMUI::CurvedCanvasSettings::dyn__radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::dyn__radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useFlatInEditMode
[[deprecated("Use field access instead!")]] bool& HMUI::CurvedCanvasSettings::dyn__useFlatInEditMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::dyn__useFlatInEditMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useFlatInEditMode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.get_radius
float HMUI::CurvedCanvasSettings::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::get_radius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.SetRadius
void HMUI::CurvedCanvasSettings::SetRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::SetRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.TransformPointFromCanvasTo3D
::UnityEngine::Vector3 HMUI::CurvedCanvasSettings::TransformPointFromCanvasTo3D(::UnityEngine::Vector2 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::TransformPointFromCanvasTo3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformPointFromCanvasTo3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, point);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.RebuildAndSetup
void HMUI::CurvedCanvasSettings::RebuildAndSetup(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::RebuildAndSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "CurvedCanvasSettings", "RebuildAndSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.Start
void HMUI::CurvedCanvasSettings::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.OnPopulateMesh
void HMUI::CurvedCanvasSettings::OnPopulateMesh(::UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettings::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Canvas,HMUI.CurvedCanvasSettings> _curvedCanvasCache
::System::Collections::Generic::Dictionary_2<::UnityEngine::Canvas*, ::HMUI::CurvedCanvasSettings*>* HMUI::CurvedCanvasSettingsHelper::_get__curvedCanvasCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::_get__curvedCanvasCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::UnityEngine::Canvas*, ::HMUI::CurvedCanvasSettings*>*>("HMUI", "CurvedCanvasSettingsHelper", "_curvedCanvasCache")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Canvas,HMUI.CurvedCanvasSettings> _curvedCanvasCache
void HMUI::CurvedCanvasSettingsHelper::_set__curvedCanvasCache(::System::Collections::Generic::Dictionary_2<::UnityEngine::Canvas*, ::HMUI::CurvedCanvasSettings*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::_set__curvedCanvasCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "CurvedCanvasSettingsHelper", "_curvedCanvasCache", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Canvas _cachedCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& HMUI::CurvedCanvasSettingsHelper::dyn__cachedCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::dyn__cachedCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cachedCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _cachedCanvasIsRootCanvas
[[deprecated("Use field access instead!")]] bool& HMUI::CurvedCanvasSettingsHelper::dyn__cachedCanvasIsRootCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::dyn__cachedCanvasIsRootCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cachedCanvasIsRootCanvas"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.CurvedCanvasSettings _curvedCanvasSettings
[[deprecated("Use field access instead!")]] ::HMUI::CurvedCanvasSettings*& HMUI::CurvedCanvasSettingsHelper::dyn__curvedCanvasSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::dyn__curvedCanvasSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curvedCanvasSettings"))->offset;
  return *reinterpret_cast<::HMUI::CurvedCanvasSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasCachedData
[[deprecated("Use field access instead!")]] bool& HMUI::CurvedCanvasSettingsHelper::dyn__hasCachedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::dyn__hasCachedData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasCachedData"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CurvedCanvasSettingsHelper..cctor
void HMUI::CurvedCanvasSettingsHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "CurvedCanvasSettingsHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettingsHelper.Reset
void HMUI::CurvedCanvasSettingsHelper::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettingsHelper.GetCurvedCanvasSettings
::HMUI::CurvedCanvasSettings* HMUI::CurvedCanvasSettingsHelper::GetCurvedCanvasSettings(::UnityEngine::Canvas* canvas) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::GetCurvedCanvasSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurvedCanvasSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvas)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::CurvedCanvasSettings*, false>(this, ___internal__method, canvas);
}
// Autogenerated method: HMUI.CurvedCanvasSettingsHelper.GetCurvedCanvasSettingsForCanvas
::HMUI::CurvedCanvasSettings* HMUI::CurvedCanvasSettingsHelper::GetCurvedCanvasSettingsForCanvas(::UnityEngine::Canvas* canvas) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedCanvasSettingsHelper::GetCurvedCanvasSettingsForCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "CurvedCanvasSettingsHelper", "GetCurvedCanvasSettingsForCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvas)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::CurvedCanvasSettings*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, canvas);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CurvedTextMeshPro
#include "HMUI/CurvedTextMeshPro.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useScriptableObjectColors
[[deprecated("Use field access instead!")]] bool& HMUI::CurvedTextMeshPro::dyn__useScriptableObjectColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::dyn__useScriptableObjectColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useScriptableObjectColors"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ColorSO _colorSo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& HMUI::CurvedTextMeshPro::dyn__colorSo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::dyn__colorSo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorSo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HMUI.CurvedCanvasSettingsHelper _curvedCanvasSettingsHelper
[[deprecated("Use field access instead!")]] ::HMUI::CurvedCanvasSettingsHelper*& HMUI::CurvedTextMeshPro::dyn__curvedCanvasSettingsHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::dyn__curvedCanvasSettingsHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curvedCanvasSettingsHelper"))->offset;
  return *reinterpret_cast<::HMUI::CurvedCanvasSettingsHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.get_useScriptableObjectColors
bool HMUI::CurvedTextMeshPro::get_useScriptableObjectColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::get_useScriptableObjectColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useScriptableObjectColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.set_useScriptableObjectColors
void HMUI::CurvedTextMeshPro::set_useScriptableObjectColors(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::set_useScriptableObjectColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useScriptableObjectColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.__Refresh
void HMUI::CurvedTextMeshPro::__Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::__Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.get_color
::UnityEngine::Color HMUI::CurvedTextMeshPro::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::get_color");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.set_color
void HMUI::CurvedTextMeshPro::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::set_color");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.OnEnable
void HMUI::CurvedTextMeshPro::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedTextMeshPro.GenerateTextMesh
void HMUI::CurvedTextMeshPro::GenerateTextMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CurvedTextMeshPro::GenerateTextMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTextMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InteractableTextMeshPro
#include "HMUI/InteractableTextMeshPro.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _interactionAlpha
[[deprecated("Use field access instead!")]] float& HMUI::InteractableTextMeshPro::dyn__interactionAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InteractableTextMeshPro::dyn__interactionAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interactionAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noInteractionAlpha
[[deprecated("Use field access instead!")]] float& HMUI::InteractableTextMeshPro::dyn__noInteractionAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InteractableTextMeshPro::dyn__noInteractionAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noInteractionAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::InteractableTextMeshPro::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InteractableTextMeshPro::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.CanvasGroup> _canvasGroupCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>*& HMUI::InteractableTextMeshPro::dyn__canvasGroupCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InteractableTextMeshPro::dyn__canvasGroupCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvasGroupCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.InteractableTextMeshPro.OnCanvasGroupChanged
void HMUI::InteractableTextMeshPro::OnCanvasGroupChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::InteractableTextMeshPro::OnCanvasGroupChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCanvasGroupChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.EventSystemHelpers
#include "HMUI/EventSystemHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.EventSystemHelpers.IsInputFieldSelected
bool HMUI::EventSystemHelpers::IsInputFieldSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemHelpers::IsInputFieldSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "EventSystemHelpers", "IsInputFieldSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.EventSystemListener
#include "HMUI/EventSystemListener.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.EventSystems.PointerEventData> pointerDidEnterEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>*& HMUI::EventSystemListener::dyn_pointerDidEnterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::dyn_pointerDidEnterEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerDidEnterEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.EventSystems.PointerEventData> pointerDidExitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>*& HMUI::EventSystemListener::dyn_pointerDidExitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::dyn_pointerDidExitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerDidExitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.EventSystemListener.add_pointerDidEnterEvent
void HMUI::EventSystemListener::add_pointerDidEnterEvent(::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::add_pointerDidEnterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_pointerDidEnterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.EventSystemListener.remove_pointerDidEnterEvent
void HMUI::EventSystemListener::remove_pointerDidEnterEvent(::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::remove_pointerDidEnterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_pointerDidEnterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.EventSystemListener.add_pointerDidExitEvent
void HMUI::EventSystemListener::add_pointerDidExitEvent(::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::add_pointerDidExitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_pointerDidExitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.EventSystemListener.remove_pointerDidExitEvent
void HMUI::EventSystemListener::remove_pointerDidExitEvent(::System::Action_1<::UnityEngine::EventSystems::PointerEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::remove_pointerDidExitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_pointerDidExitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.EventSystemListener.OnPointerEnter
void HMUI::EventSystemListener::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.EventSystemListener.OnPointerExit
void HMUI::EventSystemListener::OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EventSystemListener::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: HMUI.HoverHintController
#include "HMUI/HoverHintController.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _text
[[deprecated("Use field access instead!")]] ::StringW& HMUI::HoverHint::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HMUI.HoverHintController _hoverHintController
[[deprecated("Use field access instead!")]] ::HMUI::HoverHintController*& HMUI::HoverHint::dyn__hoverHintController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::dyn__hoverHintController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverHintController"))->offset;
  return *reinterpret_cast<::HMUI::HoverHintController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _worldCornersTemp
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& HMUI::HoverHint::dyn__worldCornersTemp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::dyn__worldCornersTemp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldCornersTemp"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverHint.get_text
::StringW HMUI::HoverHint::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHint.set_text
void HMUI::HoverHint::set_text(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.HoverHint.get_size
::UnityEngine::Vector2 HMUI::HoverHint::get_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::get_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHint.get_worldCenter
::UnityEngine::Vector3 HMUI::HoverHint::get_worldCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::get_worldCenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldCenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHint.OnPointerEnter
void HMUI::HoverHint::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.HoverHint.OnPointerExit
void HMUI::HoverHint::OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.HoverHint.OnDisable
void HMUI::HoverHint::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHint::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HoverHintController
#include "HMUI/HoverHintController.hpp"
// Including type: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10
#include "HMUI/HoverHintController_-ShowHintAfterDelay-d__10.hpp"
// Including type: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11
#include "HMUI/HoverHintController_-HideHintAfterDelay-d__11.hpp"
// Including type: HMUI.HoverHintPanel
#include "HMUI/HoverHintPanel.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kShowHintDelay
float HMUI::HoverHintController::_get_kShowHintDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::_get_kShowHintDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "HoverHintController", "kShowHintDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kShowHintDelay
void HMUI::HoverHintController::_set_kShowHintDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::_set_kShowHintDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "HoverHintController", "kShowHintDelay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHideHintDelay
float HMUI::HoverHintController::_get_kHideHintDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::_get_kHideHintDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "HoverHintController", "kHideHintDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHideHintDelay
void HMUI::HoverHintController::_set_kHideHintDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::_set_kHideHintDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "HoverHintController", "kHideHintDelay", value));
}
// Autogenerated instance field getter
// Get instance field: private HMUI.HoverHintPanel _hoverHintPanelPrefab
[[deprecated("Use field access instead!")]] ::HMUI::HoverHintPanel*& HMUI::HoverHintController::dyn__hoverHintPanelPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::dyn__hoverHintPanelPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverHintPanelPrefab"))->offset;
  return *reinterpret_cast<::HMUI::HoverHintPanel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.HoverHintPanel _hoverHintPanel
[[deprecated("Use field access instead!")]] ::HMUI::HoverHintPanel*& HMUI::HoverHintController::dyn__hoverHintPanel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::dyn__hoverHintPanel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverHintPanel"))->offset;
  return *reinterpret_cast<::HMUI::HoverHintPanel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isHiding
[[deprecated("Use field access instead!")]] bool& HMUI::HoverHintController::dyn__isHiding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::dyn__isHiding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isHiding"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverHintController.Awake
void HMUI::HoverHintController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController.OnApplicationFocus
void HMUI::HoverHintController::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: HMUI.HoverHintController.ShowHint
void HMUI::HoverHintController::ShowHint(::HMUI::HoverHint* hoverHint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::ShowHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hoverHint);
}
// Autogenerated method: HMUI.HoverHintController.HideHint
void HMUI::HoverHintController::HideHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::HideHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController.HideHintInstant
void HMUI::HoverHintController::HideHintInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::HideHintInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideHintInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController.ShowHintAfterDelay
::System::Collections::IEnumerator* HMUI::HoverHintController::ShowHintAfterDelay(::HMUI::HoverHint* hoverHint, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::ShowHintAfterDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowHintAfterDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint), ::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, hoverHint, delay);
}
// Autogenerated method: HMUI.HoverHintController.HideHintAfterDelay
::System::Collections::IEnumerator* HMUI::HoverHintController::HideHintAfterDelay(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::HideHintAfterDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideHintAfterDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: HMUI.HoverHintController.SetupAndShowHintPanel
void HMUI::HoverHintController::SetupAndShowHintPanel(::HMUI::HoverHint* hoverHint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::SetupAndShowHintPanel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupAndShowHintPanel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hoverHint);
}
// Autogenerated method: HMUI.HoverHintController.GetScreenTransformForHoverHint
::UnityEngine::Transform* HMUI::HoverHintController::GetScreenTransformForHoverHint(::HMUI::HoverHint* hoverHint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::GetScreenTransformForHoverHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "HoverHintController", "GetScreenTransformForHoverHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hoverHint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10
#include "HMUI/HoverHintController_-ShowHintAfterDelay-d__10.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.HoverHint hoverHint
[[deprecated("Use field access instead!")]] ::HMUI::HoverHint*& HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_hoverHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_hoverHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverHint"))->offset;
  return *reinterpret_cast<::HMUI::HoverHint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.HoverHintController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::HoverHintController*& HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::HoverHintController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10.System.IDisposable.Dispose
void HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10.MoveNext
bool HMUI::HoverHintController::$ShowHintAfterDelay$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<ShowHintAfterDelay>d__10.System.Collections.IEnumerator.Reset
void HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$ShowHintAfterDelay$d__10::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11
#include "HMUI/HoverHintController_-HideHintAfterDelay-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.HoverHintController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::HoverHintController*& HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::HoverHintController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::HoverHintController::$HideHintAfterDelay$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::HoverHintController::$HideHintAfterDelay$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11.System.IDisposable.Dispose
void HMUI::HoverHintController::$HideHintAfterDelay$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11.MoveNext
bool HMUI::HoverHintController::$HideHintAfterDelay$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintController/HMUI.<HideHintAfterDelay>d__11.System.Collections.IEnumerator.Reset
void HMUI::HoverHintController::$HideHintAfterDelay$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintController::$HideHintAfterDelay$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HoverHintPanel
#include "HMUI/HoverHintPanel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::HoverHintPanel::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _padding
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& HMUI::HoverHintPanel::dyn__padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn__padding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_padding"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _containerPadding
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& HMUI::HoverHintPanel::dyn__containerPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn__containerPadding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerPadding"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _separator
[[deprecated("Use field access instead!")]] float& HMUI::HoverHintPanel::dyn__separator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn__separator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separator"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _zOffset
[[deprecated("Use field access instead!")]] float& HMUI::HoverHintPanel::dyn__zOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn__zOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isShown>k__BackingField
[[deprecated("Use field access instead!")]] bool& HMUI::HoverHintPanel::dyn_$isShown$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::dyn_$isShown$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isShown>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverHintPanel.get_isShown
bool HMUI::HoverHintPanel::get_isShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::get_isShown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isShown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintPanel.set_isShown
void HMUI::HoverHintPanel::set_isShown(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::set_isShown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isShown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.HoverHintPanel.Awake
void HMUI::HoverHintPanel::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintPanel.Show
void HMUI::HoverHintPanel::Show(::StringW text, ::UnityEngine::Transform* parent, ::UnityEngine::Vector2 containerSize, ::UnityEngine::Rect spawnRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(containerSize), ::il2cpp_utils::ExtractType(spawnRect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text, parent, containerSize, spawnRect);
}
// Autogenerated method: HMUI.HoverHintPanel.Hide
void HMUI::HoverHintPanel::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverHintPanel.CalculatePanelPosition
::UnityEngine::Vector2 HMUI::HoverHintPanel::CalculatePanelPosition(::UnityEngine::Vector2 containerSize, ::UnityEngine::Rect spawnRect, ::UnityEngine::Vector2 panelSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverHintPanel::CalculatePanelPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePanelPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(containerSize), ::il2cpp_utils::ExtractType(spawnRect), ::il2cpp_utils::ExtractType(panelSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, containerSize, spawnRect, panelSize);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Interactable
#include "HMUI/Interactable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _interactable
[[deprecated("Use field access instead!")]] bool& HMUI::Interactable::dyn__interactable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::dyn__interactable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interactable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.Interactable,System.Boolean> interactableChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::Interactable*, bool>*& HMUI::Interactable::dyn_interactableChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::dyn_interactableChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactableChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::Interactable*, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.Interactable.get_interactable
bool HMUI::Interactable::get_interactable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::get_interactable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interactable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Interactable.set_interactable
void HMUI::Interactable::set_interactable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::set_interactable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_interactable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Interactable.add_interactableChangeEvent
void HMUI::Interactable::add_interactableChangeEvent(::System::Action_2<::HMUI::Interactable*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::add_interactableChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_interactableChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Interactable.remove_interactableChangeEvent
void HMUI::Interactable::remove_interactableChangeEvent(::System::Action_2<::HMUI::Interactable*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Interactable::remove_interactableChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_interactableChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.UIKeyboard
#include "HMUI/UIKeyboard.hpp"
// Including type: HMUI.UIKeyboard/HMUI.<>c__DisplayClass13_0
#include "HMUI/UIKeyboard_--c__DisplayClass13_0.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _okButton
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& HMUI::UIKeyboard::dyn__okButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn__okButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_okButton"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action okButtonWasPressedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::UIKeyboard::dyn_okButtonWasPressedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn_okButtonWasPressedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "okButtonWasPressedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Char> keyWasPressedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppChar>*& HMUI::UIKeyboard::dyn_keyWasPressedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn_keyWasPressedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "keyWasPressedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppChar>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action deleteButtonWasPressedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::UIKeyboard::dyn_deleteButtonWasPressedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn_deleteButtonWasPressedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deleteButtonWasPressedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HMUI.ButtonBinder _buttonBinder
[[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& HMUI::UIKeyboard::dyn__buttonBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn__buttonBinder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buttonBinder"))->offset;
  return *reinterpret_cast<::HMUI::ButtonBinder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _shouldCapitalize
[[deprecated("Use field access instead!")]] bool& HMUI::UIKeyboard::dyn__shouldCapitalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn__shouldCapitalize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shouldCapitalize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<TMPro.TextMeshProUGUI> _letterBtnTexts
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>*& HMUI::UIKeyboard::dyn__letterBtnTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::dyn__letterBtnTexts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_letterBtnTexts"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TextMeshProUGUI*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.UIKeyboard.add_okButtonWasPressedEvent
void HMUI::UIKeyboard::add_okButtonWasPressedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::add_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.remove_okButtonWasPressedEvent
void HMUI::UIKeyboard::remove_okButtonWasPressedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::remove_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.add_keyWasPressedEvent
void HMUI::UIKeyboard::add_keyWasPressedEvent(::System::Action_1<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::add_keyWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_keyWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.remove_keyWasPressedEvent
void HMUI::UIKeyboard::remove_keyWasPressedEvent(::System::Action_1<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::remove_keyWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_keyWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.add_deleteButtonWasPressedEvent
void HMUI::UIKeyboard::add_deleteButtonWasPressedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::add_deleteButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.remove_deleteButtonWasPressedEvent
void HMUI::UIKeyboard::remove_deleteButtonWasPressedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::remove_deleteButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.UIKeyboard.Awake
void HMUI::UIKeyboard::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboard.HandleKeyPress
void HMUI::UIKeyboard::HandleKeyPress(::UnityEngine::KeyCode keyCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::HandleKeyPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleKeyPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyCode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyCode);
}
// Autogenerated method: HMUI.UIKeyboard.HandleCapsLockPressed
void HMUI::UIKeyboard::HandleCapsLockPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::HandleCapsLockPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCapsLockPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboard.SetKeyboardCapitalization
void HMUI::UIKeyboard::SetKeyboardCapitalization(bool capitalize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::SetKeyboardCapitalization");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardCapitalization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capitalize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capitalize);
}
// Autogenerated method: HMUI.UIKeyboard.HasFontStyle
bool HMUI::UIKeyboard::HasFontStyle(::TMPro::TextMeshProUGUI* text, ::TMPro::FontStyles style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::HasFontStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasFontStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, text, style);
}
// Autogenerated method: HMUI.UIKeyboard.OnEnable
void HMUI::UIKeyboard::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboard.<Awake>b__13_0
void HMUI::UIKeyboard::$Awake$b__13_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::<Awake>b__13_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__13_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboard.<Awake>b__13_1
void HMUI::UIKeyboard::$Awake$b__13_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::<Awake>b__13_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__13_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.UIKeyboard/HMUI.<>c__DisplayClass13_0
#include "HMUI/UIKeyboard_--c__DisplayClass13_0.hpp"
// Including type: HMUI.UIKeyboardKey
#include "HMUI/UIKeyboardKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public HMUI.UIKeyboardKey key
[[deprecated("Use field access instead!")]] ::HMUI::UIKeyboardKey*& HMUI::UIKeyboard::$$c__DisplayClass13_0::dyn_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::$$c__DisplayClass13_0::dyn_key");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "key"))->offset;
  return *reinterpret_cast<::HMUI::UIKeyboardKey**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.UIKeyboard <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::UIKeyboard*& HMUI::UIKeyboard::$$c__DisplayClass13_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::$$c__DisplayClass13_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::UIKeyboard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.UIKeyboard/HMUI.<>c__DisplayClass13_0.<Awake>b__2
void HMUI::UIKeyboard::$$c__DisplayClass13_0::$Awake$b__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboard::$$c__DisplayClass13_0::<Awake>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.UIKeyboardKey
#include "HMUI/UIKeyboardKey.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.KeyCode _keyCode
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& HMUI::UIKeyboardKey::dyn__keyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::dyn__keyCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyCode"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::UIKeyboardKey::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _overrideText
[[deprecated("Use field access instead!")]] ::StringW& HMUI::UIKeyboardKey::dyn__overrideText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::dyn__overrideText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _canBeUppercase
[[deprecated("Use field access instead!")]] bool& HMUI::UIKeyboardKey::dyn__canBeUppercase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::dyn__canBeUppercase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canBeUppercase"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.UIKeyboardKey.get_keyCode
::UnityEngine::KeyCode HMUI::UIKeyboardKey::get_keyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::get_keyCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::KeyCode, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboardKey.get_canBeUppercase
bool HMUI::UIKeyboardKey::get_canBeUppercase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::get_canBeUppercase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeUppercase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboardKey.Awake
void HMUI::UIKeyboardKey::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.UIKeyboardKey.OnValidate
void HMUI::UIKeyboardKey::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UIKeyboardKey::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HoverTextController
#include "HMUI/HoverTextController.hpp"
// Including type: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10
#include "HMUI/HoverTextController_-ShowTextCoroutine-d__10.hpp"
// Including type: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12
#include "HMUI/HoverTextController_-HideTextCoroutine-d__12.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _textMesh
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::HoverTextController::dyn__textMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__textMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textMesh"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInDelay
[[deprecated("Use field access instead!")]] float& HMUI::HoverTextController::dyn__fadeInDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__fadeInDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInSpeed
[[deprecated("Use field access instead!")]] float& HMUI::HoverTextController::dyn__fadeInSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__fadeInSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutSpeed
[[deprecated("Use field access instead!")]] float& HMUI::HoverTextController::dyn__fadeOutSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__fadeOutSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isFadingOut
[[deprecated("Use field access instead!")]] bool& HMUI::HoverTextController::dyn__isFadingOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__isFadingOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isFadingOut"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isFadingIn
[[deprecated("Use field access instead!")]] bool& HMUI::HoverTextController::dyn__isFadingIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::dyn__isFadingIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isFadingIn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverTextController.Awake
void HMUI::HoverTextController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController.OnDisable
void HMUI::HoverTextController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController.OnApplicationFocus
void HMUI::HoverTextController::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: HMUI.HoverTextController.ShowText
void HMUI::HoverTextController::ShowText(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::ShowText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: HMUI.HoverTextController.ShowTextCoroutine
::System::Collections::IEnumerator* HMUI::HoverTextController::ShowTextCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::ShowTextCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowTextCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController.HideText
void HMUI::HoverTextController::HideText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::HideText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController.HideTextCoroutine
::System::Collections::IEnumerator* HMUI::HoverTextController::HideTextCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::HideTextCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideTextCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10
#include "HMUI/HoverTextController_-ShowTextCoroutine-d__10.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.HoverTextController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::HoverTextController*& HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::HoverTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::HoverTextController::$ShowTextCoroutine$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::HoverTextController::$ShowTextCoroutine$d__10::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10.System.IDisposable.Dispose
void HMUI::HoverTextController::$ShowTextCoroutine$d__10::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10.MoveNext
bool HMUI::HoverTextController::$ShowTextCoroutine$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<ShowTextCoroutine>d__10.System.Collections.IEnumerator.Reset
void HMUI::HoverTextController::$ShowTextCoroutine$d__10::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$ShowTextCoroutine$d__10::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12
#include "HMUI/HoverTextController_-HideTextCoroutine-d__12.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.HoverTextController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::HoverTextController*& HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::HoverTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::HoverTextController::$HideTextCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::HoverTextController::$HideTextCoroutine$d__12::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12.System.IDisposable.Dispose
void HMUI::HoverTextController::$HideTextCoroutine$d__12::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12.MoveNext
bool HMUI::HoverTextController::$HideTextCoroutine$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextController/HMUI.<HideTextCoroutine>d__12.System.Collections.IEnumerator.Reset
void HMUI::HoverTextController::$HideTextCoroutine$d__12::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextController::$HideTextCoroutine$d__12::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HoverTextSetter
#include "HMUI/HoverTextSetter.hpp"
// Including type: HMUI.HoverTextController
#include "HMUI/HoverTextController.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HMUI.HoverTextController _hoverTextController
[[deprecated("Use field access instead!")]] ::HMUI::HoverTextController*& HMUI::HoverTextSetter::dyn__hoverTextController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::dyn__hoverTextController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverTextController"))->offset;
  return *reinterpret_cast<::HMUI::HoverTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _text
[[deprecated("Use field access instead!")]] ::StringW& HMUI::HoverTextSetter::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.HoverTextSetter.get_text
::StringW HMUI::HoverTextSetter::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HoverTextSetter.set_text
void HMUI::HoverTextSetter::set_text(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.HoverTextSetter.OnPointerEnter
void HMUI::HoverTextSetter::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.HoverTextSetter.OnPointerExit
void HMUI::HoverTextSetter::OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.HoverTextSetter.OnDisable
void HMUI::HoverTextSetter::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::HoverTextSetter::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.RaycastUITopLevelChecker
#include "HMUI/RaycastUITopLevelChecker.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> results
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*& HMUI::RaycastUITopLevelChecker::dyn_results() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RaycastUITopLevelChecker::dyn_results");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "results"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Canvas _canvas
[[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& HMUI::RaycastUITopLevelChecker::dyn__canvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RaycastUITopLevelChecker::dyn__canvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvas"))->offset;
  return *reinterpret_cast<::UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.RaycastUITopLevelChecker.get_isOnTop
bool HMUI::RaycastUITopLevelChecker::get_isOnTop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RaycastUITopLevelChecker::get_isOnTop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOnTop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RaycastUITopLevelChecker.Awake
void HMUI::RaycastUITopLevelChecker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RaycastUITopLevelChecker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.IconSegmentedControl
#include "HMUI/IconSegmentedControl.hpp"
// Including type: HMUI.IconSegmentedControl/HMUI.DataItem
#include "HMUI/IconSegmentedControl_DataItem.hpp"
// Including type: HMUI.IconSegmentedControlCell
#include "HMUI/IconSegmentedControlCell.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _iconSize
[[deprecated("Use field access instead!")]] float& HMUI::IconSegmentedControl::dyn__iconSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__iconSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iconSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideCellSize
[[deprecated("Use field access instead!")]] bool& HMUI::IconSegmentedControl::dyn__overrideCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__overrideCellSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideCellSize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _padding
[[deprecated("Use field access instead!")]] float& HMUI::IconSegmentedControl::dyn__padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__padding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_padding"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hideCellBackground
[[deprecated("Use field access instead!")]] bool& HMUI::IconSegmentedControl::dyn__hideCellBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__hideCellBackground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideCellBackground"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.IconSegmentedControlCell _firstCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::IconSegmentedControlCell*& HMUI::IconSegmentedControl::dyn__firstCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__firstCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::IconSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.IconSegmentedControlCell _lastCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::IconSegmentedControlCell*& HMUI::IconSegmentedControl::dyn__lastCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__lastCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::IconSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.IconSegmentedControlCell _middleCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::IconSegmentedControlCell*& HMUI::IconSegmentedControl::dyn__middleCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__middleCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::IconSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.IconSegmentedControlCell _singleCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::IconSegmentedControlCell*& HMUI::IconSegmentedControl::dyn__singleCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__singleCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_singleCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::IconSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& HMUI::IconSegmentedControl::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.IconSegmentedControl/HMUI.DataItem[] _dataItems
[[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::IconSegmentedControl::DataItem*>& HMUI::IconSegmentedControl::dyn__dataItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__dataItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataItems"))->offset;
  return *reinterpret_cast<::ArrayW<::HMUI::IconSegmentedControl::DataItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& HMUI::IconSegmentedControl::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.IconSegmentedControl.Init
void HMUI::IconSegmentedControl::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl.SetData
void HMUI::IconSegmentedControl::SetData(::ArrayW<::HMUI::IconSegmentedControl::DataItem*> dataItems) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataItems)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataItems);
}
// Autogenerated method: HMUI.IconSegmentedControl.NumberOfCells
int HMUI::IconSegmentedControl::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl.CellForCellNumber
::HMUI::SegmentedControlCell* HMUI::IconSegmentedControl::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated method: HMUI.IconSegmentedControl.InstantiateCell
::HMUI::IconSegmentedControlCell* HMUI::IconSegmentedControl::InstantiateCell(::UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::InstantiateCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::IconSegmentedControlCell*, false>(this, ___internal__method, prefab);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.IconSegmentedControl/HMUI.DataItem
#include "HMUI/IconSegmentedControl_DataItem.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite <icon>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& HMUI::IconSegmentedControl::DataItem::dyn_$icon$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::dyn_$icon$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<icon>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <hintText>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& HMUI::IconSegmentedControl::DataItem::dyn_$hintText$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::dyn_$hintText$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hintText>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.IconSegmentedControl/HMUI.DataItem.get_icon
::UnityEngine::Sprite* HMUI::IconSegmentedControl::DataItem::get_icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::get_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl/HMUI.DataItem.set_icon
void HMUI::IconSegmentedControl::DataItem::set_icon(::UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::set_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControl/HMUI.DataItem.get_hintText
::StringW HMUI::IconSegmentedControl::DataItem::get_hintText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::get_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl/HMUI.DataItem.set_hintText
void HMUI::IconSegmentedControl::DataItem::set_hintText(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControl::DataItem::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.IconSegmentedControlCell
#include "HMUI/IconSegmentedControlCell.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image _icon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& HMUI::IconSegmentedControlCell::dyn__icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::dyn__icon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_icon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.HoverHint _hoverHint
[[deprecated("Use field access instead!")]] ::HMUI::HoverHint*& HMUI::IconSegmentedControlCell::dyn__hoverHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::dyn__hoverHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverHint"))->offset;
  return *reinterpret_cast<::HMUI::HoverHint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _backgroundGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& HMUI::IconSegmentedControlCell::dyn__backgroundGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::dyn__backgroundGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_backgroundGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.get_sprite
::UnityEngine::Sprite* HMUI::IconSegmentedControlCell::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_sprite
void HMUI::IconSegmentedControlCell::set_sprite(::UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::set_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_hintText
void HMUI::IconSegmentedControlCell::set_hintText(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_iconSize
void HMUI::IconSegmentedControlCell::set_iconSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::set_iconSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_iconSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_hideBackgroundImage
void HMUI::IconSegmentedControlCell::set_hideBackgroundImage(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::IconSegmentedControlCell::set_hideBackgroundImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideBackgroundImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SegmentedControl
#include "HMUI/SegmentedControl.hpp"
// Including type: HMUI.SegmentedControl/HMUI.IDataSource
#include "HMUI/SegmentedControl_IDataSource.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _separatorPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& HMUI::SegmentedControl::dyn__separatorPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__separatorPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separatorPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.SegmentedControl,System.Int32> didSelectCellEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::SegmentedControl*, int>*& HMUI::SegmentedControl::dyn_didSelectCellEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn_didSelectCellEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didSelectCellEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::SegmentedControl*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfCells
[[deprecated("Use field access instead!")]] int& HMUI::SegmentedControl::dyn__numberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__numberOfCells");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfCells"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<HMUI.SegmentedControlCell> _cells
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HMUI::SegmentedControlCell*>*& HMUI::SegmentedControl::dyn__cells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__cells");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cells"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HMUI::SegmentedControlCell*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.GameObject> _separators
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& HMUI::SegmentedControl::dyn__separators() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__separators");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separators"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.SegmentedControl/HMUI.IDataSource _dataSource
[[deprecated("Use field access instead!")]] ::HMUI::SegmentedControl::IDataSource*& HMUI::SegmentedControl::dyn__dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__dataSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataSource"))->offset;
  return *reinterpret_cast<::HMUI::SegmentedControl::IDataSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _selectedCellNumber
[[deprecated("Use field access instead!")]] int& HMUI::SegmentedControl::dyn__selectedCellNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__selectedCellNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_selectedCellNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,System.Action`1<System.Int32>> _callbacks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Action_1<int>*>*& HMUI::SegmentedControl::dyn__callbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::dyn__callbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callbacks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::System::Action_1<int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.SegmentedControl.get_dataSource
::HMUI::SegmentedControl::IDataSource* HMUI::SegmentedControl::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::SegmentedControl::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.set_dataSource
void HMUI::SegmentedControl::set_dataSource(::HMUI::SegmentedControl::IDataSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::set_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.get_selectedCellNumber
int HMUI::SegmentedControl::get_selectedCellNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::get_selectedCellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.get_cells
::System::Collections::Generic::IReadOnlyList_1<::HMUI::SegmentedControlCell*>* HMUI::SegmentedControl::get_cells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::get_cells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<::HMUI::SegmentedControlCell*>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.add_didSelectCellEvent
void HMUI::SegmentedControl::add_didSelectCellEvent(::System::Action_2<::HMUI::SegmentedControl*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::add_didSelectCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.remove_didSelectCellEvent
void HMUI::SegmentedControl::remove_didSelectCellEvent(::System::Action_2<::HMUI::SegmentedControl*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::remove_didSelectCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.CreateCells
void HMUI::SegmentedControl::CreateCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::CreateCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.HandleCellSelectionDidChange
void HMUI::SegmentedControl::HandleCellSelectionDidChange(::HMUI::SelectableCell* selectableCell, ::HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::HandleCellSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCellSelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectableCell), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(changeOwner)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.SegmentedControl.SetCallbackForCell
void HMUI::SegmentedControl::SetCallbackForCell(int cellNumber, ::System::Action_1<int>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::SetCallbackForCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCallbackForCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cellNumber, callback);
}
// Autogenerated method: HMUI.SegmentedControl.ReloadData
void HMUI::SegmentedControl::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.SelectCellWithNumber
void HMUI::SegmentedControl::SelectCellWithNumber(int selectCellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::SelectCellWithNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectCellNumber)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, selectCellNumber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SegmentedControl/HMUI.IDataSource
#include "HMUI/SegmentedControl_IDataSource.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SegmentedControl/HMUI.IDataSource.NumberOfCells
int HMUI::SegmentedControl::IDataSource::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::IDataSource::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl/HMUI.IDataSource.CellForCellNumber
::HMUI::SegmentedControlCell* HMUI::SegmentedControl::IDataSource::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControl::IDataSource::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
// Including type: HMUI.SegmentedControl
#include "HMUI/SegmentedControl.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <cellNumber>k__BackingField
[[deprecated("Use field access instead!")]] int& HMUI::SegmentedControlCell::dyn_$cellNumber$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::dyn_$cellNumber$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<cellNumber>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.SegmentedControl _segmentedControl
[[deprecated("Use field access instead!")]] ::HMUI::SegmentedControl*& HMUI::SegmentedControlCell::dyn__segmentedControl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::dyn__segmentedControl");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_segmentedControl"))->offset;
  return *reinterpret_cast<::HMUI::SegmentedControl**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.SegmentedControlCell.get_cellNumber
int HMUI::SegmentedControlCell::get_cellNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::get_cellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControlCell.set_cellNumber
void HMUI::SegmentedControlCell::set_cellNumber(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::set_cellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControlCell.SegmentedControlSetup
void HMUI::SegmentedControlCell::SegmentedControlSetup(::HMUI::SegmentedControl* segmentedControl, int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::SegmentedControlSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SegmentedControlSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segmentedControl), ::il2cpp_utils::ExtractType(cellNumber)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, segmentedControl, cellNumber);
}
// Autogenerated method: HMUI.SegmentedControlCell.InternalToggle
void HMUI::SegmentedControlCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::SegmentedControlCell::InternalToggle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TextSegmentedControl
#include "HMUI/TextSegmentedControl.hpp"
// Including type: HMUI.TextSegmentedControlCell
#include "HMUI/TextSegmentedControlCell.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _fontSize
[[deprecated("Use field access instead!")]] float& HMUI::TextSegmentedControl::dyn__fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__fontSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fontSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideCellSize
[[deprecated("Use field access instead!")]] bool& HMUI::TextSegmentedControl::dyn__overrideCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__overrideCellSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideCellSize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _padding
[[deprecated("Use field access instead!")]] float& HMUI::TextSegmentedControl::dyn__padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__padding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_padding"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hideCellBackground
[[deprecated("Use field access instead!")]] bool& HMUI::TextSegmentedControl::dyn__hideCellBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__hideCellBackground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideCellBackground"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.TextSegmentedControlCell _firstCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::TextSegmentedControlCell*& HMUI::TextSegmentedControl::dyn__firstCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__firstCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::TextSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.TextSegmentedControlCell _lastCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::TextSegmentedControlCell*& HMUI::TextSegmentedControl::dyn__lastCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__lastCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::TextSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.TextSegmentedControlCell _singleCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::TextSegmentedControlCell*& HMUI::TextSegmentedControl::dyn__singleCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__singleCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_singleCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::TextSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.TextSegmentedControlCell _middleCellPrefab
[[deprecated("Use field access instead!")]] ::HMUI::TextSegmentedControlCell*& HMUI::TextSegmentedControl::dyn__middleCellPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__middleCellPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleCellPrefab"))->offset;
  return *reinterpret_cast<::HMUI::TextSegmentedControlCell**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& HMUI::TextSegmentedControl::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<System.String> _texts
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::StringW>*& HMUI::TextSegmentedControl::dyn__texts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::dyn__texts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texts"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.TextSegmentedControl.SetTexts
void HMUI::TextSegmentedControl::SetTexts(::System::Collections::Generic::IReadOnlyList_1<::StringW>* texts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::SetTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texts)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, texts);
}
// Autogenerated method: HMUI.TextSegmentedControl.NumberOfCells
int HMUI::TextSegmentedControl::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControl.CellForCellNumber
::HMUI::SegmentedControlCell* HMUI::TextSegmentedControl::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated method: HMUI.TextSegmentedControl.InstantiateCell
::HMUI::TextSegmentedControlCell* HMUI::TextSegmentedControl::InstantiateCell(::UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControl::InstantiateCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::TextSegmentedControlCell*, false>(this, ___internal__method, prefab);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TextSegmentedControlCell
#include "HMUI/TextSegmentedControlCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::TextSegmentedControlCell::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _backgroundGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& HMUI::TextSegmentedControlCell::dyn__backgroundGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::dyn__backgroundGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_backgroundGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_text
::StringW HMUI::TextSegmentedControlCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.set_text
void HMUI::TextSegmentedControlCell::set_text(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_fontSize
float HMUI::TextSegmentedControlCell::get_fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::get_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.set_fontSize
void HMUI::TextSegmentedControlCell::set_fontSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::set_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.set_hideBackgroundImage
void HMUI::TextSegmentedControlCell::set_hideBackgroundImage(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::set_hideBackgroundImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideBackgroundImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_preferredWidth
float HMUI::TextSegmentedControlCell::get_preferredWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSegmentedControlCell::get_preferredWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CircleSlider
#include "HMUI/CircleSlider.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _handleRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::CircleSlider::dyn__handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__handleRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cursorRadius
[[deprecated("Use field access instead!")]] float& HMUI::CircleSlider::dyn__cursorRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__cursorRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _normalizedValue
[[deprecated("Use field access instead!")]] float& HMUI::CircleSlider::dyn__normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__normalizedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalizedValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.CircleSlider,System.Single> normalizedValueDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::CircleSlider*, float>*& HMUI::CircleSlider::dyn_normalizedValueDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn_normalizedValueDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "normalizedValueDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::CircleSlider*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _containerRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::CircleSlider::dyn__containerRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__containerRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Graphic _handleGraphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& HMUI::CircleSlider::dyn__handleGraphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__handleGraphic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleGraphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.DrivenRectTransformTracker _tracker
[[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& HMUI::CircleSlider::dyn__tracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::dyn__tracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tracker"))->offset;
  return *reinterpret_cast<::UnityEngine::DrivenRectTransformTracker*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CircleSlider.get_handleRect
::UnityEngine::RectTransform* HMUI::CircleSlider::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.set_handleRect
void HMUI::CircleSlider::set_handleRect(::UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.set_handleColor
void HMUI::CircleSlider::set_handleColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.get_normalizedValue
float HMUI::CircleSlider::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.set_normalizedValue
void HMUI::CircleSlider::set_normalizedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.UnityEngine.UI.ICanvasElement.get_transform
::UnityEngine::Transform* HMUI::CircleSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.add_normalizedValueDidChangeEvent
void HMUI::CircleSlider::add_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::CircleSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.remove_normalizedValueDidChangeEvent
void HMUI::CircleSlider::remove_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::CircleSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.Rebuild
void HMUI::CircleSlider::Rebuild(::UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.CircleSlider.LayoutComplete
void HMUI::CircleSlider::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.GraphicUpdateComplete
void HMUI::CircleSlider::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.UpdateCachedReferences
void HMUI::CircleSlider::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.CircleSlider.UpdateVisuals
void HMUI::CircleSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.UpdateDrag
void HMUI::CircleSlider::UpdateDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.MayDrag
bool HMUI::CircleSlider::MayDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnBeginDrag
void HMUI::CircleSlider::OnBeginDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnDrag
void HMUI::CircleSlider::OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnInitializePotentialDrag
void HMUI::CircleSlider::OnInitializePotentialDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnEnable
void HMUI::CircleSlider::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnDisable
void HMUI::CircleSlider::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnRectTransformDimensionsChange
void HMUI::CircleSlider::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnPointerDown
void HMUI::CircleSlider::OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleSlider::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ColorGradientSlider
#include "HMUI/ColorGradientSlider.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C9CAC
// Autogenerated static field getter
// Get static field: static private readonly System.Text.StringBuilder _stringBuilder
::System::Text::StringBuilder* HMUI::ColorGradientSlider::_get__stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::_get__stringBuilder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::StringBuilder*>("HMUI", "ColorGradientSlider", "_stringBuilder"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Text.StringBuilder _stringBuilder
void HMUI::ColorGradientSlider::_set__stringBuilder(::System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::_set__stringBuilder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ColorGradientSlider", "_stringBuilder", value));
}
// Autogenerated instance field getter
// Get instance field: private System.String _textPrefix
[[deprecated("Use field access instead!")]] ::StringW& HMUI::ColorGradientSlider::dyn__textPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__textPrefix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textPrefix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color0
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HMUI::ColorGradientSlider::dyn__color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__color0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color0"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color1
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HMUI::ColorGradientSlider::dyn__color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__color1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color1"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ImageView[] _gradientImages
[[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::ImageView*>& HMUI::ColorGradientSlider::dyn__gradientImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__gradientImages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gradientImages"))->offset;
  return *reinterpret_cast<::ArrayW<::HMUI::ImageView*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _darkColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HMUI::ColorGradientSlider::dyn__darkColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__darkColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_darkColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _lightColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HMUI::ColorGradientSlider::dyn__lightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn__lightColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`3<HMUI.ColorGradientSlider,UnityEngine.Color,ColorChangeUIEventType> colorDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_3<::HMUI::ColorGradientSlider*, ::UnityEngine::Color, ::GlobalNamespace::ColorChangeUIEventType>*& HMUI::ColorGradientSlider::dyn_colorDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::dyn_colorDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_3<::HMUI::ColorGradientSlider*, ::UnityEngine::Color, ::GlobalNamespace::ColorChangeUIEventType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ColorGradientSlider.add_colorDidChangeEvent
void HMUI::ColorGradientSlider::add_colorDidChangeEvent(::System::Action_3<::HMUI::ColorGradientSlider*, ::UnityEngine::Color, ::GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::add_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ColorGradientSlider.remove_colorDidChangeEvent
void HMUI::ColorGradientSlider::remove_colorDidChangeEvent(::System::Action_3<::HMUI::ColorGradientSlider*, ::UnityEngine::Color, ::GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::remove_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ColorGradientSlider..cctor
void HMUI::ColorGradientSlider::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ColorGradientSlider", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.SetColors
void HMUI::ColorGradientSlider::SetColors(::UnityEngine::Color color0, ::UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color0, color1);
}
// Autogenerated method: HMUI.ColorGradientSlider.HandleNormalizedValueDidChange
void HMUI::ColorGradientSlider::HandleNormalizedValueDidChange(::HMUI::TextSlider* slider, float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: HMUI.ColorGradientSlider.Awake
void HMUI::ColorGradientSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.OnDestroy
void HMUI::ColorGradientSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.UpdateVisuals
void HMUI::ColorGradientSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.TextForNormalizedValue
::StringW HMUI::ColorGradientSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.ColorGradientSlider.OnPointerUp
void HMUI::ColorGradientSlider::OnPointerUp(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ColorGradientSlider::OnPointerUp");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CustomFormatRangeValuesSlider
#include "HMUI/CustomFormatRangeValuesSlider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _formatString
[[deprecated("Use field access instead!")]] ::StringW& HMUI::CustomFormatRangeValuesSlider::dyn__formatString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CustomFormatRangeValuesSlider::dyn__formatString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_formatString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CustomFormatRangeValuesSlider.TextForValue
::StringW HMUI::CustomFormatRangeValuesSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CustomFormatRangeValuesSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.PercentSlider
#include "HMUI/PercentSlider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.PercentSlider.TextForValue
::StringW HMUI::PercentSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::PercentSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.RangeValuesTextSlider
#include "HMUI/RangeValuesTextSlider.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _minValue
[[deprecated("Use field access instead!")]] float& HMUI::RangeValuesTextSlider::dyn__minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn__minValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxValue
[[deprecated("Use field access instead!")]] float& HMUI::RangeValuesTextSlider::dyn__maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn__maxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _decButton
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& HMUI::RangeValuesTextSlider::dyn__decButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn__decButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_decButton"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _incButton
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& HMUI::RangeValuesTextSlider::dyn__incButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn__incButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_incButton"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.RangeValuesTextSlider,System.Single> valueDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::RangeValuesTextSlider*, float>*& HMUI::RangeValuesTextSlider::dyn_valueDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn_valueDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "valueDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::RangeValuesTextSlider*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ButtonBinder _buttonBinder
[[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& HMUI::RangeValuesTextSlider::dyn__buttonBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::dyn__buttonBinder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buttonBinder"))->offset;
  return *reinterpret_cast<::HMUI::ButtonBinder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.get_minValue
float HMUI::RangeValuesTextSlider::get_minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::get_minValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_minValue
void HMUI::RangeValuesTextSlider::set_minValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::set_minValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_minValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.get_maxValue
float HMUI::RangeValuesTextSlider::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_maxValue
void HMUI::RangeValuesTextSlider::set_maxValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::set_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.get_value
float HMUI::RangeValuesTextSlider::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_value
void HMUI::RangeValuesTextSlider::set_value(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.add_valueDidChangeEvent
void HMUI::RangeValuesTextSlider::add_valueDidChangeEvent(::System::Action_2<::HMUI::RangeValuesTextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::add_valueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_valueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.remove_valueDidChangeEvent
void HMUI::RangeValuesTextSlider::remove_valueDidChangeEvent(::System::Action_2<::HMUI::RangeValuesTextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::remove_valueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_valueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.HandleNormalizedValueDidChange
void HMUI::RangeValuesTextSlider::HandleNormalizedValueDidChange(::HMUI::TextSlider* slider, float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.ConvertFromNormalizedValue
float HMUI::RangeValuesTextSlider::ConvertFromNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::ConvertFromNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertFromNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.NormalizeValue
float HMUI::RangeValuesTextSlider::NormalizeValue(float rangeValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::NormalizeValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NormalizeValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rangeValue)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, rangeValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.TextForValue
::StringW HMUI::RangeValuesTextSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.<Awake>b__17_0
void HMUI::RangeValuesTextSlider::$Awake$b__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::<Awake>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.<Awake>b__17_1
void HMUI::RangeValuesTextSlider::$Awake$b__17_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::<Awake>b__17_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__17_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.Awake
void HMUI::RangeValuesTextSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.OnDestroy
void HMUI::RangeValuesTextSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.TextForNormalizedValue
::StringW HMUI::RangeValuesTextSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::RangeValuesTextSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Slider2D
#include "HMUI/Slider2D.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _handleRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::Slider2D::dyn__handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn__handleRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _normalizedValue
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& HMUI::Slider2D::dyn__normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn__normalizedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalizedValue"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.Slider2D,UnityEngine.Vector2> normalizedValueDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::Slider2D*, ::UnityEngine::Vector2>*& HMUI::Slider2D::dyn_normalizedValueDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn_normalizedValueDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "normalizedValueDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::Slider2D*, ::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _containerRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::Slider2D::dyn__containerRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn__containerRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Graphic _handleGraphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& HMUI::Slider2D::dyn__handleGraphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn__handleGraphic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleGraphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.DrivenRectTransformTracker _tracker
[[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& HMUI::Slider2D::dyn__tracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::dyn__tracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tracker"))->offset;
  return *reinterpret_cast<::UnityEngine::DrivenRectTransformTracker*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.Slider2D.get_handleRect
::UnityEngine::RectTransform* HMUI::Slider2D::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.set_handleRect
void HMUI::Slider2D::set_handleRect(::UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.set_handleColor
void HMUI::Slider2D::set_handleColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.get_normalizedValue
::UnityEngine::Vector2 HMUI::Slider2D::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.set_normalizedValue
void HMUI::Slider2D::set_normalizedValue(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.UnityEngine.UI.ICanvasElement.get_transform
::UnityEngine::Transform* HMUI::Slider2D::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.add_normalizedValueDidChangeEvent
void HMUI::Slider2D::add_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::Slider2D*, ::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.remove_normalizedValueDidChangeEvent
void HMUI::Slider2D::remove_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::Slider2D*, ::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.Rebuild
void HMUI::Slider2D::Rebuild(::UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.Slider2D.LayoutComplete
void HMUI::Slider2D::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.GraphicUpdateComplete
void HMUI::Slider2D::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.UpdateCachedReferences
void HMUI::Slider2D::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.SetNormalizedValue
void HMUI::Slider2D::SetNormalizedValue(::UnityEngine::Vector2 input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.Slider2D.SetNormalizedValue
void HMUI::Slider2D::SetNormalizedValue(::UnityEngine::Vector2 input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.Slider2D.UpdateVisuals
void HMUI::Slider2D::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.UpdateDrag
void HMUI::Slider2D::UpdateDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.MayDrag
bool HMUI::Slider2D::MayDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnBeginDrag
void HMUI::Slider2D::OnBeginDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnDrag
void HMUI::Slider2D::OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnInitializePotentialDrag
void HMUI::Slider2D::OnInitializePotentialDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnEnable
void HMUI::Slider2D::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnDisable
void HMUI::Slider2D::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnRectTransformDimensionsChange
void HMUI::Slider2D::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnPointerDown
void HMUI::Slider2D::OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnPointerEnter
void HMUI::Slider2D::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.DoStateTransition
void HMUI::Slider2D::DoStateTransition(::UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Slider2D::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TextSlider
#include "HMUI/TextSlider.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _valueText
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& HMUI::TextSlider::dyn__valueText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__valueText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valueText"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _handleRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::TextSlider::dyn__handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__handleRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enableDragging
[[deprecated("Use field access instead!")]] bool& HMUI::TextSlider::dyn__enableDragging() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__enableDragging");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enableDragging"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _handleSize
[[deprecated("Use field access instead!")]] float& HMUI::TextSlider::dyn__handleSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__handleSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _valueSize
[[deprecated("Use field access instead!")]] float& HMUI::TextSlider::dyn__valueSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__valueSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valueSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _separatorSize
[[deprecated("Use field access instead!")]] float& HMUI::TextSlider::dyn__separatorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__separatorSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separatorSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfSteps
[[deprecated("Use field access instead!")]] int& HMUI::TextSlider::dyn__numberOfSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__numberOfSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfSteps"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _normalizedValue
[[deprecated("Use field access instead!")]] float& HMUI::TextSlider::dyn__normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__normalizedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalizedValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<HMUI.TextSlider,System.Single> normalizedValueDidChangeEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::HMUI::TextSlider*, float>*& HMUI::TextSlider::dyn_normalizedValueDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn_normalizedValueDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "normalizedValueDidChangeEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::HMUI::TextSlider*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _containerRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::TextSlider::dyn__containerRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__containerRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Graphic _handleGraphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& HMUI::TextSlider::dyn__handleGraphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__handleGraphic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleGraphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.DrivenRectTransformTracker _tracker
[[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& HMUI::TextSlider::dyn__tracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::dyn__tracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tracker"))->offset;
  return *reinterpret_cast<::UnityEngine::DrivenRectTransformTracker*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.TextSlider.set_valueTextColor
void HMUI::TextSlider::set_valueTextColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_valueTextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueTextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_handleRect
::UnityEngine::RectTransform* HMUI::TextSlider::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_handleRect
void HMUI::TextSlider::set_handleRect(::UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.set_handleColor
void HMUI::TextSlider::set_handleColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_handleSize
float HMUI::TextSlider::get_handleSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_handleSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_handleSize
void HMUI::TextSlider::set_handleSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_handleSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_valueSize
float HMUI::TextSlider::get_valueSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_valueSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_valueSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_valueSize
void HMUI::TextSlider::set_valueSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_valueSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_separatorSize
float HMUI::TextSlider::get_separatorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_separatorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_separatorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_separatorSize
void HMUI::TextSlider::set_separatorSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_separatorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_separatorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_numberOfSteps
int HMUI::TextSlider::get_numberOfSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_numberOfSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_numberOfSteps
void HMUI::TextSlider::set_numberOfSteps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_numberOfSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_numberOfSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_normalizedValue
float HMUI::TextSlider::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_normalizedValue
void HMUI::TextSlider::set_normalizedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.UnityEngine.UI.ICanvasElement.get_transform
::UnityEngine::Transform* HMUI::TextSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.add_normalizedValueDidChangeEvent
void HMUI::TextSlider::add_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::TextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.remove_normalizedValueDidChangeEvent
void HMUI::TextSlider::remove_normalizedValueDidChangeEvent(::System::Action_2<::HMUI::TextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.Rebuild
void HMUI::TextSlider::Rebuild(::UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.TextSlider.LayoutComplete
void HMUI::TextSlider::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.GraphicUpdateComplete
void HMUI::TextSlider::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.UpdateCachedReferences
void HMUI::TextSlider::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.TextSlider.UpdateVisuals
void HMUI::TextSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.UpdateDrag
void HMUI::TextSlider::UpdateDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.MayDrag
bool HMUI::TextSlider::MayDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnBeginDrag
void HMUI::TextSlider::OnBeginDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnDrag
void HMUI::TextSlider::OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnInitializePotentialDrag
void HMUI::TextSlider::OnInitializePotentialDrag(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.TextForNormalizedValue
::StringW HMUI::TextSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.TextSlider.OnEnable
void HMUI::TextSlider::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnDisable
void HMUI::TextSlider::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnRectTransformDimensionsChange
void HMUI::TextSlider::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnPointerDown
void HMUI::TextSlider::OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TextSlider::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TimeSlider
#include "HMUI/TimeSlider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HMUI.TimeSlider/HMUI.TimeType _timeType
[[deprecated("Use field access instead!")]] ::HMUI::TimeSlider::TimeType& HMUI::TimeSlider::dyn__timeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::dyn__timeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeType"))->offset;
  return *reinterpret_cast<::HMUI::TimeSlider::TimeType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.TimeSlider.TextForValue
::StringW HMUI::TimeSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TimeSlider/HMUI.TimeType
#include "HMUI/TimeSlider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TimeSlider/HMUI.TimeType Default
::HMUI::TimeSlider::TimeType HMUI::TimeSlider::TimeType::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TimeType::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::TimeSlider::TimeType>("HMUI", "TimeSlider/TimeType", "Default"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TimeSlider/HMUI.TimeType Default
void HMUI::TimeSlider::TimeType::_set_Default(::HMUI::TimeSlider::TimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TimeType::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TimeSlider/TimeType", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TimeSlider/HMUI.TimeType Miliseconds
::HMUI::TimeSlider::TimeType HMUI::TimeSlider::TimeType::_get_Miliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TimeType::_get_Miliseconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::TimeSlider::TimeType>("HMUI", "TimeSlider/TimeType", "Miliseconds"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TimeSlider/HMUI.TimeType Miliseconds
void HMUI::TimeSlider::TimeType::_set_Miliseconds(::HMUI::TimeSlider::TimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TimeType::_set_Miliseconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TimeSlider/TimeType", "Miliseconds", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HMUI::TimeSlider::TimeType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::TimeSlider::TimeType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.StackLayoutGroup
#include "HMUI/StackLayoutGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_ChildForceExpandWidth
[[deprecated("Use field access instead!")]] bool& HMUI::StackLayoutGroup::dyn_m_ChildForceExpandWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::dyn_m_ChildForceExpandWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildForceExpandWidth"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_ChildForceExpandHeight
[[deprecated("Use field access instead!")]] bool& HMUI::StackLayoutGroup::dyn_m_ChildForceExpandHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::dyn_m_ChildForceExpandHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildForceExpandHeight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.StackLayoutGroup.get_childForceExpandWidth
bool HMUI::StackLayoutGroup::get_childForceExpandWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::get_childForceExpandWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childForceExpandWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.set_childForceExpandWidth
void HMUI::StackLayoutGroup::set_childForceExpandWidth(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::set_childForceExpandWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_childForceExpandWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.StackLayoutGroup.get_childForceExpandHeight
bool HMUI::StackLayoutGroup::get_childForceExpandHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::get_childForceExpandHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childForceExpandHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.set_childForceExpandHeight
void HMUI::StackLayoutGroup::set_childForceExpandHeight(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::set_childForceExpandHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_childForceExpandHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalcAlongAxis
void HMUI::StackLayoutGroup::CalcAlongAxis(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::CalcAlongAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalcAlongAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, axis);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetChildrenAlongAxis
void HMUI::StackLayoutGroup::SetChildrenAlongAxis(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::SetChildrenAlongAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildrenAlongAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, axis);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalculateLayoutInputHorizontal
void HMUI::StackLayoutGroup::CalculateLayoutInputHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::CalculateLayoutInputHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalculateLayoutInputVertical
void HMUI::StackLayoutGroup::CalculateLayoutInputVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::CalculateLayoutInputVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetLayoutHorizontal
void HMUI::StackLayoutGroup::SetLayoutHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::SetLayoutHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetLayoutVertical
void HMUI::StackLayoutGroup::SetLayoutVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::StackLayoutGroup::SetLayoutVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CircleTouchable
#include "HMUI/CircleTouchable.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _minRadius
[[deprecated("Use field access instead!")]] float& HMUI::CircleTouchable::dyn__minRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::dyn__minRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxRadius
[[deprecated("Use field access instead!")]] float& HMUI::CircleTouchable::dyn__maxRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::dyn__maxRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _containerRect
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::CircleTouchable::dyn__containerRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::dyn__containerRect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerRect"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.CircleTouchable.UpdateCachedReferences
void HMUI::CircleTouchable::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.OnDrawGizmosSelected
void HMUI::CircleTouchable::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.DrawGizmoCircle
void HMUI::CircleTouchable::DrawGizmoCircle(::UnityEngine::Vector3 center, float radius, int steps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::DrawGizmoCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawGizmoCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(steps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, center, radius, steps);
}
// Autogenerated method: HMUI.CircleTouchable.OnEnable
void HMUI::CircleTouchable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.Raycast
bool HMUI::CircleTouchable::Raycast(::UnityEngine::Vector2 sp, ::UnityEngine::Camera* eventCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::CircleTouchable::Raycast");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sp), ::il2cpp_utils::ExtractType(eventCamera)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sp, eventCamera);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.EmptyBoxGraphic
#include "HMUI/EmptyBoxGraphic.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _depth
[[deprecated("Use field access instead!")]] float& HMUI::EmptyBoxGraphic::dyn__depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EmptyBoxGraphic::dyn__depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_depth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.EmptyBoxGraphic.OnDrawGizmosSelected
void HMUI::EmptyBoxGraphic::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EmptyBoxGraphic::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.EmptyBoxGraphic.OnPopulateMesh
void HMUI::EmptyBoxGraphic::OnPopulateMesh(::UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::EmptyBoxGraphic::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Touchable
#include "HMUI/Touchable.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _skew
[[deprecated("Use field access instead!")]] float& HMUI::Touchable::dyn__skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Touchable::dyn__skew");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skew"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.Touchable.get_skew
float HMUI::Touchable::get_skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Touchable::get_skew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Touchable.OnPopulateMesh
void HMUI::Touchable::OnPopulateMesh(::UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::Touchable::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.UISelectionState
#include "HMUI/UISelectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.UISelectionState Normal
::HMUI::UISelectionState HMUI::UISelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::UISelectionState>("HMUI", "UISelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.UISelectionState Normal
void HMUI::UISelectionState::_set_Normal(::HMUI::UISelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "UISelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.UISelectionState Highlighted
::HMUI::UISelectionState HMUI::UISelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::UISelectionState>("HMUI", "UISelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.UISelectionState Highlighted
void HMUI::UISelectionState::_set_Highlighted(::HMUI::UISelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "UISelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.UISelectionState Pressed
::HMUI::UISelectionState HMUI::UISelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::UISelectionState>("HMUI", "UISelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.UISelectionState Pressed
void HMUI::UISelectionState::_set_Pressed(::HMUI::UISelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "UISelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.UISelectionState Selected
::HMUI::UISelectionState HMUI::UISelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::UISelectionState>("HMUI", "UISelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.UISelectionState Selected
void HMUI::UISelectionState::_set_Selected(::HMUI::UISelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "UISelectionState", "Selected", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.UISelectionState Disabled
::HMUI::UISelectionState HMUI::UISelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HMUI::UISelectionState>("HMUI", "UISelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.UISelectionState Disabled
void HMUI::UISelectionState::_set_Disabled(::HMUI::UISelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "UISelectionState", "Disabled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HMUI::UISelectionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::UISelectionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15
#include "HMUI/ContainerViewController_-AddViewControllerCoroutine-d__15.hpp"
// Including type: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17
#include "HMUI/ContainerViewController_-RemoveViewControllersCoroutine-d__17.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _controllersContainer
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& HMUI::ContainerViewController::dyn__controllersContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::dyn__controllersContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controllersContainer"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<HMUI.ViewController> _viewControllers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HMUI::ViewController*>*& HMUI::ContainerViewController::dyn__viewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::dyn__viewControllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_viewControllers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HMUI::ViewController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ContainerViewController.get_controllersContainer
::UnityEngine::RectTransform* HMUI::ContainerViewController::get_controllersContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::get_controllersContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllersContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.get_viewControllers
::System::Collections::Generic::List_1<::HMUI::ViewController*>* HMUI::ContainerViewController::get_viewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::get_viewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_viewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::HMUI::ViewController*>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.LayoutViewControllers
void HMUI::ContainerViewController::LayoutViewControllers(::System::Collections::Generic::List_1<::HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated method: HMUI.ContainerViewController.ClearChildViewControllers
void HMUI::ContainerViewController::ClearChildViewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::ClearChildViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearChildViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.SetChildViewController
void HMUI::ContainerViewController::SetChildViewController(::HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::SetChildViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.ContainerViewController.SetChildViewControllers
void HMUI::ContainerViewController::SetChildViewControllers(::ArrayW<::HMUI::ViewController*> viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::SetChildViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated method: HMUI.ContainerViewController.AddViewController
void HMUI::ContainerViewController::AddViewController(::HMUI::ViewController* viewController, ::System::Action* finishedCallback, ::System::Action_2<float, ::ArrayW<::HMUI::ViewController*>>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::AddViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.AddViewControllerCoroutine
::System::Collections::IEnumerator* HMUI::ContainerViewController::AddViewControllerCoroutine(::HMUI::ViewController* newViewController, ::System::Action* finishedCallback, ::System::Action_2<float, ::ArrayW<::HMUI::ViewController*>>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::AddViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.RemoveViewControllers
void HMUI::ContainerViewController::RemoveViewControllers(::ArrayW<::HMUI::ViewController*> viewControllers, ::System::Action* finishedCallback, ::System::Action_3<float, ::ArrayW<::HMUI::ViewController*>, ::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::RemoveViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewControllers, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.RemoveViewControllersCoroutine
::System::Collections::IEnumerator* HMUI::ContainerViewController::RemoveViewControllersCoroutine(::ArrayW<::HMUI::ViewController*> viewControllersToRemove, ::System::Action* finishedCallback, ::System::Action_3<float, ::ArrayW<::HMUI::ViewController*>, ::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::RemoveViewControllersCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveViewControllersCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllersToRemove), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, viewControllersToRemove, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.GetNewXPositionsForViewControllers
::ArrayW<float> HMUI::ContainerViewController::GetNewXPositionsForViewControllers(::System::Collections::Generic::List_1<::HMUI::ViewController*>* viewControllers, int exludeFromEndCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::GetNewXPositionsForViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewXPositionsForViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(exludeFromEndCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<float>, false>(this, ___internal__method, viewControllers, exludeFromEndCount);
}
// Autogenerated method: HMUI.ContainerViewController.__Init
void HMUI::ContainerViewController::__Init(::HMUI::Screen* screen, ::HMUI::ViewController* parentViewController, ::HMUI::ContainerViewController* containerViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::__Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screen), ::il2cpp_utils::ExtractType(parentViewController), ::il2cpp_utils::ExtractType(containerViewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, screen, parentViewController, containerViewController);
}
// Autogenerated method: HMUI.ContainerViewController.__Activate
void HMUI::ContainerViewController::__Activate(bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::__Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ContainerViewController.__Deactivate
void HMUI::ContainerViewController::__Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::__Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(deactivateGameObject), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, removedFromHierarchy, deactivateGameObject, screenSystemDisabling);
}
// Autogenerated method: HMUI.ContainerViewController.DeactivateGameObject
void HMUI::ContainerViewController::DeactivateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::DeactivateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15
#include "HMUI/ContainerViewController_-AddViewControllerCoroutine-d__15.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.ContainerViewController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::ContainerViewController*& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::ContainerViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.ViewController newViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_newViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_newViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean immediately
[[deprecated("Use field access instead!")]] bool& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_immediately() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_immediately");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "immediately"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<System.Single,HMUI.ViewController[]> animationLayouter
[[deprecated("Use field access instead!")]] ::System::Action_2<float, ::ArrayW<::HMUI::ViewController*>>*& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_animationLayouter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_animationLayouter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationLayouter"))->offset;
  return *reinterpret_cast<::System::Action_2<float, ::ArrayW<::HMUI::ViewController*>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action finishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_finishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_finishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController[] <viewControllers>5__2
[[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::ViewController*>& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$viewControllers$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$viewControllers$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<viewControllers>5__2"))->offset;
  return *reinterpret_cast<::ArrayW<::HMUI::ViewController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <transitionDuration>5__3
[[deprecated("Use field access instead!")]] float& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$transitionDuration$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$transitionDuration$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<transitionDuration>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__4
[[deprecated("Use field access instead!")]] float& HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$elapsedTime$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::dyn_$elapsedTime$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15.System.IDisposable.Dispose
void HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15.MoveNext
bool HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<AddViewControllerCoroutine>d__15.System.Collections.IEnumerator.Reset
void HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17
#include "HMUI/ContainerViewController_-RemoveViewControllersCoroutine-d__17.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.ContainerViewController <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::ContainerViewController*& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::ContainerViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.ViewController[] viewControllersToRemove
[[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::ViewController*>& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_viewControllersToRemove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_viewControllersToRemove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "viewControllersToRemove"))->offset;
  return *reinterpret_cast<::ArrayW<::HMUI::ViewController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean immediately
[[deprecated("Use field access instead!")]] bool& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_immediately() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_immediately");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "immediately"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`3<System.Single,HMUI.ViewController[],System.Collections.Generic.HashSet`1<HMUI.ViewController>> animationLayouter
[[deprecated("Use field access instead!")]] ::System::Action_3<float, ::ArrayW<::HMUI::ViewController*>, ::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>*>*& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_animationLayouter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_animationLayouter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationLayouter"))->offset;
  return *reinterpret_cast<::System::Action_3<float, ::ArrayW<::HMUI::ViewController*>, ::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action finishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_finishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_finishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController[] <viewControllers>5__2
[[deprecated("Use field access instead!")]] ::ArrayW<::HMUI::ViewController*>& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$viewControllers$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$viewControllers$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<viewControllers>5__2"))->offset;
  return *reinterpret_cast<::ArrayW<::HMUI::ViewController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<HMUI.ViewController> <viewControllersToRemoveSet>5__3
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>*& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$viewControllersToRemoveSet$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$viewControllersToRemoveSet$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<viewControllersToRemoveSet>5__3"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::HMUI::ViewController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <transitionDuration>5__4
[[deprecated("Use field access instead!")]] float& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$transitionDuration$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$transitionDuration$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<transitionDuration>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__5
[[deprecated("Use field access instead!")]] float& HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$elapsedTime$5__5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::dyn_$elapsedTime$5__5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__5"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17.System.IDisposable.Dispose
void HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17.MoveNext
bool HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/HMUI.<RemoveViewControllersCoroutine>d__17.System.Collections.IEnumerator.Reset
void HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass35_0
#include "HMUI/FlowCoordinator_--c__DisplayClass35_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass36_0
#include "HMUI/FlowCoordinator_--c__DisplayClass36_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass37_0
#include "HMUI/FlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_1
#include "HMUI/FlowCoordinator_--c__DisplayClass38_1.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass39_0
#include "HMUI/FlowCoordinator_--c__DisplayClass39_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass41_0
#include "HMUI/FlowCoordinator_--c__DisplayClass41_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass42_0
#include "HMUI/FlowCoordinator_--c__DisplayClass42_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass45_0
#include "HMUI/FlowCoordinator_--c__DisplayClass45_0.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass46_0
#include "HMUI/FlowCoordinator_--c__DisplayClass46_0.hpp"
// Including type: UnityEngine.EventSystems.BaseInputModule
#include "UnityEngine/EventSystems/BaseInputModule.hpp"
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.EventSystems.BaseInputModule _baseInputModule
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::BaseInputModule*& HMUI::FlowCoordinator::dyn__baseInputModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__baseInputModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseInputModule"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::BaseInputModule**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ScreenSystem _screenSystem
[[deprecated("Use field access instead!")]] ::HMUI::ScreenSystem*& HMUI::FlowCoordinator::dyn__screenSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__screenSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_screenSystem"))->offset;
  return *reinterpret_cast<::HMUI::ScreenSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.FlowCoordinator _parentFlowCoordinator
[[deprecated("Use field access instead!")]] ::HMUI::FlowCoordinator*& HMUI::FlowCoordinator::dyn__parentFlowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__parentFlowCoordinator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentFlowCoordinator"))->offset;
  return *reinterpret_cast<::HMUI::FlowCoordinator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.FlowCoordinator _childFlowCoordinator
[[deprecated("Use field access instead!")]] ::HMUI::FlowCoordinator*& HMUI::FlowCoordinator::dyn__childFlowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__childFlowCoordinator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_childFlowCoordinator"))->offset;
  return *reinterpret_cast<::HMUI::FlowCoordinator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HMUI.ViewController> _mainScreenViewControllers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HMUI::ViewController*>*& HMUI::FlowCoordinator::dyn__mainScreenViewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__mainScreenViewControllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainScreenViewControllers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HMUI::ViewController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _leftScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__leftScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__leftScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _rightScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__rightScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__rightScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _bottomScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__bottomScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__bottomScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bottomScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _topScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__topScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__topScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_topScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _wasActivatedBefore
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__wasActivatedBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__wasActivatedBefore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasActivatedBefore"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _title
[[deprecated("Use field access instead!")]] ::StringW& HMUI::FlowCoordinator::dyn__title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__title");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_title"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _providedMainViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__providedMainViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__providedMainViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_providedMainViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _providedLeftScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__providedLeftScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__providedLeftScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_providedLeftScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _providedRightScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__providedRightScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__providedRightScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_providedRightScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _providedBottomScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__providedBottomScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__providedBottomScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_providedBottomScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ViewController _providedTopScreenViewController
[[deprecated("Use field access instead!")]] ::HMUI::ViewController*& HMUI::FlowCoordinator::dyn__providedTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__providedTopScreenViewController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_providedTopScreenViewController"))->offset;
  return *reinterpret_cast<::HMUI::ViewController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _viewControllersWereProvided
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__viewControllersWereProvided() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__viewControllersWereProvided");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_viewControllersWereProvided"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInDidActivatePhase
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__isInDidActivatePhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__isInDidActivatePhase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInDidActivatePhase"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isActivated
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__isActivated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isActivated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInTransition
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__isInTransition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInTransition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _showBackButton
[[deprecated("Use field access instead!")]] bool& HMUI::FlowCoordinator::dyn__showBackButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__showBackButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_showBackButton"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _prevEventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& HMUI::FlowCoordinator::dyn__prevEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::dyn__prevEventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevEventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.FlowCoordinator.get_topViewController
::HMUI::ViewController* HMUI::FlowCoordinator::get_topViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::get_topViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_childFlowCoordinator
::HMUI::FlowCoordinator* HMUI::FlowCoordinator::get_childFlowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::get_childFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::FlowCoordinator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_isActivated
bool HMUI::FlowCoordinator::get_isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::get_isActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_title
::StringW HMUI::FlowCoordinator::get_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::get_title");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_title", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_showBackButton
bool HMUI::FlowCoordinator::get_showBackButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::get_showBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.set_showBackButton
void HMUI::FlowCoordinator::set_showBackButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::set_showBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.FlowCoordinator.SetTitle
void HMUI::FlowCoordinator::SetTitle(::StringW value, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.__StartOnScreenSystem
void HMUI::FlowCoordinator::__StartOnScreenSystem(::HMUI::ScreenSystem* screenSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::__StartOnScreenSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__StartOnScreenSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenSystem)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, screenSystem);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentFlowCoordinator
void HMUI::FlowCoordinator::PresentFlowCoordinator(::HMUI::FlowCoordinator* flowCoordinator, ::System::Action* finishedCallback, ::HMUI::ViewController::AnimationDirection animationDirection, bool immediately, bool replaceTopViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PresentFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately), ::il2cpp_utils::ExtractType(replaceTopViewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flowCoordinator, finishedCallback, animationDirection, immediately, replaceTopViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.DismissFlowCoordinator
void HMUI::FlowCoordinator::DismissFlowCoordinator(::HMUI::FlowCoordinator* flowCoordinator, ::HMUI::ViewController::AnimationDirection animationDirection, ::System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::DismissFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flowCoordinator, animationDirection, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceChildFlowCoordinator
void HMUI::FlowCoordinator::ReplaceChildFlowCoordinator(::HMUI::FlowCoordinator* flowCoordinator, ::System::Action* finishedCallback, ::HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::ReplaceChildFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceChildFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flowCoordinator, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentViewController
void HMUI::FlowCoordinator::PresentViewController(::HMUI::ViewController* viewController, ::System::Action* finishedCallback, ::HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PresentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.DismissViewController
void HMUI::FlowCoordinator::DismissViewController(::HMUI::ViewController* viewController, ::HMUI::ViewController::AnimationDirection animationDirection, ::System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::DismissViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, animationDirection, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(::HMUI::ViewController* viewController, ::System::Action* finishedCallback, ::HMUI::ViewController::AnimationType animationType, ::HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::ReplaceTopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceTopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(::HMUI::ViewController* viewController, ::HMUI::FlowCoordinator* originalOwnerFlowCoordinator, ::HMUI::FlowCoordinator* newOwnerFlowCoordinator, ::System::Action* finishedCallback, ::HMUI::ViewController::AnimationType animationType, ::HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::ReplaceTopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceTopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(originalOwnerFlowCoordinator), ::il2cpp_utils::ExtractType(newOwnerFlowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, originalOwnerFlowCoordinator, newOwnerFlowCoordinator, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.FlowCoordinator.PushViewControllerToNavigationController
void HMUI::FlowCoordinator::PushViewControllerToNavigationController(::HMUI::NavigationController* navigationController, ::HMUI::ViewController* viewController, ::System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PushViewControllerToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewControllerToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, navigationController, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllersToNavigationController
void HMUI::FlowCoordinator::SetViewControllersToNavigationController(::HMUI::NavigationController* navigationController, ::ArrayW<::HMUI::ViewController*> viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetViewControllersToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewControllersToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, navigationController, viewControllers);
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllerToNavigationController
void HMUI::FlowCoordinator::SetViewControllerToNavigationController(::HMUI::NavigationController* navigationController, ::HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetViewControllerToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewControllerToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, navigationController, viewController);
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllerFromNavigationController
void HMUI::FlowCoordinator::PopViewControllerFromNavigationController(::HMUI::NavigationController* navigationController, ::System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PopViewControllerFromNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllerFromNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, navigationController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllersFromNavigationController
void HMUI::FlowCoordinator::PopViewControllersFromNavigationController(::HMUI::NavigationController* navigationController, int numberOfControllers, ::System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PopViewControllersFromNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllersFromNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(numberOfControllers), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, navigationController, numberOfControllers, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.SetLeftScreenViewController
void HMUI::FlowCoordinator::SetLeftScreenViewController(::HMUI::ViewController* viewController, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetLeftScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLeftScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetRightScreenViewController
void HMUI::FlowCoordinator::SetRightScreenViewController(::HMUI::ViewController* viewController, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetRightScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRightScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetBottomScreenViewController
void HMUI::FlowCoordinator::SetBottomScreenViewController(::HMUI::ViewController* viewController, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetBottomScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBottomScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetTopScreenViewController
void HMUI::FlowCoordinator::SetTopScreenViewController(::HMUI::ViewController* viewController, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetTopScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentTitle
void HMUI::FlowCoordinator::PresentTitle(::StringW title, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::PresentTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(title), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, title, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.IsFlowCoordinatorInHierarchy
bool HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy(::HMUI::FlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFlowCoordinatorInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: HMUI.FlowCoordinator.YoungestChildFlowCoordinatorOrSelf
::HMUI::FlowCoordinator* HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "YoungestChildFlowCoordinatorOrSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HMUI::FlowCoordinator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.ProvideInitialViewControllers
void HMUI::FlowCoordinator::ProvideInitialViewControllers(::HMUI::ViewController* mainViewController, ::HMUI::ViewController* leftScreenViewController, ::HMUI::ViewController* rightScreenViewController, ::HMUI::ViewController* bottomScreenViewController, ::HMUI::ViewController* topScreenViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::ProvideInitialViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProvideInitialViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainViewController), ::il2cpp_utils::ExtractType(leftScreenViewController), ::il2cpp_utils::ExtractType(rightScreenViewController), ::il2cpp_utils::ExtractType(bottomScreenViewController), ::il2cpp_utils::ExtractType(topScreenViewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainViewController, leftScreenViewController, rightScreenViewController, bottomScreenViewController, topScreenViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.Activate
void HMUI::FlowCoordinator::Activate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.FlowCoordinator.Deactivate
void HMUI::FlowCoordinator::Deactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalActivate
void HMUI::FlowCoordinator::__ExternalActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::__ExternalActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ExternalActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalDeactivate
void HMUI::FlowCoordinator::__ExternalDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::__ExternalDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ExternalDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.HandleScreenSystemBackButtonWasPressed
void HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScreenSystemBackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.SetGlobalUserInteraction
void HMUI::FlowCoordinator::SetGlobalUserInteraction(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::SetGlobalUserInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalUserInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.FlowCoordinator.DidActivate
void HMUI::FlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.FlowCoordinator.DidDeactivate
void HMUI::FlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.FlowCoordinator.TransitionDidStart
void HMUI::FlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.TransitionDidFinish
void HMUI::FlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.TopViewControllerWillChange
void HMUI::FlowCoordinator::TopViewControllerWillChange(::HMUI::ViewController* oldViewController, ::HMUI::ViewController* newViewController, ::HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.InitialViewControllerWasPresented
void HMUI::FlowCoordinator::InitialViewControllerWasPresented() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::InitialViewControllerWasPresented");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitialViewControllerWasPresented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.BackButtonWasPressed
void HMUI::FlowCoordinator::BackButtonWasPressed(::HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.Log
void HMUI::FlowCoordinator::Log(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "FlowCoordinator", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass35_0
#include "HMUI/FlowCoordinator_--c__DisplayClass35_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Action finishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_finishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_finishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.FlowCoordinator flowCoordinator
[[deprecated("Use field access instead!")]] ::HMUI::FlowCoordinator*& HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_flowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_flowCoordinator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flowCoordinator"))->offset;
  return *reinterpret_cast<::HMUI::FlowCoordinator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMUI.FlowCoordinator <>4__this
[[deprecated("Use field access instead!")]] ::HMUI::FlowCoordinator*& HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::$$c__DisplayClass35_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HMUI::FlowCoordinator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass35_0.<PresentFlowCoordinator>b__1
void HMUI::FlowCoordinator::$$c__DisplayClass35_0::$PresentFlowCoordinator$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::$$c__DisplayClass35_0::<PresentFlowCoordinator>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinator>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass35_0.<PresentFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass35_0::$PresentFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HMUI::FlowCoordinator::$$c__DisplayClass35_0::<PresentFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
