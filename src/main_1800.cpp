// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _sceneName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SceneInfo::dyn__sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::dyn__sceneName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disabledRootObjects
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SceneInfo::dyn__disabledRootObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::dyn__disabledRootObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledRootObjects"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SceneInfo.get_sceneName
::StringW GlobalNamespace::SceneInfo::get_sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::get_sceneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SceneInfo.get_disabledRootObjects
bool GlobalNamespace::SceneInfo::get_disabledRootObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::get_disabledRootObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledRootObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FixedScenesScenesTransitionSetupDataSO
#include "GlobalNamespace/FixedScenesScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo[] _sceneInfos
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneInfo*>& GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::dyn__sceneInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::dyn__sceneInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneInfos"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FixedScenesScenesTransitionSetupDataSO.Init
void GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10
#include "GlobalNamespace/ScenesTransitionSetupDataSO_-BeforeScenesWillBeActivated-d__10.hpp"
// Including type: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d
#include "GlobalNamespace/ScenesTransitionSetupDataSO_--BeforeScenesWillBeActivated-b__10_0-d.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo[] <scenes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneInfo*>& GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$scenes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$scenes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<scenes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SceneSetupData[] _sceneSetupDataArray
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneSetupData*>& GlobalNamespace::ScenesTransitionSetupDataSO::dyn__sceneSetupDataArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn__sceneSetupDataArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupDataArray"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneSetupData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <beforeScenesWillBeActivatedTaskIsComplete>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$beforeScenesWillBeActivatedTaskIsComplete$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$beforeScenesWillBeActivatedTaskIsComplete$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beforeScenesWillBeActivatedTaskIsComplete>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO.get_scenes
::ArrayW<::GlobalNamespace::SceneInfo*> GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::SceneInfo*>, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_scenes
void GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes(::ArrayW<::GlobalNamespace::SceneInfo*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.get_beforeScenesWillBeActivatedTaskIsComplete
bool GlobalNamespace::ScenesTransitionSetupDataSO::get_beforeScenesWillBeActivatedTaskIsComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::get_beforeScenesWillBeActivatedTaskIsComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beforeScenesWillBeActivatedTaskIsComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_beforeScenesWillBeActivatedTaskIsComplete
void GlobalNamespace::ScenesTransitionSetupDataSO::set_beforeScenesWillBeActivatedTaskIsComplete(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::set_beforeScenesWillBeActivatedTaskIsComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beforeScenesWillBeActivatedTaskIsComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.Init
void GlobalNamespace::ScenesTransitionSetupDataSO::Init(::ArrayW<::GlobalNamespace::SceneInfo*> scenes, ::ArrayW<::GlobalNamespace::SceneSetupData*> sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenes), ::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenes, sceneSetupData);
}
// Autogenerated method: ScenesTransitionSetupDataSO.BeforeScenesWillBeActivated
void GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivated(bool runAsync) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeforeScenesWillBeActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(runAsync)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, runAsync);
}
// Autogenerated method: ScenesTransitionSetupDataSO.BeforeScenesWillBeActivatedAsync
::System::Threading::Tasks::Task* GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivatedAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivatedAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeforeScenesWillBeActivatedAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.InstallBindings
void GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: ScenesTransitionSetupDataSO.<BeforeScenesWillBeActivated>b__10_0
::System::Threading::Tasks::Task* GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$b__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::<BeforeScenesWillBeActivated>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeforeScenesWillBeActivated>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10
#include "GlobalNamespace/ScenesTransitionSetupDataSO_-BeforeScenesWillBeActivated-d__10.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncVoidMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean runAsync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_runAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_runAsync");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "runAsync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10.MoveNext
void GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10.SetStateMachine
void GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d
#include "GlobalNamespace/ScenesTransitionSetupDataSO_--BeforeScenesWillBeActivated-b__10_0-d.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d.MoveNext
void GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d.SetStateMachine
void GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/SingleFixedSceneScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo _sceneInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneInfo*& GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::dyn__sceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::dyn__sceneInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SceneInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.get_sceneInfo
::GlobalNamespace::SceneInfo* GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SceneInfo*, false>(this, ___internal__method);
}
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init(::GlobalNamespace::SceneSetupData* sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneSetupData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreateSOAttribute
#include "GlobalNamespace/CreateSOAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSignal
#include "GlobalNamespace/BoolSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSignal
#include "GlobalNamespace/ColorSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DIContainerSignal
#include "GlobalNamespace/DIContainerSignal.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignalListener
#include "GlobalNamespace/FloatSignalListener.hpp"
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FloatSignal _floatSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSignal*& GlobalNamespace::FloatSignalListener::dyn__floatSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::dyn__floatSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floatSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSignal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FloatUnityEvent _unityEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatUnityEvent*& GlobalNamespace::FloatSignalListener::dyn__unityEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::dyn__unityEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unityEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatUnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FloatSignalListener.OnEnable
void GlobalNamespace::FloatSignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.OnDisable
void GlobalNamespace::FloatSignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.HandleEvent
void GlobalNamespace::FloatSignalListener::HandleEvent(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, f);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action _event
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::Signal::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Signal.add__event
void GlobalNamespace::Signal::add__event(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::add__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.remove__event
void GlobalNamespace::Signal::remove__event(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::remove__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.Raise
void GlobalNamespace::Signal::Raise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Raise");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Signal.Subscribe
void GlobalNamespace::Signal::Subscribe(::System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Subscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, foo);
}
// Autogenerated method: Signal.Unsubscribe
void GlobalNamespace::Signal::Unsubscribe(::System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Unsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, foo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalListener
#include "GlobalNamespace/SignalListener.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _signal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalListener::dyn__signal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::dyn__signal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityEvent _unityEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::SignalListener::dyn__unityEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::dyn__unityEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unityEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalListener.OnEnable
void GlobalNamespace::SignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.OnDisable
void GlobalNamespace::SignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.HandleEvent
void GlobalNamespace::SignalListener::HandleEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnPointerClick
#include "GlobalNamespace/SignalOnPointerClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _inputFieldClickedSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalOnPointerClick::dyn__inputFieldClickedSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnPointerClick::dyn__inputFieldClickedSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputFieldClickedSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalOnPointerClick.OnPointerClick
void GlobalNamespace::SignalOnPointerClick::OnPointerClick(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnPointerClick::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnUIButtonClick
#include "GlobalNamespace/SignalOnUIButtonClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _buttonClickedSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalOnUIButtonClick::dyn__buttonClickedSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::dyn__buttonClickedSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buttonClickedSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _button
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& GlobalNamespace::SignalOnUIButtonClick::dyn__button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::dyn__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalOnUIButtonClick.OnReset
void GlobalNamespace::SignalOnUIButtonClick::OnReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::OnReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.Start
void GlobalNamespace::SignalOnUIButtonClick::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.OnDestroy
void GlobalNamespace::SignalOnUIButtonClick::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalSenderAttribute
#include "GlobalNamespace/SignalSenderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringSignal
#include "GlobalNamespace/StringSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSSortingLayer
#include "GlobalNamespace/PSSortingLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SortingLayer
#include "GlobalNamespace/SortingLayer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SortingLayer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SortingLayer.get_renderer
::UnityEngine::Renderer* GlobalNamespace::SortingLayer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: SortingLayer.Reset
void GlobalNamespace::SortingLayer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher
#include "GlobalNamespace/HMMainThreadDispatcher.hpp"
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
::System::Collections::Generic::Queue_1<::System::Action*>* GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Queue_1<::System::Action*>*>("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
void GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue(::System::Collections::Generic::Queue_1<::System::Action*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue", value));
}
// Autogenerated method: HMMainThreadDispatcher.Update
void GlobalNamespace::HMMainThreadDispatcher::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(::System::Collections::IEnumerator* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.ActionCoroutine
::System::Collections::IEnumerator* GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher..cctor
void GlobalNamespace::HMMainThreadDispatcher::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMMainThreadDispatcher", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public HMMainThreadDispatcher <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMMainThreadDispatcher*& GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMMainThreadDispatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.IEnumerator action
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMMainThreadDispatcher/<>c__DisplayClass2_0.<Enqueue>b__0
void GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::$Enqueue$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::<Enqueue>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Enqueue>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.IDisposable.Dispose
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.MoveNext
bool GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMTask
#include "GlobalNamespace/HMTask.hpp"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _thread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& GlobalNamespace::HMTask::dyn__thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _job
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMTask::dyn__job() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__job");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_job"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _finishCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMTask::dyn__finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finishCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _canceled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__canceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _started
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__started");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_started"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _finished
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__finished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finished"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMTask.Run
void GlobalNamespace::HMTask::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunCoroutine
::System::Collections::IEnumerator* GlobalNamespace::HMTask::RunCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::RunCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunJob
void GlobalNamespace::HMTask::RunJob() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::RunJob");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunJob", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.Cancel
void GlobalNamespace::HMTask::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunCoroutine>b__8_0
bool GlobalNamespace::HMTask::$RunCoroutine$b__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::<RunCoroutine>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunCoroutine>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunJob>b__9_0
void GlobalNamespace::HMTask::$RunJob$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::<RunJob>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunJob>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMTask <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMTask*& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMTask**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.MoveNext
bool GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpMarker
#include "GlobalNamespace/JumpMarker.hpp"
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JumpDestinationMarker _destination
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JumpDestinationMarker*& GlobalNamespace::JumpMarker::dyn__destination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::dyn__destination");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destination"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JumpDestinationMarker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.PropertyName <id>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::PropertyName& GlobalNamespace::JumpMarker::dyn_$id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::dyn_$id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<id>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JumpMarker.get_id
::UnityEngine::PropertyName GlobalNamespace::JumpMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated method: JumpMarker.get_jumpDestination
::GlobalNamespace::JumpDestinationMarker* GlobalNamespace::JumpMarker::get_jumpDestination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::get_jumpDestination");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDestination", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::JumpDestinationMarker*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: JumpReceiver
#include "GlobalNamespace/JumpReceiver.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <jumpToDestinationValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::JumpReceiver::dyn_$jumpToDestinationValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::dyn_$jumpToDestinationValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<jumpToDestinationValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JumpReceiver.get_jumpToDestinationValid
bool GlobalNamespace::JumpReceiver::get_jumpToDestinationValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::get_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JumpReceiver.set_jumpToDestinationValid
void GlobalNamespace::JumpReceiver::set_jumpToDestinationValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::set_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JumpReceiver.OnNotify
void GlobalNamespace::JumpReceiver::OnNotify(::UnityEngine::Playables::Playable origin, ::UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimelinePauseMarker
#include "GlobalNamespace/TimelinePauseMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.PropertyName <id>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::PropertyName& GlobalNamespace::TimelinePauseMarker::dyn_$id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseMarker::dyn_$id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<id>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimelinePauseMarker.get_id
::UnityEngine::PropertyName GlobalNamespace::TimelinePauseMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimelinePauseReceiver
#include "GlobalNamespace/TimelinePauseReceiver.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action timelinePauseEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TimelinePauseReceiver::dyn_timelinePauseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::dyn_timelinePauseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timelinePauseEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimelinePauseReceiver.add_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.remove_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.OnNotify
void GlobalNamespace::TimelinePauseReceiver::OnNotify(::UnityEngine::Playables::Playable origin, ::UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DevicelessVRHelper
#include "GlobalNamespace/DevicelessVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::DevicelessVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevicelessVRHelper.get_hasInputFocus
bool GlobalNamespace::DevicelessVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_hasVrFocus
bool GlobalNamespace::DevicelessVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_isAlwaysWireless
bool GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.Update
void GlobalNamespace::DevicelessVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.TriggerHapticPulse
void GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: DevicelessVRHelper.StopHaptics
void GlobalNamespace::DevicelessVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: DevicelessVRHelper.AdjustControllerTransform
void GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: DevicelessVRHelper.GetNodePose
bool GlobalNamespace::DevicelessVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuousRumbleFrameDuration
float GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuousRumbleFrameDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuousRumbleFrameDuration
void GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuousRumbleFrameDuration", value));
}
// Autogenerated instance field getter
// Get instance field: private BoolSO _controllersRumbleEnabled
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& GlobalNamespace::HapticFeedbackController::dyn__controllersRumbleEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__controllersRumbleEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controllersRumbleEnabled"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoolSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _continuousRumblePreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::HapticFeedbackController::dyn__continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__continuousRumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continuousRumblePreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::HapticFeedbackController::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.XRNode,System.Collections.Generic.Dictionary`2<System.Object,HapticFeedbackController/RumbleData>> _rumblesByNode
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::XRNode, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::GlobalNamespace::HapticFeedbackController::RumbleData*>*>*& GlobalNamespace::HapticFeedbackController::dyn__rumblesByNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__rumblesByNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblesByNode"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::XRNode, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::GlobalNamespace::HapticFeedbackController::RumbleData*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HapticFeedbackController.get_continuousRumblePreset
::Libraries::HM::HMLib::VR::HapticPresetSO* GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_continuousRumblePreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Libraries::HM::HMLib::VR::HapticPresetSO*, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.Awake
void GlobalNamespace::HapticFeedbackController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.PlayHapticFeedback
void GlobalNamespace::HapticFeedbackController::PlayHapticFeedback(::UnityEngine::XR::XRNode node, ::Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::PlayHapticFeedback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayHapticFeedback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, hapticPreset);
}
// Autogenerated method: HapticFeedbackController.LateUpdate
void GlobalNamespace::HapticFeedbackController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.UpdateRumbles
void GlobalNamespace::HapticFeedbackController::UpdateRumbles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::UpdateRumbles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRumbles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.GetRumble
::GlobalNamespace::HapticFeedbackController::RumbleData* GlobalNamespace::HapticFeedbackController::GetRumble(::UnityEngine::XR::XRNode node, ::Il2CppObject* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::GetRumble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRumble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(preset)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HapticFeedbackController::RumbleData*, false>(this, ___internal__method, node, preset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean active
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_active");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean continuous
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_continuous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_continuous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "continuous"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single strength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_strength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single endTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_endTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single frequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_frequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK OpenVR
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_OpenVR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_OpenVR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "OpenVR"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK OpenVR
void GlobalNamespace::VRPlatformSDK::_set_OpenVR(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_OpenVR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "OpenVR", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Oculus
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Oculus
void GlobalNamespace::VRPlatformSDK::_set_Oculus(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Unknown
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Unknown
void GlobalNamespace::VRPlatformSDK::_set_Unknown(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Unknown", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRPlatformSDK::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Unknown
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Unknown
void GlobalNamespace::XRDeviceModel::_set_Unknown(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusRift
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusRift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusRift"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusRift
void GlobalNamespace::XRDeviceModel::_set_OculusRift(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusRift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusRift", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuest
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusQuest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuest"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuest
void GlobalNamespace::XRDeviceModel::_set_OculusQuest(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusQuest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuest", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuestLink
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuestLink() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusQuestLink");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuestLink"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuestLink
void GlobalNamespace::XRDeviceModel::_set_OculusQuestLink(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusQuestLink");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuestLink", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Other
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Other"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Other
void GlobalNamespace::XRDeviceModel::_set_Other(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Other", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::XRDeviceModel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IVRPlatformHelper.get_hasInputFocus
bool GlobalNamespace::IVRPlatformHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_hasVrFocus
bool GlobalNamespace::IVRPlatformHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_isAlwaysWireless
bool GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.TriggerHapticPulse
void GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IVRPlatformHelper.StopHaptics
void GlobalNamespace::IVRPlatformHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: IVRPlatformHelper.AdjustControllerTransform
void GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: IVRPlatformHelper.GetNodePose
bool GlobalNamespace::IVRPlatformHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformUtils
#include "GlobalNamespace/VRPlatformUtils.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRPlatformUtils.GetXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::VRPlatformUtils::GetXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformUtils::GetXRDeviceModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRPlatformUtils", "GetXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusMRCManager
#include "GlobalNamespace/OculusMRCManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
// Including type: OVRManager/MrcCameraType
#include "GlobalNamespace/OVRManager_MrcCameraType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::OculusMRCManager::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityBackgroundCameraGameObject
[[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityBackgroundCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityBackgroundCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityBackgroundCameraGameObject"))->offset;
  return *reinterpret_cast<::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityForegroundCameraGameObject
[[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityForegroundCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityForegroundCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityForegroundCameraGameObject"))->offset;
  return *reinterpret_cast<::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <enableMixedReality>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$enableMixedReality$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$enableMixedReality$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enableMixedReality>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask <extraHiddenLayers>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OculusMRCManager::dyn_$extraHiddenLayers$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$extraHiddenLayers$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<extraHiddenLayers>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask <extraVisibleLayers>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OculusMRCManager::dyn_$extraVisibleLayers$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$extraVisibleLayers$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<extraVisibleLayers>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <dynamicCullingMask>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$dynamicCullingMask$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicCullingMask$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicCullingMask>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/CompositionMethod <compositionMethod>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& GlobalNamespace::OculusMRCManager::dyn_$compositionMethod$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$compositionMethod$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<compositionMethod>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CompositionMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <externalCompositionBackdropColorRift>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorRift$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorRift$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<externalCompositionBackdropColorRift>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <externalCompositionBackdropColorQuest>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorQuest$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorQuest$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<externalCompositionBackdropColorQuest>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/CameraDevice <capturingCameraDevice>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& GlobalNamespace::OculusMRCManager::dyn_$capturingCameraDevice$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$capturingCameraDevice$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<capturingCameraDevice>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CameraDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <flipCameraFrameHorizontally>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameHorizontally$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameHorizontally$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipCameraFrameHorizontally>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <flipCameraFrameVertically>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameVertically$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameVertically$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipCameraFrameVertically>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <handPoseStateLatency>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$handPoseStateLatency$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$handPoseStateLatency$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<handPoseStateLatency>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <sandwichCompositionRenderLatency>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionRenderLatency$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionRenderLatency$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sandwichCompositionRenderLatency>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <sandwichCompositionBufferedFrames>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionBufferedFrames$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionBufferedFrames$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sandwichCompositionBufferedFrames>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <chromaKeyColor>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$chromaKeyColor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeyColor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeyColor>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySimilarity>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySimilarity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySimilarity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySimilarity>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySmoothRange>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySmoothRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySmoothRange$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySmoothRange>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySpillRange>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySpillRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySpillRange$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySpillRange>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <useDynamicLighting>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$useDynamicLighting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$useDynamicLighting$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<useDynamicLighting>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/DepthQuality <depthQuality>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& GlobalNamespace::OculusMRCManager::dyn_$depthQuality$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$depthQuality$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<depthQuality>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_DepthQuality*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <dynamicLightingSmoothFactor>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingSmoothFactor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingSmoothFactor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicLightingSmoothFactor>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <dynamicLightingDepthVariationClampingValue>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingDepthVariationClampingValue$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingDepthVariationClampingValue$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicLightingDepthVariationClampingValue>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/VirtualGreenScreenType <virtualGreenScreenType>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenType>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_VirtualGreenScreenType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenTopY>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenTopY$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenTopY$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenTopY>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenBottomY>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenBottomY$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenBottomY$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenBottomY>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <virtualGreenScreenApplyDepthCulling>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenApplyDepthCulling$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenApplyDepthCulling$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenApplyDepthCulling>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenDepthTolerance>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenDepthTolerance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenDepthTolerance$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenDepthTolerance>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/MrcActivationMode <mrcActivationMode>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& GlobalNamespace::OculusMRCManager::dyn_$mrcActivationMode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$mrcActivationMode$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<mrcActivationMode>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_MrcActivationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/InstantiateMrcCameraDelegate _instantiateMixedRealityCameraGameObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityCameraGameObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OculusMRCManager.get_enableMixedReality
bool GlobalNamespace::OculusMRCManager::get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_enableMixedReality
void GlobalNamespace::OculusMRCManager::set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_extraHiddenLayers
::UnityEngine::LayerMask GlobalNamespace::OculusMRCManager::get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_extraHiddenLayers
void GlobalNamespace::OculusMRCManager::set_extraHiddenLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_extraVisibleLayers
::UnityEngine::LayerMask GlobalNamespace::OculusMRCManager::get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_extraVisibleLayers
void GlobalNamespace::OculusMRCManager::set_extraVisibleLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicCullingMask
bool GlobalNamespace::OculusMRCManager::get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicCullingMask
void GlobalNamespace::OculusMRCManager::set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_compositionMethod
::GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OculusMRCManager::get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_compositionMethod
void GlobalNamespace::OculusMRCManager::set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_externalCompositionBackdropColorRift
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_externalCompositionBackdropColorRift
void GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_externalCompositionBackdropColorQuest
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_capturingCameraDevice
::GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OculusMRCManager::get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_capturingCameraDevice
void GlobalNamespace::OculusMRCManager::set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_flipCameraFrameHorizontally
bool GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_flipCameraFrameHorizontally
void GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_flipCameraFrameVertically
bool GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_flipCameraFrameVertically
void GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_handPoseStateLatency
float GlobalNamespace::OculusMRCManager::get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_handPoseStateLatency
void GlobalNamespace::OculusMRCManager::set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_sandwichCompositionRenderLatency
float GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_sandwichCompositionRenderLatency
void GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeyColor
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeyColor
void GlobalNamespace::OculusMRCManager::set_chromaKeyColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySimilarity
float GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySimilarity
void GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySmoothRange
float GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySmoothRange
void GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySpillRange
float GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySpillRange
void GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_useDynamicLighting
bool GlobalNamespace::OculusMRCManager::get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_useDynamicLighting
void GlobalNamespace::OculusMRCManager::set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_depthQuality
::GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OculusMRCManager::get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_depthQuality
void GlobalNamespace::OculusMRCManager::set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicLightingSmoothFactor
float GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicLightingSmoothFactor
void GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenType
::GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenType
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenTopY
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenTopY
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenBottomY
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenBottomY
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_mrcActivationMode
::GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OculusMRCManager::get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_mrcActivationMode
void GlobalNamespace::OculusMRCManager::set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_instantiateMixedRealityCameraGameObject
::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.Update
void GlobalNamespace::OculusMRCManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.OnDestroy
void GlobalNamespace::OculusMRCManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.Init
void GlobalNamespace::OculusMRCManager::Init(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityBackgroundCameraGameObject, ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityForegroundCameraGameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instantiateMixedRealityBackgroundCameraGameObject), ::il2cpp_utils::ExtractType(instantiateMixedRealityForegroundCameraGameObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, instantiateMixedRealityBackgroundCameraGameObject, instantiateMixedRealityForegroundCameraGameObject);
}
// Autogenerated method: OculusMRCManager.InstantiateMixedRealityCameraGameObject
::UnityEngine::GameObject* GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject(::UnityEngine::GameObject* mainCameraGameObject, ::GlobalNamespace::OVRManager_MrcCameraType cameraType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainCameraGameObject), ::il2cpp_utils::ExtractType(cameraType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, mainCameraGameObject, cameraType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusVRHelper
#include "GlobalNamespace/OculusVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::OculusVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _userPresent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__userPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__userPresent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userPresent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& GlobalNamespace::OculusVRHelper::dyn__disabledEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__disabledEventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledEventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OculusVRHelper.get_hasInputFocus
bool GlobalNamespace::OculusVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_hasVrFocus
bool GlobalNamespace::OculusVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OculusVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::OculusVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get__isOVRManagerPresent
bool GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__isOVRManagerPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.Update
void GlobalNamespace::OculusVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.FixedUpdate
void GlobalNamespace::OculusVRHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.LateUpdate
void GlobalNamespace::OculusVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.TriggerHapticPulse
void GlobalNamespace::OculusVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OculusVRHelper.StopHaptics
void GlobalNamespace::OculusVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OculusVRHelper.AdjustControllerTransform
void GlobalNamespace::OculusVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OculusVRHelper.GetNodePose
bool GlobalNamespace::OculusVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated method: OculusVRHelper.EnableEventSystem
void GlobalNamespace::OculusVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.DisableEventSystem
void GlobalNamespace::OculusVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IOpenVRHaptics.TriggerHapticPulse
void GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IOpenVRHaptics.Destroy
void GlobalNamespace::IOpenVRHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOpenVRHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleOpenVrOpenVrHaptics
#include "GlobalNamespace/SimpleOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: SimpleOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _currentTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__currentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__currentTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _hapticThread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__hapticThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__hapticThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticThread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _leftHandHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__leftHandHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__leftHandHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _rightHandHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__rightHandHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__rightHandHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHandHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single endTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_endTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single strength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_strength");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData..ctor
// ABORTED elsewhere.  GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::OpenVrHapticData(float endTime, float strength)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OpenVRHelper
#include "GlobalNamespace/OpenVRHelper.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMicroSecondsInSecond
float GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kMicroSecondsInSecond"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMicroSecondsInSecond
void GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMicroSecondsInSecond", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kUpdateInterval
int GlobalNamespace::OpenVRHelper::_get_kUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kUpdateInterval
void GlobalNamespace::OpenVRHelper::_set_kUpdateInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateInterval", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDurationMs
int GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kMaxDurationMs"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDurationMs
void GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMaxDurationMs", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kUpdateIntervalSeconds
float GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kUpdateIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kUpdateIntervalSeconds
void GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateIntervalSeconds", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly IOpenVRHaptics _openVrHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IOpenVRHaptics*& GlobalNamespace::OpenVRHelper::dyn__openVrHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__openVrHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_openVrHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IOpenVRHaptics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::OpenVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _gamePoses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::OpenVRHelper::dyn__gamePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__gamePoses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gamePoses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>*& GlobalNamespace::OpenVRHelper::dyn__nodeStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__nodeStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _poses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::OpenVRHelper::dyn__poses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__poses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didGetNodeStatesThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__didGetNodeStatesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__didGetNodeStatesThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didGetNodeStatesThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& GlobalNamespace::OpenVRHelper::dyn__disabledEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__disabledEventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledEventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName& GlobalNamespace::OpenVRHelper::dyn__vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__vrControllerManufacturerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrControllerManufacturerName"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OpenVRHelper.get_hasInputFocus
bool GlobalNamespace::OpenVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_hasVrFocus
bool GlobalNamespace::OpenVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OpenVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::OpenVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrControllerManufacturerName
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrControllerManufacturerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.Awake
void GlobalNamespace::OpenVRHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.TriggerHapticPulse
void GlobalNamespace::OpenVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OpenVRHelper.StopHaptics
void GlobalNamespace::OpenVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OpenVRHelper.AdjustControllerTransform
void GlobalNamespace::OpenVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OpenVRHelper.GetNodePose
bool GlobalNamespace::OpenVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated method: OpenVRHelper.Update
void GlobalNamespace::OpenVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.LateUpdate
void GlobalNamespace::OpenVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnDestroy
void GlobalNamespace::OpenVRHelper::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.DisableEventSystem
void GlobalNamespace::OpenVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.EnableEventSystem
void GlobalNamespace::OpenVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnBeforeRender
void GlobalNamespace::OpenVRHelper::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OpenVRHelper/VRControllerManufacturerName
#include "GlobalNamespace/OpenVRHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName HTC
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "HTC"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName HTC
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "HTC", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Valve
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Valve"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Valve
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Valve", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Undefined", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSVRHelper
#include "GlobalNamespace/PSVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuesRumbleImpulseStrength
float GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PSVRHelper", "kContinuesRumbleImpulseStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuesRumbleImpulseStrength
void GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PSVRHelper", "kContinuesRumbleImpulseStrength", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::PSVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didGetNodeStatesThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PSVRHelper::dyn__didGetNodeStatesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__didGetNodeStatesThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didGetNodeStatesThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>*& GlobalNamespace::PSVRHelper::dyn__nodeStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__nodeStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PSVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PSVRHelper.get_hasInputFocus
bool GlobalNamespace::PSVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_hasVrFocus
bool GlobalNamespace::PSVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_isAlwaysWireless
bool GlobalNamespace::PSVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::PSVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::PSVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdMountedEvent
void GlobalNamespace::PSVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdMountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.Update
void GlobalNamespace::PSVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.LateUpdate
void GlobalNamespace::PSVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.TriggerHapticPulse
void GlobalNamespace::PSVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: PSVRHelper.StopHaptics
void GlobalNamespace::PSVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: PSVRHelper.AdjustControllerTransform
void GlobalNamespace::PSVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: PSVRHelper.GetNodePose
bool GlobalNamespace::PSVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.XRNode _node
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& GlobalNamespace::VRController::dyn__node() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__node");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_node"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::XRNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _nodeIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRController::dyn__nodeIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__nodeIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRControllerTransformOffset _transformOffset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRControllerTransformOffset*& GlobalNamespace::VRController::dyn__transformOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__transformOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transformOffset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRControllerTransformOffset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::VRController::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VRControllersInputManager _vrControllersInputManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRControllersInputManager*& GlobalNamespace::VRController::dyn__vrControllersInputManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__vrControllersInputManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrControllersInputManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRControllersInputManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _lastTrackedPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRController::dyn__lastTrackedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__lastTrackedPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastTrackedPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRController.get_node
::UnityEngine::XR::XRNode GlobalNamespace::VRController::get_node() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::XR::XRNode, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_node
void GlobalNamespace::VRController::set_node(::UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::set_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_nodeIdx
int GlobalNamespace::VRController::get_nodeIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_nodeIdx
void GlobalNamespace::VRController::set_nodeIdx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::set_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_position
::UnityEngine::Vector3 GlobalNamespace::VRController::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_rotation
::UnityEngine::Quaternion GlobalNamespace::VRController::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_forward
::UnityEngine::Vector3 GlobalNamespace::VRController::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_triggerValue
float GlobalNamespace::VRController::get_triggerValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_triggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_triggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_verticalAxisValue
float GlobalNamespace::VRController::get_verticalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_verticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_horizontalAxisValue
float GlobalNamespace::VRController::get_horizontalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_horizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_horizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_active
bool GlobalNamespace::VRController::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRController.Update
void GlobalNamespace::VRController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllerTransformOffset.get_positionOffset
::UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllerTransformOffset::get_positionOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRControllerTransformOffset.get_rotationOffset
::UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllerTransformOffset::get_rotationOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kTriggerLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kTriggerLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTriggerRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kTriggerRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerRightHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kVerticalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kVerticalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kHorizontalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kHorizontalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHandOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHandOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonOculusTouch", value));
}
// Autogenerated instance field getter
// Get instance field: private IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::VRControllersInputManager::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRControllersInputManager.TriggerValue
float GlobalNamespace::VRControllersInputManager::TriggerValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::TriggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.VerticalAxisValue
float GlobalNamespace::VRControllersInputManager::VerticalAxisValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::VerticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.HorizontalAxisValue
float GlobalNamespace::VRControllersInputManager::HorizontalAxisValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::HorizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.MenuButtonDown
bool GlobalNamespace::VRControllersInputManager::MenuButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::MenuButtonDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButtonDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersInputManager.MenuButton
bool GlobalNamespace::VRControllersInputManager::MenuButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::MenuButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRNodeExtensions
#include "GlobalNamespace/XRNodeExtensions.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: XRNodeExtensions.OculusNode
::GlobalNamespace::OVRPlugin::Node GlobalNamespace::XRNodeExtensions::OculusNode(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRNodeExtensions::OculusNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "OculusNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Node, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated method: XRNodeExtensions.PSMoveDeviceIndex
int GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "PSMoveDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolWithDefaultValueSO
#include "GlobalNamespace/BoolWithDefaultValueSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _defaultValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BoolWithDefaultValueSO::dyn__defaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoolWithDefaultValueSO::dyn__defaultValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BoolWithDefaultValueSO.OnEnable
void GlobalNamespace::BoolWithDefaultValueSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoolWithDefaultValueSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoubleSO
#include "GlobalNamespace/DoubleSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IObservableChange
#include "GlobalNamespace/IObservableChange.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IObservableChange.add_didChangeEvent
void GlobalNamespace::IObservableChange::add_didChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IObservableChange::add_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IObservableChange.remove_didChangeEvent
void GlobalNamespace::IObservableChange::remove_didChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IObservableChange::remove_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SOVariableAttribute
#include "GlobalNamespace/SOVariableAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringListSO
#include "GlobalNamespace/StringListSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String[] _strings
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::StringListSO::dyn__strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringListSO::dyn__strings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strings"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StringListSO.get_strings
::ArrayW<::StringW> GlobalNamespace::StringListSO::get_strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringListSO::get_strings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_strings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringSO
#include "GlobalNamespace/StringSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector2IntSO
#include "GlobalNamespace/Vector2IntSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _duration
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _strength
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__strength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _frequency
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__frequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _continuous
[[deprecated("Use field access instead!")]] bool& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__continuous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__continuous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continuous"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Libraries.HM.HMLib.VR.HapticPresetSO.CopyFrom
void Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom(::Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hapticPreset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: NullAllowed
#include "GlobalNamespace/NullAllowed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly NullAllowed/Context context
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NullAllowed::Context& GlobalNamespace::NullAllowed::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NullAllowed::Context*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::NullAllowed::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object ifNotValue
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::NullAllowed::dyn_ifNotValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_ifNotValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ifNotValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NullAllowed/Context
#include "GlobalNamespace/NullAllowed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Everywhere
::GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Everywhere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_get_Everywhere");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Everywhere"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Everywhere
void GlobalNamespace::NullAllowed::Context::_set_Everywhere(::GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_set_Everywhere");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Everywhere", value));
}
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Prefab
::GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_get_Prefab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Prefab"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Prefab
void GlobalNamespace::NullAllowed::Context::_set_Prefab(::GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_set_Prefab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Prefab", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NullAllowed::Context::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PyramidBloomRendererSO
#include "GlobalNamespace/PyramidBloomRendererSO.hpp"
// Including type: PyramidBloomRendererSO/Pass
#include "GlobalNamespace/PyramidBloomRendererSO_Pass.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPyramidSize
int GlobalNamespace::PyramidBloomRendererSO::_get_kMaxPyramidSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get_kMaxPyramidSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "kMaxPyramidSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPyramidSize
void GlobalNamespace::PyramidBloomRendererSO::_set_kMaxPyramidSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set_kMaxPyramidSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "kMaxPyramidSize", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11064B0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomTexID
int GlobalNamespace::PyramidBloomRendererSO::_get__bloomTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__bloomTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_bloomTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomTexID
void GlobalNamespace::PyramidBloomRendererSO::_set__bloomTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__bloomTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_bloomTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11064C0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _globalIntensityTex
int GlobalNamespace::PyramidBloomRendererSO::_get__globalIntensityTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__globalIntensityTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_globalIntensityTex"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _globalIntensityTex
void GlobalNamespace::PyramidBloomRendererSO::_set__globalIntensityTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__globalIntensityTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_globalIntensityTex", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11064D0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _autoExposureLimitID
int GlobalNamespace::PyramidBloomRendererSO::_get__autoExposureLimitID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__autoExposureLimitID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_autoExposureLimitID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _autoExposureLimitID
void GlobalNamespace::PyramidBloomRendererSO::_set__autoExposureLimitID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__autoExposureLimitID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_autoExposureLimitID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11064E0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sampleScaleID
int GlobalNamespace::PyramidBloomRendererSO::_get__sampleScaleID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__sampleScaleID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_sampleScaleID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sampleScaleID
void GlobalNamespace::PyramidBloomRendererSO::_set__sampleScaleID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__sampleScaleID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_sampleScaleID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11064F0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _combineSrcID
int GlobalNamespace::PyramidBloomRendererSO::_get__combineSrcID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__combineSrcID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_combineSrcID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _combineSrcID
void GlobalNamespace::PyramidBloomRendererSO::_set__combineSrcID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__combineSrcID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_combineSrcID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106500
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _combineDstID
int GlobalNamespace::PyramidBloomRendererSO::_get__combineDstID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__combineDstID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_combineDstID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _combineDstID
void GlobalNamespace::PyramidBloomRendererSO::_set__combineDstID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__combineDstID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_combineDstID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106510
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaWeightsID
int GlobalNamespace::PyramidBloomRendererSO::_get__alphaWeightsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_get__alphaWeightsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_alphaWeightsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaWeightsID
void GlobalNamespace::PyramidBloomRendererSO::_set__alphaWeightsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::_set__alphaWeightsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_alphaWeightsID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _shader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::PyramidBloomRendererSO::dyn__shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::dyn__shader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::PyramidBloomRendererSO::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PyramidBloomRendererSO/Level[] _pyramid
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PyramidBloomRendererSO::Level>& GlobalNamespace::PyramidBloomRendererSO::dyn__pyramid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::dyn__pyramid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pyramid"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::PyramidBloomRendererSO::Level>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PyramidBloomRendererSO::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PyramidBloomRendererSO..cctor
void GlobalNamespace::PyramidBloomRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PyramidBloomRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PyramidBloomRendererSO.OnDisable
void GlobalNamespace::PyramidBloomRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomRendererSO.RenderBloom
void GlobalNamespace::PyramidBloomRendererSO::RenderBloom(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, float radius, bool alphaWeights, bool betterQuality, bool gammaCorrection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::RenderBloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderBloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(betterQuality), ::il2cpp_utils::ExtractType(gammaCorrection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, radius, alphaWeights, betterQuality, gammaCorrection);
}
// Autogenerated method: PyramidBloomRendererSO.RenderBloom
void GlobalNamespace::PyramidBloomRendererSO::RenderBloom(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, float radius, float intensity, float autoExposureLimit, float downIntensityOffset, bool uniformPyramidWeights, bool downsampleOnFirstPass, float pyramidWeightsParam, float alphaWeights, float firstUpsampleBrightness, float finalUpsampleBrightness, ::GlobalNamespace::PyramidBloomRendererSO::Pass preFilterPass, ::GlobalNamespace::PyramidBloomRendererSO::Pass downsamplePass, ::GlobalNamespace::PyramidBloomRendererSO::Pass upsamplePass, ::GlobalNamespace::PyramidBloomRendererSO::Pass finalUpsamplePass) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::RenderBloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderBloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(intensity), ::il2cpp_utils::ExtractType(autoExposureLimit), ::il2cpp_utils::ExtractType(downIntensityOffset), ::il2cpp_utils::ExtractType(uniformPyramidWeights), ::il2cpp_utils::ExtractType(downsampleOnFirstPass), ::il2cpp_utils::ExtractType(pyramidWeightsParam), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(firstUpsampleBrightness), ::il2cpp_utils::ExtractType(finalUpsampleBrightness), ::il2cpp_utils::ExtractType(preFilterPass), ::il2cpp_utils::ExtractType(downsamplePass), ::il2cpp_utils::ExtractType(upsamplePass), ::il2cpp_utils::ExtractType(finalUpsamplePass)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, radius, intensity, autoExposureLimit, downIntensityOffset, uniformPyramidWeights, downsampleOnFirstPass, pyramidWeightsParam, alphaWeights, firstUpsampleBrightness, finalUpsampleBrightness, preFilterPass, downsamplePass, upsamplePass, finalUpsamplePass);
}
// Autogenerated method: PyramidBloomRendererSO.OnEnable
void GlobalNamespace::PyramidBloomRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PyramidBloomRendererSO/Pass
#include "GlobalNamespace/PyramidBloomRendererSO_Pass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Prefilter13
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Prefilter13"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Prefilter13
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter13(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Prefilter13", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Prefilter4
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Prefilter4"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Prefilter4
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter4(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Prefilter4", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Downsample13
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Downsample13"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Downsample13
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample13(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Downsample13", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Downsample4
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Downsample4"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Downsample4
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample4(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Downsample4", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass DownsampleBilinearGamma
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_DownsampleBilinearGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_DownsampleBilinearGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "DownsampleBilinearGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass DownsampleBilinearGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_DownsampleBilinearGamma(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_DownsampleBilinearGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "DownsampleBilinearGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTent
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTent"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTent
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTent(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTent", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleBox
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleBox"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleBox
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBox(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleBox", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentGamma
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentGamma(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleBoxGamma
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBoxGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBoxGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleBoxGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleBoxGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBoxGamma(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBoxGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleBoxGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Bilinear
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Bilinear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Bilinear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Bilinear"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Bilinear
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Bilinear(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Bilinear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Bilinear", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass BilinearGamma
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_BilinearGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_BilinearGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "BilinearGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass BilinearGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_BilinearGamma(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_BilinearGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "BilinearGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndReinhardToneMapping
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndReinhardToneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndReinhardToneMapping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndReinhardToneMapping"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndReinhardToneMapping
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndReinhardToneMapping(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndReinhardToneMapping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndReinhardToneMapping", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMapping
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMapping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMapping"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMapping
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMapping(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMapping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMapping", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMappingGlobalIntensity
::GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMappingGlobalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMappingGlobalIntensity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMappingGlobalIntensity"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMappingGlobalIntensity
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMappingGlobalIntensity(::GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMappingGlobalIntensity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMappingGlobalIntensity", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PyramidBloomRendererSO::Pass::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PyramidBloomRendererSO::Pass::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogEnvironment
#include "GlobalNamespace/BloomFogEnvironment.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomFogSO _bloomFog
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogSO*& GlobalNamespace::BloomFogEnvironment::dyn__bloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironment::dyn__bloomFog");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFog"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomFogEnvironmentParams _fogParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogEnvironmentParams*& GlobalNamespace::BloomFogEnvironment::dyn__fogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironment::dyn__fogParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fogParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogEnvironmentParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomFogEnvironment.OnEnable
void GlobalNamespace::BloomFogEnvironment::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironment::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogEnvironment.OnValidate
void GlobalNamespace::BloomFogEnvironment::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironment::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single attenuation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_attenuation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_attenuation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attenuation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single offset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single heightFogStartY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_heightFogStartY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_heightFogStartY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightFogStartY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single heightFogHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_heightFogHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_heightFogHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightFogHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single autoExposureLimit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_autoExposureLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_autoExposureLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoExposureLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noteSpawnIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogEnvironmentParams::dyn_noteSpawnIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogEnvironmentParams::dyn_noteSpawnIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteSpawnIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogParamsAnimator
#include "GlobalNamespace/BloomFogParamsAnimator.hpp"
// Including type: BloomFogParamsAnimator/<AnimationCoroutine>d__2
#include "GlobalNamespace/BloomFogParamsAnimator_-AnimationCoroutine-d__2.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BloomFogSO _bloomFog
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogSO*& GlobalNamespace::BloomFogParamsAnimator::dyn__bloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::dyn__bloomFog");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFog"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomFogParamsAnimator.AnimateBloomFogParamsChange
void GlobalNamespace::BloomFogParamsAnimator::AnimateBloomFogParamsChange(::GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::AnimateBloomFogParamsChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateBloomFogParamsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, envFogParams, duration);
}
// Autogenerated method: BloomFogParamsAnimator.AnimationCoroutine
::System::Collections::IEnumerator* GlobalNamespace::BloomFogParamsAnimator::AnimationCoroutine(::GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, envFogParams, duration);
}
// Autogenerated method: BloomFogParamsAnimator.SetBloomFogParamsChange
void GlobalNamespace::BloomFogParamsAnimator::SetBloomFogParamsChange(::GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float transition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::SetBloomFogParamsChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBloomFogParamsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(transition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, envFogParams, transition);
}
// Autogenerated method: BloomFogParamsAnimator.GetDefaultBloomFogParams
::GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogParamsAnimator::GetDefaultBloomFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::GetDefaultBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator.SetDefaultBloomFogParams
void GlobalNamespace::BloomFogParamsAnimator::SetDefaultBloomFogParams(::GlobalNamespace::BloomFogEnvironmentParams* newDefaultBloomFogParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::SetDefaultBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newDefaultBloomFogParams)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newDefaultBloomFogParams);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomFogParamsAnimator/<AnimationCoroutine>d__2
#include "GlobalNamespace/BloomFogParamsAnimator_-AnimationCoroutine-d__2.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BloomFogParamsAnimator <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogParamsAnimator*& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogParamsAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BloomFogEnvironmentParams envFogParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogEnvironmentParams*& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_envFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_envFogParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "envFogParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogEnvironmentParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$elapsedTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::dyn_$elapsedTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.IDisposable.Dispose
void GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.MoveNext
bool GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kBloomFogEnabledKeyword
::StringW GlobalNamespace::BloomFogSO::_get_kBloomFogEnabledKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_get_kBloomFogEnabledKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BloomFogSO", "kBloomFogEnabledKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBloomFogEnabledKeyword
void GlobalNamespace::BloomFogSO::_set_kBloomFogEnabledKeyword(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_set_kBloomFogEnabledKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "kBloomFogEnabledKeyword", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11065E8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogAttenuationID
int GlobalNamespace::BloomFogSO::_get__customFogAttenuationID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_get__customFogAttenuationID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogAttenuationID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogAttenuationID
void GlobalNamespace::BloomFogSO::_set__customFogAttenuationID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_set__customFogAttenuationID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogAttenuationID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11065F8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogOffsetID
int GlobalNamespace::BloomFogSO::_get__customFogOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_get__customFogOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogOffsetID
void GlobalNamespace::BloomFogSO::_set__customFogOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_set__customFogOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106608
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogHeightFogStartYID
int GlobalNamespace::BloomFogSO::_get__customFogHeightFogStartYID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_get__customFogHeightFogStartYID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogHeightFogStartYID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogHeightFogStartYID
void GlobalNamespace::BloomFogSO::_set__customFogHeightFogStartYID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_set__customFogHeightFogStartYID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogHeightFogStartYID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106618
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogHeightFogHeightID
int GlobalNamespace::BloomFogSO::_get__customFogHeightFogHeightID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_get__customFogHeightFogHeightID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogHeightFogHeightID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogHeightFogHeightID
void GlobalNamespace::BloomFogSO::_set__customFogHeightFogHeightID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::_set__customFogHeightFogHeightID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogHeightFogHeightID", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _bloomFogEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomFogSO::dyn__bloomFogEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__bloomFogEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFogEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _transition
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogSO::dyn__transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__transition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _autoExposureLimit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogSO::dyn__autoExposureLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__autoExposureLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_autoExposureLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noteSpawnIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomFogSO::dyn__noteSpawnIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__noteSpawnIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteSpawnIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomFogEnvironmentParams _defaultFogParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogEnvironmentParams*& GlobalNamespace::BloomFogSO::dyn__defaultFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__defaultFogParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultFogParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogEnvironmentParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomFogEnvironmentParams _transitionFogParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogEnvironmentParams*& GlobalNamespace::BloomFogSO::dyn__transitionFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::dyn__transitionFogParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transitionFogParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogEnvironmentParams**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomFogSO.get_transition
float GlobalNamespace::BloomFogSO::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_transition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_transition
void GlobalNamespace::BloomFogSO::set_transition(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::set_transition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_defaultForParams
::GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogSO::get_defaultForParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_defaultForParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultForParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_defaultForParams
void GlobalNamespace::BloomFogSO::set_defaultForParams(::GlobalNamespace::BloomFogEnvironmentParams* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::set_defaultForParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_defaultForParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_transitionFogParams
::GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogSO::get_transitionFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_transitionFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transitionFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_transitionFogParams
void GlobalNamespace::BloomFogSO::set_transitionFogParams(::GlobalNamespace::BloomFogEnvironmentParams* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::set_transitionFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transitionFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_bloomFogEnabled
bool GlobalNamespace::BloomFogSO::get_bloomFogEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_bloomFogEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomFogEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_bloomFogEnabled
void GlobalNamespace::BloomFogSO::set_bloomFogEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::set_bloomFogEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bloomFogEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_autoExposureLimit
float GlobalNamespace::BloomFogSO::get_autoExposureLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_autoExposureLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoExposureLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.get_noteSpawnIntensity
float GlobalNamespace::BloomFogSO::get_noteSpawnIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::get_noteSpawnIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteSpawnIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO..cctor
void GlobalNamespace::BloomFogSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomFogSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomFogSO.Setup
void GlobalNamespace::BloomFogSO::Setup(::GlobalNamespace::BloomFogEnvironmentParams* defaultFogParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultFogParams)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, defaultFogParams);
}
// Autogenerated method: BloomFogSO.UpdateShaderParams
void GlobalNamespace::BloomFogSO::UpdateShaderParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::UpdateShaderParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateShaderParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.SetParams
void GlobalNamespace::BloomFogSO::SetParams(float attenuation, float offset, float heightFogStartY, float heightFogHeight, float autoExposureLimit, float noteSpawnIntensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::SetParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attenuation), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(heightFogStartY), ::il2cpp_utils::ExtractType(heightFogHeight), ::il2cpp_utils::ExtractType(autoExposureLimit), ::il2cpp_utils::ExtractType(noteSpawnIntensity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attenuation, offset, heightFogStartY, heightFogHeight, autoExposureLimit, noteSpawnIntensity);
}
// Autogenerated method: BloomFogSO.OnEnable
void GlobalNamespace::BloomFogSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomFogSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePass
#include "GlobalNamespace/BloomPrePass.hpp"
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassRendererSO _bloomPrepassRenderer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassRendererSO*& GlobalNamespace::BloomPrePass::dyn__bloomPrepassRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::dyn__bloomPrepassRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrepassRenderer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassRendererSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectContainerSO*& GlobalNamespace::BloomPrePass::dyn__bloomPrePassEffectContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::dyn__bloomPrePassEffectContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassEffectContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassEffectContainerSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassRenderDataSO _bloomPrePassRenderData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassRenderDataSO*& GlobalNamespace::BloomPrePass::dyn__bloomPrePassRenderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::dyn__bloomPrePassRenderData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassRenderData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassRenderDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePass/Mode _mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePass::Mode& GlobalNamespace::BloomPrePass::dyn__mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::dyn__mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePass::Mode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassRenderDataSO/Data _renderData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassRenderDataSO::Data*& GlobalNamespace::BloomPrePass::dyn__renderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::dyn__renderData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassRenderDataSO::Data**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePass.Awake
void GlobalNamespace::BloomPrePass::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.LazyInit
void GlobalNamespace::BloomPrePass::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnDestroy
void GlobalNamespace::BloomPrePass::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnPreRender
void GlobalNamespace::BloomPrePass::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnPostRender
void GlobalNamespace::BloomPrePass::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.SetMode
void GlobalNamespace::BloomPrePass::SetMode(::GlobalNamespace::BloomPrePass::Mode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePass/Mode
#include "GlobalNamespace/BloomPrePass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BloomPrePass/Mode RenderAndSetData
::GlobalNamespace::BloomPrePass::Mode GlobalNamespace::BloomPrePass::Mode::_get_RenderAndSetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Mode::_get_RenderAndSetData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePass::Mode>("", "BloomPrePass/Mode", "RenderAndSetData"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePass/Mode RenderAndSetData
void GlobalNamespace::BloomPrePass::Mode::_set_RenderAndSetData(::GlobalNamespace::BloomPrePass::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Mode::_set_RenderAndSetData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePass/Mode", "RenderAndSetData", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePass/Mode SetDataOnly
::GlobalNamespace::BloomPrePass::Mode GlobalNamespace::BloomPrePass::Mode::_get_SetDataOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Mode::_get_SetDataOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePass::Mode>("", "BloomPrePass/Mode", "SetDataOnly"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePass/Mode SetDataOnly
void GlobalNamespace::BloomPrePass::Mode::_set_SetDataOnly(::GlobalNamespace::BloomPrePass::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Mode::_set_SetDataOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePass/Mode", "SetDataOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePass::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePass::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColor
#include "GlobalNamespace/BloomPrePassBackgroundColor.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110671C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::BloomPrePassBackgroundColor::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundColor", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::BloomPrePassBackgroundColor::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110672C
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _material
::UnityEngine::Material* GlobalNamespace::BloomPrePassBackgroundColor::_get__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_get__material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Material*>("", "BloomPrePassBackgroundColor", "_material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _material
void GlobalNamespace::BloomPrePassBackgroundColor::_set__material(::UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_set__material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_material", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110673C
// Autogenerated static field getter
// Get static field: static private System.Boolean _initialized
bool GlobalNamespace::BloomPrePassBackgroundColor::_get__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_get__initialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "BloomPrePassBackgroundColor", "_initialized"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _initialized
void GlobalNamespace::BloomPrePassBackgroundColor::_set__initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::_set__initialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_initialized", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColor::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColor::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _grayscaleFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColor::dyn__grayscaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::dyn__grayscaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_grayscaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _shader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::BloomPrePassBackgroundColor::dyn__shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::dyn__shader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BloomPrePassBackgroundColor::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundColor.get_color
::UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColor::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.set_color
void GlobalNamespace::BloomPrePassBackgroundColor::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomPrePassBackgroundColor.get_bgColor
::UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColor::get_bgColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::get_bgColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bgColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundColor::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor..cctor
void GlobalNamespace::BloomPrePassBackgroundColor::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundColor", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.Render
void GlobalNamespace::BloomPrePassBackgroundColor::Render(::UnityEngine::RenderTexture* dest, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColor::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: BloomPrePassBackgroundColorsGradient/Element
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient_Element.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColorsGradient/Element[] _elements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>& GlobalNamespace::BloomPrePassBackgroundColorsGradient::dyn__elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::dyn__elements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradient.get_elements
::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*> GlobalNamespace::BloomPrePassBackgroundColorsGradient::get_elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::get_elements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradient.EvaluateColor
::UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColorsGradient::EvaluateColor(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::EvaluateColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, t);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundColorsGradient::UpdatePixels(::Unity::Collections::NativeArray_1<::UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradient/Element
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient_Element.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startT
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_startT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_startT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startT"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single exp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_exp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element::dyn_exp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "exp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundGradient
#include "GlobalNamespace/BloomPrePassBackgroundGradient.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _gradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& GlobalNamespace::BloomPrePassBackgroundGradient::dyn__gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundGradient::dyn__gradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundGradient::UpdatePixels(::Unity::Collections::NativeArray_1<::UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightInstancedGroupRenderer
#include "GlobalNamespace/BloomPrePassBackgroundNonLightInstancedGroupRenderer.hpp"
// Including type: BloomPrePassBackgroundNonLightInstancedGroupRenderer/SupportedProperty
#include "GlobalNamespace/BloomPrePassBackgroundNonLightInstancedGroupRenderer_SupportedProperty.hpp"
// Including type: BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType
#include "GlobalNamespace/BloomPrePassBackgroundNonLightInstancedGroupRenderer_PropertyType.hpp"
// Including type: BloomPrePassBackgroundNonLightRenderer
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRenderer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11067B4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _worldSpaceCameraPosID
int GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_get__worldSpaceCameraPosID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_get__worldSpaceCameraPosID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer", "_worldSpaceCameraPosID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _worldSpaceCameraPosID
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_set__worldSpaceCameraPosID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_set__worldSpaceCameraPosID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer", "_worldSpaceCameraPosID", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kInternalMatricesCachingId
::StringW GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_get_kInternalMatricesCachingId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_get_kInternalMatricesCachingId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer", "kInternalMatricesCachingId"));
}
// Autogenerated static field setter
// Set static field: static private System.String kInternalMatricesCachingId
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_set_kInternalMatricesCachingId(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_set_kInternalMatricesCachingId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer", "kInternalMatricesCachingId", value));
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundNonLightRenderer[] _renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer*>& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundNonLightInstancedGroupRenderer/SupportedProperty[] _supportedProperties
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty*>& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__supportedProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__supportedProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_supportedProperties"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single[]> _reusableFloatArrays
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableFloatArrays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableFloatArrays");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableFloatArrays"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Vector4[]> _reusableVectorArrays
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::UnityEngine::Vector4>>*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableVectorArrays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableVectorArrays");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableVectorArrays"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::UnityEngine::Vector4>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Matrix4x4[]> _reusableMatrixArrays
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::UnityEngine::Matrix4x4>>*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableMatrixArrays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableMatrixArrays");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableMatrixArrays"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::UnityEngine::Matrix4x4>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _reusableArraysSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableArraysSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableArraysSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableArraysSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _commandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__commandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__commandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_commandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _reusableSetMaterialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableSetMaterialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableSetMaterialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableSetMaterialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _reusableGetMaterialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableGetMaterialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::dyn__reusableGetMaterialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableGetMaterialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.Awake
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.GetCachedMatrixArray
::ArrayW<::UnityEngine::Matrix4x4> GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedMatrixArray(::StringW propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedMatrixArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCachedMatrixArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Matrix4x4>, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.GetCachedFloatArray
::ArrayW<float> GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedFloatArray(::StringW propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedFloatArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCachedFloatArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<float>, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.GetCachedVectorArray
::ArrayW<::UnityEngine::Vector4> GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedVectorArray(::StringW propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::GetCachedVectorArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCachedVectorArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Vector4>, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.AutoFillRenderers
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::AutoFillRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::AutoFillRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoFillRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer..cctor
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightInstancedGroupRenderer.Render
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::Render(::UnityEngine::RenderTexture* dest, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightInstancedGroupRenderer/SupportedProperty
#include "GlobalNamespace/BloomPrePassBackgroundNonLightInstancedGroupRenderer_SupportedProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType propertyType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::SupportedProperty::dyn_propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType
#include "GlobalNamespace/BloomPrePassBackgroundNonLightInstancedGroupRenderer_PropertyType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Float
::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Float"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Float
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Float(::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Float", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Vector
::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Vector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Vector"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Vector
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Vector(::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Vector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Vector", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Color
::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Color"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Color
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Color(::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Matrix4x4
::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Matrix4x4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_get_Matrix4x4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType>("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Matrix4x4"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType Matrix4x4
void GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Matrix4x4(::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::_set_Matrix4x4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightInstancedGroupRenderer/PropertyType", "Matrix4x4", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightInstancedGroupRenderer::PropertyType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightRenderer
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRenderer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isPartOfInstancedRendering
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__isPartOfInstancedRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__isPartOfInstancedRendering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isPartOfInstancedRendering"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _cachedTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__cachedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::dyn__cachedTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cachedTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.get_meshFilter
::UnityEngine::MeshFilter* GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_meshFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_meshFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::MeshFilter*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.get_cachedTransform
::UnityEngine::Transform* GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_cachedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_cachedTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cachedTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.set_isPartOfInstancedRendering
void GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::set_isPartOfInstancedRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::set_isPartOfInstancedRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPartOfInstancedRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.get_renderer
::UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.Awake
void GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.OnEnable
void GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.OnValidate
void GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::InitIfNeeded");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightRendererCore
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRendererCore.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11068BC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _worldSpaceCameraPosID
int GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_get__worldSpaceCameraPosID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_get__worldSpaceCameraPosID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundNonLightRendererCore", "_worldSpaceCameraPosID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _worldSpaceCameraPosID
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_set__worldSpaceCameraPosID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_set__worldSpaceCameraPosID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightRendererCore", "_worldSpaceCameraPosID", value));
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _keepDefaultRendering
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__keepDefaultRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__keepDefaultRendering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keepDefaultRendering"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useCustomMaterial
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__useCustomMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__useCustomMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useCustomMaterial"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _customMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__customMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__customMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_customMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _commandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__commandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::dyn__commandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_commandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.get_renderer
::UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.Awake
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore..cctor
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundNonLightRendererCore", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.Render
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Render(::UnityEngine::RenderTexture* dest, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundParticleSystemRenderer
#include "GlobalNamespace/BloomPrePassBackgroundParticleSystemRenderer.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundParticleSystemRenderer.get_renderer
::UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundParticleSystemRenderer.Awake
void GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundSpriteRenderer
#include "GlobalNamespace/BloomPrePassBackgroundSpriteRenderer.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::BloomPrePassBackgroundSpriteRenderer::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundSpriteRenderer::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundSpriteRenderer.get_renderer
::UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundSpriteRenderer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundSpriteRenderer::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundTextureGradient
#include "GlobalNamespace/BloomPrePassBackgroundTextureGradient.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11068FC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _gradientTexID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__gradientTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__gradientTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_gradientTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _gradientTexID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__gradientTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__gradientTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_gradientTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110690C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _inverseProjectionMatrixID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__inverseProjectionMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__inverseProjectionMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_inverseProjectionMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _inverseProjectionMatrixID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__inverseProjectionMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__inverseProjectionMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_inverseProjectionMatrixID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110691C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cameraToWorldMatrixID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__cameraToWorldMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__cameraToWorldMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_cameraToWorldMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cameraToWorldMatrixID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__cameraToWorldMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__cameraToWorldMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_cameraToWorldMatrixID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x110692C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_colorID", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kUseToneMappingKeyword
::StringW GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kUseToneMappingKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kUseToneMappingKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BloomPrePassBackgroundTextureGradient", "kUseToneMappingKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kUseToneMappingKeyword
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kUseToneMappingKeyword(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kUseToneMappingKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "kUseToneMappingKeyword", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kSkyGradientShaderName
::StringW GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kSkyGradientShaderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kSkyGradientShaderName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "BloomPrePassBackgroundTextureGradient", "kSkyGradientShaderName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kSkyGradientShaderName
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kSkyGradientShaderName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kSkyGradientShaderName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "kSkyGradientShaderName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kTextureWidth
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kTextureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kTextureWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "kTextureWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTextureWidth
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kTextureWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kTextureWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "kTextureWidth", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _tintColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__tintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__tintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tintColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Texture2D _texture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__texture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.get_tintColor
::UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundTextureGradient::get_tintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::get_tintColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tintColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.set_tintColor
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::set_tintColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::set_tintColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tintColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.Start
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.OnDestroy
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdatePixels(::Unity::Collections::NativeArray_1<::UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.UpdateGradientTexture
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdateGradientTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdateGradientTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGradientTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient..cctor
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundTextureGradient", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.OnValidate
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.Render
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::Render(::UnityEngine::RenderTexture* dest, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundTextureGradient::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassEffectSO _bloomPrePassEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectSO*& GlobalNamespace::BloomPrePassEffectContainerSO::dyn__bloomPrePassEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectContainerSO::dyn__bloomPrePassEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassEffectSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassEffectContainerSO.get_bloomPrePassEffect
::GlobalNamespace::BloomPrePassEffectSO* GlobalNamespace::BloomPrePassEffectContainerSO::get_bloomPrePassEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectContainerSO::get_bloomPrePassEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomPrePassEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BloomPrePassEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectContainerSO.Init
void GlobalNamespace::BloomPrePassEffectContainerSO::Init(::GlobalNamespace::BloomPrePassEffectSO* bloomPrePassEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectContainerSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bloomPrePassEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bloomPrePassEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _textureWidth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassEffectSO::dyn__textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::dyn__textureWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textureWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _textureHeight
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassEffectSO::dyn__textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::dyn__textureHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textureHeight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _fov
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::BloomPrePassEffectSO::dyn__fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::dyn__fov");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fov"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _linesWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassEffectSO::dyn__linesWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::dyn__linesWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_linesWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassEffectSO.get_textureEffect
::GlobalNamespace::TextureEffectSO* GlobalNamespace::BloomPrePassEffectSO::get_textureEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_textureEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TextureEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_textureWidth
int GlobalNamespace::BloomPrePassEffectSO::get_textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_textureWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_textureHeight
int GlobalNamespace::BloomPrePassEffectSO::get_textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_textureHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_fov
::UnityEngine::Vector2 GlobalNamespace::BloomPrePassEffectSO::get_fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_fov");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_linesWidth
float GlobalNamespace::BloomPrePassEffectSO::get_linesWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_linesWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linesWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_toneMapping
::GlobalNamespace::ToneMapping GlobalNamespace::BloomPrePassEffectSO::get_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassEffectSO::get_toneMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toneMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ToneMapping, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLight
#include "GlobalNamespace/BloomPrePassLight.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: BloomPrePassLight/LightsDataItem
#include "GlobalNamespace/BloomPrePassLight_LightsDataItem.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kFloatSize
int GlobalNamespace::BloomPrePassLight::_get_kFloatSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kFloatSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kFloatSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kFloatSize
void GlobalNamespace::BloomPrePassLight::_set_kFloatSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kFloatSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kFloatSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kVertexOffset
int GlobalNamespace::BloomPrePassLight::_get_kVertexOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kVertexOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kVertexOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kVertexOffset
void GlobalNamespace::BloomPrePassLight::_set_kVertexOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kVertexOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kVertexOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kVertexSize
int GlobalNamespace::BloomPrePassLight::_get_kVertexSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kVertexSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kVertexSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kVertexSize
void GlobalNamespace::BloomPrePassLight::_set_kVertexSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kVertexSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kVertexSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kViewPosOffset
int GlobalNamespace::BloomPrePassLight::_get_kViewPosOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kViewPosOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kViewPosOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kViewPosOffset
void GlobalNamespace::BloomPrePassLight::_set_kViewPosOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kViewPosOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kViewPosOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kViewPosSize
int GlobalNamespace::BloomPrePassLight::_get_kViewPosSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kViewPosSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kViewPosSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kViewPosSize
void GlobalNamespace::BloomPrePassLight::_set_kViewPosSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kViewPosSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kViewPosSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kColorOffset
int GlobalNamespace::BloomPrePassLight::_get_kColorOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kColorOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kColorOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kColorOffset
void GlobalNamespace::BloomPrePassLight::_set_kColorOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kColorOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kColorOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kColorSize
int GlobalNamespace::BloomPrePassLight::_get_kColorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kColorSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kColorSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kColorSize
void GlobalNamespace::BloomPrePassLight::_set_kColorSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kColorSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kColorSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kUvOffset
int GlobalNamespace::BloomPrePassLight::_get_kUvOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kUvOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kUvOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kUvOffset
void GlobalNamespace::BloomPrePassLight::_set_kUvOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kUvOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kUvOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kUvSize
int GlobalNamespace::BloomPrePassLight::_get_kUvSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kUvSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kUvSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kUvSize
void GlobalNamespace::BloomPrePassLight::_set_kUvSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kUvSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kUvSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kVertexDataSize
int GlobalNamespace::BloomPrePassLight::_get_kVertexDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get_kVertexDataSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassLight", "kVertexDataSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kVertexDataSize
void GlobalNamespace::BloomPrePassLight::_set_kVertexDataSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set_kVertexDataSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "kVertexDataSize", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* GlobalNamespace::BloomPrePassLight::_get__bloomLightsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get__bloomLightsDict");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>*>("", "BloomPrePassLight", "_bloomLightsDict")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
void GlobalNamespace::BloomPrePassLight::_set__bloomLightsDict(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set__bloomLightsDict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "_bloomLightsDict", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* GlobalNamespace::BloomPrePassLight::_get__lightsDataItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_get__lightsDataItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>*>("", "BloomPrePassLight", "_lightsDataItems"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
void GlobalNamespace::BloomPrePassLight::_set__lightsDataItems(::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::_set__lightsDataItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "_lightsDataItems", value));
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassLightTypeSO _lightType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& GlobalNamespace::BloomPrePassLight::dyn__lightType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::dyn__lightType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassLightTypeSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassLightTypeSO _registeredWithLightType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& GlobalNamespace::BloomPrePassLight::dyn__registeredWithLightType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::dyn__registeredWithLightType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registeredWithLightType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassLightTypeSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isRegistered
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassLight::dyn__isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::dyn__isRegistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isRegistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isBeingDestroyed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassLight::dyn__isBeingDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::dyn__isBeingDestroyed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isBeingDestroyed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassLight.get_bloomLightsDict
::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* GlobalNamespace::BloomPrePassLight::get_bloomLightsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::get_bloomLightsDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", "get_bloomLightsDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassLight.get_lightsDataItems
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* GlobalNamespace::BloomPrePassLight::get_lightsDataItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::get_lightsDataItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", "get_lightsDataItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassLight.get_isDirty
bool GlobalNamespace::BloomPrePassLight::get_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::get_isDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight..cctor
void GlobalNamespace::BloomPrePassLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnEnable
void GlobalNamespace::BloomPrePassLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnDisable
void GlobalNamespace::BloomPrePassLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnDestroy
void GlobalNamespace::BloomPrePassLight::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.RegisterLight
void GlobalNamespace::BloomPrePassLight::RegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.UnregisterLight
void GlobalNamespace::BloomPrePassLight::UnregisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::UnregisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.DidRegisterLight
void GlobalNamespace::BloomPrePassLight::DidRegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::DidRegisterLight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidRegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.FillMeshData
void GlobalNamespace::BloomPrePassLight::FillMeshData(ByRef<int> lightNum, ::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData> lightQuads, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, float lineWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::FillMeshData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillMeshData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightNum), ::il2cpp_utils::ExtractType(lightQuads), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(lineWidth)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(lightNum), lightQuads, viewMatrix, projectionMatrix, lineWidth);
}
// Autogenerated method: BloomPrePassLight.Refresh
void GlobalNamespace::BloomPrePassLight::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLight/LightsDataItem
#include "GlobalNamespace/BloomPrePassLight_LightsDataItem.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly BloomPrePassLightTypeSO lightType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& GlobalNamespace::BloomPrePassLight::LightsDataItem::dyn_lightType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::LightsDataItem::dyn_lightType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassLightTypeSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.HashSet`1<BloomPrePassLight> lights
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*& GlobalNamespace::BloomPrePassLight::LightsDataItem::dyn_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::LightsDataItem::dyn_lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lights"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _renderingPriority
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassLightTypeSO::dyn__renderingPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLightTypeSO::dyn__renderingPriority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderingPriority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::BloomPrePassLightTypeSO::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLightTypeSO::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassLightTypeSO.get_renderingPriority
int GlobalNamespace::BloomPrePassLightTypeSO::get_renderingPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLightTypeSO::get_renderingPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderingPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLightTypeSO.get_material
::UnityEngine::Material* GlobalNamespace::BloomPrePassLightTypeSO::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLightTypeSO::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
