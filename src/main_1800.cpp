// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimeExtensions
#include "GlobalNamespace/TimeExtensions.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TimeExtensions.MinSecDurationText
::StringW GlobalNamespace::TimeExtensions::MinSecDurationText(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::MinSecDurationText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinSecDurationText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, duration);
}
// Autogenerated method: TimeExtensions.MinSecMillisecDurationText
::StringW GlobalNamespace::TimeExtensions::MinSecMillisecDurationText(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::MinSecMillisecDurationText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinSecMillisecDurationText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, duration);
}
// Autogenerated method: TimeExtensions.OneBeatDuration
float GlobalNamespace::TimeExtensions::OneBeatDuration(float bpm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::OneBeatDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "OneBeatDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bpm)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bpm);
}
// Autogenerated method: TimeExtensions.TimeToBeat
float GlobalNamespace::TimeExtensions::TimeToBeat(float time, float bpm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::TimeToBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TimeToBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(bpm)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, bpm);
}
// Autogenerated method: TimeExtensions.SecondsToMinutes
float GlobalNamespace::TimeExtensions::SecondsToMinutes(float seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::SecondsToMinutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToMinutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seconds);
}
// Autogenerated method: TimeExtensions.SecondsToDays
int GlobalNamespace::TimeExtensions::SecondsToDays(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::SecondsToDays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToDays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.SecondsToHours
int GlobalNamespace::TimeExtensions::SecondsToHours(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::SecondsToHours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToHours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.SecondsToMinutes
int GlobalNamespace::TimeExtensions::SecondsToMinutes(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::SecondsToMinutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToMinutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.DaysToSeconds
int GlobalNamespace::TimeExtensions::DaysToSeconds(int days) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::DaysToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "DaysToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(days)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, days);
}
// Autogenerated method: TimeExtensions.HoursToSeconds
int GlobalNamespace::TimeExtensions::HoursToSeconds(int hours) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::HoursToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "HoursToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hours)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hours);
}
// Autogenerated method: TimeExtensions.MinutesToSeconds
int GlobalNamespace::TimeExtensions::MinutesToSeconds(int minutes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::MinutesToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinutesToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minutes)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, minutes);
}
// Autogenerated method: TimeExtensions.Hours
int GlobalNamespace::TimeExtensions::Hours(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::Hours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Hours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Minutes
int GlobalNamespace::TimeExtensions::Minutes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::Minutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Minutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Seconds
int GlobalNamespace::TimeExtensions::Seconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::Seconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Seconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Milliseconds
int GlobalNamespace::TimeExtensions::Milliseconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::Milliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Milliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalDays
int GlobalNamespace::TimeExtensions::TotalDays(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::TotalDays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalDays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalHours
int GlobalNamespace::TimeExtensions::TotalHours(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::TotalHours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalHours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalMinutes
int GlobalNamespace::TimeExtensions::TotalMinutes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::TotalMinutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalMinutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalSeconds
int GlobalNamespace::TimeExtensions::TotalSeconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::TotalSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.ToUnixTime
int64_t GlobalNamespace::TimeExtensions::ToUnixTime(::System::DateTime dateTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::ToUnixTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "ToUnixTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dateTime)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dateTime);
}
// Autogenerated method: TimeExtensions.AsUnixTime
::System::DateTime GlobalNamespace::TimeExtensions::AsUnixTime(int64_t unixTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeExtensions::AsUnixTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "AsUnixTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unixTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::DateTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, unixTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TransformExtensions
#include "GlobalNamespace/TransformExtensions.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TransformExtensions.InverseTransformRotation
::UnityEngine::Quaternion GlobalNamespace::TransformExtensions::InverseTransformRotation(::UnityEngine::Transform* trans, ::UnityEngine::Quaternion worldRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformExtensions::InverseTransformRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransformExtensions", "InverseTransformRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trans), ::il2cpp_utils::ExtractType(worldRotation)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, trans, worldRotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TransformLayouter
#include "GlobalNamespace/TransformLayouter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TriggerChecker
#include "GlobalNamespace/TriggerChecker.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Action TriggerCheckerOnEnterEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnEnterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnEnterEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerCheckerOnEnterEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action TriggerCheckerOnExitEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnExitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnExitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerCheckerOnExitEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action TriggerCheckerOnStayEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnStayEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::dyn_TriggerCheckerOnStayEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerCheckerOnStayEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TriggerChecker.OnTriggerEnter
void GlobalNamespace::TriggerChecker::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TriggerChecker.OnTriggerExit
void GlobalNamespace::TriggerChecker::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TriggerChecker.OnTriggerStay
void GlobalNamespace::TriggerChecker::OnTriggerStay(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerChecker::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TupleListExtensions
#include "GlobalNamespace/TupleListExtensions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: System.Tuple`3
#include "System/Tuple_3.hpp"
// Including type: System.Tuple`4
#include "System/Tuple_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TweenPosition
#include "GlobalNamespace/TweenPosition.hpp"
// Including type: TweenPosition/<AnimateToNewPosCoroutine>d__11
#include "GlobalNamespace/TweenPosition_-AnimateToNewPosCoroutine-d__11.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean _unscaledTime
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TweenPosition::dyn__unscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__unscaledTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unscaledTime"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _localPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TweenPosition::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TweenPosition::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve _animationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::TweenPosition::dyn__animationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__animationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TweenPosition::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _targetPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TweenPosition::dyn__targetPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::dyn__targetPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TweenPosition.get_TargetPos
::UnityEngine::Vector3 GlobalNamespace::TweenPosition::get_TargetPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::get_TargetPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition.set_TargetPos
void GlobalNamespace::TweenPosition::set_TargetPos(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::set_TargetPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TweenPosition.Awake
void GlobalNamespace::TweenPosition::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition.AnimateToNewPos
void GlobalNamespace::TweenPosition::AnimateToNewPos(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::AnimateToNewPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToNewPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: TweenPosition.AnimateToNewPosCoroutine
::System::Collections::IEnumerator* GlobalNamespace::TweenPosition::AnimateToNewPosCoroutine(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::AnimateToNewPosCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToNewPosCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TweenPosition/<AnimateToNewPosCoroutine>d__11
#include "GlobalNamespace/TweenPosition_-AnimateToNewPosCoroutine-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TweenPosition <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TweenPosition*& GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TweenPosition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <startPos>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$startPos$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$startPos$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startPos>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__3
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$elapsedTime$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::dyn_$elapsedTime$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.IDisposable.Dispose
void GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.MoveNext
bool GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.IEnumerator.Reset
void GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VFXAnimationEvents
#include "GlobalNamespace/VFXAnimationEvents.hpp"
// Including type: VFXAnimationEvents/VFXAnimationEvent
#include "GlobalNamespace/VFXAnimationEvents_VFXAnimationEvent.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::VFXAnimationEvents::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VFXAnimationEvents/VFXAnimationEvent[] _animationEvents
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent*>& GlobalNamespace::VFXAnimationEvents::dyn__animationEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::dyn__animationEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animationEvents"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action animationDidPauseEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::VFXAnimationEvents::dyn_animationDidPauseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::dyn_animationDidPauseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationDidPauseEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action spawnCharacterEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::VFXAnimationEvents::dyn_spawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::dyn_spawnCharacterEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnCharacterEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action despawnCharacterEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::VFXAnimationEvents::dyn_despawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::dyn_despawnCharacterEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "despawnCharacterEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VFXAnimationEvents.add_animationDidPauseEvent
void GlobalNamespace::VFXAnimationEvents::add_animationDidPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::add_animationDidPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_animationDidPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_animationDidPauseEvent
void GlobalNamespace::VFXAnimationEvents::remove_animationDidPauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::remove_animationDidPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_animationDidPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.add_spawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::add_spawnCharacterEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::add_spawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_spawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::remove_spawnCharacterEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::remove_spawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.add_despawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::add_despawnCharacterEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::add_despawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_despawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_despawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::remove_despawnCharacterEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::remove_despawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_despawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.PlayEvent
void GlobalNamespace::VFXAnimationEvents::PlayEvent(::StringW eventName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::PlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventName);
}
// Autogenerated method: VFXAnimationEvents.PauseAnimation
void GlobalNamespace::VFXAnimationEvents::PauseAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::PauseAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.SpawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::SpawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::SpawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.DeSpawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::DeSpawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::DeSpawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeSpawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.ResumeAnimation
void GlobalNamespace::VFXAnimationEvents::ResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::ResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VFXAnimationEvents/VFXAnimationEvent
#include "GlobalNamespace/VFXAnimationEvents_VFXAnimationEvent.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _name
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VFXAnimationEvents/VFXAnimationEvent.get_name
::StringW GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents/VFXAnimationEvent.get_particleSystems
::ArrayW<::UnityEngine::ParticleSystem*> GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_particleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_particleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::ParticleSystem*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VFXController
#include "GlobalNamespace/VFXController.hpp"
// Including type: VFXController/<MainCoroutine>d__9
#include "GlobalNamespace/VFXController_-MainCoroutine-d__9.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::VFXController::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::VFXController::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _deactivateAfterAnimationDuration
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VFXController::dyn__deactivateAfterAnimationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::dyn__deactivateAfterAnimationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deactivateAfterAnimationDuration"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VFXController.get_animation
::UnityEngine::Animation* GlobalNamespace::VFXController::get_animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::get_animation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Animation*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.get_particleSystems
::ArrayW<::UnityEngine::ParticleSystem*> GlobalNamespace::VFXController::get_particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::get_particleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_particleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::ParticleSystem*>, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.Awake
void GlobalNamespace::VFXController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.Play
void GlobalNamespace::VFXController::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.MainCoroutine
::System::Collections::IEnumerator* GlobalNamespace::VFXController::MainCoroutine(bool deactivateAfterDuration, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::MainCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MainCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deactivateAfterDuration), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, deactivateAfterDuration, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VFXController/<MainCoroutine>d__9
#include "GlobalNamespace/VFXController_-MainCoroutine-d__9.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VFXController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VFXController*& GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VFXController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean deactivateAfterDuration
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_deactivateAfterDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_deactivateAfterDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivateAfterDuration"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::VFXController::$MainCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.MoveNext
bool GlobalNamespace::VFXController::$MainCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector2Extensions
#include "GlobalNamespace/Vector2Extensions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Vector2Extensions.SignedAngleToLine
float GlobalNamespace::Vector2Extensions::SignedAngleToLine(::UnityEngine::Vector2 vec, ::UnityEngine::Vector2 line) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Vector2Extensions::SignedAngleToLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector2Extensions", "SignedAngleToLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vec), ::il2cpp_utils::ExtractType(line)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vec, line);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VisibilityChecker
#include "GlobalNamespace/VisibilityChecker.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action OnBecameVisibleEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::VisibilityChecker::dyn_OnBecameVisibleEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::dyn_OnBecameVisibleEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnBecameVisibleEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action OnBecameInvisibleEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::VisibilityChecker::dyn_OnBecameInvisibleEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::dyn_OnBecameInvisibleEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnBecameInvisibleEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VisibilityChecker.add_OnBecameVisibleEvent
void GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnBecameVisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.remove_OnBecameVisibleEvent
void GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnBecameVisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.add_OnBecameInvisibleEvent
void GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnBecameInvisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.remove_OnBecameInvisibleEvent
void GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnBecameInvisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.OnBecameVisible
void GlobalNamespace::VisibilityChecker::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisibilityChecker.OnBecameInvisible
void GlobalNamespace::VisibilityChecker::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VisibilityChecker::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditScriptableAttribute
#include "GlobalNamespace/EditScriptableAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ReorderableAttribute
#include "GlobalNamespace/ReorderableAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <ElementHeader>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ReorderableAttribute::dyn_$ElementHeader$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::dyn_$ElementHeader$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ElementHeader>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <HeaderZeroIndex>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ReorderableAttribute::dyn_$HeaderZeroIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::dyn_$HeaderZeroIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HeaderZeroIndex>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ElementSingleLine>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ReorderableAttribute::dyn_$ElementSingleLine$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::dyn_$ElementSingleLine$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ElementSingleLine>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ReorderableAttribute.get_ElementHeader
::StringW GlobalNamespace::ReorderableAttribute::get_ElementHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::get_ElementHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_ElementHeader
void GlobalNamespace::ReorderableAttribute::set_ElementHeader(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::set_ElementHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ElementHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ReorderableAttribute.get_HeaderZeroIndex
bool GlobalNamespace::ReorderableAttribute::get_HeaderZeroIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::get_HeaderZeroIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HeaderZeroIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_HeaderZeroIndex
void GlobalNamespace::ReorderableAttribute::set_HeaderZeroIndex(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::set_HeaderZeroIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HeaderZeroIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ReorderableAttribute.get_ElementSingleLine
bool GlobalNamespace::ReorderableAttribute::get_ElementSingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::get_ElementSingleLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementSingleLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_ElementSingleLine
void GlobalNamespace::ReorderableAttribute::set_ElementSingleLine(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReorderableAttribute::set_ElementSingleLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ElementSingleLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
// Including type: GameScenesManager/ScenePresentType
#include "GlobalNamespace/GameScenesManager_ScenePresentType.hpp"
// Including type: GameScenesManager/SceneDismissType
#include "GlobalNamespace/GameScenesManager_SceneDismissType.hpp"
// Including type: GameScenesManager/<>c__DisplayClass30_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass30_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass31_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass31_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass32_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass32_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass33_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass33_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass34_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass34_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass35_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass35_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass38_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass38_0.hpp"
// Including type: GameScenesManager/<ScenesTransitionCoroutine>d__38
#include "GlobalNamespace/GameScenesManager_-ScenesTransitionCoroutine-d__38.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: Zenject.ZenjectSceneLoader
#include "Zenject/ZenjectSceneLoader.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kStandardTransitionLength
float GlobalNamespace::GameScenesManager::_get_kStandardTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_get_kStandardTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kStandardTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kStandardTransitionLength
void GlobalNamespace::GameScenesManager::_set_kStandardTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_set_kStandardTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kStandardTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kShortTransitionLength
float GlobalNamespace::GameScenesManager::_get_kShortTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_get_kShortTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kShortTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kShortTransitionLength
void GlobalNamespace::GameScenesManager::_set_kShortTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_set_kShortTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kShortTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kLongTransitionLength
float GlobalNamespace::GameScenesManager::_get_kLongTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_get_kLongTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kLongTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kLongTransitionLength
void GlobalNamespace::GameScenesManager::_set_kLongTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_set_kLongTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kLongTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kRootContainerGOName
::StringW GlobalNamespace::GameScenesManager::_get_kRootContainerGOName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_get_kRootContainerGOName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "GameScenesManager", "kRootContainerGOName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kRootContainerGOName
void GlobalNamespace::GameScenesManager::_set_kRootContainerGOName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::_set_kRootContainerGOName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kRootContainerGOName", value));
}
// Autogenerated instance field getter
// Get instance field: private SceneInfo _emptyTransitionSceneInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneInfo*& GlobalNamespace::GameScenesManager::dyn__emptyTransitionSceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn__emptyTransitionSceneInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emptyTransitionSceneInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SceneInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ZenjectSceneLoader _zenjectSceneLoader
[[deprecated("Use field access instead!")]] ::Zenject::ZenjectSceneLoader*& GlobalNamespace::GameScenesManager::dyn__zenjectSceneLoader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn__zenjectSceneLoader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zenjectSceneLoader"))->offset;
  return *reinterpret_cast<::Zenject::ZenjectSceneLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> transitionDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::GameScenesManager::dyn_transitionDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn_transitionDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transitionDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action beforeDismissingScenesEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::GameScenesManager::dyn_beforeDismissingScenesEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn_beforeDismissingScenesEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beforeDismissingScenesEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> transitionDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::dyn_transitionDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn_transitionDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transitionDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> installEarlyBindingsEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::dyn_installEarlyBindingsEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn_installEarlyBindingsEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "installEarlyBindingsEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _inTransition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GameScenesManager::dyn__inTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn__inTransition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inTransition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<GameScenesManager/ScenesStackData> _scenesStack
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GameScenesManager::ScenesStackData*>*& GlobalNamespace::GameScenesManager::dyn__scenesStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn__scenesStack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scenesStack"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::GameScenesManager::ScenesStackData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.String> _neverUnloadScenes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::GameScenesManager::dyn__neverUnloadScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::dyn__neverUnloadScenes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_neverUnloadScenes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager.get_currentScenesContainer
::Zenject::DiContainer* GlobalNamespace::GameScenesManager::get_currentScenesContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::get_currentScenesContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentScenesContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.get_isInTransition
bool GlobalNamespace::GameScenesManager::get_isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::get_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.get_waitUntilSceneTransitionFinish
::UnityEngine::WaitUntil* GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilSceneTransitionFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.add_transitionDidStartEvent
void GlobalNamespace::GameScenesManager::add_transitionDidStartEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::add_transitionDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_transitionDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_transitionDidStartEvent
void GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_transitionDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_beforeDismissingScenesEvent
void GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beforeDismissingScenesEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_beforeDismissingScenesEvent
void GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beforeDismissingScenesEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_transitionDidFinishEvent
void GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_transitionDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_transitionDidFinishEvent
void GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_transitionDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_installEarlyBindingsEvent
void GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_installEarlyBindingsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_installEarlyBindingsEvent
void GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_installEarlyBindingsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.MarkSceneAsPersistent
void GlobalNamespace::GameScenesManager::MarkSceneAsPersistent(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::MarkSceneAsPersistent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkSceneAsPersistent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.GetCurrentlyLoadedSceneNames
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentlyLoadedSceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.PushScenes
void GlobalNamespace::GameScenesManager::PushScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::PushScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.PopScenes
void GlobalNamespace::GameScenesManager::PopScenes(float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::PopScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ReplaceScenes
void GlobalNamespace::GameScenesManager::ReplaceScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, ::ArrayW<::System::Collections::IEnumerator*> beforeNewScenesActivateRoutines, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ReplaceScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(beforeNewScenesActivateRoutines), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenesTransitionSetupData, beforeNewScenesActivateRoutines, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ClearAndOpenScenes
void GlobalNamespace::GameScenesManager::ClearAndOpenScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback, bool unloadAllScenes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ClearAndOpenScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAndOpenScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback), ::il2cpp_utils::ExtractType(unloadAllScenes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback, unloadAllScenes);
}
// Autogenerated method: GameScenesManager.AppendScenes
void GlobalNamespace::GameScenesManager::AppendScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::AppendScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.RemoveScenes
void GlobalNamespace::GameScenesManager::RemoveScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupDataSo, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::RemoveScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupDataSo), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenesTransitionSetupDataSo, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ScenesTransitionCoroutine
::System::Collections::IEnumerator* GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine(::GlobalNamespace::ScenesTransitionSetupDataSO* newScenesTransitionSetupData, ::System::Collections::Generic::List_1<::StringW>* scenesToPresent, ::GlobalNamespace::GameScenesManager::ScenePresentType presentType, ::System::Collections::Generic::List_1<::StringW>* scenesToDismiss, ::GlobalNamespace::GameScenesManager::SceneDismissType dismissType, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* extraBindingsCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScenesTransitionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newScenesTransitionSetupData), ::il2cpp_utils::ExtractType(scenesToPresent), ::il2cpp_utils::ExtractType(presentType), ::il2cpp_utils::ExtractType(scenesToDismiss), ::il2cpp_utils::ExtractType(dismissType), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(extraBindingsCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, newScenesTransitionSetupData, scenesToPresent, presentType, scenesToDismiss, dismissType, minDuration, afterMinDurationCallback, extraBindingsCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ActivatePresentedSceneRootObjects
void GlobalNamespace::GameScenesManager::ActivatePresentedSceneRootObjects(::System::Collections::Generic::List_1<::StringW>* scenesToPresent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ActivatePresentedSceneRootObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameScenesManager", "ActivatePresentedSceneRootObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesToPresent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scenesToPresent);
}
// Autogenerated method: GameScenesManager.IsAnySceneInStack
bool GlobalNamespace::GameScenesManager::IsAnySceneInStack(::System::Collections::Generic::List_1<::StringW>* sceneNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::IsAnySceneInStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAnySceneInStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneNames)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sceneNames);
}
// Autogenerated method: GameScenesManager.AreAllScenesInStack
bool GlobalNamespace::GameScenesManager::AreAllScenesInStack(::System::Collections::Generic::List_1<::StringW>* sceneNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::AreAllScenesInStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreAllScenesInStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneNames)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sceneNames);
}
// Autogenerated method: GameScenesManager.IsSceneInStack
bool GlobalNamespace::GameScenesManager::IsSceneInStack(::StringW searchSceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::IsSceneInStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSceneInStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchSceneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, searchSceneName);
}
// Autogenerated method: GameScenesManager.SceneNamesFromSceneInfoArray
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray(::ArrayW<::GlobalNamespace::SceneInfo*> sceneInfos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SceneNamesFromSceneInfoArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneInfos)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method, sceneInfos);
}
// Autogenerated method: GameScenesManager.SetActiveRootObjectsInScenes
void GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes(::System::Collections::Generic::List_1<::StringW>* sceneNames, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveRootObjectsInScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneNames), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneNames, value);
}
// Autogenerated method: GameScenesManager.ReparentRootGameObjectsToDisabledGameObject
void GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReparentRootGameObjectsToDisabledGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.MoveGameObjectsFromContainerToSceneRoot
void GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGameObjectsFromContainerToSceneRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.Log
void GlobalNamespace::GameScenesManager::Log(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameScenesManager", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated method: GameScenesManager.<get_waitUntilSceneTransitionFinish>b__22_0
bool GlobalNamespace::GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::<get_waitUntilSceneTransitionFinish>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_waitUntilSceneTransitionFinish>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> <sceneNames>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::ScenesStackData::dyn_$sceneNames$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::dyn_$sceneNames$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneNames>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DiContainer <container>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& GlobalNamespace::GameScenesManager::ScenesStackData::dyn_$container$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::dyn_$container$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<container>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/ScenesStackData.get_sceneNames
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::GameScenesManager::ScenesStackData::get_sceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::get_sceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/ScenesStackData.set_sceneNames
void GlobalNamespace::GameScenesManager::ScenesStackData::set_sceneNames(::System::Collections::Generic::List_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::set_sceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager/ScenesStackData.get_container
::Zenject::DiContainer* GlobalNamespace::GameScenesManager::ScenesStackData::get_container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::get_container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/ScenesStackData.set_container
void GlobalNamespace::GameScenesManager::ScenesStackData::set_container(::Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::set_container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager/ScenesStackData.SetDiContainer
void GlobalNamespace::GameScenesManager::ScenesStackData::SetDiContainer(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenesStackData::SetDiContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDiContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/ScenePresentType
#include "GlobalNamespace/GameScenesManager_ScenePresentType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameScenesManager/ScenePresentType DoNotLoad
::GlobalNamespace::GameScenesManager::ScenePresentType GlobalNamespace::GameScenesManager::ScenePresentType::_get_DoNotLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_get_DoNotLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::ScenePresentType>("", "GameScenesManager/ScenePresentType", "DoNotLoad"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/ScenePresentType DoNotLoad
void GlobalNamespace::GameScenesManager::ScenePresentType::_set_DoNotLoad(::GlobalNamespace::GameScenesManager::ScenePresentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_set_DoNotLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/ScenePresentType", "DoNotLoad", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/ScenePresentType Load
::GlobalNamespace::GameScenesManager::ScenePresentType GlobalNamespace::GameScenesManager::ScenePresentType::_get_Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_get_Load");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::ScenePresentType>("", "GameScenesManager/ScenePresentType", "Load"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/ScenePresentType Load
void GlobalNamespace::GameScenesManager::ScenePresentType::_set_Load(::GlobalNamespace::GameScenesManager::ScenePresentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_set_Load");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/ScenePresentType", "Load", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/ScenePresentType Activate
::GlobalNamespace::GameScenesManager::ScenePresentType GlobalNamespace::GameScenesManager::ScenePresentType::_get_Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_get_Activate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::ScenePresentType>("", "GameScenesManager/ScenePresentType", "Activate"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/ScenePresentType Activate
void GlobalNamespace::GameScenesManager::ScenePresentType::_set_Activate(::GlobalNamespace::GameScenesManager::ScenePresentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::_set_Activate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/ScenePresentType", "Activate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameScenesManager::ScenePresentType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::ScenePresentType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/SceneDismissType
#include "GlobalNamespace/GameScenesManager_SceneDismissType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameScenesManager/SceneDismissType DoNotUnload
::GlobalNamespace::GameScenesManager::SceneDismissType GlobalNamespace::GameScenesManager::SceneDismissType::_get_DoNotUnload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_get_DoNotUnload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::SceneDismissType>("", "GameScenesManager/SceneDismissType", "DoNotUnload"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/SceneDismissType DoNotUnload
void GlobalNamespace::GameScenesManager::SceneDismissType::_set_DoNotUnload(::GlobalNamespace::GameScenesManager::SceneDismissType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_set_DoNotUnload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/SceneDismissType", "DoNotUnload", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/SceneDismissType Unload
::GlobalNamespace::GameScenesManager::SceneDismissType GlobalNamespace::GameScenesManager::SceneDismissType::_get_Unload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_get_Unload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::SceneDismissType>("", "GameScenesManager/SceneDismissType", "Unload"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/SceneDismissType Unload
void GlobalNamespace::GameScenesManager::SceneDismissType::_set_Unload(::GlobalNamespace::GameScenesManager::SceneDismissType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_set_Unload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/SceneDismissType", "Unload", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/SceneDismissType Deactivate
::GlobalNamespace::GameScenesManager::SceneDismissType GlobalNamespace::GameScenesManager::SceneDismissType::_get_Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_get_Deactivate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GameScenesManager::SceneDismissType>("", "GameScenesManager/SceneDismissType", "Deactivate"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/SceneDismissType Deactivate
void GlobalNamespace::GameScenesManager::SceneDismissType::_set_Deactivate(::GlobalNamespace::GameScenesManager::SceneDismissType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::_set_Deactivate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/SceneDismissType", "Deactivate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameScenesManager::SceneDismissType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::SceneDismissType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass30_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass30_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/ScenesStackData scenesStackData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::ScenesStackData*& GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_scenesStackData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_scenesStackData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesStackData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::ScenesStackData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO scenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_scenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_scenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass30_0.<PushScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::<PushScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass30_0.<PushScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__1(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::<PushScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass31_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass31_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass31_0.<PopScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::$PopScenes$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::<PopScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass32_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass32_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO scenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_scenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_scenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> newSceneNames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_newSceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_newSceneNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newSceneNames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> emptyTransitionSceneNameList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_emptyTransitionSceneNameList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_emptyTransitionSceneNameList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emptyTransitionSceneNameList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/ScenesStackData scenesStackData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::ScenesStackData*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_scenesStackData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_scenesStackData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesStackData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::ScenesStackData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> <>9__1
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$9__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$9__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__1"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> <>9__2
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$9__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::dyn_$$9__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__2"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__0(::Zenject::DiContainer* emptySceneContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(emptySceneContainer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, emptySceneContainer);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__1(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__2
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__2(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass33_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass33_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO scenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_scenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_scenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> newSceneNames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_newSceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_newSceneNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newSceneNames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> emptyTransitionSceneNameList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_emptyTransitionSceneNameList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_emptyTransitionSceneNameList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emptyTransitionSceneNameList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/ScenesStackData scenesStackData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::ScenesStackData*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_scenesStackData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_scenesStackData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesStackData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::ScenesStackData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> <>9__1
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$9__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$9__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__1"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> <>9__2
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$9__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::dyn_$$9__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__2"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__0(::Zenject::DiContainer* emptySceneContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(emptySceneContainer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, emptySceneContainer);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__1(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__2
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__2(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass34_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass34_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/ScenesStackData scenesStackData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::ScenesStackData*& GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_scenesStackData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_scenesStackData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesStackData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::ScenesStackData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO scenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_scenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_scenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass34_0.<AppendScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::$AppendScenes$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::<AppendScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppendScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass34_0.<AppendScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::$AppendScenes$b__1(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0::<AppendScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppendScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass35_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass35_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> sceneNamesToRemove
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_sceneNamesToRemove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::dyn_sceneNamesToRemove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneNamesToRemove"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass35_0.<RemoveScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::$RemoveScenes$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::<RemoveScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RemoveScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass35_0.<RemoveScenes>b__1
bool GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::$RemoveScenes$b__1(::StringW scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0::<RemoveScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RemoveScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, scene);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass38_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass38_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO newScenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::dyn_newScenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::dyn_newScenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newScenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass38_0.<ScenesTransitionCoroutine>b__0
bool GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::$ScenesTransitionCoroutine$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::<ScenesTransitionCoroutine>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ScenesTransitionCoroutine>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass38_0.<ScenesTransitionCoroutine>b__1
bool GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::$ScenesTransitionCoroutine$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0::<ScenesTransitionCoroutine>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ScenesTransitionCoroutine>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager/<ScenesTransitionCoroutine>d__38
#include "GlobalNamespace/GameScenesManager_-ScenesTransitionCoroutine-d__38.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: GameScenesManager/<>c__DisplayClass38_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass38_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO newScenesTransitionSetupData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_newScenesTransitionSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_newScenesTransitionSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newScenesTransitionSetupData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> scenesToDismiss
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_scenesToDismiss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_scenesToDismiss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesToDismiss"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> scenesToPresent
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_scenesToPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_scenesToPresent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesToPresent"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_minDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_minDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/ScenePresentType presentType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::ScenePresentType& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_presentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_presentType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "presentType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::ScenePresentType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action afterMinDurationCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_afterMinDurationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_afterMinDurationCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "afterMinDurationCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameScenesManager/<>c__DisplayClass38_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$8__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> extraBindingsCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_extraBindingsCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_extraBindingsCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraBindingsCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GameScenesManager/SceneDismissType dismissType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager::SceneDismissType& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_dismissType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_dismissType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dismissType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager::SceneDismissType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<Zenject.DiContainer> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem <eventSystem>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$eventSystem$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$eventSystem$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<eventSystem>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <sceneName>5__3
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$sceneName$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$sceneName$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneName>5__3"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AsyncOperation <loadSceneOperation>5__4
[[deprecated("Use field access instead!")]] ::UnityEngine::AsyncOperation*& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$loadSceneOperation$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$loadSceneOperation$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<loadSceneOperation>5__4"))->offset;
  return *reinterpret_cast<::UnityEngine::AsyncOperation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <sceneNum>5__5
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$sceneNum$5__5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$sceneNum$5__5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneNum>5__5"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<System.String> <>7__wrap5
[[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::List_1<::StringW>::Enumerator& GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$7__wrap5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::dyn_$$7__wrap5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap5"))->offset;
  return *reinterpret_cast<typename ::System::Collections::Generic::List_1<::StringW>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.System.IDisposable.Dispose
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.MoveNext
bool GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.<>m__Finally1
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.<>m__Finally2
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__38.System.Collections.IEnumerator.Reset
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MarkSceneAsPersistent
#include "GlobalNamespace/MarkSceneAsPersistent.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameScenesManager _gameScenesManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& GlobalNamespace::MarkSceneAsPersistent::dyn__gameScenesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkSceneAsPersistent::dyn__gameScenesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameScenesManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MarkSceneAsPersistent.Awake
void GlobalNamespace::MarkSceneAsPersistent::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkSceneAsPersistent::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _sceneName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SceneInfo::dyn__sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::dyn__sceneName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disabledRootObjects
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SceneInfo::dyn__disabledRootObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::dyn__disabledRootObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledRootObjects"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SceneInfo.get_sceneName
::StringW GlobalNamespace::SceneInfo::get_sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::get_sceneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SceneInfo.get_disabledRootObjects
bool GlobalNamespace::SceneInfo::get_disabledRootObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneInfo::get_disabledRootObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledRootObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FixedScenesScenesTransitionSetupDataSO
#include "GlobalNamespace/FixedScenesScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo[] _sceneInfos
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneInfo*>& GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::dyn__sceneInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::dyn__sceneInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneInfos"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FixedScenesScenesTransitionSetupDataSO.Init
void GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10
#include "GlobalNamespace/ScenesTransitionSetupDataSO_-BeforeScenesWillBeActivated-d__10.hpp"
// Including type: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d
#include "GlobalNamespace/ScenesTransitionSetupDataSO_--BeforeScenesWillBeActivated-b__10_0-d.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo[] <scenes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneInfo*>& GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$scenes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$scenes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<scenes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SceneSetupData[] _sceneSetupDataArray
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SceneSetupData*>& GlobalNamespace::ScenesTransitionSetupDataSO::dyn__sceneSetupDataArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn__sceneSetupDataArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupDataArray"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SceneSetupData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <beforeScenesWillBeActivatedTaskIsComplete>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$beforeScenesWillBeActivatedTaskIsComplete$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::dyn_$beforeScenesWillBeActivatedTaskIsComplete$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beforeScenesWillBeActivatedTaskIsComplete>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO.get_scenes
::ArrayW<::GlobalNamespace::SceneInfo*> GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::SceneInfo*>, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_scenes
void GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes(::ArrayW<::GlobalNamespace::SceneInfo*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.get_beforeScenesWillBeActivatedTaskIsComplete
bool GlobalNamespace::ScenesTransitionSetupDataSO::get_beforeScenesWillBeActivatedTaskIsComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::get_beforeScenesWillBeActivatedTaskIsComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beforeScenesWillBeActivatedTaskIsComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_beforeScenesWillBeActivatedTaskIsComplete
void GlobalNamespace::ScenesTransitionSetupDataSO::set_beforeScenesWillBeActivatedTaskIsComplete(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::set_beforeScenesWillBeActivatedTaskIsComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beforeScenesWillBeActivatedTaskIsComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.Init
void GlobalNamespace::ScenesTransitionSetupDataSO::Init(::ArrayW<::GlobalNamespace::SceneInfo*> scenes, ::ArrayW<::GlobalNamespace::SceneSetupData*> sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenes), ::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scenes, sceneSetupData);
}
// Autogenerated method: ScenesTransitionSetupDataSO.BeforeScenesWillBeActivated
void GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivated(bool runAsync) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeforeScenesWillBeActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(runAsync)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, runAsync);
}
// Autogenerated method: ScenesTransitionSetupDataSO.BeforeScenesWillBeActivatedAsync
::System::Threading::Tasks::Task* GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivatedAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::BeforeScenesWillBeActivatedAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeforeScenesWillBeActivatedAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.InstallBindings
void GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: ScenesTransitionSetupDataSO.<BeforeScenesWillBeActivated>b__10_0
::System::Threading::Tasks::Task* GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$b__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::<BeforeScenesWillBeActivated>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeforeScenesWillBeActivated>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10
#include "GlobalNamespace/ScenesTransitionSetupDataSO_-BeforeScenesWillBeActivated-d__10.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncVoidMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean runAsync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_runAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_runAsync");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "runAsync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10.MoveNext
void GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<BeforeScenesWillBeActivated>d__10.SetStateMachine
void GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$BeforeScenesWillBeActivated$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d
#include "GlobalNamespace/ScenesTransitionSetupDataSO_--BeforeScenesWillBeActivated-b__10_0-d.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ScenesTransitionSetupDataSO <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScenesTransitionSetupDataSO*& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d.MoveNext
void GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO/<<BeforeScenesWillBeActivated>b__10_0>d.SetStateMachine
void GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenesTransitionSetupDataSO::$$BeforeScenesWillBeActivated$b__10_0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/SingleFixedSceneScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SceneInfo _sceneInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneInfo*& GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::dyn__sceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::dyn__sceneInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SceneInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.get_sceneInfo
::GlobalNamespace::SceneInfo* GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SceneInfo*, false>(this, ___internal__method);
}
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init(::GlobalNamespace::SceneSetupData* sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneSetupData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreateSOAttribute
#include "GlobalNamespace/CreateSOAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSignal
#include "GlobalNamespace/BoolSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSignal
#include "GlobalNamespace/ColorSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DIContainerSignal
#include "GlobalNamespace/DIContainerSignal.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignalListener
#include "GlobalNamespace/FloatSignalListener.hpp"
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FloatSignal _floatSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSignal*& GlobalNamespace::FloatSignalListener::dyn__floatSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::dyn__floatSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floatSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSignal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FloatUnityEvent _unityEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatUnityEvent*& GlobalNamespace::FloatSignalListener::dyn__unityEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::dyn__unityEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unityEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatUnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FloatSignalListener.OnEnable
void GlobalNamespace::FloatSignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.OnDisable
void GlobalNamespace::FloatSignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.HandleEvent
void GlobalNamespace::FloatSignalListener::HandleEvent(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatSignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, f);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action _event
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::Signal::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Signal.add__event
void GlobalNamespace::Signal::add__event(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::add__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.remove__event
void GlobalNamespace::Signal::remove__event(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::remove__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.Raise
void GlobalNamespace::Signal::Raise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Raise");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Signal.Subscribe
void GlobalNamespace::Signal::Subscribe(::System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Subscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, foo);
}
// Autogenerated method: Signal.Unsubscribe
void GlobalNamespace::Signal::Unsubscribe(::System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Signal::Unsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, foo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalListener
#include "GlobalNamespace/SignalListener.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _signal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalListener::dyn__signal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::dyn__signal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityEvent _unityEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::SignalListener::dyn__unityEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::dyn__unityEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unityEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalListener.OnEnable
void GlobalNamespace::SignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.OnDisable
void GlobalNamespace::SignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.HandleEvent
void GlobalNamespace::SignalListener::HandleEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnPointerClick
#include "GlobalNamespace/SignalOnPointerClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _inputFieldClickedSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalOnPointerClick::dyn__inputFieldClickedSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnPointerClick::dyn__inputFieldClickedSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputFieldClickedSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalOnPointerClick.OnPointerClick
void GlobalNamespace::SignalOnPointerClick::OnPointerClick(::UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnPointerClick::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnUIButtonClick
#include "GlobalNamespace/SignalOnUIButtonClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _buttonClickedSignal
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Signal*& GlobalNamespace::SignalOnUIButtonClick::dyn__buttonClickedSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::dyn__buttonClickedSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buttonClickedSignal"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _button
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& GlobalNamespace::SignalOnUIButtonClick::dyn__button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::dyn__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SignalOnUIButtonClick.OnReset
void GlobalNamespace::SignalOnUIButtonClick::OnReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::OnReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.Start
void GlobalNamespace::SignalOnUIButtonClick::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.OnDestroy
void GlobalNamespace::SignalOnUIButtonClick::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SignalOnUIButtonClick::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalSenderAttribute
#include "GlobalNamespace/SignalSenderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringSignal
#include "GlobalNamespace/StringSignal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSSortingLayer
#include "GlobalNamespace/PSSortingLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SortingLayer
#include "GlobalNamespace/SortingLayer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SortingLayer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SortingLayer.get_renderer
::UnityEngine::Renderer* GlobalNamespace::SortingLayer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: SortingLayer.Reset
void GlobalNamespace::SortingLayer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SortingLayer::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher
#include "GlobalNamespace/HMMainThreadDispatcher.hpp"
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
::System::Collections::Generic::Queue_1<::System::Action*>* GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Queue_1<::System::Action*>*>("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
void GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue(::System::Collections::Generic::Queue_1<::System::Action*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue", value));
}
// Autogenerated method: HMMainThreadDispatcher.Update
void GlobalNamespace::HMMainThreadDispatcher::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(::System::Collections::IEnumerator* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.ActionCoroutine
::System::Collections::IEnumerator* GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher..cctor
void GlobalNamespace::HMMainThreadDispatcher::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMMainThreadDispatcher", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public HMMainThreadDispatcher <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMMainThreadDispatcher*& GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMMainThreadDispatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.IEnumerator action
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMMainThreadDispatcher/<>c__DisplayClass2_0.<Enqueue>b__0
void GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::$Enqueue$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::<Enqueue>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Enqueue>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.IDisposable.Dispose
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.MoveNext
bool GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMTask
#include "GlobalNamespace/HMTask.hpp"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _thread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& GlobalNamespace::HMTask::dyn__thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _job
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMTask::dyn__job() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__job");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_job"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _finishCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::HMTask::dyn__finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finishCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _canceled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__canceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _started
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__started");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_started"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _finished
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMTask::dyn__finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::dyn__finished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finished"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMTask.Run
void GlobalNamespace::HMTask::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunCoroutine
::System::Collections::IEnumerator* GlobalNamespace::HMTask::RunCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::RunCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunJob
void GlobalNamespace::HMTask::RunJob() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::RunJob");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunJob", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.Cancel
void GlobalNamespace::HMTask::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunCoroutine>b__8_0
bool GlobalNamespace::HMTask::$RunCoroutine$b__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::<RunCoroutine>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunCoroutine>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunJob>b__9_0
void GlobalNamespace::HMTask::$RunJob$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::<RunJob>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunJob>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HMTask <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMTask*& GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMTask**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.MoveNext
bool GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpMarker
#include "GlobalNamespace/JumpMarker.hpp"
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JumpDestinationMarker _destination
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JumpDestinationMarker*& GlobalNamespace::JumpMarker::dyn__destination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::dyn__destination");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destination"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JumpDestinationMarker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.PropertyName <id>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::PropertyName& GlobalNamespace::JumpMarker::dyn_$id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::dyn_$id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<id>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JumpMarker.get_id
::UnityEngine::PropertyName GlobalNamespace::JumpMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated method: JumpMarker.get_jumpDestination
::GlobalNamespace::JumpDestinationMarker* GlobalNamespace::JumpMarker::get_jumpDestination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpMarker::get_jumpDestination");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDestination", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::JumpDestinationMarker*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: JumpReceiver
#include "GlobalNamespace/JumpReceiver.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <jumpToDestinationValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::JumpReceiver::dyn_$jumpToDestinationValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::dyn_$jumpToDestinationValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<jumpToDestinationValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JumpReceiver.get_jumpToDestinationValid
bool GlobalNamespace::JumpReceiver::get_jumpToDestinationValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::get_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JumpReceiver.set_jumpToDestinationValid
void GlobalNamespace::JumpReceiver::set_jumpToDestinationValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::set_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JumpReceiver.OnNotify
void GlobalNamespace::JumpReceiver::OnNotify(::UnityEngine::Playables::Playable origin, ::UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JumpReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimelinePauseMarker
#include "GlobalNamespace/TimelinePauseMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.PropertyName <id>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::PropertyName& GlobalNamespace::TimelinePauseMarker::dyn_$id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseMarker::dyn_$id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<id>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimelinePauseMarker.get_id
::UnityEngine::PropertyName GlobalNamespace::TimelinePauseMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimelinePauseReceiver
#include "GlobalNamespace/TimelinePauseReceiver.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action timelinePauseEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TimelinePauseReceiver::dyn_timelinePauseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::dyn_timelinePauseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timelinePauseEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimelinePauseReceiver.add_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.remove_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.OnNotify
void GlobalNamespace::TimelinePauseReceiver::OnNotify(::UnityEngine::Playables::Playable origin, ::UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimelinePauseReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DevicelessVRHelper
#include "GlobalNamespace/DevicelessVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::DevicelessVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::DevicelessVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevicelessVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevicelessVRHelper.get_hasInputFocus
bool GlobalNamespace::DevicelessVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_hasVrFocus
bool GlobalNamespace::DevicelessVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_isAlwaysWireless
bool GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.Update
void GlobalNamespace::DevicelessVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.TriggerHapticPulse
void GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: DevicelessVRHelper.StopHaptics
void GlobalNamespace::DevicelessVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: DevicelessVRHelper.AdjustControllerTransform
void GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: DevicelessVRHelper.GetNodePose
bool GlobalNamespace::DevicelessVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevicelessVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuousRumbleFrameDuration
float GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuousRumbleFrameDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuousRumbleFrameDuration
void GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuousRumbleFrameDuration", value));
}
// Autogenerated instance field getter
// Get instance field: private BoolSO _controllersRumbleEnabled
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& GlobalNamespace::HapticFeedbackController::dyn__controllersRumbleEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__controllersRumbleEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controllersRumbleEnabled"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoolSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _continuousRumblePreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::HapticFeedbackController::dyn__continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__continuousRumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continuousRumblePreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::HapticFeedbackController::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.XRNode,System.Collections.Generic.Dictionary`2<System.Object,HapticFeedbackController/RumbleData>> _rumblesByNode
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::XRNode, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::GlobalNamespace::HapticFeedbackController::RumbleData*>*>*& GlobalNamespace::HapticFeedbackController::dyn__rumblesByNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::dyn__rumblesByNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblesByNode"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::XRNode, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::GlobalNamespace::HapticFeedbackController::RumbleData*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HapticFeedbackController.get_continuousRumblePreset
::Libraries::HM::HMLib::VR::HapticPresetSO* GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_continuousRumblePreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Libraries::HM::HMLib::VR::HapticPresetSO*, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.Awake
void GlobalNamespace::HapticFeedbackController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.PlayHapticFeedback
void GlobalNamespace::HapticFeedbackController::PlayHapticFeedback(::UnityEngine::XR::XRNode node, ::Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::PlayHapticFeedback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayHapticFeedback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, hapticPreset);
}
// Autogenerated method: HapticFeedbackController.LateUpdate
void GlobalNamespace::HapticFeedbackController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.UpdateRumbles
void GlobalNamespace::HapticFeedbackController::UpdateRumbles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::UpdateRumbles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRumbles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.GetRumble
::GlobalNamespace::HapticFeedbackController::RumbleData* GlobalNamespace::HapticFeedbackController::GetRumble(::UnityEngine::XR::XRNode node, ::Il2CppObject* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::GetRumble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRumble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(preset)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HapticFeedbackController::RumbleData*, false>(this, ___internal__method, node, preset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean active
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_active");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean continuous
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_continuous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_continuous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "continuous"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single strength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_strength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single endTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_endTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single frequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HapticFeedbackController::RumbleData::dyn_frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticFeedbackController::RumbleData::dyn_frequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK OpenVR
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_OpenVR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_OpenVR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "OpenVR"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK OpenVR
void GlobalNamespace::VRPlatformSDK::_set_OpenVR(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_OpenVR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "OpenVR", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Oculus
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Oculus
void GlobalNamespace::VRPlatformSDK::_set_Oculus(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Unknown
::GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Unknown
void GlobalNamespace::VRPlatformSDK::_set_Unknown(::GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Unknown", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRPlatformSDK::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformSDK::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Unknown
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Unknown
void GlobalNamespace::XRDeviceModel::_set_Unknown(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusRift
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusRift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusRift"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusRift
void GlobalNamespace::XRDeviceModel::_set_OculusRift(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusRift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusRift", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuest
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusQuest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuest"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuest
void GlobalNamespace::XRDeviceModel::_set_OculusQuest(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusQuest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuest", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuestLink
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuestLink() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_OculusQuestLink");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuestLink"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuestLink
void GlobalNamespace::XRDeviceModel::_set_OculusQuestLink(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_OculusQuestLink");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuestLink", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Other
::GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_get_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Other"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Other
void GlobalNamespace::XRDeviceModel::_set_Other(::GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::_set_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Other", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::XRDeviceModel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDeviceModel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IVRPlatformHelper.get_hasInputFocus
bool GlobalNamespace::IVRPlatformHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_hasVrFocus
bool GlobalNamespace::IVRPlatformHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_isAlwaysWireless
bool GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.TriggerHapticPulse
void GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IVRPlatformHelper.StopHaptics
void GlobalNamespace::IVRPlatformHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: IVRPlatformHelper.AdjustControllerTransform
void GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: IVRPlatformHelper.GetNodePose
bool GlobalNamespace::IVRPlatformHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IVRPlatformHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformUtils
#include "GlobalNamespace/VRPlatformUtils.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRPlatformUtils.GetXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::VRPlatformUtils::GetXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRPlatformUtils::GetXRDeviceModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRPlatformUtils", "GetXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusMRCManager
#include "GlobalNamespace/OculusMRCManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
// Including type: OVRManager/MrcCameraType
#include "GlobalNamespace/OVRManager_MrcCameraType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::OculusMRCManager::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityBackgroundCameraGameObject
[[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityBackgroundCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityBackgroundCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityBackgroundCameraGameObject"))->offset;
  return *reinterpret_cast<::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityForegroundCameraGameObject
[[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityForegroundCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityForegroundCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityForegroundCameraGameObject"))->offset;
  return *reinterpret_cast<::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <enableMixedReality>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$enableMixedReality$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$enableMixedReality$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enableMixedReality>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask <extraHiddenLayers>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OculusMRCManager::dyn_$extraHiddenLayers$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$extraHiddenLayers$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<extraHiddenLayers>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask <extraVisibleLayers>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OculusMRCManager::dyn_$extraVisibleLayers$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$extraVisibleLayers$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<extraVisibleLayers>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <dynamicCullingMask>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$dynamicCullingMask$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicCullingMask$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicCullingMask>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/CompositionMethod <compositionMethod>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& GlobalNamespace::OculusMRCManager::dyn_$compositionMethod$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$compositionMethod$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<compositionMethod>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CompositionMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <externalCompositionBackdropColorRift>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorRift$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorRift$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<externalCompositionBackdropColorRift>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <externalCompositionBackdropColorQuest>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorQuest$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$externalCompositionBackdropColorQuest$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<externalCompositionBackdropColorQuest>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/CameraDevice <capturingCameraDevice>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& GlobalNamespace::OculusMRCManager::dyn_$capturingCameraDevice$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$capturingCameraDevice$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<capturingCameraDevice>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CameraDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <flipCameraFrameHorizontally>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameHorizontally$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameHorizontally$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipCameraFrameHorizontally>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <flipCameraFrameVertically>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameVertically$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$flipCameraFrameVertically$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipCameraFrameVertically>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <handPoseStateLatency>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$handPoseStateLatency$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$handPoseStateLatency$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<handPoseStateLatency>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <sandwichCompositionRenderLatency>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionRenderLatency$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionRenderLatency$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sandwichCompositionRenderLatency>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <sandwichCompositionBufferedFrames>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionBufferedFrames$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$sandwichCompositionBufferedFrames$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sandwichCompositionBufferedFrames>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <chromaKeyColor>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OculusMRCManager::dyn_$chromaKeyColor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeyColor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeyColor>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySimilarity>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySimilarity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySimilarity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySimilarity>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySmoothRange>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySmoothRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySmoothRange$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySmoothRange>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <chromaKeySpillRange>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$chromaKeySpillRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$chromaKeySpillRange$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chromaKeySpillRange>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <useDynamicLighting>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$useDynamicLighting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$useDynamicLighting$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<useDynamicLighting>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/DepthQuality <depthQuality>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& GlobalNamespace::OculusMRCManager::dyn_$depthQuality$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$depthQuality$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<depthQuality>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_DepthQuality*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <dynamicLightingSmoothFactor>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingSmoothFactor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingSmoothFactor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicLightingSmoothFactor>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <dynamicLightingDepthVariationClampingValue>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingDepthVariationClampingValue$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$dynamicLightingDepthVariationClampingValue$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dynamicLightingDepthVariationClampingValue>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/VirtualGreenScreenType <virtualGreenScreenType>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenType>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_VirtualGreenScreenType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenTopY>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenTopY$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenTopY$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenTopY>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenBottomY>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenBottomY$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenBottomY$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenBottomY>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <virtualGreenScreenApplyDepthCulling>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenApplyDepthCulling$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenApplyDepthCulling$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenApplyDepthCulling>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <virtualGreenScreenDepthTolerance>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenDepthTolerance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$virtualGreenScreenDepthTolerance$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<virtualGreenScreenDepthTolerance>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/MrcActivationMode <mrcActivationMode>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& GlobalNamespace::OculusMRCManager::dyn_$mrcActivationMode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn_$mrcActivationMode$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<mrcActivationMode>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_MrcActivationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/InstantiateMrcCameraDelegate _instantiateMixedRealityCameraGameObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*& GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::dyn__instantiateMixedRealityCameraGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateMixedRealityCameraGameObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OculusMRCManager.get_enableMixedReality
bool GlobalNamespace::OculusMRCManager::get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_enableMixedReality
void GlobalNamespace::OculusMRCManager::set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_extraHiddenLayers
::UnityEngine::LayerMask GlobalNamespace::OculusMRCManager::get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_extraHiddenLayers
void GlobalNamespace::OculusMRCManager::set_extraHiddenLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_extraVisibleLayers
::UnityEngine::LayerMask GlobalNamespace::OculusMRCManager::get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_extraVisibleLayers
void GlobalNamespace::OculusMRCManager::set_extraVisibleLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicCullingMask
bool GlobalNamespace::OculusMRCManager::get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicCullingMask
void GlobalNamespace::OculusMRCManager::set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_compositionMethod
::GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OculusMRCManager::get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_compositionMethod
void GlobalNamespace::OculusMRCManager::set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_externalCompositionBackdropColorRift
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_externalCompositionBackdropColorRift
void GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_externalCompositionBackdropColorQuest
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_capturingCameraDevice
::GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OculusMRCManager::get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_capturingCameraDevice
void GlobalNamespace::OculusMRCManager::set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_flipCameraFrameHorizontally
bool GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_flipCameraFrameHorizontally
void GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_flipCameraFrameVertically
bool GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_flipCameraFrameVertically
void GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_handPoseStateLatency
float GlobalNamespace::OculusMRCManager::get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_handPoseStateLatency
void GlobalNamespace::OculusMRCManager::set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_sandwichCompositionRenderLatency
float GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_sandwichCompositionRenderLatency
void GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeyColor
::UnityEngine::Color GlobalNamespace::OculusMRCManager::get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeyColor
void GlobalNamespace::OculusMRCManager::set_chromaKeyColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySimilarity
float GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySimilarity
void GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySmoothRange
float GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySmoothRange
void GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_chromaKeySpillRange
float GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_chromaKeySpillRange
void GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_useDynamicLighting
bool GlobalNamespace::OculusMRCManager::get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_useDynamicLighting
void GlobalNamespace::OculusMRCManager::set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_depthQuality
::GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OculusMRCManager::get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_depthQuality
void GlobalNamespace::OculusMRCManager::set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicLightingSmoothFactor
float GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicLightingSmoothFactor
void GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenType
::GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenType
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenTopY
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenTopY
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenBottomY
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenBottomY
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_mrcActivationMode
::GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OculusMRCManager::get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_mrcActivationMode
void GlobalNamespace::OculusMRCManager::set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.get_instantiateMixedRealityCameraGameObject
::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusMRCManager.Update
void GlobalNamespace::OculusMRCManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.OnDestroy
void GlobalNamespace::OculusMRCManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusMRCManager.Init
void GlobalNamespace::OculusMRCManager::Init(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityBackgroundCameraGameObject, ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityForegroundCameraGameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instantiateMixedRealityBackgroundCameraGameObject), ::il2cpp_utils::ExtractType(instantiateMixedRealityForegroundCameraGameObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, instantiateMixedRealityBackgroundCameraGameObject, instantiateMixedRealityForegroundCameraGameObject);
}
// Autogenerated method: OculusMRCManager.InstantiateMixedRealityCameraGameObject
::UnityEngine::GameObject* GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject(::UnityEngine::GameObject* mainCameraGameObject, ::GlobalNamespace::OVRManager_MrcCameraType cameraType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainCameraGameObject), ::il2cpp_utils::ExtractType(cameraType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, mainCameraGameObject, cameraType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusVRHelper
#include "GlobalNamespace/OculusVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OculusVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::OculusVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _userPresent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__userPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__userPresent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userPresent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OculusVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& GlobalNamespace::OculusVRHelper::dyn__disabledEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::dyn__disabledEventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledEventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OculusVRHelper.get_hasInputFocus
bool GlobalNamespace::OculusVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_hasVrFocus
bool GlobalNamespace::OculusVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OculusVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::OculusVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get__isOVRManagerPresent
bool GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__isOVRManagerPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.Update
void GlobalNamespace::OculusVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.FixedUpdate
void GlobalNamespace::OculusVRHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.LateUpdate
void GlobalNamespace::OculusVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.TriggerHapticPulse
void GlobalNamespace::OculusVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OculusVRHelper.StopHaptics
void GlobalNamespace::OculusVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OculusVRHelper.AdjustControllerTransform
void GlobalNamespace::OculusVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OculusVRHelper.GetNodePose
bool GlobalNamespace::OculusVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated method: OculusVRHelper.EnableEventSystem
void GlobalNamespace::OculusVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.DisableEventSystem
void GlobalNamespace::OculusVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IOpenVRHaptics.TriggerHapticPulse
void GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IOpenVRHaptics.Destroy
void GlobalNamespace::IOpenVRHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOpenVRHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleOpenVrOpenVrHaptics
#include "GlobalNamespace/SimpleOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: SimpleOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _currentTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__currentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__currentTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _hapticThread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__hapticThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__hapticThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticThread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _leftHandHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__leftHandHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__leftHandHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _rightHandHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__rightHandHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::dyn__rightHandHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHandHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single endTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_endTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single strength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::dyn_strength");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData..ctor
// ABORTED elsewhere.  GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::OpenVrHapticData(float endTime, float strength)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OpenVRHelper
#include "GlobalNamespace/OpenVRHelper.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMicroSecondsInSecond
float GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kMicroSecondsInSecond"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMicroSecondsInSecond
void GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMicroSecondsInSecond", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kUpdateInterval
int GlobalNamespace::OpenVRHelper::_get_kUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kUpdateInterval
void GlobalNamespace::OpenVRHelper::_set_kUpdateInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateInterval", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDurationMs
int GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kMaxDurationMs"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDurationMs
void GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMaxDurationMs", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kUpdateIntervalSeconds
float GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kUpdateIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kUpdateIntervalSeconds
void GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateIntervalSeconds", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly IOpenVRHaptics _openVrHaptics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IOpenVRHaptics*& GlobalNamespace::OpenVRHelper::dyn__openVrHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__openVrHaptics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_openVrHaptics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IOpenVRHaptics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OpenVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::OpenVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _gamePoses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::OpenVRHelper::dyn__gamePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__gamePoses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gamePoses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>*& GlobalNamespace::OpenVRHelper::dyn__nodeStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__nodeStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _poses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::OpenVRHelper::dyn__poses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__poses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInputFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__hasInputFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInputFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didGetNodeStatesThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__didGetNodeStatesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__didGetNodeStatesThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didGetNodeStatesThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& GlobalNamespace::OpenVRHelper::dyn__disabledEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__disabledEventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disabledEventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName& GlobalNamespace::OpenVRHelper::dyn__vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__vrControllerManufacturerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrControllerManufacturerName"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scrollingLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OpenVRHelper::dyn__scrollingLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::dyn__scrollingLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scrollingLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OpenVRHelper.get_hasInputFocus
bool GlobalNamespace::OpenVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_hasVrFocus
bool GlobalNamespace::OpenVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OpenVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::OpenVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrControllerManufacturerName
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrControllerManufacturerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.Awake
void GlobalNamespace::OpenVRHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.TriggerHapticPulse
void GlobalNamespace::OpenVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OpenVRHelper.StopHaptics
void GlobalNamespace::OpenVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OpenVRHelper.AdjustControllerTransform
void GlobalNamespace::OpenVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OpenVRHelper.GetNodePose
bool GlobalNamespace::OpenVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated method: OpenVRHelper.Update
void GlobalNamespace::OpenVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.LateUpdate
void GlobalNamespace::OpenVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnDestroy
void GlobalNamespace::OpenVRHelper::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.DisableEventSystem
void GlobalNamespace::OpenVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.EnableEventSystem
void GlobalNamespace::OpenVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnBeforeRender
void GlobalNamespace::OpenVRHelper::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OpenVRHelper/VRControllerManufacturerName
#include "GlobalNamespace/OpenVRHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName HTC
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "HTC"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName HTC
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "HTC", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Valve
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Valve"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Valve
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Valve", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined(::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Undefined", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSVRHelper
#include "GlobalNamespace/PSVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuesRumbleImpulseStrength
float GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PSVRHelper", "kContinuesRumbleImpulseStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuesRumbleImpulseStrength
void GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PSVRHelper", "kContinuesRumbleImpulseStrength", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_inputFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_inputFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action inputFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_inputFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_inputFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasCapturedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_vrFocusWasCapturedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_vrFocusWasCapturedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasCapturedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action vrFocusWasReleasedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_vrFocusWasReleasedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_vrFocusWasReleasedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrFocusWasReleasedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdUnmountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_hmdUnmountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_hmdUnmountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdUnmountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action hmdMountedEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_hmdMountedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_hmdMountedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdMountedEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action joystickWasCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::PSVRHelper::dyn_joystickWasCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_joystickWasCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& GlobalNamespace::PSVRHelper::dyn_joystickWasNotCenteredThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn_joystickWasNotCenteredThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joystickWasNotCenteredThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didGetNodeStatesThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PSVRHelper::dyn__didGetNodeStatesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__didGetNodeStatesThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didGetNodeStatesThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>*& GlobalNamespace::PSVRHelper::dyn__nodeStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__nodeStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasVrFocus
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PSVRHelper::dyn__hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::dyn__hasVrFocus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasVrFocus"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PSVRHelper.get_hasInputFocus
bool GlobalNamespace::PSVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_hasVrFocus
bool GlobalNamespace::PSVRHelper::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_hasVrFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_isAlwaysWireless
bool GlobalNamespace::PSVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_vrPlatformSDK
::GlobalNamespace::VRPlatformSDK GlobalNamespace::PSVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_currentXRDeviceModel
::GlobalNamespace::XRDeviceModel GlobalNamespace::PSVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdMountedEvent
void GlobalNamespace::PSVRHelper::add_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdMountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdMountedEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent(::System::Action_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.Update
void GlobalNamespace::PSVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.LateUpdate
void GlobalNamespace::PSVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.TriggerHapticPulse
void GlobalNamespace::PSVRHelper::TriggerHapticPulse(::UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: PSVRHelper.StopHaptics
void GlobalNamespace::PSVRHelper::StopHaptics(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: PSVRHelper.AdjustControllerTransform
void GlobalNamespace::PSVRHelper::AdjustControllerTransform(::UnityEngine::XR::XRNode node, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: PSVRHelper.GetNodePose
bool GlobalNamespace::PSVRHelper::GetNodePose(::UnityEngine::XR::XRNode nodeType, int idx, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PSVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, nodeType, idx, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.XRNode _node
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& GlobalNamespace::VRController::dyn__node() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__node");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_node"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::XRNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _nodeIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRController::dyn__nodeIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__nodeIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRControllerTransformOffset _transformOffset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRControllerTransformOffset*& GlobalNamespace::VRController::dyn__transformOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__transformOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transformOffset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRControllerTransformOffset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::VRController::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VRControllersInputManager _vrControllersInputManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRControllersInputManager*& GlobalNamespace::VRController::dyn__vrControllersInputManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__vrControllersInputManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrControllersInputManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRControllersInputManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _lastTrackedPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRController::dyn__lastTrackedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::dyn__lastTrackedPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastTrackedPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRController.get_node
::UnityEngine::XR::XRNode GlobalNamespace::VRController::get_node() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::XR::XRNode, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_node
void GlobalNamespace::VRController::set_node(::UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::set_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_nodeIdx
int GlobalNamespace::VRController::get_nodeIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_nodeIdx
void GlobalNamespace::VRController::set_nodeIdx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::set_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_position
::UnityEngine::Vector3 GlobalNamespace::VRController::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_rotation
::UnityEngine::Quaternion GlobalNamespace::VRController::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_forward
::UnityEngine::Vector3 GlobalNamespace::VRController::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_triggerValue
float GlobalNamespace::VRController::get_triggerValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_triggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_triggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_verticalAxisValue
float GlobalNamespace::VRController::get_verticalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_verticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_horizontalAxisValue
float GlobalNamespace::VRController::get_horizontalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_horizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_horizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_active
bool GlobalNamespace::VRController::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRController.Update
void GlobalNamespace::VRController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllerTransformOffset.get_positionOffset
::UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllerTransformOffset::get_positionOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRControllerTransformOffset.get_rotationOffset
::UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllerTransformOffset::get_rotationOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kTriggerLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kTriggerLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTriggerRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kTriggerRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerRightHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kVerticalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kVerticalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kHorizontalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kHorizontalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHandOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHandOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHand
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonOculusTouch
::StringW GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "VRControllersInputManager", "kMenuButtonOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonOculusTouch", value));
}
// Autogenerated instance field getter
// Get instance field: private IVRPlatformHelper _vrPlatformHelper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& GlobalNamespace::VRControllersInputManager::dyn__vrPlatformHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::dyn__vrPlatformHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPlatformHelper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IVRPlatformHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRControllersInputManager.TriggerValue
float GlobalNamespace::VRControllersInputManager::TriggerValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::TriggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.VerticalAxisValue
float GlobalNamespace::VRControllersInputManager::VerticalAxisValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::VerticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.HorizontalAxisValue
float GlobalNamespace::VRControllersInputManager::HorizontalAxisValue(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::HorizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.MenuButtonDown
bool GlobalNamespace::VRControllersInputManager::MenuButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::MenuButtonDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButtonDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersInputManager.MenuButton
bool GlobalNamespace::VRControllersInputManager::MenuButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRControllersInputManager::MenuButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRNodeExtensions
#include "GlobalNamespace/XRNodeExtensions.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: XRNodeExtensions.OculusNode
::GlobalNamespace::OVRPlugin::Node GlobalNamespace::XRNodeExtensions::OculusNode(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRNodeExtensions::OculusNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "OculusNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Node, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated method: XRNodeExtensions.PSMoveDeviceIndex
int GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "PSMoveDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolWithDefaultValueSO
#include "GlobalNamespace/BoolWithDefaultValueSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _defaultValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BoolWithDefaultValueSO::dyn__defaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoolWithDefaultValueSO::dyn__defaultValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BoolWithDefaultValueSO.OnEnable
void GlobalNamespace::BoolWithDefaultValueSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoolWithDefaultValueSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoubleSO
#include "GlobalNamespace/DoubleSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IObservableChange
#include "GlobalNamespace/IObservableChange.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IObservableChange.add_didChangeEvent
void GlobalNamespace::IObservableChange::add_didChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IObservableChange::add_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IObservableChange.remove_didChangeEvent
void GlobalNamespace::IObservableChange::remove_didChangeEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IObservableChange::remove_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SOVariableAttribute
#include "GlobalNamespace/SOVariableAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringListSO
#include "GlobalNamespace/StringListSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String[] _strings
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::StringListSO::dyn__strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringListSO::dyn__strings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strings"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StringListSO.get_strings
::ArrayW<::StringW> GlobalNamespace::StringListSO::get_strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringListSO::get_strings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_strings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StringSO
#include "GlobalNamespace/StringSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector2IntSO
#include "GlobalNamespace/Vector2IntSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _duration
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _strength
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__strength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _frequency
[[deprecated("Use field access instead!")]] float& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__frequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _continuous
[[deprecated("Use field access instead!")]] bool& Libraries::HM::HMLib::VR::HapticPresetSO::dyn__continuous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::dyn__continuous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continuous"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Libraries.HM.HMLib.VR.HapticPresetSO.CopyFrom
void Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom(::Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hapticPreset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: NullAllowed
#include "GlobalNamespace/NullAllowed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly NullAllowed/Context context
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NullAllowed::Context& GlobalNamespace::NullAllowed::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NullAllowed::Context*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::NullAllowed::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object ifNotValue
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::NullAllowed::dyn_ifNotValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::dyn_ifNotValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ifNotValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NullAllowed/Context
#include "GlobalNamespace/NullAllowed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Everywhere
::GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Everywhere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_get_Everywhere");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Everywhere"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Everywhere
void GlobalNamespace::NullAllowed::Context::_set_Everywhere(::GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_set_Everywhere");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Everywhere", value));
}
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Prefab
::GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_get_Prefab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Prefab"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Prefab
void GlobalNamespace::NullAllowed::Context::_set_Prefab(::GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::_set_Prefab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Prefab", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NullAllowed::Context::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NullAllowed::Context::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
