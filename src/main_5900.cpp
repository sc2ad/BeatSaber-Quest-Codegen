// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke(::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.BeginInvoke
::System::IAsyncResult* System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke(::System::IntPtr arg, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, arg, callback, object);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationEntryDelegate.EndInvoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.MonoPInvokeCallbackAttribute
#include "System/Threading/OSSpecificSynchronizationContext_MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.SendOrPostCallback m_Delegate
[[deprecated("Use field access instead!")]] ::System::Threading::SendOrPostCallback*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::Threading::SendOrPostCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_State
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.InvocationContext.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c <>9
::System::Threading::OSSpecificSynchronizationContext::$$c* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::OSSpecificSynchronizationContext::$$c*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c <>9
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9(::System::Threading::OSSpecificSynchronizationContext::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/System.Runtime.CompilerServices.CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/System.Runtime.CompilerServices.CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0(typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0", value)));
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c..cctor
void System::Threading::OSSpecificSynchronizationContext::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/System.Threading.<>c.<Get>b__3_0
::System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::$$c::$Get$b__3_0(::Il2CppObject* _osContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::<Get>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Get>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_osContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::OSSpecificSynchronizationContext*, false>(this, ___internal__method, _osContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationLockException
#include "System/Threading/SynchronizationLockException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadHelper
#include "System/Threading/ThreadHelper.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback _ccb
::System::Threading::ContextCallback* System::Threading::ThreadHelper::_get__ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_get__ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "ThreadHelper", "_ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback _ccb
void System::Threading::ThreadHelper::_set__ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_set__ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadHelper", "_ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Delegate _start
[[deprecated("Use field access instead!")]] ::System::Delegate*& System::Threading::ThreadHelper::dyn__start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_start"))->offset;
  return *reinterpret_cast<::System::Delegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _startArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ThreadHelper::dyn__startArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__startArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext _executionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::ThreadHelper::dyn__executionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__executionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadHelper..cctor
void System::Threading::ThreadHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadHelper.SetExecutionContextHelper
void System::Threading::ThreadHelper::SetExecutionContextHelper(::System::Threading::ExecutionContext* ec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::SetExecutionContextHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContextHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ec);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart_Context
void System::Threading::ThreadHelper::ThreadStart_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", "ThreadStart_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
// Including type: System.Security.Principal.IPrincipal
#include "System/Security/Principal/IPrincipal.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.LocalDataStoreMgr
#include "System/LocalDataStoreMgr.hpp"
// Including type: System.LocalDataStoreHolder
#include "System/LocalDataStoreHolder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Threading.AsyncLocal`1
#include "System/Threading/AsyncLocal_1.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Runtime.Remoting.Contexts.Context
#include "System/Runtime/Remoting/Contexts/Context.hpp"
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.AsyncLocalValueChangedArgs`1
#include "System/Threading/AsyncLocalValueChangedArgs_1.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.AppDomain
#include "System/AppDomain.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Threading.ExecutionContext/System.Threading.Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
::System::LocalDataStoreMgr* System::Threading::Thread::_get_s_LocalDataStoreMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStoreMgr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreMgr*>("System.Threading", "Thread", "s_LocalDataStoreMgr"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
void System::Threading::Thread::_set_s_LocalDataStoreMgr(::System::LocalDataStoreMgr* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStoreMgr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStoreMgr", value));
}
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
::System::LocalDataStoreHolder* System::Threading::Thread::_get_s_LocalDataStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreHolder*>("System.Threading", "Thread", "s_LocalDataStore"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
void System::Threading::Thread::_set_s_LocalDataStore(::System::LocalDataStoreHolder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStore", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentCulture
void System::Threading::Thread::_set_m_CurrentCulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
void System::Threading::Thread::_set_m_CurrentUICulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
void System::Threading::Thread::_set_s_asyncLocalCurrentCulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
void System::Threading::Thread::_set_s_asyncLocalCurrentUICulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Thread current_thread
::System::Threading::Thread* System::Threading::Thread::_get_current_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_current_thread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Thread*>("System.Threading", "Thread", "current_thread"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Thread current_thread
void System::Threading::Thread::_set_current_thread(::System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_current_thread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "current_thread", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.InternalThread internal_thread
[[deprecated("Use field access instead!")]] ::System::Threading::InternalThread*& System::Threading::Thread::dyn_internal_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_internal_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internal_thread"))->offset;
  return *reinterpret_cast<::System::Threading::InternalThread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_ThreadStartArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_m_ThreadStartArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ThreadStartArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ThreadStartArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object pending_exception
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_pending_exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_pending_exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pending_exception"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Security.Principal.IPrincipal principal
[[deprecated("Use field access instead!")]] ::System::Security::Principal::IPrincipal*& System::Threading::Thread::dyn_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal"))->offset;
  return *reinterpret_cast<::System::Security::Principal::IPrincipal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::Thread::dyn_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.MulticastDelegate m_Delegate
[[deprecated("Use field access instead!")]] ::System::MulticastDelegate*& System::Threading::Thread::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::MulticastDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext m_ExecutionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Thread::dyn_m_ExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ExecutionContextBelongsToOuterScope
[[deprecated("Use field access instead!")]] bool& System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContextBelongsToOuterScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Thread.get_ExecutionContextBelongsToCurrentScope
bool System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_ExecutionContextBelongsToCurrentScope
void System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.set_Priority
void System::Threading::Thread::set_Priority(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentUICulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentUICulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_CurrentCulture
void System::Threading::Thread::set_CurrentCulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_Internal
::System::Threading::InternalThread* System::Threading::Thread::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::InternalThread*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentContext
::System::Runtime::Remoting::Contexts::Context* System::Threading::Thread::get_CurrentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Contexts::Context*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentPrincipal
::System::Security::Principal::IPrincipal* System::Threading::Thread::get_CurrentPrincipal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentPrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentPrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Security::Principal::IPrincipal*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThread
::System::Threading::Thread* System::Threading::Thread::get_CurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThreadId
int System::Threading::Thread::get_CurrentThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThread
bool System::Threading::Thread::get_IsThreadPoolThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThreadInternal
bool System::Threading::Thread::get_IsThreadPoolThreadInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThreadInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsAlive
bool System::Threading::Thread::get_IsAlive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsAlive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAlive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_IsBackground
void System::Threading::Thread::set_IsBackground(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_IsBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.set_Name
void System::Threading::Thread::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_ThreadState
::System::Threading::ThreadState System::Threading::Thread::get_ThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_ManagedThreadId
int System::Threading::Thread::get_ManagedThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ManagedThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ManagedThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.AsyncLocalSetCurrentCulture
void System::Threading::Thread::AsyncLocalSetCurrentCulture(::System::Threading::AsyncLocalValueChangedArgs_1<::System::Globalization::CultureInfo*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::AsyncLocalSetCurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "AsyncLocalSetCurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, args);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(::Il2CppObject* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameter);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.GetExecutionContextReader
::System::Threading::ExecutionContext::Reader System::Threading::Thread::GetExecutionContextReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetExecutionContextReader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExecutionContextReader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetMutableExecutionContext
::System::Threading::ExecutionContext* System::Threading::Thread::GetMutableExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetMutableExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMutableExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext* value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.ResetAbort
void System::Threading::Thread::ResetAbort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ResetAbort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ResetAbort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ResetAbortNative
void System::Threading::Thread::ResetAbortNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ResetAbortNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetAbortNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetPriorityNative
void System::Threading::Thread::SetPriorityNative(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetPriorityNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, priority);
}
// Autogenerated method: System.Threading.Thread.JoinInternal
bool System::Threading::Thread::JoinInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::JoinInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Join
void System::Threading::Thread::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SleepInternal
void System::Threading::Thread::SleepInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SleepInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SleepInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Sleep
void System::Threading::Thread::Sleep(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.YieldInternal
bool System::Threading::Thread::YieldInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::YieldInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "YieldInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Yield
bool System::Threading::Thread::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetStartHelper
void System::Threading::Thread::SetStartHelper(::System::Delegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStartHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.GetCurrentUICultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentUICultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentUICultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentCultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentCultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentCultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.nativeInitCultureAccessors
void System::Threading::Thread::nativeInitCultureAccessors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::nativeInitCultureAccessors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "nativeInitCultureAccessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.MemoryBarrier
void System::Threading::Thread::MemoryBarrier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::MemoryBarrier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "MemoryBarrier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ConstructInternalThread
void System::Threading::Thread::ConstructInternalThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ConstructInternalThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstructInternalThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ByteArrayToCurrentDomain
::ArrayW<uint8_t> System::Threading::Thread::ByteArrayToCurrentDomain(::ArrayW<uint8_t> arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ByteArrayToCurrentDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ByteArrayToCurrentDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arr);
}
// Autogenerated method: System.Threading.Thread.DeserializePrincipal
void System::Threading::Thread::DeserializePrincipal(::System::Threading::Thread* th) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::DeserializePrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "DeserializePrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(th)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, th);
}
// Autogenerated method: System.Threading.Thread.GetCurrentThread
::System::Threading::Thread* System::Threading::Thread::GetCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomain
::System::AppDomain* System::Threading::Thread::GetDomain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AppDomain*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomainID
int System::Threading::Thread::GetDomainID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetDomainID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomainID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Thread_internal
::System::IntPtr System::Threading::Thread::Thread_internal(::System::MulticastDelegate* start) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Thread_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, start);
}
// Autogenerated method: System.Threading.Thread.SetName_internal
void System::Threading::Thread::SetName_internal(::System::Threading::InternalThread* thread, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetName_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetName_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, name);
}
// Autogenerated method: System.Threading.Thread.Abort_internal
void System::Threading::Thread::Abort_internal(::System::Threading::InternalThread* thread, ::Il2CppObject* stateInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Abort_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(stateInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, stateInfo);
}
// Autogenerated method: System.Threading.Thread.Abort
void System::Threading::Thread::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ClearAbortReason
void System::Threading::Thread::ClearAbortReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ClearAbortReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAbortReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait_nop
void System::Threading::Thread::SpinWait_nop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait_nop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait_nop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait
void System::Threading::Thread::SpinWait(int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, iterations);
}
// Autogenerated method: System.Threading.Thread.StartInternal
void System::Threading::Thread::StartInternal(::System::Security::Principal::IPrincipal* principal, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::StartInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(principal), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, principal, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.SetState
void System::Threading::Thread::SetState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(set)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, set);
}
// Autogenerated method: System.Threading.Thread.ClrState
void System::Threading::Thread::ClrState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ClrState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ClrState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, clr);
}
// Autogenerated method: System.Threading.Thread.GetState
::System::Threading::ThreadState System::Threading::Thread::GetState(::System::Threading::InternalThread* thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread);
}
// Autogenerated method: System.Threading.Thread.SystemMaxStackStize
int System::Threading::Thread::SystemMaxStackStize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SystemMaxStackStize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SystemMaxStackStize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetProcessDefaultStackSize
int System::Threading::Thread::GetProcessDefaultStackSize(int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetProcessDefaultStackSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetProcessDefaultStackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStackSize)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.SetStart
void System::Threading::Thread::SetStart(::System::MulticastDelegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.BeginCriticalRegion
void System::Threading::Thread::BeginCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::BeginCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "BeginCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.EndCriticalRegion
void System::Threading::Thread::EndCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::EndCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "EndCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ValidateThreadState
::System::Threading::ThreadState System::Threading::Thread::ValidateThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ValidateThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Finalize
void System::Threading::Thread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetHashCode
int System::Threading::Thread::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMe
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMe");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMe"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMe
void System::Threading::StackCrawlMark::_set_LookForMe(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMe");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMe", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCaller
void System::Threading::StackCrawlMark::_set_LookForMyCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCallersCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCallersCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCallersCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
void System::Threading::StackCrawlMark::_set_LookForMyCallersCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCallersCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCallersCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForThread
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForThread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForThread"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForThread
void System::Threading::StackCrawlMark::_set_LookForThread(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForThread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForThread", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::StackCrawlMark::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadInterruptedException
#include "System/Threading/ThreadInterruptedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::IThreadPoolWorkItem::MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitCallback.Invoke
void System::Threading::WaitCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.WaitCallback.BeginInvoke
::System::IAsyncResult* System::Threading::WaitCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.WaitCallback.EndInvoke
void System::Threading::WaitCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitOrTimerCallback.Invoke
void System::Threading::WaitOrTimerCallback::Invoke(::Il2CppObject* state, bool timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, timedOut);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.BeginInvoke
::System::IAsyncResult* System::Threading::WaitOrTimerCallback::BeginInvoke(::Il2CppObject* state, bool timedOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, timedOut, callback, object);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.EndInvoke
void System::Threading::WaitOrTimerCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolGlobals
#include "System/Threading/ThreadPoolGlobals.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 tpQuantum
uint System::Threading::ThreadPoolGlobals::_get_tpQuantum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_tpQuantum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ThreadPoolGlobals", "tpQuantum"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 tpQuantum
void System::Threading::ThreadPoolGlobals::_set_tpQuantum(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_tpQuantum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpQuantum", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 processorCount
int System::Threading::ThreadPoolGlobals::_get_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ThreadPoolGlobals", "processorCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 processorCount
void System::Threading::ThreadPoolGlobals::_set_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "processorCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean tpHosted
bool System::Threading::ThreadPoolGlobals::_get_tpHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_tpHosted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "tpHosted"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean tpHosted
void System::Threading::ThreadPoolGlobals::_set_tpHosted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_tpHosted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpHosted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean vmTpInitialized
bool System::Threading::ThreadPoolGlobals::_get_vmTpInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_vmTpInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "vmTpInitialized"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean vmTpInitialized
void System::Threading::ThreadPoolGlobals::_set_vmTpInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_vmTpInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "vmTpInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean enableWorkerTracking
bool System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean enableWorkerTracking
void System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueue workQueue
::System::Threading::ThreadPoolWorkQueue* System::Threading::ThreadPoolGlobals::_get_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_workQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue*>("System.Threading", "ThreadPoolGlobals", "workQueue"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueue workQueue
void System::Threading::ThreadPoolGlobals::_set_workQueue(::System::Threading::ThreadPoolWorkQueue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_workQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "workQueue", value));
}
// Autogenerated method: System.Threading.ThreadPoolGlobals..cctor
void System::Threading::ThreadPoolGlobals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolGlobals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1
#include "System/Threading/ThreadPoolWorkQueue_SparseArray_1.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1<System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue> allThreadQueues
::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>*>("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ThreadPoolWorkQueue/System.Threading.SparseArray`1<System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue> allThreadQueues
void System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues(::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues", value));
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment queueHead
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueHead"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment queueTail
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueTail"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numOutstandingThreadRequests
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numOutstandingThreadRequests"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue..cctor
void System::Threading::ThreadPoolWorkQueue::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureCurrentThreadHasQueue
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCurrentThreadHasQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadPoolWorkQueueThreadLocals*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureThreadRequested
void System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureThreadRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.MarkThreadRequestSatisfied
void System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkThreadRequestSatisfied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Enqueue
void System::Threading::ThreadPoolWorkQueue::Enqueue(::System::Threading::IThreadPoolWorkItem* callback, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dequeue
void System::Threading::ThreadPoolWorkQueue::Dequeue(::System::Threading::ThreadPoolWorkQueueThreadLocals* tl, ByRef<::System::Threading::IThreadPoolWorkItem*> callback, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tl, byref(callback), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dispatch
bool System::Threading::ThreadPoolWorkQueue::Dispatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", "Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.IThreadPoolWorkItem[] m_array
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_array"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_mask
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_mask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_headIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_headIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_tailIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tailIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SpinLock m_foreignLock
[[deprecated("Use field access instead!")]] ::System::Threading::SpinLock& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_foreignLock"))->offset;
  return *reinterpret_cast<::System::Threading::SpinLock*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalPush
void System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.LocalPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop(ByRef<::System::Threading::IThreadPoolWorkItem*> obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal), millisecondsTimeout);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.IThreadPoolWorkItem[] nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 indexes
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexes"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment Next
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.GetIndexes
void System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes(ByRef<int> upper, ByRef<int> lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(upper), byref(lower));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.CompareExchangeIndexes
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes(ByRef<int> prevUpper, int newUpper, ByRef<int> prevLower, int newLower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareExchangeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevUpper), ::il2cpp_utils::ExtractType(newUpper), ::il2cpp_utils::ExtractType(prevLower), ::il2cpp_utils::ExtractType(newLower)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(prevUpper), newUpper, byref(prevLower), newLower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.IsUsedUp
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUsedUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.TryEnqueue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue(::System::Threading::IThreadPoolWorkItem* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/System.Threading.QueueSegment.TryDequeue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue(ByRef<::System::Threading::IThreadPoolWorkItem*> node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(node));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Random
#include "System/Random.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueueThreadLocals*>("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
void System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals(::System::Threading::ThreadPoolWorkQueueThreadLocals* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue workQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue/System.Threading.WorkStealingQueue workStealingQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workStealingQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Random random
[[deprecated("Use field access instead!")]] ::System::Random*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "random"))->offset;
  return *reinterpret_cast<::System::Random**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.CleanUp
void System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.Finalize
void System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading._ThreadPoolWaitCallback
#include "System/Threading/_ThreadPoolWaitCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading._ThreadPoolWaitCallback.PerformWaitCallback
bool System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "_ThreadPoolWaitCallback", "PerformWaitCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.QueueUserWorkItemCallback
#include "System/Threading/QueueUserWorkItemCallback.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback ccb
::System::Threading::ContextCallback* System::Threading::QueueUserWorkItemCallback::_get_ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_get_ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "QueueUserWorkItemCallback", "ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback ccb
void System::Threading::QueueUserWorkItemCallback::_set_ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_set_ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "QueueUserWorkItemCallback", "ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitCallback*& System::Threading::QueueUserWorkItemCallback::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext context
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::QueueUserWorkItemCallback::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::QueueUserWorkItemCallback::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback..cctor
void System::Threading::QueueUserWorkItemCallback::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.WaitCallback_Context
void System::Threading::QueueUserWorkItemCallback::WaitCallback_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::WaitCallback_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", "WaitCallback_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, byref(stackMark), compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, int millisecondsTimeOutInterval, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, ::System::TimeSpan timeout, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, timeout, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state, byref(stackMark), compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::TryPopCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "TryPopCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem);
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RequestWorkerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RequestWorkerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::EnsureVMInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "EnsureVMInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::ReportThreadStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "ReportThreadStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isWorking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, isWorking);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgressNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgressNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.IsThreadPoolHosted
bool System::Threading::ThreadPool::IsThreadPoolHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::IsThreadPoolHosted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "IsThreadPoolHosted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(ByRef<bool> enableWorkerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::InitializeVMTp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "InitializeVMTp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableWorkerTracking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(enableWorkerTracking));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Lowest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Lowest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Lowest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Lowest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Lowest
void System::Threading::ThreadPriority::_set_Lowest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Lowest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Lowest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority BelowNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_BelowNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_BelowNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "BelowNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority BelowNormal
void System::Threading::ThreadPriority::_set_BelowNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_BelowNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "BelowNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Normal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Normal
void System::Threading::ThreadPriority::_set_Normal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority AboveNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_AboveNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_AboveNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "AboveNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority AboveNormal
void System::Threading::ThreadPriority::_set_AboveNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_AboveNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "AboveNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Highest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Highest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Highest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Highest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Highest
void System::Threading::ThreadPriority::_set_Highest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Highest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Highest", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPriority::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadStart.Invoke
void System::Threading::ThreadStart::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadStart.BeginInvoke
::System::IAsyncResult* System::Threading::ThreadStart::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: System.Threading.ThreadStart.EndInvoke
void System::Threading::ThreadStart::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Running
::System::Threading::ThreadState System::Threading::ThreadState::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Running
void System::Threading::ThreadState::_set_Running(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState StopRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_StopRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_StopRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "StopRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState StopRequested
void System::Threading::ThreadState::_set_StopRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_StopRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "StopRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState SuspendRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_SuspendRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_SuspendRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "SuspendRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState SuspendRequested
void System::Threading::ThreadState::_set_SuspendRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_SuspendRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "SuspendRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Background
::System::Threading::ThreadState System::Threading::ThreadState::_get_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Background"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Background
void System::Threading::ThreadState::_set_Background(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Background", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Unstarted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Unstarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Unstarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Unstarted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Unstarted
void System::Threading::ThreadState::_set_Unstarted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Unstarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Unstarted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Stopped
::System::Threading::ThreadState System::Threading::ThreadState::_get_Stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Stopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Stopped"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Stopped
void System::Threading::ThreadState::_set_Stopped(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Stopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Stopped", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState WaitSleepJoin
::System::Threading::ThreadState System::Threading::ThreadState::_get_WaitSleepJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_WaitSleepJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "WaitSleepJoin"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState WaitSleepJoin
void System::Threading::ThreadState::_set_WaitSleepJoin(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_WaitSleepJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "WaitSleepJoin", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Suspended
::System::Threading::ThreadState System::Threading::ThreadState::_get_Suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Suspended");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Suspended"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Suspended
void System::Threading::ThreadState::_set_Suspended(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Suspended");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Suspended", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState AbortRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_AbortRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_AbortRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "AbortRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState AbortRequested
void System::Threading::ThreadState::_set_AbortRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_AbortRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "AbortRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Aborted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Aborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Aborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Aborted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Aborted
void System::Threading::ThreadState::_set_Aborted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Aborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Aborted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadStateException
#include "System/Threading/ThreadStateException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Timeout
#include "System/Threading/Timeout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ComVisibleAttribute] Offset: 0x107DC84
// Autogenerated static field getter
// Get static field: static public readonly System.TimeSpan InfiniteTimeSpan
::System::TimeSpan System::Threading::Timeout::_get_InfiniteTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_get_InfiniteTimeSpan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::TimeSpan>("System.Threading", "Timeout", "InfiniteTimeSpan"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.TimeSpan InfiniteTimeSpan
void System::Threading::Timeout::_set_InfiniteTimeSpan(::System::TimeSpan value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_set_InfiniteTimeSpan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timeout", "InfiniteTimeSpan", value));
}
// Autogenerated method: System.Threading.Timeout..cctor
void System::Threading::Timeout::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timeout", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Runtime.InteropServices.SafeHandle
#include "System/Runtime/InteropServices/SafeHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 WaitTimeout
int System::Threading::WaitHandle::_get_WaitTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WaitTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WaitTimeout"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 WaitTimeout
void System::Threading::WaitHandle::_set_WaitTimeout(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WaitTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WaitTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_WAITHANDLES
int System::Threading::WaitHandle::_get_MAX_WAITHANDLES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MAX_WAITHANDLES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MAX_WAITHANDLES"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_WAITHANDLES
void System::Threading::WaitHandle::_set_MAX_WAITHANDLES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MAX_WAITHANDLES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MAX_WAITHANDLES", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_OBJECT_0
int System::Threading::WaitHandle::_get_WAIT_OBJECT_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_OBJECT_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_OBJECT_0"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_OBJECT_0
void System::Threading::WaitHandle::_set_WAIT_OBJECT_0(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_OBJECT_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_OBJECT_0", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_ABANDONED
int System::Threading::WaitHandle::_get_WAIT_ABANDONED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_ABANDONED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_ABANDONED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_ABANDONED
void System::Threading::WaitHandle::_set_WAIT_ABANDONED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_ABANDONED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_ABANDONED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_FAILED
int System::Threading::WaitHandle::_get_WAIT_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_FAILED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_FAILED
void System::Threading::WaitHandle::_set_WAIT_FAILED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ERROR_TOO_MANY_POSTS
int System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ERROR_TOO_MANY_POSTS
void System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.IntPtr InvalidHandle
::System::IntPtr System::Threading::WaitHandle::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::IntPtr>("System.Threading", "WaitHandle", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.IntPtr InvalidHandle
void System::Threading::WaitHandle::_set_InvalidHandle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxWaitHandles
int System::Threading::WaitHandle::_get_MaxWaitHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MaxWaitHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MaxWaitHandles"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxWaitHandles
void System::Threading::WaitHandle::_set_MaxWaitHandles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MaxWaitHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MaxWaitHandles", value));
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr waitHandle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::WaitHandle::dyn_waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitHandle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle
[[deprecated("Use field access instead!")]] ::Microsoft::Win32::SafeHandles::SafeWaitHandle*& System::Threading::WaitHandle::dyn_safeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_safeWaitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "safeWaitHandle"))->offset;
  return *reinterpret_cast<::Microsoft::Win32::SafeHandles::SafeWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean hasThreadAffinity
[[deprecated("Use field access instead!")]] bool& System::Threading::WaitHandle::dyn_hasThreadAffinity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_hasThreadAffinity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasThreadAffinity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.WaitHandle.set_Handle
void System::Threading::WaitHandle::set_Handle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_Handle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.get_SafeWaitHandle
::Microsoft::Win32::SafeHandles::SafeWaitHandle* System::Threading::WaitHandle::get_SafeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::get_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Microsoft::Win32::SafeHandles::SafeWaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_SafeWaitHandle
void System::Threading::WaitHandle::set_SafeWaitHandle(::Microsoft::Win32::SafeHandles::SafeWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle..cctor
void System::Threading::WaitHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Init
void System::Threading::WaitHandle::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.SetHandleInternal
void System::Threading::WaitHandle::SetHandleInternal(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::SetHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handle);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int64_t timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.InternalWaitOne
bool System::Threading::WaitHandle::InternalWaitOne(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, int64_t millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::InternalWaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "InternalWaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, ::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException(int location, ::System::Threading::WaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, location, handle);
}
// Autogenerated method: System.Threading.WaitHandle.Close
void System::Threading::WaitHandle::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose(bool explicitDisposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(explicitDisposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, explicitDisposing);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitMultiple
int System::Threading::WaitHandle::WaitMultiple(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitMultiple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitMultiple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(WaitAll)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext, WaitAll);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOneNative
int System::Threading::WaitHandle::WaitOneNative(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOneNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitOneNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.Wait_internal
int System::Threading::WaitHandle::Wait_internal(::System::IntPtr* handles, int numHandles, bool waitAll, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Wait_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "Wait_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handles), ::il2cpp_utils::ExtractType(numHandles), ::il2cpp_utils::ExtractType(waitAll), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handles, numHandles, waitAll, ms);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandleCannotBeOpenedException
#include "System/Threading/WaitHandleCannotBeOpenedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Interlocked
#include "System/Threading/Interlocked.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand, ByRef<bool> succeeded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand), ::il2cpp_utils::ExtractType(succeeded)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand, byref(succeeded));
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::Il2CppObject* System::Threading::Interlocked::CompareExchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value, ::Il2CppObject* comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
float System::Threading::Interlocked::CompareExchange(ByRef<float> location1, float value, float comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Decrement
int System::Threading::Interlocked::Decrement(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Decrement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Decrement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int System::Threading::Interlocked::Increment(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int64_t System::Threading::Interlocked::Increment(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int System::Threading::Interlocked::Exchange(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::Il2CppObject* System::Threading::Interlocked::Exchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
float System::Threading::Interlocked::Exchange(ByRef<float> location1, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int64_t System::Threading::Interlocked::CompareExchange(ByRef<int64_t> location1, int64_t value, int64_t comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::System::IntPtr System::Threading::Interlocked::CompareExchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value, ::System::IntPtr comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
double System::Threading::Interlocked::CompareExchange(ByRef<double> location1, double value, double comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int64_t System::Threading::Interlocked::Exchange(ByRef<int64_t> location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::System::IntPtr System::Threading::Interlocked::Exchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
double System::Threading::Interlocked::Exchange(ByRef<double> location1, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Read
int64_t System::Threading::Interlocked::Read(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Add
int System::Threading::Interlocked::Add(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Add
int64_t System::Threading::Interlocked::Add(ByRef<int64_t> location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.LockQueue
#include "System/Threading/LockQueue.hpp"
// Including type: System.Threading.ReaderWriterLock
#include "System/Threading/ReaderWriterLock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.ReaderWriterLock rwlock
[[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLock*& System::Threading::LockQueue::dyn_rwlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::dyn_rwlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rwlock"))->offset;
  return *reinterpret_cast<::System::Threading::ReaderWriterLock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lockCount
[[deprecated("Use field access instead!")]] int& System::Threading::LockQueue::dyn_lockCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::dyn_lockCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.LockQueue.get_IsEmpty
bool System::Threading::LockQueue::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.LockQueue.Wait
bool System::Threading::LockQueue::Wait(int timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.LockQueue.Pulse
void System::Threading::LockQueue::Pulse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.NativeEventCalls
#include "System/Threading/NativeEventCalls.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.NativeEventCalls.CreateEvent_internal
::System::IntPtr System::Threading::NativeEventCalls::CreateEvent_internal(bool manual, bool initial, ::StringW name, ByRef<int> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CreateEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CreateEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manual), ::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manual, initial, name, byref(errorCode));
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent
bool System::Threading::NativeEventCalls::SetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent_internal
bool System::Threading::NativeEventCalls::SetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent
bool System::Threading::NativeEventCalls::ResetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent_internal
bool System::Threading::NativeEventCalls::ResetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.CloseEvent_internal
void System::Threading::NativeEventCalls::CloseEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CloseEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CloseEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterLock
#include "System/Threading/ReaderWriterLock.hpp"
// Including type: System.Threading.LockQueue
#include "System/Threading/LockQueue.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 seq_num
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_seq_num() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_seq_num");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seq_num"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 state
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 readers
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_readers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_readers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readers"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 writer_lock_owner
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_writer_lock_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_writer_lock_owner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "writer_lock_owner"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.LockQueue writer_queue
[[deprecated("Use field access instead!")]] ::System::Threading::LockQueue*& System::Threading::ReaderWriterLock::dyn_writer_queue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_writer_queue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "writer_queue"))->offset;
  return *reinterpret_cast<::System::Threading::LockQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Hashtable reader_locks
[[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& System::Threading::ReaderWriterLock::dyn_reader_locks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_reader_locks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reader_locks"))->offset;
  return *reinterpret_cast<::System::Collections::Hashtable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ReaderWriterLock.get_IsReaderLockHeld
bool System::Threading::ReaderWriterLock::get_IsReaderLockHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::get_IsReaderLockHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsReaderLockHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.get_IsWriterLockHeld
bool System::Threading::ReaderWriterLock::get_IsWriterLockHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::get_IsWriterLockHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWriterLockHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireReaderLock
void System::Threading::ReaderWriterLock::AcquireReaderLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireReaderLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireReaderLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireReaderLock
void System::Threading::ReaderWriterLock::AcquireReaderLock(int millisecondsTimeout, int initialLockCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireReaderLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireReaderLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(initialLockCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, initialLockCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireWriterLock
void System::Threading::ReaderWriterLock::AcquireWriterLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireWriterLock
void System::Threading::ReaderWriterLock::AcquireWriterLock(int millisecondsTimeout, int initialLockCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(initialLockCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, initialLockCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseReaderLock
void System::Threading::ReaderWriterLock::ReleaseReaderLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseReaderLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseReaderLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseReaderLock
void System::Threading::ReaderWriterLock::ReleaseReaderLock(int currentCount, int releaseCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseReaderLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseReaderLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentCount), ::il2cpp_utils::ExtractType(releaseCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentCount, releaseCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseWriterLock
void System::Threading::ReaderWriterLock::ReleaseWriterLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseWriterLock
void System::Threading::ReaderWriterLock::ReleaseWriterLock(int releaseCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(releaseCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releaseCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.HasWriterLock
bool System::Threading::ReaderWriterLock::HasWriterLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::HasWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.Finalize
void System::Threading::ReaderWriterLock::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _waitObject
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__waitObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__waitObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitObject"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitOrTimerCallback _callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitOrTimerCallback*& System::Threading::RegisteredWaitHandle::dyn__callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitOrTimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::RegisteredWaitHandle::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _finalEvent
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__finalEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__finalEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finalEvent"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent _cancelEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::RegisteredWaitHandle::dyn__cancelEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__cancelEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.TimeSpan _timeout
[[deprecated("Use field access instead!")]] ::System::TimeSpan& System::Threading::RegisteredWaitHandle::dyn__timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__timeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeout"))->offset;
  return *reinterpret_cast<::System::TimeSpan*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _callsInProcess
[[deprecated("Use field access instead!")]] int& System::Threading::RegisteredWaitHandle::dyn__callsInProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callsInProcess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callsInProcess"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _executeOnlyOnce
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executeOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _unregistered
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__unregistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__unregistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unregistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Wait
void System::Threading::RegisteredWaitHandle::Wait(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.DoCallBack
void System::Threading::RegisteredWaitHandle::DoCallBack(::Il2CppObject* timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::DoCallBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoCallBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timedOut);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Unregister
bool System::Threading::RegisteredWaitHandle::Unregister(::System::Threading::WaitHandle* waitObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, waitObject);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 lock_thread_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_lock_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_lock_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lock_thread_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr native_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_native_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_native_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "native_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused3
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused3"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr name
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 name_len
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_name_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ThreadState state
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadState& System::Threading::InternalThread::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object abort_exc
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_abort_exc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_exc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_exc"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 abort_state_handle
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_abort_state_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_state_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_state_handle"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 thread_id
[[deprecated("Use field access instead!")]] int64_t& System::Threading::InternalThread::dyn_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_id"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr debugger_thread
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_debugger_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_debugger_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugger_thread"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UIntPtr static_data
[[deprecated("Use field access instead!")]] ::System::UIntPtr& System::Threading::InternalThread::dyn_static_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_static_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "static_data"))->offset;
  return *reinterpret_cast<::System::UIntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr runtime_thread_info
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_runtime_thread_info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_runtime_thread_info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "runtime_thread_info"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object current_appcontext
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_current_appcontext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_current_appcontext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current_appcontext"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object root_domain_thread
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_root_domain_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_root_domain_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root_domain_thread"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] _serialized_principal
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& System::Threading::InternalThread::dyn__serialized_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _serialized_principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn__serialized_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr appdomain_refs
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_appdomain_refs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_appdomain_refs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appdomain_refs"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 interruption_requested
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_interruption_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_interruption_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interruption_requested"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr synch_cs
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_synch_cs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_synch_cs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "synch_cs"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean threadpool_thread
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_threadpool_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_threadpool_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "threadpool_thread"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean thread_interrupt_requested
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_thread_interrupt_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_interrupt_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_interrupt_requested"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 stack_size
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_stack_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_stack_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stack_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte apartment_state
[[deprecated("Use field access instead!")]] uint8_t& System::Threading::InternalThread::dyn_apartment_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_apartment_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "apartment_state"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 critical_region_level
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_critical_region_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_critical_region_level");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "critical_region_level"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 managed_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_managed_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_managed_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "managed_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 small_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_small_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_small_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "small_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr manage_callback
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_manage_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_manage_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "manage_callback"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused4
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused4"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr flags
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flags"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr thread_pinning_ref
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_thread_pinning_ref() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_pinning_ref");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_pinning_ref"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr abort_protected_block_count
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_abort_protected_block_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_protected_block_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_protected_block_count"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 priority
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr owned_mutex
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_owned_mutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_owned_mutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owned_mutex"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr suspended_event
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_suspended_event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_suspended_event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suspended_event"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 self_suspended
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_self_suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_self_suspended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self_suspended"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused1
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused1"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr unused2
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_unused2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_unused2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unused2"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr last
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.InternalThread.Thread_free_internal
void System::Threading::InternalThread::Thread_free_internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Thread_free_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_free_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.InternalThread.Finalize
void System::Threading::InternalThread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.Timer/System.Threading.TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
// Including type: System.Threading.Timer/System.Threading.Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Timer/System.Threading.Scheduler scheduler
::System::Threading::Timer::Scheduler* System::Threading::Timer::_get_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_get_scheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Timer::Scheduler*>("System.Threading", "Timer", "scheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Timer/System.Threading.Scheduler scheduler
void System::Threading::Timer::_set_scheduler(::System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_set_scheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "scheduler", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 MaxValue
int64_t System::Threading::Timer::_get_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_get_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "Timer", "MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 MaxValue
void System::Threading::Timer::_set_MaxValue(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_set_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "MaxValue", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.TimerCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::TimerCallback*& System::Threading::Timer::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::TimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Timer::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 due_time_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_due_time_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_due_time_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "due_time_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 period_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_period_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_period_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "period_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 next_run
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_next_run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_next_run");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next_run"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::dyn_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer..cctor
void System::Threading::Timer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Init
void System::Threading::Timer::Init(::System::Threading::TimerCallback* callback, ::Il2CppObject* state, int64_t dueTime, int64_t period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, state, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int dueTime, int period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(::System::TimeSpan dueTime, ::System::TimeSpan period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Dispose
void System::Threading::Timer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int64_t dueTime, int64_t period, bool first) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period), ::il2cpp_utils::ExtractType(first)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period, first);
}
// Autogenerated method: System.Threading.Timer.KeepRootedWhileScheduled
void System::Threading::Timer::KeepRootedWhileScheduled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::KeepRootedWhileScheduled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeepRootedWhileScheduled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.GetTimeMonotonic
int64_t System::Threading::Timer::GetTimeMonotonic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::GetTimeMonotonic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", "GetTimeMonotonic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/System.Threading.TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Timer/System.Threading.TimerComparer.Compare
int System::Threading::Timer::TimerComparer::Compare(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::TimerComparer::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x, y);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/System.Threading.Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Collections.SortedList
#include "System/Collections/SortedList.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.Timer/System.Threading.Scheduler instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Timer::Scheduler*>("System.Threading", "Timer/Scheduler", "instance"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Timer/System.Threading.Scheduler instance
void System::Threading::Timer::Scheduler::_set_instance(::System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer/Scheduler", "instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.SortedList list
[[deprecated("Use field access instead!")]] ::System::Collections::SortedList*& System::Threading::Timer::Scheduler::dyn_list() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_list");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
  return *reinterpret_cast<::System::Collections::SortedList**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent changed
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::Timer::Scheduler::dyn_changed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_changed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "changed"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.get_Instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Timer::Scheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler..cctor
void System::Threading::Timer::Scheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Remove
void System::Threading::Timer::Scheduler::Remove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Change
void System::Threading::Timer::Scheduler::Change(::System::Threading::Timer* timer, int64_t new_next_run) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(new_next_run)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer, new_next_run);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.FindByDueTime
int System::Threading::Timer::Scheduler::FindByDueTime(int64_t nr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::FindByDueTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindByDueTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nr)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nr);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.Add
void System::Threading::Timer::Scheduler::Add(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.InternalRemove
int System::Threading::Timer::Scheduler::InternalRemove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::InternalRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.TimerCB
void System::Threading::Timer::Scheduler::TimerCB(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::TimerCB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "TimerCB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.SchedulerThread
void System::Threading::Timer::Scheduler::SchedulerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::SchedulerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SchedulerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/System.Threading.Scheduler.ShrinkIfNeeded
void System::Threading::Timer::Scheduler::ShrinkIfNeeded(::System::Collections::Generic::List_1<::System::Threading::Timer*>* list, int initial) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::ShrinkIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShrinkIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(initial)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list, initial);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimerCallback.Invoke
void System::Threading::TimerCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.TimerCallback.BeginInvoke
::System::IAsyncResult* System::Threading::TimerCallback::BeginInvoke(::Il2CppObject* state, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.TimerCallback.EndInvoke
void System::Threading::TimerCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Volatile
#include "System/Threading/Volatile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Volatile.Read
bool System::Threading::Volatile::Read(ByRef<bool> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Read
int System::Threading::Volatile::Read(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<bool> location, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<int> location, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Required
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Required");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Required"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Required
void System::Threading::Tasks::CausalityTraceLevel::_set_Required(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Required");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Required", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Important
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Important() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Important");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Important"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Important
void System::Threading::Tasks::CausalityTraceLevel::_set_Important(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Important");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Important", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Verbose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Verbose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
void System::Threading::Tasks::CausalityTraceLevel::_set_Verbose(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Verbose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Verbose", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityTraceLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Started");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Started"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
void System::Threading::Tasks::AsyncCausalityStatus::_set_Started(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Started");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Started", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
void System::Threading::Tasks::AsyncCausalityStatus::_set_Completed(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Completed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
void System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
void System::Threading::Tasks::AsyncCausalityStatus::_set_Error(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::AsyncCausalityStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_AssignDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_AssignDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "AssignDelegate"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
void System::Threading::Tasks::CausalityRelation::_set_AssignDelegate(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_AssignDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "AssignDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Join
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Join");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Join"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Join
void System::Threading::Tasks::CausalityRelation::_set_Join(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Join");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Join", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Choice
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Choice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Choice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Choice"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Choice
void System::Threading::Tasks::CausalityRelation::_set_Choice(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Choice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Choice", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Cancel
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Cancel
void System::Threading::Tasks::CausalityRelation::_set_Cancel(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Error
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Error
void System::Threading::Tasks::CausalityRelation::_set_Error(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityRelation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_Execution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_Execution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "Execution"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
void System::Threading::Tasks::CausalitySynchronousWork::_set_Execution(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_Execution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "Execution", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalitySynchronousWork::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityTracer
#include "System/Threading/Tasks/AsyncCausalityTracer.hpp"
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.get_LoggingOn
bool System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "get_LoggingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCreation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::StringW operationName, uint64_t relatedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCreation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(operationName), ::il2cpp_utils::ExtractType(relatedContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, operationName, relatedContext);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::AsyncCausalityStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, status);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationRelation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::CausalityRelation relation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationRelation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(relation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, relation);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkStart
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, work);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, work);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Created
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Created() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Created");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Created"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Created
void System::Threading::Tasks::TaskStatus::_set_Created(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Created");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Created", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForActivation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForActivation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
void System::Threading::Tasks::TaskStatus::_set_WaitingForActivation(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForActivation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForActivation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingToRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingToRun");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingToRun"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
void System::Threading::Tasks::TaskStatus::_set_WaitingToRun(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingToRun");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingToRun", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Running
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Running
void System::Threading::Tasks::TaskStatus::_set_Running(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
void System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_RanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_RanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "RanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
void System::Threading::Tasks::TaskStatus::_set_RanToCompletion(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_RanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "RanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Canceled
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Canceled
void System::Threading::Tasks::TaskStatus::_set_Canceled(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Faulted
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Faulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Faulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Faulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Faulted
void System::Threading::Tasks::TaskStatus::_set_Faulted(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Faulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Faulted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise`1
#include "System/Threading/Tasks/Task_WhenAllPromise_1.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable
#include "System/Runtime/CompilerServices/YieldAwaitable.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.OperationCanceledException
#include "System/OperationCanceledException.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.Tasks.Task t_currentTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_t_currentTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_currentTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "t_currentTask"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.Tasks.Task t_currentTask
void System::Threading::Tasks::Task::_set_t_currentTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_currentTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_currentTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::_get_t_stackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_stackGuard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "t_stackGuard"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
void System::Threading::Tasks::Task::_set_t_stackGuard(::System::Threading::Tasks::StackGuard* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_stackGuard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_stackGuard", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskIdCounter
int System::Threading::Tasks::Task::_get_s_taskIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "s_taskIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskIdCounter
void System::Threading::Tasks::Task::_set_s_taskIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::_get_s_factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_factory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "s_factory"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
void System::Threading::Tasks::Task::_set_s_factory(::System::Threading::Tasks::TaskFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_factory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_factory", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OptionsMask
int System::Threading::Tasks::Task::_get_OptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_OptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "OptionsMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OptionsMask
void System::Threading::Tasks::Task::_set_OptionsMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_OptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "OptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_STARTED
int System::Threading::Tasks::Task::_get_TASK_STATE_STARTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_STARTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_STARTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_STARTED
void System::Threading::Tasks::Task::_set_TASK_STATE_STARTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_STARTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_STARTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
int System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
void System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DISPOSED
int System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DISPOSED
void System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
int System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
void System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_FAULTED
int System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_FAULTED
void System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
int System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
void System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
int System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
void System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
int System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
void System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
int System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
void System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANCELLATION_REQUESTED
int System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANCELLATION_REQUESTED
void System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_taskCompletionSentinel
::Il2CppObject* System::Threading::Tasks::Task::_get_s_taskCompletionSentinel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCompletionSentinel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_taskCompletionSentinel"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_taskCompletionSentinel
void System::Threading::Tasks::Task::_set_s_taskCompletionSentinel(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCompletionSentinel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCompletionSentinel", value));
}
// [FriendAccessAllowedAttribute] Offset: 0x107DCB8
// Autogenerated static field getter
// Get static field: static System.Boolean s_asyncDebuggingEnabled
bool System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled"));
}
// Autogenerated static field setter
// Set static field: static System.Boolean s_asyncDebuggingEnabled
void System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_currentActiveTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_currentActiveTasks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_currentActiveTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
void System::Threading::Tasks::Task::_set_s_currentActiveTasks(::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_currentActiveTasks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_currentActiveTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::Il2CppObject* System::Threading::Tasks::Task::_get_s_activeTasksLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_activeTasksLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::Task::_set_s_activeTasksLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_activeTasksLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_activeTasksLock", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_taskCancelCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCancelCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_taskCancelCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
void System::Threading::Tasks::Task::_set_s_taskCancelCallback(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCancelCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCancelCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties> s_createContingentProperties
::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* System::Threading::Tasks::Task::_get_s_createContingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_createContingentProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>*>("System.Threading.Tasks", "Task", "s_createContingentProperties"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties> s_createContingentProperties
void System::Threading::Tasks::Task::_set_s_createContingentProperties(::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_createContingentProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_createContingentProperties", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.Task s_completedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_s_completedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_completedTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "s_completedTask"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.Task s_completedTask
void System::Threading::Tasks::Task::_set_s_completedTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_completedTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_completedTask", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
::System::Predicate_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
void System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate(::System::Predicate_1<::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_ecCallback
::System::Threading::ContextCallback* System::Threading::Tasks::Task::_get_s_ecCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_ecCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "Task", "s_ecCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_ecCallback
void System::Threading::Tasks::Task::_set_s_ecCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_ecCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_ecCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
::System::Predicate_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
void System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate(::System::Predicate_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_taskId
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_taskId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_action
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_stateObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_stateObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.TaskScheduler m_taskScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::Task::dyn_m_taskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task m_parent
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::Task::dyn_m_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parent"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_stateFlags
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_stateFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateFlags"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_continuationObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_continuationObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_continuationObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_continuationObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties m_contingentProperties
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task::ContingentProperties*& System::Threading::Tasks::Task::dyn_m_contingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_contingentProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_contingentProperties"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task::ContingentProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Options
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_Options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Options");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Options", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabledOrNotRanToCompletion
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabledOrNotRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabled
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Id
int System::Threading::Tasks::Task::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_InternalCurrent
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CurrentStackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::get_CurrentStackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CurrentStackGuard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CurrentStackGuard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::StackGuard*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Exception
::System::AggregateException* System::Threading::Tasks::Task::get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Exception");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exception", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Status
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::Task::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskStatus, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCanceled
bool System::Threading::Tasks::Task::get_IsCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationRequested
bool System::Threading::Tasks::Task::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CancellationToken
::System::Threading::CancellationToken System::Threading::Tasks::Task::get_CancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationAcknowledged
bool System::Threading::Tasks::Task::get_IsCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompleted
bool System::Threading::Tasks::Task::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsRanToCompletion
bool System::Threading::Tasks::Task::get_IsRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CreationOptions
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_CreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* System::Threading::Tasks::Task::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_AsyncState
::Il2CppObject* System::Threading::Tasks::Task::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::Task::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExecutingTaskScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::Task::get_ExecutingTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExecutingTaskScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingTaskScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Factory
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::get_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Factory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_Factory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskFactory*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_CompletedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CompletedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedEvent
::System::Threading::ManualResetEventSlim* System::Threading::Tasks::Task::get_CompletedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompletedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ManualResetEventSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsSelfReplicatingRoot
bool System::Threading::Tasks::Task::get_IsSelfReplicatingRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsSelfReplicatingRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSelfReplicatingRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsChildReplica
bool System::Threading::Tasks::Task::get_IsChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsChildReplica");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExceptionRecorded
bool System::Threading::Tasks::Task::get_ExceptionRecorded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExceptionRecorded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExceptionRecorded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsFaulted
bool System::Threading::Tasks::Task::get_IsFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsFaulted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFaulted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CapturedContext
::System::Threading::ExecutionContext* System::Threading::Tasks::Task::get_CapturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_CapturedContext
void System::Threading::Tasks::Task::set_CapturedContext(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsExceptionObservedByParent
bool System::Threading::Tasks::Task::get_IsExceptionObservedByParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsExceptionObservedByParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExceptionObservedByParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsDelegateInvoked
bool System::Threading::Tasks::Task::get_IsDelegateInvoked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsDelegateInvoked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDelegateInvoked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_SavedStateForNextReplica
::Il2CppObject* System::Threading::Tasks::Task::get_SavedStateForNextReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_SavedStateForNextReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SavedStateForNextReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_SavedStateFromPreviousReplica
void System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SavedStateFromPreviousReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.get_HandedOverChildReplica
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_HandedOverChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_HandedOverChildReplica
void System::Threading::Tasks::Task::set_HandedOverChildReplica(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task..cctor
void System::Threading::Tasks::Task::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AddToActiveTasks
bool System::Threading::Tasks::Task::AddToActiveTasks(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddToActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AddToActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveFromActiveTasks
void System::Threading::Tasks::Task::RemoveFromActiveTasks(int taskId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveFromActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "RemoveFromActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, taskId);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskConstructorCore
void System::Threading::Tasks::Task::TaskConstructorCore(::Il2CppObject* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::InternalTaskOptions internalOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskConstructorCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskConstructorCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, state, cancellationToken, creationOptions, internalOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.AssignCancellationToken
void System::Threading::Tasks::Task::AssignCancellationToken(::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::Task* antecedent, ::System::Threading::Tasks::TaskContinuation* continuation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AssignCancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignCancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(continuation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cancellationToken, antecedent, continuation);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskCancelCallback
void System::Threading::Tasks::Task::TaskCancelCallback(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskCancelCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "TaskCancelCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Tasks.Task.PossiblyCaptureContext
void System::Threading::Tasks::Task::PossiblyCaptureContext(ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::PossiblyCaptureContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PossiblyCaptureContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.OptionsMethod
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::OptionsMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::OptionsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "OptionsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits, ByRef<int> oldFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits), ::il2cpp_utils::ExtractType(oldFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits, byref(oldFlags));
}
// Autogenerated method: System.Threading.Tasks.Task.SetNotificationForWaitCompletion
void System::Threading::Tasks::Task::SetNotificationForWaitCompletion(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetNotificationForWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNotificationForWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletionIfNecessary
bool System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletionIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AnyTaskRequiresNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AnyTaskRequiresNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletion
void System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.MarkStarted
bool System::Threading::Tasks::Task::MarkStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::MarkStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FireTaskScheduledIfNeeded
bool System::Threading::Tasks::Task::FireTaskScheduledIfNeeded(::System::Threading::Tasks::TaskScheduler* ts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FireTaskScheduledIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireTaskScheduledIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ts)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ts);
}
// Autogenerated method: System.Threading.Tasks.Task.AddNewChild
void System::Threading::Tasks::Task::AddNewChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddNewChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNewChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.DisregardChild
void System::Threading::Tasks::Task::DisregardChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DisregardChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisregardChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalStartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalStartNew(::System::Threading::Tasks::Task* creatingTask, ::System::Delegate* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::Tasks::TaskCreationOptions options, ::System::Threading::Tasks::InternalTaskOptions internalOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalStartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalStartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creatingTask), ::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creatingTask, action, state, cancellationToken, scheduler, options, internalOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.NewId
int System::Threading::Tasks::Task::NewId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NewId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "NewId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCurrentIfAttached
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalCurrentIfAttached(::System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCurrentIfAttached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalCurrentIfAttached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitialized
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitializedCore
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitializedCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.IsCompletedMethod
bool System::Threading::Tasks::Task::IsCompletedMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::IsCompletedMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "IsCompletedMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.CopyExecutionContext
::System::Threading::ExecutionContext* System::Threading::Tasks::Task::CopyExecutionContext(::System::Threading::ExecutionContext* capturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CopyExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CopyExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, capturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.Tasks.Task.ScheduleAndStart
void System::Threading::Tasks::Task::ScheduleAndStart(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ScheduleAndStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScheduleAndStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptions
::System::AggregateException* System::Threading::Tasks::Task::GetExceptions(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptionDispatchInfos
::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::Task::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.GetCancellationExceptionDispatchInfo
::System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ThrowIfExceptional
void System::Threading::Tasks::Task::ThrowIfExceptional(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ThrowIfExceptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfExceptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.UpdateExceptionObservedStatus
void System::Threading::Tasks::Task::UpdateExceptionObservedStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::UpdateExceptionObservedStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateExceptionObservedStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Finish
void System::Threading::Tasks::Task::Finish(bool bUserDelegateExecuted) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bUserDelegateExecuted)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bUserDelegateExecuted);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageTwo
void System::Threading::Tasks::Task::FinishStageTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageThree
void System::Threading::Tasks::Task::FinishStageThree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageThree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageThree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ProcessChildCompletion
void System::Threading::Tasks::Task::ProcessChildCompletion(::System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ProcessChildCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessChildCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.AddExceptionsFromChildren
void System::Threading::Tasks::Task::AddExceptionsFromChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddExceptionsFromChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddExceptionsFromChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishThreadAbortedTask
void System::Threading::Tasks::Task::FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishThreadAbortedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishThreadAbortedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bTAEAddedToExceptionHolder), ::il2cpp_utils::ExtractType(delegateRan)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bTAEAddedToExceptionHolder, delegateRan);
}
// Autogenerated method: System.Threading.Tasks.Task.Execute
void System::Threading::Tasks::Task::Execute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ShouldReplicate
bool System::Threading::Tasks::Task::ShouldReplicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ShouldReplicate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldReplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.CreateReplicaTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::CreateReplicaTask(::System::Action_1<::Il2CppObject*>* taskReplicaDelegate, ::Il2CppObject* stateObject, ::System::Threading::Tasks::Task* parentTask, ::System::Threading::Tasks::TaskScheduler* taskScheduler, ::System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, ::System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CreateReplicaTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReplicaTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskReplicaDelegate), ::il2cpp_utils::ExtractType(stateObject), ::il2cpp_utils::ExtractType(parentTask), ::il2cpp_utils::ExtractType(taskScheduler), ::il2cpp_utils::ExtractType(creationOptionsForReplica), ::il2cpp_utils::ExtractType(internalOptionsForReplica)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, taskReplicaDelegate, stateObject, parentTask, taskScheduler, creationOptionsForReplica, internalOptionsForReplica);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteSelfReplicating
void System::Threading::Tasks::Task::ExecuteSelfReplicating(::System::Threading::Tasks::Task* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteSelfReplicating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecuteSelfReplicating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, root);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteEntry
bool System::Threading::Tasks::Task::ExecuteEntry(bool bPreventDoubleExecution) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bPreventDoubleExecution)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bPreventDoubleExecution);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteWithThreadLocal
void System::Threading::Tasks::Task::ExecuteWithThreadLocal(ByRef<::System::Threading::Tasks::Task*> currentTaskSlot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteWithThreadLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWithThreadLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTaskSlot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(currentTaskSlot));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecutionContextCallback
void System::Threading::Tasks::Task::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvoke
void System::Threading::Tasks::Task::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvokeWithArg
void System::Threading::Tasks::Task::InnerInvokeWithArg(::System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InnerInvokeWithArg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvokeWithArg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.HandleException
void System::Threading::Tasks::Task::HandleException(::System::Exception* unhandledException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::HandleException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unhandledException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unhandledException);
}
// Autogenerated method: System.Threading.Tasks.Task.GetAwaiter
::System::Runtime::CompilerServices::TaskAwaiter System::Threading::Tasks::Task::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::TaskAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ConfigureAwait
::System::Runtime::CompilerServices::ConfiguredTaskAwaitable System::Threading::Tasks::Task::ConfigureAwait(bool continueOnCapturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ConfigureAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ConfiguredTaskAwaitable, false>(this, ___internal__method, continueOnCapturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.SetContinuationForAwait
void System::Threading::Tasks::Task::SetContinuationForAwait(::System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetContinuationForAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContinuationForAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(continueOnCapturedContext), ::il2cpp_utils::ExtractType(flowExecutionContext), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationAction, continueOnCapturedContext, flowExecutionContext, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.Yield
::System::Runtime::CompilerServices::YieldAwaitable System::Threading::Tasks::Task::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::YieldAwaitable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
void System::Threading::Tasks::Task::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
bool System::Threading::Tasks::Task::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WrappedTryRunInline
bool System::Threading::Tasks::Task::WrappedTryRunInline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WrappedTryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrappedTryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWait
bool System::Threading::Tasks::Task::InternalWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinThenBlockingWait
bool System::Threading::Tasks::Task::SpinThenBlockingWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinThenBlockingWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinThenBlockingWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinWait
bool System::Threading::Tasks::Task::SpinWait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCancel
bool System::Threading::Tasks::Task::InternalCancel(bool bCancelNonExecutingOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bCancelNonExecutingOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bCancelNonExecutingOnly);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord), ::il2cpp_utils::ExtractType(cancellationException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord, cancellationException);
}
// Autogenerated method: System.Threading.Tasks.Task.CancellationCleanupLogic
void System::Threading::Tasks::Task::CancellationCleanupLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CancellationCleanupLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCleanupLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.SetCancellationAcknowledged
void System::Threading::Tasks::Task::SetCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishContinuations
void System::Threading::Tasks::Task::FinishContinuations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishContinuations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishContinuations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.LogFinishCompletionNotification
void System::Threading::Tasks::Task::LogFinishCompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::LogFinishCompletionNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogFinishCompletionNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, scheduler, cancellationToken, continuationOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, cancellationToken, continuationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, scheduler, cancellationToken, continuationOptions, byref(stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.CreationOptionsFromContinuationOptions
void System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions(::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::Tasks::TaskCreationOptions> creationOptions, ByRef<::System::Threading::Tasks::InternalTaskOptions> internalOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CreationOptionsFromContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::TaskCreationOptions&>(), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::InternalTaskOptions&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, continuationOptions, byref(creationOptions), byref(internalOptions));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWithCore
void System::Threading::Tasks::Task::ContinueWithCore(::System::Threading::Tasks::Task* continuationTask, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWithCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWithCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationTask), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationTask, scheduler, cancellationToken, options);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuationComplex
bool System::Threading::Tasks::Task::AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuationComplex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuationComplex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuation
bool System::Threading::Tasks::Task::AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveContinuation
void System::Threading::Tasks::Task::RemoveContinuation(::Il2CppObject* continuationObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationObject);
}
// Autogenerated method: System.Threading.Tasks.Task.FromException
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromException(::System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exception);
}
// Autogenerated method: System.Threading.Tasks.Task.FromCancellation
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCancellation(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Action* action, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(::System::TimeSpan delay, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, delay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::System::Collections::Generic::IEnumerable_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalWhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalWhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Threading.Tasks.Shared`1
#include "System/Threading/Tasks/Shared_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.ExecutionContext m_capturedContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_capturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_capturedContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capturedContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ManualResetEventSlim m_completionEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEventSlim*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completionEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEventSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskExceptionHolder*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionsHolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionsHolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exceptionsHolder"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskExceptionHolder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.CancellationToken m_cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationToken");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.Shared`1<System.Threading.CancellationTokenRegistration> m_cancellationRegistration
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Shared_1<::System::Threading::CancellationTokenRegistration>*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationRegistration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationRegistration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationRegistration"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Shared_1<::System::Threading::CancellationTokenRegistration>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_internalCancellationRequested
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::ContingentProperties::dyn_m_internalCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_internalCancellationRequested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_internalCancellationRequested"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_completionCountdown
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionCountdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completionCountdown"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<System.Threading.Tasks.Task> m_exceptionalChildren
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Threading::Tasks::Task*>*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionalChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionalChildren");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exceptionalChildren"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties.SetCompleted
void System::Threading::Tasks::Task::ContingentProperties::SetCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::SetCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties.DeregisterCancellationCallback
void System::Threading::Tasks::Task::ContingentProperties::DeregisterCancellationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::DeregisterCancellationCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeregisterCancellationCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.SetOnInvokeMres.Invoke
void System::Threading::Tasks::Task::SetOnInvokeMres::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetOnInvokeMres::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.CancellationToken Token
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::Task::DelayPromise::dyn_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Token");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Token"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.CancellationTokenRegistration Registration
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& System::Threading::Tasks::Task::DelayPromise::dyn_Registration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Registration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Registration"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenRegistration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Timer Timer
[[deprecated("Use field access instead!")]] ::System::Threading::Timer*& System::Threading::Tasks::Task::DelayPromise::dyn_Timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Timer"))->offset;
  return *reinterpret_cast<::System::Threading::Timer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.DelayPromise.Complete
void System::Threading::Tasks::Task::DelayPromise::Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::Complete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task[] m_tasks
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::Tasks::Task*>& System::Threading::Tasks::Task::WhenAllPromise::dyn_m_tasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::dyn_m_tasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tasks"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::Tasks::Task*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_count
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::WhenAllPromise::dyn_m_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::dyn_m_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise.Invoke
void System::Threading::Tasks::Task::WhenAllPromise::Invoke(::System::Threading::Tasks::Task* completedTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completedTask);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Threading.Tasks.Task root
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean replicasAreQuitting
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_replicasAreQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_replicasAreQuitting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "replicasAreQuitting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Object> taskReplicaDelegate
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_taskReplicaDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_taskReplicaDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "taskReplicaDelegate"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.Tasks.TaskCreationOptions creationOptionsForReplicas
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCreationOptions& System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_creationOptionsForReplicas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_creationOptionsForReplicas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "creationOptionsForReplicas"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskCreationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.Tasks.InternalTaskOptions internalOptionsForReplicas
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::InternalTaskOptions& System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_internalOptionsForReplicas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::dyn_internalOptionsForReplicas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internalOptionsForReplicas"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::InternalTaskOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c__DisplayClass178_0.<ExecuteSelfReplicating>b__0
void System::Threading::Tasks::Task::$$c__DisplayClass178_0::$ExecuteSelfReplicating$b__0(::Il2CppObject* $p0$) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c__DisplayClass178_0::<ExecuteSelfReplicating>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExecuteSelfReplicating>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType($p0$)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, $p0$);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.Threading.Tasks.Task/System.Threading.Tasks.ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task/System.Threading.Tasks.<>c <>9
::System::Threading::Tasks::Task::$$c* System::Threading::Tasks::Task::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task::$$c*>("System.Threading.Tasks", "Task/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task/System.Threading.Tasks.<>c <>9
void System::Threading::Tasks::Task::$$c::_set_$$9(::System::Threading::Tasks::Task::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__276_0
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::$$c::_get_$$9__276_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9__276_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task/<>c", "<>9__276_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__276_0
void System::Threading::Tasks::Task::$$c::_set_$$9__276_0(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9__276_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__276_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.TimerCallback <>9__276_1
::System::Threading::TimerCallback* System::Threading::Tasks::Task::$$c::_get_$$9__276_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9__276_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::TimerCallback*>("System.Threading.Tasks", "Task/<>c", "<>9__276_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.TimerCallback <>9__276_1
void System::Threading::Tasks::Task::$$c::_set_$$9__276_1(::System::Threading::TimerCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9__276_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__276_1", value)));
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c..cctor
void System::Threading::Tasks::Task::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c.<Delay>b__276_0
void System::Threading::Tasks::Task::$$c::$Delay$b__276_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<Delay>b__276_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__276_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c.<Delay>b__276_1
void System::Threading::Tasks::Task::$$c::$Delay$b__276_1(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<Delay>b__276_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__276_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c.<.cctor>b__295_0
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::$$c::$_cctor$b__295_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__295_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c.<.cctor>b__295_1
bool System::Threading::Tasks::Task::$$c::$_cctor$b__295_1(::System::Threading::Tasks::Task* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__295_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: System.Threading.Tasks.Task/System.Threading.Tasks.<>c.<.cctor>b__295_2
bool System::Threading::Tasks::Task::$$c::$_cctor$b__295_2(::Il2CppObject* tc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__295_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CompletionActionInvoker
#include "System/Threading/Tasks/CompletionActionInvoker.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.ITaskCompletionAction m_action
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::ITaskCompletionAction*& System::Threading::Tasks::CompletionActionInvoker::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::ITaskCompletionAction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task m_completingTask
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::CompletionActionInvoker::dyn_m_completingTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::dyn_m_completingTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completingTask"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.ExecuteWorkItem
void System::Threading::Tasks::CompletionActionInvoker::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.MarkAborted
void System::Threading::Tasks::CompletionActionInvoker::MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions None
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions None
void System::Threading::Tasks::TaskCreationOptions::_set_None(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
void System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
void System::Threading::Tasks::TaskCreationOptions::_set_LongRunning(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
void System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
void System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
void System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskCreationOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions None
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions None
void System::Threading::Tasks::InternalTaskOptions::_set_None(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
void System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions ChildReplica
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_ChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_ChildReplica");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "ChildReplica"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions ChildReplica
void System::Threading::Tasks::InternalTaskOptions::_set_ChildReplica(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_ChildReplica");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "ChildReplica", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
void System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
void System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions SelfReplicating
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_SelfReplicating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_SelfReplicating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "SelfReplicating"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions SelfReplicating
void System::Threading::Tasks::InternalTaskOptions::_set_SelfReplicating(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_SelfReplicating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "SelfReplicating", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
void System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
void System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
void System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::InternalTaskOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions None
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions None
void System::Threading::Tasks::TaskContinuationOptions::_set_None(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
void System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
void System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
void System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
void System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
void System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
void System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskContinuationOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
int System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
void System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_inliningDepth
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::StackGuard::dyn_m_inliningDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::dyn_m_inliningDepth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_inliningDepth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.TryBeginInliningScope
bool System::Threading::Tasks::StackGuard::TryBeginInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::TryBeginInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryBeginInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.EndInliningScope
void System::Threading::Tasks::StackGuard::EndInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::EndInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.CheckForSufficientStack
bool System::Threading::Tasks::StackGuard::CheckForSufficientStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::CheckForSufficientStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForSufficientStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.ITaskCompletionAction.Invoke
void System::Threading::Tasks::ITaskCompletionAction::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ITaskCompletionAction::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskCanceledException
#include "System/Threading/Tasks/TaskCanceledException.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.Task m_canceledTask
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskCanceledException::dyn_m_canceledTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCanceledException::dyn_m_canceledTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_canceledTask"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ContinuationTaskFromTask
#include "System/Threading/Tasks/ContinuationTaskFromTask.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.Task m_antecedent
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::ContinuationTaskFromTask::dyn_m_antecedent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ContinuationTaskFromTask::dyn_m_antecedent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_antecedent"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke
void System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskContinuation.Run
void System::Threading::Tasks::TaskContinuation::Run(::System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask), ::il2cpp_utils::ExtractType(bCanInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Autogenerated method: System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue
void System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue(::System::Threading::Tasks::Task* task, bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskContinuation", "InlineIfPossibleOrElseQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task, needsProtection);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StandardTaskContinuation
#include "System/Threading/Tasks/StandardTaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task m_task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::StandardTaskContinuation::dyn_m_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.TaskContinuationOptions m_options
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskContinuationOptions& System::Threading::Tasks::StandardTaskContinuation::dyn_m_options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_options");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_options"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskContinuationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskScheduler m_taskScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::StandardTaskContinuation::dyn_m_taskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_taskScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.StandardTaskContinuation.Run
void System::Threading::Tasks::StandardTaskContinuation::Run(::System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask), ::il2cpp_utils::ExtractType(bCanInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
::System::Threading::SendOrPostCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SendOrPostCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback(::System::Threading::SendOrPostCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_postActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_postActionCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.SynchronizationContext m_syncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::dyn_m_syncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::dyn_m_syncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_syncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.PostAction
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "PostAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.GetPostActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "GetPostActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ContextCallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run(::System::Threading::Tasks::Task* task, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c <>9
::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c <>9
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9(::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/System.Threading.Tasks.<>c.<.cctor>b__7_0
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::$_cctor$b__7_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::<.cctor>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskScheduler m_scheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::dyn_m_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::dyn_m_scheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_scheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.Run
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run(::System::Threading::Tasks::Task* ignored, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignored), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c <>9
::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c <>9
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9(::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__2_0
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0", value)));
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c..cctor
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/System.Threading.Tasks.<>c.<Run>b__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::$Run$b__2_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::<Run>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AwaitTaskContinuation
#include "System/Threading/Tasks/AwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/AwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_invokeActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_invokeActionCallback
void System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ExecutionContext m_capturedContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Tasks::AwaitTaskContinuation::dyn_m_capturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::dyn_m_capturedContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capturedContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly System.Action m_action
[[deprecated("Use field access instead!")]] ::System::Action*& System::Threading::Tasks::AwaitTaskContinuation::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.get_IsValidLocationForInlining
bool System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "get_IsValidLocationForInlining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.CreateTask
::System::Threading::Tasks::Task* System::Threading::Tasks::AwaitTaskContinuation::CreateTask(::System::Action_1<::Il2CppObject*>* action, ::Il2CppObject* state, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::CreateTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, action, state, scheduler);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.ExecuteWorkItemHelper
void System::Threading::Tasks::AwaitTaskContinuation::ExecuteWorkItemHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::ExecuteWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.InvokeAction
void System::Threading::Tasks::AwaitTaskContinuation::InvokeAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::InvokeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "InvokeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.GetInvokeActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "GetInvokeActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ContextCallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunCallback
void System::Threading::Tasks::AwaitTaskContinuation::RunCallback(::System::Threading::ContextCallback* callback, ::Il2CppObject* state, ByRef<::System::Threading::Tasks::Task*> currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::RunCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, state, byref(currentTask));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction(::System::Action* action, bool allowInlining, ByRef<::System::Threading::Tasks::Task*> currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "RunOrScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(allowInlining), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, allowInlining, byref(currentTask));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.UnsafeScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction(::System::Action* action, ::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "UnsafeScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, task);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.ThrowAsyncIfNecessary
void System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary(::System::Exception* exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "ThrowAsyncIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exc)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exc);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.Run
void System::Threading::Tasks::AwaitTaskContinuation::Run(::System::Threading::Tasks::Task* task, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c
#include "System/Threading/Tasks/AwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c <>9
::System::Threading::Tasks::AwaitTaskContinuation::$$c* System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AwaitTaskContinuation::$$c*>("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c <>9
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9(::System::Threading::Tasks::AwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.WaitCallback <>9__17_0
::System::Threading::WaitCallback* System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9__17_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::WaitCallback*>("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9__17_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.WaitCallback <>9__17_0
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9__17_0(::System::Threading::WaitCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9__17_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9__17_0", value)));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c..cctor
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation/System.Threading.Tasks.<>c.<ThrowAsyncIfNecessary>b__17_0
void System::Threading::Tasks::AwaitTaskContinuation::$$c::$ThrowAsyncIfNecessary$b__17_0(::Il2CppObject* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::$$c::<ThrowAsyncIfNecessary>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ThrowAsyncIfNecessary>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.EventHandler
#include "System/EventHandler.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Boolean s_failFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Boolean s_failFastOnUnobservedException
void System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean s_domainUnloadStarted
bool System::Threading::Tasks::TaskExceptionHolder::_get_s_domainUnloadStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_get_s_domainUnloadStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "TaskExceptionHolder", "s_domainUnloadStarted"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean s_domainUnloadStarted
void System::Threading::Tasks::TaskExceptionHolder::_set_s_domainUnloadStarted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_set_s_domainUnloadStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_domainUnloadStarted", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler s_adUnloadEventHandler
::System::EventHandler* System::Threading::Tasks::TaskExceptionHolder::_get_s_adUnloadEventHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_get_s_adUnloadEventHandler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::EventHandler*>("System.Threading.Tasks", "TaskExceptionHolder", "s_adUnloadEventHandler"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler s_adUnloadEventHandler
void System::Threading::Tasks::TaskExceptionHolder::_set_s_adUnloadEventHandler(::System::EventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_set_s_adUnloadEventHandler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_adUnloadEventHandler", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task m_task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_faultExceptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_faultExceptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_faultExceptions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException
[[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_cancellationException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_cancellationException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationException"))->offset;
  return *reinterpret_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_isHandled
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::TaskExceptionHolder::dyn_m_isHandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_isHandled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_isHandled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.get_ContainsFaultList
bool System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsFaultList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder..cctor
void System::Threading::Tasks::TaskExceptionHolder::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.ShouldFailFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "ShouldFailFastOnUnobservedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.EnsureADUnloadCallbackRegistered
void System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "EnsureADUnloadCallbackRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.AppDomainUnloadCallback
void System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback(::Il2CppObject* sender, ::System::EventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "AppDomainUnloadCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sender, e);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Add
void System::Threading::Tasks::TaskExceptionHolder::Add(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.SetCancellationException
void System::Threading::Tasks::TaskExceptionHolder::SetCancellationException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::SetCancellationException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.AddFaultException
void System::Threading::Tasks::TaskExceptionHolder::AddFaultException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::AddFaultException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFaultException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsUnhandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsUnhandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsHandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled(bool calledFromFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, calledFromFinalizer);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.CreateExceptionObject
::System::AggregateException* System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject(bool calledFromFinalizer, ::System::Exception* includeThisException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateExceptionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer), ::il2cpp_utils::ExtractType(includeThisException)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method, calledFromFinalizer, includeThisException);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetExceptionDispatchInfos
::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetCancellationExceptionDispatchInfo
::System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Finalize
void System::Threading::Tasks::TaskExceptionHolder::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Threading.Tasks.TaskFactory/System.Threading.Tasks.CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationToken m_defaultCancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::TaskFactory::dyn_m_defaultCancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultCancellationToken");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.TaskScheduler m_defaultScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::TaskFactory::dyn_m_defaultScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCreationOptions& System::Threading::Tasks::TaskFactory::dyn_m_defaultCreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultCreationOptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCreationOptions"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskCreationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskContinuationOptions& System::Threading::Tasks::TaskFactory::dyn_m_defaultContinuationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultContinuationOptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultContinuationOptions"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskContinuationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.GetDefaultScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskFactory::GetDefaultScheduler(::System::Threading::Tasks::Task* currTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::GetDefaultScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currTask)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method, currTask);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckCreationOptions
void System::Threading::Tasks::TaskFactory::CheckCreationOptions(::System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckCreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckCreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.StartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::TaskFactory::StartNew(::System::Action* action, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::StartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, action, cancellationToken, creationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckFromAsyncOptions
void System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions(::System::Threading::Tasks::TaskCreationOptions creationOptions, bool hasBeginMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckFromAsyncOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(hasBeginMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions, hasBeginMethod);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CommonCWAnyLogic
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::TaskFactory::CommonCWAnyLogic(::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CommonCWAnyLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CommonCWAnyLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckMultiTaskContinuationOptions
void System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions(::System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckMultiTaskContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, continuationOptions);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskFactory/System.Threading.Tasks.CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<System.Threading.Tasks.Task> _tasks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>*& System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn__tasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn__tasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tasks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_firstTaskAlreadyCompleted
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn_m_firstTaskAlreadyCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn_m_firstTaskAlreadyCompleted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_firstTaskAlreadyCompleted"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/System.Threading.Tasks.CompleteOnInvokePromise.Invoke
void System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.TaskScheduler/System.Threading.Tasks.SystemThreadingTasks_TaskSchedulerDebugView
#include "System/Threading/Tasks/TaskScheduler_SystemThreadingTasks_TaskSchedulerDebugView.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>*>("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers")));
}
// Autogenerated static field setter
// Set static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
void System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers(::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
void System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler(::System::Threading::Tasks::TaskScheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskSchedulerIdCounter
int System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskSchedulerIdCounter
void System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException(::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object _unobservedTaskExceptionLockObject
::Il2CppObject* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object _unobservedTaskExceptionLockObject
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_taskSchedulerId
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskScheduler::dyn_m_taskSchedulerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::dyn_m_taskSchedulerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskSchedulerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequiresAtomicStartTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Default
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Current
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_InternalCurrent
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Id
int System::Threading::Tasks::TaskScheduler::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler..cctor
void System::Threading::Tasks::TaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.QueueTask
void System::Threading::Tasks::TaskScheduler::QueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryExecuteTaskInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryRunInline
bool System::Threading::Tasks::TaskScheduler::TryRunInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryDequeue
bool System::Threading::Tasks::TaskScheduler::TryDequeue(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryDequeue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.InternalQueueTask
void System::Threading::Tasks::TaskScheduler::InternalQueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::InternalQueueTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalQueueTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.AddToActiveTaskSchedulers
void System::Threading::Tasks::TaskScheduler::AddToActiveTaskSchedulers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::AddToActiveTaskSchedulers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToActiveTaskSchedulers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.PublishUnobservedTaskException
void System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException(::Il2CppObject* sender, ::System::Threading::Tasks::UnobservedTaskExceptionEventArgs* ueea) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "PublishUnobservedTaskException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(ueea)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sender, ueea);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.AggregateException m_exception
[[deprecated("Use field access instead!")]] ::System::AggregateException*& System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exception"))->offset;
  return *reinterpret_cast<::System::AggregateException**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean m_observed
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_observed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_observed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_observed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerException
#include "System/Threading/Tasks/TaskSchedulerException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskToApm
#include "System/Threading/Tasks/TaskToApm.hpp"
// Including type: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult
#include "System/Threading/Tasks/TaskToApm_TaskWrapperAsyncResult.hpp"
// Including type: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.<>c__DisplayClass3_0
#include "System/Threading/Tasks/TaskToApm_--c__DisplayClass3_0.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskToApm.Begin
::System::IAsyncResult* System::Threading::Tasks::TaskToApm::Begin(::System::Threading::Tasks::Task* task, ::System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::Begin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task, callback, state);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm.End
void System::Threading::Tasks::TaskToApm::End(::System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::End");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asyncResult);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm.InvokeCallbackWhenTaskCompletes
void System::Threading::Tasks::TaskToApm::InvokeCallbackWhenTaskCompletes(::System::Threading::Tasks::Task* antecedent, ::System::AsyncCallback* callback, ::System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::InvokeCallbackWhenTaskCompletes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "InvokeCallbackWhenTaskCompletes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, antecedent, callback, asyncResult);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult
#include "System/Threading/Tasks/TaskToApm_TaskWrapperAsyncResult.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task Task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_Task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_Task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object m_state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_m_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_m_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean m_completedSynchronously
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_m_completedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_m_completedSynchronously");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completedSynchronously"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult.System.IAsyncResult.get_AsyncState
::Il2CppObject* System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_AsyncState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult.System.IAsyncResult.get_IsCompleted
bool System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.TaskWrapperAsyncResult.System.IAsyncResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.<>c__DisplayClass3_0
#include "System/Threading/Tasks/TaskToApm_--c__DisplayClass3_0.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.AsyncCallback callback
[[deprecated("Use field access instead!")]] ::System::AsyncCallback*& System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::AsyncCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IAsyncResult asyncResult
[[deprecated("Use field access instead!")]] ::System::IAsyncResult*& System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_asyncResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_asyncResult");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncResult"))->offset;
  return *reinterpret_cast<::System::IAsyncResult**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/System.Threading.Tasks.<>c__DisplayClass3_0.<InvokeCallbackWhenTaskCompletes>b__0
void System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::$InvokeCallbackWhenTaskCompletes$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::<InvokeCallbackWhenTaskCompletes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InvokeCallbackWhenTaskCompletes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ThreadPoolTaskScheduler
#include "System/Threading/Tasks/ThreadPoolTaskScheduler.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.ParameterizedThreadStart s_longRunningThreadWork
::System::Threading::ParameterizedThreadStart* System::Threading::Tasks::ThreadPoolTaskScheduler::_get_s_longRunningThreadWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::_get_s_longRunningThreadWork");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ParameterizedThreadStart*>("System.Threading.Tasks", "ThreadPoolTaskScheduler", "s_longRunningThreadWork"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.ParameterizedThreadStart s_longRunningThreadWork
void System::Threading::Tasks::ThreadPoolTaskScheduler::_set_s_longRunningThreadWork(::System::Threading::ParameterizedThreadStart* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::_set_s_longRunningThreadWork");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ThreadPoolTaskScheduler", "s_longRunningThreadWork", value));
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.LongRunningThreadWork
void System::Threading::Tasks::ThreadPoolTaskScheduler::LongRunningThreadWork(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::LongRunningThreadWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ThreadPoolTaskScheduler", "LongRunningThreadWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::ThreadPoolTaskScheduler::get_RequiresAtomicStartTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::get_RequiresAtomicStartTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequiresAtomicStartTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler..cctor
void System::Threading::Tasks::ThreadPoolTaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ThreadPoolTaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.QueueTask
void System::Threading::Tasks::ThreadPoolTaskScheduler::QueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::ThreadPoolTaskScheduler::TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryExecuteTaskInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.TryDequeue
bool System::Threading::Tasks::ThreadPoolTaskScheduler::TryDequeue(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::TryDequeue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::ThreadPoolTaskScheduler::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::NotifyWorkItemProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.SecurityCriticalAttribute
#include "System/Security/SecurityCriticalAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
