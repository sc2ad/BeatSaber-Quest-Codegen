// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLightsUpdateSystem
#include "GlobalNamespace/BloomPrePassLightsUpdateSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassLightsUpdateSystem.LateUpdate
void GlobalNamespace::BloomPrePassLightsUpdateSystem::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLightsUpdateSystem::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassNonLightPass
#include "GlobalNamespace/BloomPrePassNonLightPass.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassAfterBlurList
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassAfterBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassAfterBlurList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>*>("", "BloomPrePassNonLightPass", "_bloomPrePassAfterBlurList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassAfterBlurList
void GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassAfterBlurList(::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassAfterBlurList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass", "_bloomPrePassAfterBlurList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassBeforeBlurList
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassBeforeBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassBeforeBlurList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>*>("", "BloomPrePassNonLightPass", "_bloomPrePassBeforeBlurList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassBeforeBlurList
void GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassBeforeBlurList(::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassBeforeBlurList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass", "_bloomPrePassBeforeBlurList", value));
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassNonLightPass/ExecutionTimeType _executionTimeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType& GlobalNamespace::BloomPrePassNonLightPass::dyn__executionTimeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::dyn__executionTimeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executionTimeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassNonLightPass/ExecutionTimeType _registeredExecutionTimeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType& GlobalNamespace::BloomPrePassNonLightPass::dyn__registeredExecutionTimeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::dyn__registeredExecutionTimeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registeredExecutionTimeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassNonLightPass.get_executionTimeType
::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::get_executionTimeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::get_executionTimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_executionTimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.get_bloomPrePassAfterBlurList
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", "get_bloomPrePassAfterBlurList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.get_bloomPrePassBeforeBlurList
::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", "get_bloomPrePassBeforeBlurList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassNonLightPass*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass..cctor
void GlobalNamespace::BloomPrePassNonLightPass::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnEnable
void GlobalNamespace::BloomPrePassNonLightPass::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnDisable
void GlobalNamespace::BloomPrePassNonLightPass::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Register
void GlobalNamespace::BloomPrePassNonLightPass::Register() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Unregister
void GlobalNamespace::BloomPrePassNonLightPass::Unregister() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnValidate
void GlobalNamespace::BloomPrePassNonLightPass::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Render
void GlobalNamespace::BloomPrePassNonLightPass::Render(::UnityEngine::RenderTexture* dest, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassNonLightPass/ExecutionTimeType
#include "GlobalNamespace/BloomPrePassNonLightPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType None
::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "None"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType None
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_None(::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType BeforeBlur
::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_BeforeBlur() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_BeforeBlur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "BeforeBlur"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType BeforeBlur
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_BeforeBlur(::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_BeforeBlur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "BeforeBlur", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType AfterBlur
::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_AfterBlur() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_AfterBlur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "AfterBlur"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType AfterBlur
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_AfterBlur(::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_AfterBlur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "AfterBlur", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRenderDataSO
#include "GlobalNamespace/BloomPrePassRenderDataSO.hpp"
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly BloomPrePassRenderDataSO/Data data
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassRenderDataSO::Data*& GlobalNamespace::BloomPrePassRenderDataSO::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::dyn_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassRenderDataSO::Data**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RenderTexture bloomPrePassRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_bloomPrePassRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_bloomPrePassRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bloomPrePassRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 textureToScreenRatio
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_textureToScreenRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_textureToScreenRatio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textureToScreenRatio"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 viewMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_viewMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_viewMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "viewMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 projectionMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_projectionMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_projectionMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectionMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stereoCameraEyeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_stereoCameraEyeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_stereoCameraEyeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stereoCameraEyeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ToneMapping toneMapping
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ToneMapping& GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRenderDataSO::Data::dyn_toneMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toneMapping"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ToneMapping*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassRendererSO/PreallocationData
#include "GlobalNamespace/BloomPrePassRendererSO_PreallocationData.hpp"
// Including type: BloomPrePassRendererSO/LightsRenderingData
#include "GlobalNamespace/BloomPrePassRendererSO_LightsRenderingData.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: IBloomPrePassParams
#include "GlobalNamespace/IBloomPrePassParams.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106A14
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _vertexTransformMatrixID
int GlobalNamespace::BloomPrePassRendererSO::_get__vertexTransformMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_get__vertexTransformMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_vertexTransformMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _vertexTransformMatrixID
void GlobalNamespace::BloomPrePassRendererSO::_set__vertexTransformMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_set__vertexTransformMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_vertexTransformMatrixID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106A24
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomPrePassTextureID
int GlobalNamespace::BloomPrePassRendererSO::_get__bloomPrePassTextureID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_get__bloomPrePassTextureID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_bloomPrePassTextureID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomPrePassTextureID
void GlobalNamespace::BloomPrePassRendererSO::_set__bloomPrePassTextureID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_set__bloomPrePassTextureID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_bloomPrePassTextureID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106A34
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _stereoCameraEyeOffsetID
int GlobalNamespace::BloomPrePassRendererSO::_get__stereoCameraEyeOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_get__stereoCameraEyeOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_stereoCameraEyeOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _stereoCameraEyeOffsetID
void GlobalNamespace::BloomPrePassRendererSO::_set__stereoCameraEyeOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_set__stereoCameraEyeOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_stereoCameraEyeOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106A44
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogTextureToScreenRatioID
int GlobalNamespace::BloomPrePassRendererSO::_get__customFogTextureToScreenRatioID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_get__customFogTextureToScreenRatioID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_customFogTextureToScreenRatioID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogTextureToScreenRatioID
void GlobalNamespace::BloomPrePassRendererSO::_set__customFogTextureToScreenRatioID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::_set__customFogTextureToScreenRatioID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_customFogTextureToScreenRatioID", value));
}
// Autogenerated instance field getter
// Get instance field: private BloomFogSO _bloomFog
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogSO*& GlobalNamespace::BloomPrePassRendererSO::dyn__bloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__bloomFog");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFog"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassRendererSO/PreallocationData[] _preallocationData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassRendererSO::PreallocationData*>& GlobalNamespace::BloomPrePassRendererSO::dyn__preallocationData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__preallocationData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_preallocationData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassRendererSO::PreallocationData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,BloomPrePassRendererSO/LightsRenderingData> _lightsRenderingData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData*>*& GlobalNamespace::BloomPrePassRendererSO::dyn__lightsRenderingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__lightsRenderingData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsRenderingData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rendering.CommandBuffer _commandBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& GlobalNamespace::BloomPrePassRendererSO::dyn__commandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__commandBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_commandBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassRendererSO::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Texture2D _blackTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BloomPrePassRendererSO::dyn__blackTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__blackTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blackTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _lowestResBloomTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::BloomPrePassRendererSO::dyn__lowestResBloomTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::dyn__lowestResBloomTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lowestResBloomTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassRendererSO..cctor
void GlobalNamespace::BloomPrePassRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.OnDisable
void GlobalNamespace::BloomPrePassRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.Init
void GlobalNamespace::BloomPrePassRendererSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.Cleanup
void GlobalNamespace::BloomPrePassRendererSO::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.RenderAndSetData
void GlobalNamespace::BloomPrePassRendererSO::RenderAndSetData(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Matrix4x4 projectionMatrix, ::UnityEngine::Matrix4x4 viewMatrix, float stereoCameraEyeOffset, ::GlobalNamespace::IBloomPrePassParams* bloomPrePassParams, ::UnityEngine::RenderTexture* dest, ByRef<::UnityEngine::Vector2> textureToScreenRatio, ByRef<::GlobalNamespace::ToneMapping> toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::RenderAndSetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderAndSetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(stereoCameraEyeOffset), ::il2cpp_utils::ExtractType(bloomPrePassParams), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::ToneMapping&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cameraPos, projectionMatrix, viewMatrix, stereoCameraEyeOffset, bloomPrePassParams, dest, byref(textureToScreenRatio), byref(toneMapping));
}
// Autogenerated method: BloomPrePassRendererSO.SetDataToShaders
void GlobalNamespace::BloomPrePassRendererSO::SetDataToShaders(float stereoCameraEyeOffset, ::UnityEngine::Vector2 textureToScreenRatio, ::UnityEngine::Texture* bloomFogTexture, ::GlobalNamespace::ToneMapping toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::SetDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassRendererSO", "SetDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stereoCameraEyeOffset), ::il2cpp_utils::ExtractType(textureToScreenRatio), ::il2cpp_utils::ExtractType(bloomFogTexture), ::il2cpp_utils::ExtractType(toneMapping)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stereoCameraEyeOffset, textureToScreenRatio, bloomFogTexture, toneMapping);
}
// Autogenerated method: BloomPrePassRendererSO.SetCustomStereoCameraEyeOffset
void GlobalNamespace::BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset(float stereoCameraEyeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCustomStereoCameraEyeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stereoCameraEyeOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stereoCameraEyeOffset);
}
// Autogenerated method: BloomPrePassRendererSO.CreateBloomPrePassRenderTextureIfNeeded
::UnityEngine::RenderTexture* GlobalNamespace::BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded(::UnityEngine::RenderTexture* renderTexture, ::GlobalNamespace::IBloomPrePassParams* bloomPrePassParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBloomPrePassRenderTextureIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture), ::il2cpp_utils::ExtractType(bloomPrePassParams)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RenderTexture*, false>(this, ___internal__method, renderTexture, bloomPrePassParams);
}
// Autogenerated method: BloomPrePassRendererSO.EnableBloomFog
void GlobalNamespace::BloomPrePassRendererSO::EnableBloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::EnableBloomFog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableBloomFog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.DisableBloomFog
void GlobalNamespace::BloomPrePassRendererSO::DisableBloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::DisableBloomFog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableBloomFog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.UpdateBloomFogParams
void GlobalNamespace::BloomPrePassRendererSO::UpdateBloomFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::UpdateBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.GetCameraParams
void GlobalNamespace::BloomPrePassRendererSO::GetCameraParams(::UnityEngine::Camera* camera, ByRef<::UnityEngine::Matrix4x4> projectionMatrix, ByRef<::UnityEngine::Matrix4x4> viewMatrix, ByRef<float> stereoCameraEyeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::GetCameraParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, camera, byref(projectionMatrix), byref(viewMatrix), byref(stereoCameraEyeOffset));
}
// Autogenerated method: BloomPrePassRendererSO.RenderAllLights
void GlobalNamespace::BloomPrePassRendererSO::RenderAllLights(::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, float linesWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::RenderAllLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderAllLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(linesWidth)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, viewMatrix, projectionMatrix, linesWidth);
}
// Autogenerated method: BloomPrePassRendererSO.PrepareLightsMeshRendering
void GlobalNamespace::BloomPrePassRendererSO::PrepareLightsMeshRendering(::GlobalNamespace::BloomPrePassLightTypeSO* lightType, ::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData* data, int numberOfLights) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::PrepareLightsMeshRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareLightsMeshRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightType), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(numberOfLights)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightType, data, numberOfLights);
}
// Autogenerated method: BloomPrePassRendererSO.MatrixLerp
::UnityEngine::Matrix4x4 GlobalNamespace::BloomPrePassRendererSO::MatrixLerp(::UnityEngine::Matrix4x4 from, ::UnityEngine::Matrix4x4 to, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::MatrixLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatrixLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method, from, to, t);
}
// Autogenerated method: BloomPrePassRendererSO.OnEnable
void GlobalNamespace::BloomPrePassRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRendererSO/PreallocationData
#include "GlobalNamespace/BloomPrePassRendererSO_PreallocationData.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BloomPrePassLightTypeSO lightType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& GlobalNamespace::BloomPrePassRendererSO::PreallocationData::dyn_lightType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::PreallocationData::dyn_lightType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassLightTypeSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 preallocateCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassRendererSO::PreallocationData::dyn_preallocateCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::PreallocationData::dyn_preallocateCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "preallocateCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRendererSO/LightsRenderingData
#include "GlobalNamespace/BloomPrePassRendererSO_LightsRenderingData.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Mesh mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BloomPrePassLight/QuadData[] lightQuads
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData>& GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_lightQuads() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_lightQuads");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightQuads"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rendering.SubMeshDescriptor subMeshDescriptor
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SubMeshDescriptor& GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_subMeshDescriptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData::dyn_subMeshDescriptor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subMeshDescriptor"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::SubMeshDescriptor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBloomPrePassParams
#include "GlobalNamespace/IBloomPrePassParams.hpp"
// Including type: TextureEffectSO
#include "GlobalNamespace/TextureEffectSO.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBloomPrePassParams.get_textureEffect
::GlobalNamespace::TextureEffectSO* GlobalNamespace::IBloomPrePassParams::get_textureEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_textureEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TextureEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_textureWidth
int GlobalNamespace::IBloomPrePassParams::get_textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_textureWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_textureHeight
int GlobalNamespace::IBloomPrePassParams::get_textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_textureHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_fov
::UnityEngine::Vector2 GlobalNamespace::IBloomPrePassParams::get_fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_fov");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_linesWidth
float GlobalNamespace::IBloomPrePassParams::get_linesWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_linesWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linesWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_toneMapping
::GlobalNamespace::ToneMapping GlobalNamespace::IBloomPrePassParams::get_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBloomPrePassParams::get_toneMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toneMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ToneMapping, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMaxWidth
float GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "Parametric3SliceSpriteController", "kMaxWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxWidth
void GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "kMaxWidth", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxLength
float GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "Parametric3SliceSpriteController", "kMaxLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxLength
void GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "kMaxLength", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106ADC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::Parametric3SliceSpriteController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::Parametric3SliceSpriteController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106AEC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::Parametric3SliceSpriteController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::Parametric3SliceSpriteController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_sizeParamsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106AFC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaStartID
int GlobalNamespace::Parametric3SliceSpriteController::_get__alphaStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__alphaStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_alphaStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaStartID
void GlobalNamespace::Parametric3SliceSpriteController::_set__alphaStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__alphaStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_alphaStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106B0C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaEndID
int GlobalNamespace::Parametric3SliceSpriteController::_get__alphaEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__alphaEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_alphaEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaEndID
void GlobalNamespace::Parametric3SliceSpriteController::_set__alphaEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__alphaEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_alphaEndID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106B1C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthStartID
int GlobalNamespace::Parametric3SliceSpriteController::_get__widthStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__widthStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_widthStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthStartID
void GlobalNamespace::Parametric3SliceSpriteController::_set__widthStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__widthStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_widthStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106B2C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthEndID
int GlobalNamespace::Parametric3SliceSpriteController::_get__widthEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__widthEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_widthEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthEndID
void GlobalNamespace::Parametric3SliceSpriteController::_set__widthEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__widthEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_widthEndID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::Parametric3SliceSpriteController::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "Parametric3SliceSpriteController", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::Parametric3SliceSpriteController::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_materialPropertyBlock", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Mesh _mesh
::UnityEngine::Mesh* GlobalNamespace::Parametric3SliceSpriteController::_get__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__mesh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Mesh*>("", "Parametric3SliceSpriteController", "_mesh"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Mesh _mesh
void GlobalNamespace::Parametric3SliceSpriteController::_set__mesh(::UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__mesh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_mesh", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _instanceCount
int GlobalNamespace::Parametric3SliceSpriteController::_get__instanceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_get__instanceCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_instanceCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _instanceCount
void GlobalNamespace::Parametric3SliceSpriteController::_set__instanceCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::_set__instanceCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_instanceCount", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _widthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn__widthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn__widthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_widthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single center
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_center");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "center"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::Parametric3SliceSpriteController::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_alphaEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single widthStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_widthStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_widthStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "widthStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single widthEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Parametric3SliceSpriteController::dyn_widthEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn_widthEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "widthEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::Parametric3SliceSpriteController::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::Parametric3SliceSpriteController::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Parametric3SliceSpriteController::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Parametric3SliceSpriteController..cctor
void GlobalNamespace::Parametric3SliceSpriteController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Parametric3SliceSpriteController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Awake
void GlobalNamespace::Parametric3SliceSpriteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Start
void GlobalNamespace::Parametric3SliceSpriteController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnEnable
void GlobalNamespace::Parametric3SliceSpriteController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnDisable
void GlobalNamespace::Parametric3SliceSpriteController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnDestroy
void GlobalNamespace::Parametric3SliceSpriteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Init
void GlobalNamespace::Parametric3SliceSpriteController::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.CreateMesh
::UnityEngine::Mesh* GlobalNamespace::Parametric3SliceSpriteController::CreateMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::CreateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Refresh
void GlobalNamespace::Parametric3SliceSpriteController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Parametric3SliceSpriteController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxController
#include "GlobalNamespace/ParametricBoxController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::ParametricBoxController::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "ParametricBoxController", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::ParametricBoxController::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_materialPropertyBlock", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106BE4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106BF4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaStartID
int GlobalNamespace::ParametricBoxController::_get__alphaStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__alphaStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_alphaStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaStartID
void GlobalNamespace::ParametricBoxController::_set__alphaStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__alphaStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_alphaStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C04
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaEndID
int GlobalNamespace::ParametricBoxController::_get__alphaEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__alphaEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_alphaEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaEndID
void GlobalNamespace::ParametricBoxController::_set__alphaEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__alphaEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_alphaEndID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C14
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthStartID
int GlobalNamespace::ParametricBoxController::_get__widthStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__widthStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_widthStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthStartID
void GlobalNamespace::ParametricBoxController::_set__widthStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__widthStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_widthStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C24
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthEndID
int GlobalNamespace::ParametricBoxController::_get__widthEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_get__widthEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_widthEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthEndID
void GlobalNamespace::ParametricBoxController::_set__widthEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::_set__widthEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_widthEndID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single height
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single heightCenter
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_heightCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_heightCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightCenter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParametricBoxController::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_alphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_alphaMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_alphaStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_alphaStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alphaEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_alphaEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_alphaEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single widthStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_widthStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_widthStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "widthStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single widthEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxController::dyn_widthEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn_widthEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "widthEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::ParametricBoxController::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParametricBoxController..cctor
void GlobalNamespace::ParametricBoxController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ParametricBoxController.Awake
void GlobalNamespace::ParametricBoxController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.OnEnable
void GlobalNamespace::ParametricBoxController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.OnDisable
void GlobalNamespace::ParametricBoxController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.Refresh
void GlobalNamespace::ParametricBoxController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxFakeGlowController
#include "GlobalNamespace/ParametricBoxFakeGlowController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C54
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxFakeGlowController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFakeGlowController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxFakeGlowController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFakeGlowController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C64
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::ParametricBoxFakeGlowController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFakeGlowController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::ParametricBoxFakeGlowController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFakeGlowController", "_sizeParamsID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFakeGlowController::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single height
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFakeGlowController::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFakeGlowController::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single edgeSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFakeGlowController::dyn_edgeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_edgeSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "edgeSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single edgeSizeMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFakeGlowController::dyn_edgeSizeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_edgeSizeMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "edgeSizeMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParametricBoxFakeGlowController::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::ParametricBoxFakeGlowController::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::ParametricBoxFakeGlowController::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParametricBoxFakeGlowController.set_localPosition
void GlobalNamespace::ParametricBoxFakeGlowController::set_localPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::set_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ParametricBoxFakeGlowController..cctor
void GlobalNamespace::ParametricBoxFakeGlowController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxFakeGlowController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.Awake
void GlobalNamespace::ParametricBoxFakeGlowController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.OnEnable
void GlobalNamespace::ParametricBoxFakeGlowController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.OnDisable
void GlobalNamespace::ParametricBoxFakeGlowController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.Refresh
void GlobalNamespace::ParametricBoxFakeGlowController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFakeGlowController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxFrameController
#include "GlobalNamespace/ParametricBoxFrameController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106C94
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxFrameController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFrameController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxFrameController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFrameController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106CA4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::ParametricBoxFrameController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFrameController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::ParametricBoxFrameController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFrameController", "_sizeParamsID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFrameController::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single height
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFrameController::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFrameController::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single edgeSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParametricBoxFrameController::dyn_edgeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn_edgeSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "edgeSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ParametricBoxFrameController::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::ParametricBoxFrameController::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::ParametricBoxFrameController::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParametricBoxFrameController.set_localPosition
void GlobalNamespace::ParametricBoxFrameController::set_localPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::set_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ParametricBoxFrameController..cctor
void GlobalNamespace::ParametricBoxFrameController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxFrameController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.Awake
void GlobalNamespace::ParametricBoxFrameController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.OnEnable
void GlobalNamespace::ParametricBoxFrameController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.OnDisable
void GlobalNamespace::ParametricBoxFrameController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.Refresh
void GlobalNamespace::ParametricBoxFrameController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParametricBoxFrameController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneCameraBloomPrePass
#include "GlobalNamespace/SceneCameraBloomPrePass.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassRendererSO _bloomPrepassRenderer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassRendererSO*& GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrepassRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrepassRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrepassRenderer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassRendererSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectContainerSO*& GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrePassEffectContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrePassEffectContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassEffectContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassEffectContainerSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _bloomPrepassRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrepassRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneCameraBloomPrePass::dyn__bloomPrepassRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrepassRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ToneMapping None
::GlobalNamespace::ToneMapping GlobalNamespace::ToneMapping::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMapping::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ToneMapping>("", "ToneMapping", "None"));
}
// Autogenerated static field setter
// Set static field: static public ToneMapping None
void GlobalNamespace::ToneMapping::_set_None(::GlobalNamespace::ToneMapping value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMapping::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMapping", "None", value));
}
// Autogenerated static field getter
// Get static field: static public ToneMapping Aces
::GlobalNamespace::ToneMapping GlobalNamespace::ToneMapping::_get_Aces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMapping::_get_Aces");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ToneMapping>("", "ToneMapping", "Aces"));
}
// Autogenerated static field setter
// Set static field: static public ToneMapping Aces
void GlobalNamespace::ToneMapping::_set_Aces(::GlobalNamespace::ToneMapping value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMapping::_set_Aces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMapping", "Aces", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ToneMapping::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMapping::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ToneMappingExtensions
#include "GlobalNamespace/ToneMappingExtensions.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1106CD4
// Autogenerated static field getter
// Get static field: static private readonly System.String[] _shaderKeywordMap
::ArrayW<::StringW> GlobalNamespace::ToneMappingExtensions::_get__shaderKeywordMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMappingExtensions::_get__shaderKeywordMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "ToneMappingExtensions", "_shaderKeywordMap"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] _shaderKeywordMap
void GlobalNamespace::ToneMappingExtensions::_set__shaderKeywordMap(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMappingExtensions::_set__shaderKeywordMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMappingExtensions", "_shaderKeywordMap", value));
}
// Autogenerated method: ToneMappingExtensions..cctor
void GlobalNamespace::ToneMappingExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMappingExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ToneMappingExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ToneMappingExtensions.SetShaderKeyword
void GlobalNamespace::ToneMappingExtensions::SetShaderKeyword(::GlobalNamespace::ToneMapping toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToneMappingExtensions::SetShaderKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ToneMappingExtensions", "SetShaderKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toneMapping)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, toneMapping);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: ParametricBoxController
#include "GlobalNamespace/ParametricBoxController.hpp"
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoolSO _mainEffectPostProcessEnabled
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& GlobalNamespace::TubeBloomPrePassLight::dyn__mainEffectPostProcessEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__mainEffectPostProcessEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainEffectPostProcessEnabled"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoolSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideChildrenLength
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideChildrenLength"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _center
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__center");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_center"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::TubeBloomPrePassLight::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _colorAlphaMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__colorAlphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__colorAlphaMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorAlphaMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _bloomFogIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__bloomFogIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__bloomFogIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFogIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fakeBloomIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__fakeBloomIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__fakeBloomIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fakeBloomIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _boostToWhite
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__boostToWhite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__boostToWhite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boostToWhite"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lightWidthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__lightWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__lightWidthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightWidthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _addWidthToLength
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__addWidthToLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__addWidthToLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_addWidthToLength"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _thickenWithDistance
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__thickenWithDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__thickenWithDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thickenWithDistance"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _thickenCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::TubeBloomPrePassLight::dyn__thickenCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__thickenCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thickenCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__minDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__minDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__maxDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__maxDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minWidthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__minWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__minWidthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minWidthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxWidthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__maxWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__maxWidthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxWidthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _bakedGlowWidthScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__bakedGlowWidthScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__bakedGlowWidthScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bakedGlowWidthScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _forceUseBakedGlow
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__forceUseBakedGlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__forceUseBakedGlow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forceUseBakedGlow"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _updateAlways
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__updateAlways() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__updateAlways");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateAlways"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _limitAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__limitAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__limitAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_limitAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__maxAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__maxAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideChildrenAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideChildrenAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__startAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__startAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _endAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__endAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__endAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideChildrenWidth
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__overrideChildrenWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideChildrenWidth"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__startWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__startWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _endWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TubeBloomPrePassLight::dyn__endWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__endWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ParametricBoxController _parametricBoxController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ParametricBoxController*& GlobalNamespace::TubeBloomPrePassLight::dyn__parametricBoxController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__parametricBoxController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parametricBoxController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ParametricBoxController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Parametric3SliceSpriteController _dynamic3SliceSprite
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Parametric3SliceSpriteController*& GlobalNamespace::TubeBloomPrePassLight::dyn__dynamic3SliceSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__dynamic3SliceSprite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dynamic3SliceSprite"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Parametric3SliceSpriteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action didRefreshEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::TubeBloomPrePassLight::dyn_didRefreshEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn_didRefreshEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didRefreshEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isDirty
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLight::dyn__isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__isDirty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isDirty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TubeBloomPrePassLight::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TubeBloomPrePassLight.get_colorAlphaMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_colorAlphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_colorAlphaMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorAlphaMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_center
float GlobalNamespace::TubeBloomPrePassLight::get_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_center");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_center", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_length
float GlobalNamespace::TubeBloomPrePassLight::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_length
void GlobalNamespace::TubeBloomPrePassLight::set_length(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::set_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_width
float GlobalNamespace::TubeBloomPrePassLight::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_width
void GlobalNamespace::TubeBloomPrePassLight::set_width(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::set_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_lightWidthMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_lightWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_lightWidthMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_lightWidthMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::set_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_bloomFogIntensityMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_bloomFogIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_bloomFogIntensityMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_bloomFogIntensityMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::set_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_color
::UnityEngine::Color GlobalNamespace::TubeBloomPrePassLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_color
void GlobalNamespace::TubeBloomPrePassLight::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.add_didRefreshEvent
void GlobalNamespace::TubeBloomPrePassLight::add_didRefreshEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::add_didRefreshEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didRefreshEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.remove_didRefreshEvent
void GlobalNamespace::TubeBloomPrePassLight::remove_didRefreshEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::remove_didRefreshEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didRefreshEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.MarkDirty
void GlobalNamespace::TubeBloomPrePassLight::MarkDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::MarkDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.ClipPoints
void GlobalNamespace::TubeBloomPrePassLight::ClipPoints(ByRef<::UnityEngine::Vector4> fromPointClipPos, ByRef<::UnityEngine::Vector4> toPointClipPos, ByRef<::UnityEngine::Vector3> fromPointViewPos, ByRef<::UnityEngine::Vector3> toPointViewPos, bool fromPointInside, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::ClipPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TubeBloomPrePassLight", "ClipPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPointClipPos), ::il2cpp_utils::ExtractType(toPointClipPos), ::il2cpp_utils::ExtractType(fromPointViewPos), ::il2cpp_utils::ExtractType(toPointViewPos), ::il2cpp_utils::ExtractType(fromPointInside), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(fromPointClipPos), byref(toPointClipPos), byref(fromPointViewPos), byref(toPointViewPos), fromPointInside, t);
}
// Autogenerated method: TubeBloomPrePassLight.OnDrawGizmos
void GlobalNamespace::TubeBloomPrePassLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_isDirty
bool GlobalNamespace::TubeBloomPrePassLight::get_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::get_isDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.OnEnable
void GlobalNamespace::TubeBloomPrePassLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.DidRegisterLight
void GlobalNamespace::TubeBloomPrePassLight::DidRegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::DidRegisterLight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidRegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.Refresh
void GlobalNamespace::TubeBloomPrePassLight::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.FillMeshData
void GlobalNamespace::TubeBloomPrePassLight::FillMeshData(ByRef<int> lightNum, ::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData> lightQuads, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, float lineWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLight::FillMeshData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillMeshData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightNum), ::il2cpp_utils::ExtractType(lightQuads), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(lineWidth)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(lightNum), lightQuads, viewMatrix, projectionMatrix, lineWidth);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlueNoiseDithering
#include "GlobalNamespace/BlueNoiseDithering.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107584
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _noiseParamsID
int GlobalNamespace::BlueNoiseDithering::_get__noiseParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::_get__noiseParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlueNoiseDithering", "_noiseParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _noiseParamsID
void GlobalNamespace::BlueNoiseDithering::_set__noiseParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::_set__noiseParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlueNoiseDithering", "_noiseParamsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107594
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _globalNoiseTextureID
int GlobalNamespace::BlueNoiseDithering::_get__globalNoiseTextureID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::_get__globalNoiseTextureID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlueNoiseDithering", "_globalNoiseTextureID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _globalNoiseTextureID
void GlobalNamespace::BlueNoiseDithering::_set__globalNoiseTextureID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::_set__globalNoiseTextureID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlueNoiseDithering", "_globalNoiseTextureID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Texture2D _noiseTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BlueNoiseDithering::dyn__noiseTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::dyn__noiseTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noiseTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BlueNoiseDithering..cctor
void GlobalNamespace::BlueNoiseDithering::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BlueNoiseDithering", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BlueNoiseDithering.SetBlueNoiseShaderParams
void GlobalNamespace::BlueNoiseDithering::SetBlueNoiseShaderParams(int cameraPixelWidth, int cameraPixelHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDithering::SetBlueNoiseShaderParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBlueNoiseShaderParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPixelWidth), ::il2cpp_utils::ExtractType(cameraPixelHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cameraPixelWidth, cameraPixelHeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlueNoiseDitheringUpdater
#include "GlobalNamespace/BlueNoiseDitheringUpdater.hpp"
// Including type: BlueNoiseDithering
#include "GlobalNamespace/BlueNoiseDithering.hpp"
// Including type: RandomValueToShader
#include "GlobalNamespace/RandomValueToShader.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BlueNoiseDithering _blueNoiseDithering
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BlueNoiseDithering*& GlobalNamespace::BlueNoiseDitheringUpdater::dyn__blueNoiseDithering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDitheringUpdater::dyn__blueNoiseDithering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blueNoiseDithering"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BlueNoiseDithering**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RandomValueToShader _randomValueToShader
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomValueToShader*& GlobalNamespace::BlueNoiseDitheringUpdater::dyn__randomValueToShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDitheringUpdater::dyn__randomValueToShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomValueToShader"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RandomValueToShader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BlueNoiseDitheringUpdater.OnEnable
void GlobalNamespace::BlueNoiseDitheringUpdater::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDitheringUpdater::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlueNoiseDitheringUpdater.OnDisable
void GlobalNamespace::BlueNoiseDitheringUpdater::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDitheringUpdater::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlueNoiseDitheringUpdater.HandleCameraPreRender
void GlobalNamespace::BlueNoiseDitheringUpdater::HandleCameraPreRender(::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlueNoiseDitheringUpdater::HandleCameraPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomValueToShader
#include "GlobalNamespace/RandomValueToShader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11075C4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _randomValueID
int GlobalNamespace::RandomValueToShader::_get__randomValueID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomValueToShader::_get__randomValueID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RandomValueToShader", "_randomValueID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _randomValueID
void GlobalNamespace::RandomValueToShader::_set__randomValueID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomValueToShader::_set__randomValueID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomValueToShader", "_randomValueID", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastFrameNum
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RandomValueToShader::dyn__lastFrameNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomValueToShader::dyn__lastFrameNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomValueToShader..cctor
void GlobalNamespace::RandomValueToShader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomValueToShader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RandomValueToShader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RandomValueToShader.SetRandomValueToShaders
void GlobalNamespace::RandomValueToShader::SetRandomValueToShaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomValueToShader::SetRandomValueToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRandomValueToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxLights
int GlobalNamespace::DirectionalLight::_get_kMaxLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_get_kMaxLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DirectionalLight", "kMaxLights"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxLights
void GlobalNamespace::DirectionalLight::_set_kMaxLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_set_kMaxLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "kMaxLights", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<DirectionalLight> _lights
::System::Collections::Generic::List_1<::GlobalNamespace::DirectionalLight*>* GlobalNamespace::DirectionalLight::_get__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_get__lights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::DirectionalLight*>*>("", "DirectionalLight", "_lights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<DirectionalLight> _lights
void GlobalNamespace::DirectionalLight::_set__lights(::System::Collections::Generic::List_1<::GlobalNamespace::DirectionalLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_set__lights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "_lights", value));
}
// Autogenerated static field getter
// Get static field: static private DirectionalLight _mainLight
::GlobalNamespace::DirectionalLight* GlobalNamespace::DirectionalLight::_get__mainLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_get__mainLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DirectionalLight*>("", "DirectionalLight", "_mainLight"));
}
// Autogenerated static field setter
// Set static field: static private DirectionalLight _mainLight
void GlobalNamespace::DirectionalLight::_set__mainLight(::GlobalNamespace::DirectionalLight* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::_set__mainLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "_mainLight", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::DirectionalLight::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLight::dyn_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::dyn_intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single radius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLight::dyn_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::dyn_radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLight.get_lights
::System::Collections::Generic::List_1<::GlobalNamespace::DirectionalLight*>* GlobalNamespace::DirectionalLight::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DirectionalLight", "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::DirectionalLight*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: DirectionalLight..cctor
void GlobalNamespace::DirectionalLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DirectionalLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: DirectionalLight.OnEnable
void GlobalNamespace::DirectionalLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DirectionalLight.OnDisable
void GlobalNamespace::DirectionalLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightManager
#include "GlobalNamespace/LightManager.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11075E8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightDirectionsID
int GlobalNamespace::LightManager::_get__directionalLightDirectionsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__directionalLightDirectionsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightDirectionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightDirectionsID
void GlobalNamespace::LightManager::_set__directionalLightDirectionsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__directionalLightDirectionsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightDirectionsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11075F8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightPositionID
int GlobalNamespace::LightManager::_get__directionalLightPositionID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__directionalLightPositionID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightPositionID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightPositionID
void GlobalNamespace::LightManager::_set__directionalLightPositionID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__directionalLightPositionID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightPositionID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107608
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightRadiiID
int GlobalNamespace::LightManager::_get__directionalLightRadiiID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__directionalLightRadiiID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightRadiiID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightRadiiID
void GlobalNamespace::LightManager::_set__directionalLightRadiiID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__directionalLightRadiiID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightRadiiID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107618
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightColorsID
int GlobalNamespace::LightManager::_get__directionalLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__directionalLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightColorsID
void GlobalNamespace::LightManager::_set__directionalLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__directionalLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightColorsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107628
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightPositionsID
int GlobalNamespace::LightManager::_get__pointLightPositionsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__pointLightPositionsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightPositionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightPositionsID
void GlobalNamespace::LightManager::_set__pointLightPositionsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__pointLightPositionsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightPositionsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107638
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightColorsID
int GlobalNamespace::LightManager::_get__pointLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_get__pointLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightColorsID
void GlobalNamespace::LightManager::_set__pointLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::_set__pointLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightColorsID", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _directionalLightDirections
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LightManager::dyn__directionalLightDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__directionalLightDirections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightDirections"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _directionalLightColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LightManager::dyn__directionalLightColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__directionalLightColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _directionalLightPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LightManager::dyn__directionalLightPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__directionalLightPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single[] _directionalLightRadii
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::LightManager::dyn__directionalLightRadii() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__directionalLightRadii");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightRadii"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _pointLightPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LightManager::dyn__pointLightPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__pointLightPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointLightPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _pointLightColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LightManager::dyn__pointLightColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn__pointLightColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointLightColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastRefreshFrameNum
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightManager::dyn_lastRefreshFrameNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::dyn_lastRefreshFrameNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRefreshFrameNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightManager..cctor
void GlobalNamespace::LightManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LightManager.OnEnable
void GlobalNamespace::LightManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.OnDisable
void GlobalNamespace::LightManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.OnCameraPreRender
void GlobalNamespace::LightManager::OnCameraPreRender(::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::OnCameraPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: LightManager.OnDestroy
void GlobalNamespace::LightManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.ResetColors
void GlobalNamespace::LightManager::ResetColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightManager::ResetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PointLight
#include "GlobalNamespace/PointLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxLights
int GlobalNamespace::PointLight::_get_kMaxLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::_get_kMaxLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PointLight", "kMaxLights"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxLights
void GlobalNamespace::PointLight::_set_kMaxLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::_set_kMaxLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PointLight", "kMaxLights", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<PointLight> _lights
::System::Collections::Generic::List_1<::GlobalNamespace::PointLight*>* GlobalNamespace::PointLight::_get__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::_get__lights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::PointLight*>*>("", "PointLight", "_lights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<PointLight> _lights
void GlobalNamespace::PointLight::_set__lights(::System::Collections::Generic::List_1<::GlobalNamespace::PointLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::_set__lights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PointLight", "_lights", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::PointLight::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PointLight::dyn_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::dyn_intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PointLight.get_lights
::System::Collections::Generic::List_1<::GlobalNamespace::PointLight*>* GlobalNamespace::PointLight::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PointLight", "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::PointLight*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PointLight..cctor
void GlobalNamespace::PointLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PointLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PointLight.OnEnable
void GlobalNamespace::PointLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PointLight.OnDisable
void GlobalNamespace::PointLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GaussianSeparableBlurRendererSO
#include "GlobalNamespace/GaussianSeparableBlurRendererSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ImageEffectController
#include "GlobalNamespace/ImageEffectController.hpp"
// Including type: ImageEffectController/RenderImageCallback
#include "GlobalNamespace/ImageEffectController_RenderImageCallback.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ImageEffectController/RenderImageCallback _renderImageCallback
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ImageEffectController::RenderImageCallback*& GlobalNamespace::ImageEffectController::dyn__renderImageCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::dyn__renderImageCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderImageCallback"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ImageEffectController::RenderImageCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ImageEffectController.SetCallback
void GlobalNamespace::ImageEffectController::SetCallback(::GlobalNamespace::ImageEffectController::RenderImageCallback* renderImageCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::SetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderImageCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderImageCallback);
}
// Autogenerated method: ImageEffectController.OnRenderImage
void GlobalNamespace::ImageEffectController::OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ImageEffectController/RenderImageCallback
#include "GlobalNamespace/ImageEffectController_RenderImageCallback.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ImageEffectController/RenderImageCallback.Invoke
void GlobalNamespace::ImageEffectController::RenderImageCallback::Invoke(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::RenderImageCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated method: ImageEffectController/RenderImageCallback.BeginInvoke
::System::IAsyncResult* GlobalNamespace::ImageEffectController::RenderImageCallback::BeginInvoke(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::RenderImageCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, src, dest, callback, object);
}
// Autogenerated method: ImageEffectController/RenderImageCallback.EndInvoke
void GlobalNamespace::ImageEffectController::RenderImageCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageEffectController::RenderImageCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ReflectionProbeBakingEffect
#include "GlobalNamespace/ReflectionProbeBakingEffect.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::ReflectionProbeBakingEffect::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReflectionProbeBakingEffect::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ReflectionProbeBakingEffect.OnRenderImage
void GlobalNamespace::ReflectionProbeBakingEffect::OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReflectionProbeBakingEffect::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO
#include "GlobalNamespace/KawaseBlurRendererSO.hpp"
// Including type: KawaseBlurRendererSO/KernelSize
#include "GlobalNamespace/KawaseBlurRendererSO_KernelSize.hpp"
// Including type: KawaseBlurRendererSO/WeightsType
#include "GlobalNamespace/KawaseBlurRendererSO_WeightsType.hpp"
// Including type: KawaseBlurRendererSO/BloomKernel
#include "GlobalNamespace/KawaseBlurRendererSO_BloomKernel.hpp"
// Including type: KawaseBlurRendererSO/Pass
#include "GlobalNamespace/KawaseBlurRendererSO_Pass.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxBloomIterations
int GlobalNamespace::KawaseBlurRendererSO::_get_kMaxBloomIterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get_kMaxBloomIterations");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "kMaxBloomIterations"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxBloomIterations
void GlobalNamespace::KawaseBlurRendererSO::_set_kMaxBloomIterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set_kMaxBloomIterations");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "kMaxBloomIterations", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107688
// Autogenerated static field getter
// Get static field: static private readonly System.Single[][] kBloomIterationWeights
::ArrayW<::ArrayW<float>> GlobalNamespace::KawaseBlurRendererSO::_get_kBloomIterationWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get_kBloomIterationWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::ArrayW<float>>>("", "KawaseBlurRendererSO", "kBloomIterationWeights"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Single[][] kBloomIterationWeights
void GlobalNamespace::KawaseBlurRendererSO::_set_kBloomIterationWeights(::ArrayW<::ArrayW<float>> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set_kBloomIterationWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "kBloomIterationWeights", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107698
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _offsetID
int GlobalNamespace::KawaseBlurRendererSO::_get__offsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__offsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_offsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _offsetID
void GlobalNamespace::KawaseBlurRendererSO::_set__offsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__offsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_offsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076A8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _boostID
int GlobalNamespace::KawaseBlurRendererSO::_get__boostID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__boostID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_boostID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _boostID
void GlobalNamespace::KawaseBlurRendererSO::_set__boostID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__boostID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_boostID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076B8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _additiveAlphaID
int GlobalNamespace::KawaseBlurRendererSO::_get__additiveAlphaID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__additiveAlphaID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_additiveAlphaID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _additiveAlphaID
void GlobalNamespace::KawaseBlurRendererSO::_set__additiveAlphaID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__additiveAlphaID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_additiveAlphaID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076C8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaID
int GlobalNamespace::KawaseBlurRendererSO::_get__alphaID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__alphaID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_alphaID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaID
void GlobalNamespace::KawaseBlurRendererSO::_set__alphaID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__alphaID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_alphaID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076D8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tintColorID
int GlobalNamespace::KawaseBlurRendererSO::_get__tintColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__tintColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tintColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tintColorID
void GlobalNamespace::KawaseBlurRendererSO::_set__tintColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__tintColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tintColorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076E8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaWeightsID
int GlobalNamespace::KawaseBlurRendererSO::_get__alphaWeightsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__alphaWeightsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_alphaWeightsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaWeightsID
void GlobalNamespace::KawaseBlurRendererSO::_set__alphaWeightsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__alphaWeightsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_alphaWeightsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11076F8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tempTexture0ID
int GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture0ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture0ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tempTexture0ID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tempTexture0ID
void GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture0ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture0ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tempTexture0ID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1107708
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tempTexture1ID
int GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture1ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture1ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tempTexture1ID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tempTexture1ID
void GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture1ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture1ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tempTexture1ID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _kawaseBlurShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::KawaseBlurRendererSO::dyn__kawaseBlurShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__kawaseBlurShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_kawaseBlurShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _additiveShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::KawaseBlurRendererSO::dyn__additiveShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__additiveShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_additiveShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _tintShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::KawaseBlurRendererSO::dyn__tintShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__tintShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tintShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _kawaseBlurMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::KawaseBlurRendererSO::dyn__kawaseBlurMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__kawaseBlurMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_kawaseBlurMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _additiveMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::KawaseBlurRendererSO::dyn__additiveMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__additiveMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_additiveMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _tintMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::KawaseBlurRendererSO::dyn__tintMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__tintMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tintMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _commandBuffersMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::KawaseBlurRendererSO::dyn__commandBuffersMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__commandBuffersMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_commandBuffersMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[][] _kernels
[[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& GlobalNamespace::KawaseBlurRendererSO::dyn__kernels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__kernels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_kernels"))->offset;
  return *reinterpret_cast<::ArrayW<::ArrayW<int>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private KawaseBlurRendererSO/BloomKernel[] _bloomKernels
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::KawaseBlurRendererSO::BloomKernel*>& GlobalNamespace::KawaseBlurRendererSO::dyn__bloomKernels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__bloomKernels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomKernels"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::KawaseBlurRendererSO::BloomKernel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture[] _blurTextures
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RenderTexture*>& GlobalNamespace::KawaseBlurRendererSO::dyn__blurTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::dyn__blurTextures");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurTextures"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RenderTexture*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KawaseBlurRendererSO..cctor
void GlobalNamespace::KawaseBlurRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "KawaseBlurRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: KawaseBlurRendererSO.GetBlurKernel
::ArrayW<int> GlobalNamespace::KawaseBlurRendererSO::GetBlurKernel(::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::GetBlurKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBlurKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kernelSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int>, false>(this, ___internal__method, kernelSize);
}
// Autogenerated method: KawaseBlurRendererSO.OnDisable
void GlobalNamespace::KawaseBlurRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBlurRendererSO.Bloom
void GlobalNamespace::KawaseBlurRendererSO::Bloom(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, int iterationsStart, int iterations, float boost, float alphaWeights, ::GlobalNamespace::KawaseBlurRendererSO::WeightsType blurStartWeightsType, ::ArrayW<float> bloomIterationWeights) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Bloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(iterationsStart), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(blurStartWeightsType), ::il2cpp_utils::ExtractType(bloomIterationWeights)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, iterationsStart, iterations, boost, alphaWeights, blurStartWeightsType, bloomIterationWeights);
}
// Autogenerated method: KawaseBlurRendererSO.DoubleBlur
void GlobalNamespace::KawaseBlurRendererSO::DoubleBlur(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, ::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize0, float boost0, ::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize1, float boost1, float secondBlurAlpha, int downsample, bool gammaCorrection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::DoubleBlur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoubleBlur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernelSize0), ::il2cpp_utils::ExtractType(boost0), ::il2cpp_utils::ExtractType(kernelSize1), ::il2cpp_utils::ExtractType(boost1), ::il2cpp_utils::ExtractType(secondBlurAlpha), ::il2cpp_utils::ExtractType(downsample), ::il2cpp_utils::ExtractType(gammaCorrection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, kernelSize0, boost0, kernelSize1, boost1, secondBlurAlpha, downsample, gammaCorrection);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
::UnityEngine::Texture2D* GlobalNamespace::KawaseBlurRendererSO::Blur(::UnityEngine::Texture* src, ::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, int downsample) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(downsample)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method, src, kernelSize, downsample);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
void GlobalNamespace::KawaseBlurRendererSO::Blur(::UnityEngine::Texture* src, ::UnityEngine::RenderTexture* dest, ::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, float boost, int downsample) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(downsample)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, kernelSize, boost, downsample);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
void GlobalNamespace::KawaseBlurRendererSO::Blur(::UnityEngine::Texture* src, ::UnityEngine::RenderTexture* dest, ::ArrayW<int> kernel, float boost, int downsample, int startIdx, int length, float alphaWeights, float additiveAlpha, bool additivelyBlendToDest, bool gammaCorrection, ::GlobalNamespace::KawaseBlurRendererSO::WeightsType blurStartWeightsType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernel), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(downsample), ::il2cpp_utils::ExtractType(startIdx), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(additiveAlpha), ::il2cpp_utils::ExtractType(additivelyBlendToDest), ::il2cpp_utils::ExtractType(gammaCorrection), ::il2cpp_utils::ExtractType(blurStartWeightsType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest, kernel, boost, downsample, startIdx, length, alphaWeights, additiveAlpha, additivelyBlendToDest, gammaCorrection, blurStartWeightsType);
}
// Autogenerated method: KawaseBlurRendererSO.AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::AlphaWeights(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::AlphaWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlphaWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated method: KawaseBlurRendererSO.CreateBlurCommandBuffer
::UnityEngine::Rendering::CommandBuffer* GlobalNamespace::KawaseBlurRendererSO::CreateBlurCommandBuffer(int width, int height, ::StringW globalTextureName, ::GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, float boost) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::CreateBlurCommandBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlurCommandBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(globalTextureName), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(boost)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rendering::CommandBuffer*, false>(this, ___internal__method, width, height, globalTextureName, kernelSize, boost);
}
// Autogenerated method: KawaseBlurRendererSO.OnEnable
void GlobalNamespace::KawaseBlurRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/KernelSize
#include "GlobalNamespace/KawaseBlurRendererSO_KernelSize.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel7
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel7"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel7
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel7(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel7", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel15
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel15() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel15"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel15
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel15(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel15", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel23
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel23() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel23");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel23"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel23
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel23(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel23");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel23", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel35
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel35() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel35");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel35"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel35
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel35(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel35");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel35", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel63
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel63() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel63");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel63"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel63
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel63(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel63");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel63", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel127
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel127() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel127");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel127"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel127
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel127(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel127");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel127", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel135
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel135() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel135");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel135"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel135
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel135(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel135");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel135", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel143
::GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel143() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel143");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel143"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel143
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel143(::GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel143");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel143", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::KawaseBlurRendererSO::KernelSize::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::KernelSize::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/WeightsType
#include "GlobalNamespace/KawaseBlurRendererSO_WeightsType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType None
::GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "None"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType None
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_None(::GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType AlphaWeights
::GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "AlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaWeights(::GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "AlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType AlphaAndDepthWeights
::GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaAndDepthWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaAndDepthWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "AlphaAndDepthWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType AlphaAndDepthWeights
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaAndDepthWeights(::GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaAndDepthWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "AlphaAndDepthWeights", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::KawaseBlurRendererSO::WeightsType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::WeightsType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/BloomKernel
#include "GlobalNamespace/KawaseBlurRendererSO_BloomKernel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public KawaseBlurRendererSO/KernelSize kernelSize
[[deprecated("Use field access instead!")]] ::GlobalNamespace::KawaseBlurRendererSO::KernelSize& GlobalNamespace::KawaseBlurRendererSO::BloomKernel::dyn_kernelSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::BloomKernel::dyn_kernelSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "kernelSize"))->offset;
  return *reinterpret_cast<::GlobalNamespace::KawaseBlurRendererSO::KernelSize*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sharedPartWithNext
[[deprecated("Use field access instead!")]] int& GlobalNamespace::KawaseBlurRendererSO::BloomKernel::dyn_sharedPartWithNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::BloomKernel::dyn_sharedPartWithNext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sharedPartWithNext"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/Pass
#include "GlobalNamespace/KawaseBlurRendererSO_Pass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass AlphaWeights
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "AlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaWeights(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "AlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass Blur
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_Blur() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_Blur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "Blur"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass Blur
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_Blur(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_Blur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "Blur", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurAndAdd
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurAndAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurAndAdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurAndAdd"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurAndAdd
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurAndAdd(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurAndAdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurAndAdd", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurWithAlphaWeights
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurWithAlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurWithAlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurWithAlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurWithAlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurWithAlphaWeights(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurWithAlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurWithAlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass AlphaAndDepthWeights
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaAndDepthWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaAndDepthWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "AlphaAndDepthWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass AlphaAndDepthWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaAndDepthWeights(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaAndDepthWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "AlphaAndDepthWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurGamma
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurGamma"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurGamma
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGamma(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurGamma", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurGammaAndAdd
::GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGammaAndAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGammaAndAdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurGammaAndAdd"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurGammaAndAdd
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGammaAndAdd(::GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGammaAndAdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurGammaAndAdd", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::KawaseBlurRendererSO::Pass::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KawaseBlurRendererSO::Pass::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightGroupSO _lightGroupSO
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightGroupSO*& GlobalNamespace::LightGroup::dyn__lightGroupSO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::dyn__lightGroupSO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroupSO"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightGroupSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.GameObject> respawnEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::GameObject*>*& GlobalNamespace::LightGroup::dyn_respawnEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::dyn_respawnEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.GameObject> didRefreshContentEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::GameObject*>*& GlobalNamespace::LightGroup::dyn_didRefreshContentEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::dyn_didRefreshContentEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didRefreshContentEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightGroup.get_lightGroupSO
::GlobalNamespace::LightGroupSO* GlobalNamespace::LightGroup::get_lightGroupSO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_lightGroupSO");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightGroupSO", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightGroupSO*, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.get_numberOfElements
int GlobalNamespace::LightGroup::get_numberOfElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_numberOfElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.get_startLightId
int GlobalNamespace::LightGroup::get_startLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_startLightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startLightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.get_groupId
int GlobalNamespace::LightGroup::get_groupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_groupId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.get_sameIdElements
int GlobalNamespace::LightGroup::get_sameIdElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_sameIdElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sameIdElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.get_ignoreLightGroupEffectManager
bool GlobalNamespace::LightGroup::get_ignoreLightGroupEffectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::get_ignoreLightGroupEffectManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreLightGroupEffectManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightGroup.add_respawnEvent
void GlobalNamespace::LightGroup::add_respawnEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::add_respawnEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_respawnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightGroup.remove_respawnEvent
void GlobalNamespace::LightGroup::remove_respawnEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::remove_respawnEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_respawnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightGroup.add_didRefreshContentEvent
void GlobalNamespace::LightGroup::add_didRefreshContentEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::add_didRefreshContentEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didRefreshContentEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightGroup.remove_didRefreshContentEvent
void GlobalNamespace::LightGroup::remove_didRefreshContentEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::remove_didRefreshContentEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didRefreshContentEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightGroupEditorPrefabContext
#include "GlobalNamespace/LightGroupEditorPrefabContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<LightGroupSO> lightGroups
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LightGroupSO*>*& GlobalNamespace::LightGroupEditorPrefabContext::dyn_lightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupEditorPrefabContext::dyn_lightGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightGroups"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::LightGroupSO*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _groupName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LightGroupSO::dyn__groupName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__groupName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _groupDescription
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LightGroupSO::dyn__groupDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__groupDescription");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupDescription"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _groupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightGroupSO::dyn__groupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__groupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _startLightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightGroupSO::dyn__startLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__startLightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startLightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfElements
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightGroupSO::dyn__numberOfElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__numberOfElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfElements"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _sameIdElements
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightGroupSO::dyn__sameIdElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__sameIdElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sameIdElements"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ignoreLightGroupEffectManager
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightGroupSO::dyn__ignoreLightGroupEffectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::dyn__ignoreLightGroupEffectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ignoreLightGroupEffectManager"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightGroupSO.get_groupName
::StringW GlobalNamespace::LightGroupSO::get_groupName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_groupName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LightGroupSO.get_groupId
int GlobalNamespace::LightGroupSO::get_groupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_groupId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroupSO.get_startLightId
int GlobalNamespace::LightGroupSO::get_startLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_startLightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startLightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroupSO.get_numberOfElements
int GlobalNamespace::LightGroupSO::get_numberOfElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_numberOfElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroupSO.get_sameIdElements
int GlobalNamespace::LightGroupSO::get_sameIdElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_sameIdElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sameIdElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightGroupSO.get_ignoreLightGroupEffectManager
bool GlobalNamespace::LightGroupSO::get_ignoreLightGroupEffectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::get_ignoreLightGroupEffectManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreLightGroupEffectManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakedLightsNormalizer
#include "GlobalNamespace/BakedLightsNormalizer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxFramesWithoutUpdate
int GlobalNamespace::BakedLightsNormalizer::_get_kMaxFramesWithoutUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::_get_kMaxFramesWithoutUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightsNormalizer", "kMaxFramesWithoutUpdate"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxFramesWithoutUpdate
void GlobalNamespace::BakedLightsNormalizer::_set_kMaxFramesWithoutUpdate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::_set_kMaxFramesWithoutUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightsNormalizer", "kMaxFramesWithoutUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxTotalIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakedLightsNormalizer::dyn__maxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__maxTotalIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxTotalIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<LightConstants/BakeId,LightmapLightWithIds> _lightmapLightDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::LightConstants::BakeId, ::GlobalNamespace::LightmapLightWithIds*>*& GlobalNamespace::BakedLightsNormalizer::dyn__lightmapLightDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__lightmapLightDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapLightDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::LightConstants::BakeId, ::GlobalNamespace::LightmapLightWithIds*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::BakedLightsNormalizer::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lightmapDictInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakedLightsNormalizer::dyn__lightmapDictInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__lightmapDictInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapDictInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevMaxTotalIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakedLightsNormalizer::dyn__prevMaxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__prevMaxTotalIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevMaxTotalIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _grayscaleTotal
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakedLightsNormalizer::dyn__grayscaleTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__grayscaleTotal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_grayscaleTotal"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastCalculatedOnFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakedLightsNormalizer::dyn__lastCalculatedOnFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__lastCalculatedOnFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastCalculatedOnFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _grayscaleCalculatedOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakedLightsNormalizer::dyn__grayscaleCalculatedOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__grayscaleCalculatedOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_grayscaleCalculatedOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _newUpdates
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakedLightsNormalizer::dyn__newUpdates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::dyn__newUpdates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_newUpdates"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BakedLightsNormalizer.get_lightmapLightDict
::System::Collections::Generic::Dictionary_2<::GlobalNamespace::LightConstants::BakeId, ::GlobalNamespace::LightmapLightWithIds*>* GlobalNamespace::BakedLightsNormalizer::get_lightmapLightDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::get_lightmapLightDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapLightDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::LightConstants::BakeId, ::GlobalNamespace::LightmapLightWithIds*>*, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightsNormalizer.get_maxTotalIntensity
float GlobalNamespace::BakedLightsNormalizer::get_maxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::get_maxTotalIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxTotalIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightsNormalizer.LateUpdate
void GlobalNamespace::BakedLightsNormalizer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightsNormalizer.GetLightmapLights
void GlobalNamespace::BakedLightsNormalizer::GetLightmapLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::GetLightmapLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightmapLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightsNormalizer.UpdateGrayscaleTotal
void GlobalNamespace::BakedLightsNormalizer::UpdateGrayscaleTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::UpdateGrayscaleTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGrayscaleTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightsNormalizer.GetNormalizationMultiplier
float GlobalNamespace::BakedLightsNormalizer::GetNormalizationMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakedLightsNormalizer::GetNormalizationMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNormalizationMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId.hpp"
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId/Elements
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId_Elements.hpp"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColorsGradient _bloomPrePassBackgroundColorsGradient
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundColorsGradient*& GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::dyn__bloomPrePassBackgroundColorsGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::dyn__bloomPrePassBackgroundColorsGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassBackgroundColorsGradient"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundColorsGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColorsGradientElementWithLightId/Elements[] _elements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements*>& GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::dyn__elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::dyn__elements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradientElementWithLightId.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId/Elements
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId_Elements.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 elementNumber
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_elementNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_elementNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elementNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_minIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::dyn_minIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientTintColorWithLightId
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientTintColorWithLightId.hpp"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColorsGradient _bloomPrePassBackgroundColorsGradient
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundColorsGradient*& GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn__bloomPrePassBackgroundColorsGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn__bloomPrePassBackgroundColorsGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassBackgroundColorsGradient"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundColorsGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useGrayscale
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn__useGrayscale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn__useGrayscale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useGrayscale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single grayscaleFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn_grayscaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::dyn_grayscaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grayscaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradientTintColorWithLightId.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientTintColorWithLightIds
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientTintColorWithLightIds.hpp"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColorsGradient _bloomPrePassBackgroundColorsGradient
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundColorsGradient*& GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightIds::dyn__bloomPrePassBackgroundColorsGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightIds::dyn__bloomPrePassBackgroundColorsGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassBackgroundColorsGradient"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundColorsGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradientTintColorWithLightIds.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundColorsGradientTintColorWithLightIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundLightWithId
#include "GlobalNamespace/BloomPrePassBackgroundLightWithId.hpp"
// Including type: BloomPrePassBackgroundColor
#include "GlobalNamespace/BloomPrePassBackgroundColor.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundColor _bloomPrePassBackgroundColor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundColor*& GlobalNamespace::BloomPrePassBackgroundLightWithId::dyn__bloomPrePassBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundLightWithId::dyn__bloomPrePassBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomPrePassBackgroundColor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundColor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BloomPrePassBackgroundLightWithId.get_color
::UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundLightWithId.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundLightWithId::ColorWasSet(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassBackgroundLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorArrayLightWithIds
#include "GlobalNamespace/ColorArrayLightWithIds.hpp"
// Including type: ColorArrayLightWithIds/ColorArrayLightWithId
#include "GlobalNamespace/ColorArrayLightWithIds_ColorArrayLightWithId.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorArrayLightWithIds/ColorArrayLightWithId[] _colorArrayLightWithIds
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*>& GlobalNamespace::ColorArrayLightWithIds::dyn__colorArrayLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::dyn__colorArrayLightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorArrayLightWithIds"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::ColorArrayLightWithIds::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _colorsArrayPropertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ColorArrayLightWithIds::dyn__colorsArrayPropertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::dyn__colorsArrayPropertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorsArrayPropertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _colorsPropertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ColorArrayLightWithIds::dyn__colorsPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::dyn__colorsPropertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorsPropertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _colorsArray
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::ColorArrayLightWithIds::dyn__colorsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::dyn__colorsArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorsArray"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorArrayLightWithIds.OnDestroy
void GlobalNamespace::ColorArrayLightWithIds::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.HandleColorLightWithIdDidSetColor
void GlobalNamespace::ColorArrayLightWithIds::HandleColorLightWithIdDidSetColor(int index, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::HandleColorLightWithIdDidSetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorLightWithIdDidSetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, color);
}
// Autogenerated method: ColorArrayLightWithIds.SetColorDataToShader
void GlobalNamespace::ColorArrayLightWithIds::SetColorDataToShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::SetColorDataToShader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorDataToShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.RegisterArrayForColorChanges
void GlobalNamespace::ColorArrayLightWithIds::RegisterArrayForColorChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::RegisterArrayForColorChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterArrayForColorChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.UnregisterArrayFromColorChanges
void GlobalNamespace::ColorArrayLightWithIds::UnregisterArrayFromColorChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::UnregisterArrayFromColorChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterArrayFromColorChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.OnEnable
void GlobalNamespace::ColorArrayLightWithIds::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.ProcessNewColorData
void GlobalNamespace::ColorArrayLightWithIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorArrayLightWithIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::ColorArrayLightWithIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorArrayLightWithIds/ColorArrayLightWithId
#include "GlobalNamespace/ColorArrayLightWithIds_ColorArrayLightWithId.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::dyn__index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::dyn__index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<System.Int32,UnityEngine.Color> didSetColorEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<int, ::UnityEngine::Color>*& GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::dyn_didSetColorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::dyn_didSetColorEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didSetColorEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<int, ::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorArrayLightWithIds/ColorArrayLightWithId.add_didSetColorEvent
void GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::add_didSetColorEvent(::System::Action_2<int, ::UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::add_didSetColorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSetColorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorArrayLightWithIds/ColorArrayLightWithId.remove_didSetColorEvent
void GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::remove_didSetColorEvent(::System::Action_2<int, ::UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::remove_didSetColorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSetColorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorArrayLightWithIds/ColorArrayLightWithId.ColorWasSet
void GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::ColorWasSet(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorArrayLightWithIdsGroupEntry
#include "GlobalNamespace/ColorArrayLightWithIdsGroupEntry.hpp"
// Including type: ColorArrayLightWithIds
#include "GlobalNamespace/ColorArrayLightWithIds.hpp"
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorArrayLightWithIds _colorArrayLightWithIds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorArrayLightWithIds*& GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__colorArrayLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__colorArrayLightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorArrayLightWithIds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorArrayLightWithIds**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightGroupSO[] _lightGroups
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroupSO*>& GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__lightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__lightGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroups"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightGroupSO*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] _excludedLightIds
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__excludedLightIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIdsGroupEntry::dyn__excludedLightIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_excludedLightIds"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorArrayLightWithIdsGroupEntry.get_lightGroups
::ArrayW<::GlobalNamespace::LightGroupSO*> GlobalNamespace::ColorArrayLightWithIdsGroupEntry::get_lightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIdsGroupEntry::get_lightGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::LightGroupSO*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithId
#include "GlobalNamespace/DirectionalLightWithId.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private DirectionalLight _light
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLight*& GlobalNamespace::DirectionalLightWithId::dyn__light() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithId::dyn__light");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_light"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLightWithId::dyn__minIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithId::dyn__minIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLightWithId.ColorWasSet
void GlobalNamespace::DirectionalLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIds
#include "GlobalNamespace/DirectionalLightWithIds.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private DirectionalLight _directionalLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLight*& GlobalNamespace::DirectionalLightWithIds::dyn__directionalLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIds::dyn__directionalLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setIntensityOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DirectionalLightWithIds::dyn__setIntensityOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIds::dyn__setIntensityOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setIntensityOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::DirectionalLightWithIds::dyn__defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIds::dyn__defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLightWithIds.ColorWasSet
void GlobalNamespace::DirectionalLightWithIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIdsGroupEntry
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry.hpp"
// Including type: DirectionalLightWithIdsGroupEntry/GroupLightData
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry_GroupLightData.hpp"
// Including type: DirectionalLightWithIdsGroupEntry/LightIntensitiesWithId
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry_LightIntensitiesWithId.hpp"
// Including type: DirectionalLightWithIds
#include "GlobalNamespace/DirectionalLightWithIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private DirectionalLightWithIds _directionalLightWithIds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLightWithIds*& GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__directionalLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__directionalLightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightWithIds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLightWithIds**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLightWithIdsGroupEntry/GroupLightData[] _groupLightData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData*>& GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__groupLightData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__groupLightData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupLightData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLightWithIdsGroupEntry/LightIntensitiesWithId[] _individualLightData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId*>& GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__individualLightData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__individualLightData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_individualLightData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] _excludedLightIds
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__excludedLightIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__excludedLightIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_excludedLightIds"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLightWithIdsGroupEntry/GroupLightsWeighting _groupLightsWeighting
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting& GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__groupLightsWeighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::dyn__groupLightsWeighting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupLightsWeighting"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIdsGroupEntry/GroupLightsWeighting
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DirectionalLightWithIdsGroupEntry/GroupLightsWeighting Maximum
::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_get_Maximum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_get_Maximum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting>("", "DirectionalLightWithIdsGroupEntry/GroupLightsWeighting", "Maximum"));
}
// Autogenerated static field setter
// Set static field: static public DirectionalLightWithIdsGroupEntry/GroupLightsWeighting Maximum
void GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_set_Maximum(::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_set_Maximum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLightWithIdsGroupEntry/GroupLightsWeighting", "Maximum", value));
}
// Autogenerated static field getter
// Get static field: static public DirectionalLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_get_LinearFraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_get_LinearFraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting>("", "DirectionalLightWithIdsGroupEntry/GroupLightsWeighting", "LinearFraction"));
}
// Autogenerated static field setter
// Set static field: static public DirectionalLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
void GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_set_LinearFraction(::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::_set_LinearFraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLightWithIdsGroupEntry/GroupLightsWeighting", "LinearFraction", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightsWeighting::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIdsGroupEntry/GroupLightData
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry_GroupLightData.hpp"
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightGroupSO _lightGroup
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightGroupSO*& GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::dyn__lightGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::dyn__lightGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroup"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightGroupSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _groupIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::dyn__groupIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::dyn__groupIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLightWithIdsGroupEntry/GroupLightData.get_lightGroup
::GlobalNamespace::LightGroupSO* GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::get_lightGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::get_lightGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightGroupSO*, false>(this, ___internal__method);
}
// Autogenerated method: DirectionalLightWithIdsGroupEntry/GroupLightData.get_groupIntensity
float GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::get_groupIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::GroupLightData::get_groupIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIdsGroupEntry/LightIntensitiesWithId
#include "GlobalNamespace/DirectionalLightWithIdsGroupEntry_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__lightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLightWithIdsGroupEntry/LightIntensitiesWithId.get_lightId
int GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::get_lightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: DirectionalLightWithIdsGroupEntry/LightIntensitiesWithId.get_intensity
float GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithIdsGroupEntry::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithLightGroupIds
#include "GlobalNamespace/DirectionalLightWithLightGroupIds.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private DirectionalLight _directionalLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLight*& GlobalNamespace::DirectionalLightWithLightGroupIds::dyn__directionalLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithLightGroupIds::dyn__directionalLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DirectionalLightWithLightGroupIds.ColorWasSet
void GlobalNamespace::DirectionalLightWithLightGroupIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DirectionalLightWithLightGroupIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableRendererWithLightId
#include "GlobalNamespace/EnableRendererWithLightId.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::EnableRendererWithLightId::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRendererWithLightId::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMin
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnableRendererWithLightId::dyn__hideAlphaRangeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRendererWithLightId::dyn__hideAlphaRangeMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EnableRendererWithLightId::dyn__hideAlphaRangeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRendererWithLightId::dyn__hideAlphaRangeMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableRendererWithLightId.ColorWasSet
void GlobalNamespace::EnableRendererWithLightId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRendererWithLightId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILightWithId.get_isRegistered
bool GlobalNamespace::ILightWithId::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILightWithId::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.get_lightId
int GlobalNamespace::ILightWithId::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILightWithId::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.__SetIsRegistered
void GlobalNamespace::ILightWithId::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILightWithId::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.__SetIsUnRegistered
void GlobalNamespace::ILightWithId::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILightWithId::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.ColorWasSet
void GlobalNamespace::ILightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ILightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstancedMaterialLightWithId
#include "GlobalNamespace/InstancedMaterialLightWithId.hpp"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockColorSetter _materialPropertyBlockColorSetter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockColorSetter*& GlobalNamespace::InstancedMaterialLightWithId::dyn__materialPropertyBlockColorSetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__materialPropertyBlockColorSetter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockColorSetter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockColorSetter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InstancedMaterialLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::InstancedMaterialLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::InstancedMaterialLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hdr
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InstancedMaterialLightWithId::dyn__hdr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__hdr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hdr"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::InstancedMaterialLightWithId::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _startColorWasSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InstancedMaterialLightWithId::dyn__startColorWasSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::dyn__startColorWasSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startColorWasSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InstancedMaterialLightWithId.ColorWasSet
void GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightConstants
#include "GlobalNamespace/LightConstants.hpp"
// Including type: LightConstants/BakeId
#include "GlobalNamespace/LightConstants_BakeId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kBaseLightId
int GlobalNamespace::LightConstants::_get_kBaseLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::_get_kBaseLightId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightConstants", "kBaseLightId"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kBaseLightId
void GlobalNamespace::LightConstants::_set_kBaseLightId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::_set_kBaseLightId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants", "kBaseLightId", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightConstants/BakeId
#include "GlobalNamespace/LightConstants_BakeId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId A
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "A"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId A
void GlobalNamespace::LightConstants::BakeId::_set_A(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "A", value));
}
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId B
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "B"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId B
void GlobalNamespace::LightConstants::BakeId::_set_B(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "B", value));
}
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId C
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_C");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "C"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId C
void GlobalNamespace::LightConstants::BakeId::_set_C(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_C");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "C", value));
}
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId D
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "D"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId D
void GlobalNamespace::LightConstants::BakeId::_set_D(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "D", value));
}
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId E
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_E() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_E");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "E"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId E
void GlobalNamespace::LightConstants::BakeId::_set_E(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_E");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "E", value));
}
// Autogenerated static field getter
// Get static field: static public LightConstants/BakeId F
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightConstants::BakeId::_get_F() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_get_F");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightConstants::BakeId>("", "LightConstants/BakeId", "F"));
}
// Autogenerated static field setter
// Set static field: static public LightConstants/BakeId F
void GlobalNamespace::LightConstants::BakeId::_set_F(::GlobalNamespace::LightConstants::BakeId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::_set_F");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightConstants/BakeId", "F", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightConstants::BakeId::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightConstants::BakeId::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxLightId
int GlobalNamespace::LightWithIdManager::_get_kMaxLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::_get_kMaxLightId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightWithIdManager", "kMaxLightId"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxLightId
void GlobalNamespace::LightWithIdManager::_set_kMaxLightId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::_set_kMaxLightId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightWithIdManager", "kMaxLightId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Action didChangeSomeColorsThisFrameEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::LightWithIdManager::dyn_didChangeSomeColorsThisFrameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::dyn_didChangeSomeColorsThisFrameEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didChangeSomeColorsThisFrameEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ILightWithId>[] _lights
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::GlobalNamespace::ILightWithId*>*>& GlobalNamespace::LightWithIdManager::dyn__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::dyn__lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lights"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Collections::Generic::List_1<::GlobalNamespace::ILightWithId*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Nullable`1<UnityEngine.Color>[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Nullable_1<::UnityEngine::Color>>& GlobalNamespace::LightWithIdManager::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Nullable_1<::UnityEngine::Color>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ILightWithId> _lightsToUnregister
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ILightWithId*>*& GlobalNamespace::LightWithIdManager::dyn__lightsToUnregister() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::dyn__lightsToUnregister");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsToUnregister"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ILightWithId*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didChangeSomeColorsThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightWithIdManager::dyn__didChangeSomeColorsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::dyn__didChangeSomeColorsThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didChangeSomeColorsThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightWithIdManager.add_didChangeSomeColorsThisFrameEvent
void GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.remove_didChangeSomeColorsThisFrameEvent
void GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.LateUpdate
void GlobalNamespace::LightWithIdManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdManager.RegisterLight
void GlobalNamespace::LightWithIdManager::RegisterLight(::GlobalNamespace::ILightWithId* lightWithId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightWithId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightWithId);
}
// Autogenerated method: LightWithIdManager.UnregisterLight
void GlobalNamespace::LightWithIdManager::UnregisterLight(::GlobalNamespace::ILightWithId* lightWithId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::UnregisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightWithId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightWithId);
}
// Autogenerated method: LightWithIdManager.SetColorForId
void GlobalNamespace::LightWithIdManager::SetColorForId(int lightId, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::SetColorForId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorForId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightId, color);
}
// Autogenerated method: LightWithIdManager.GetColorForId
::UnityEngine::Color GlobalNamespace::LightWithIdManager::GetColorForId(int lightId, bool initializeIfNull) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdManager::GetColorForId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColorForId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId), ::il2cpp_utils::ExtractType(initializeIfNull)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, lightId, initializeIfNull);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIdMonoBehaviour
#include "GlobalNamespace/LightWithIdMonoBehaviour.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightWithIdMonoBehaviour::dyn__ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::dyn__ID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::LightWithIdMonoBehaviour::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isRegistered
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightWithIdMonoBehaviour::dyn__isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::dyn__isRegistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isRegistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightWithIdMonoBehaviour.get_lightId
int GlobalNamespace::LightWithIdMonoBehaviour::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.get_isRegistered
bool GlobalNamespace::LightWithIdMonoBehaviour::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.__SetIsRegistered
void GlobalNamespace::LightWithIdMonoBehaviour::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.__SetIsUnRegistered
void GlobalNamespace::LightWithIdMonoBehaviour::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.ColorWasSet
void GlobalNamespace::LightWithIdMonoBehaviour::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: LightWithIdMonoBehaviour.OnEnable
void GlobalNamespace::LightWithIdMonoBehaviour::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.Start
void GlobalNamespace::LightWithIdMonoBehaviour::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.OnDisable
void GlobalNamespace::LightWithIdMonoBehaviour::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.RegisterLight
void GlobalNamespace::LightWithIdMonoBehaviour::RegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.SetLightId
void GlobalNamespace::LightWithIdMonoBehaviour::SetLightId(int newLightId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIdMonoBehaviour::SetLightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newLightId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newLightId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::LightWithIds::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> _lightWithIds
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*& GlobalNamespace::LightWithIds::dyn__lightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::dyn__lightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightWithIds"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isRegistered
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightWithIds::dyn__isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::dyn__isRegistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isRegistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _childrenColorWasSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightWithIds::dyn__childrenColorWasSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::dyn__childrenColorWasSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_childrenColorWasSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightWithIds.get_lightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::LightWithIds::get_lightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::get_lightWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.Awake
void GlobalNamespace::LightWithIds::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.Start
void GlobalNamespace::LightWithIds::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.OnEnable
void GlobalNamespace::LightWithIds::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.MarkChildrenColorAsSet
void GlobalNamespace::LightWithIds::MarkChildrenColorAsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::MarkChildrenColorAsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkChildrenColorAsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.SetNewLightsWithIds
void GlobalNamespace::LightWithIds::SetNewLightsWithIds(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* lightsWithIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::SetNewLightsWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNewLightsWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightsWithIds)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightsWithIds);
}
// Autogenerated method: LightWithIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::LightWithIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.RegisterForColorChanges
void GlobalNamespace::LightWithIds::RegisterForColorChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::RegisterForColorChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForColorChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.UnregisterFromColorChanges
void GlobalNamespace::LightWithIds::UnregisterFromColorChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::UnregisterFromColorChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromColorChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.OnDisable
void GlobalNamespace::LightWithIds::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.HandleLightManagerDidChangeSomeColorsThisFrame
void GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.ProcessNewColorData
void GlobalNamespace::LightWithIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightWithIds::LightWithId::dyn__lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::dyn__lightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightWithIds::LightWithId::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isRegistered
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightWithIds::LightWithId::dyn__isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::dyn__isRegistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isRegistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIds _parentLightWithIds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIds*& GlobalNamespace::LightWithIds::LightWithId::dyn__parentLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::dyn__parentLightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentLightWithIds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIds**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightWithIds/LightWithId.get_lightId
int GlobalNamespace::LightWithIds::LightWithId::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightWithId.get_color
::UnityEngine::Color GlobalNamespace::LightWithIds::LightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightWithId.get_isRegistered
bool GlobalNamespace::LightWithIds::LightWithId::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightWithId.__SetIsRegistered
void GlobalNamespace::LightWithIds::LightWithId::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightWithId.__SetIsUnRegistered
void GlobalNamespace::LightWithIds::LightWithId::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightWithId.__SetParentLightWithIds
void GlobalNamespace::LightWithIds::LightWithId::__SetParentLightWithIds(::GlobalNamespace::LightWithIds* parentLightWithIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::__SetParentLightWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetParentLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentLightWithIds)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parentLightWithIds);
}
// Autogenerated method: LightWithIds/LightWithId.ColorWasSet
void GlobalNamespace::LightWithIds::LightWithId::ColorWasSet(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightWithIds::LightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
// Including type: BakedLightsNormalizer
#include "GlobalNamespace/BakedLightsNormalizer.hpp"
// Including type: LightmapLightWithIds/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightWithIds_LightIntensitiesWithId.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightConstants/BakeId _bakeId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightConstants::BakeId& GlobalNamespace::LightmapLightWithIds::dyn__bakeId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__bakeId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bakeId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightConstants::BakeId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIds::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _probeIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIds::dyn__probeIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__probeIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_probeIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIds/LightIntensitiesWithId[] _lightIntensityData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId*>& GlobalNamespace::LightmapLightWithIds::dyn__lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__lightIntensityData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIds/MixType _mixType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIds::MixType& GlobalNamespace::LightmapLightWithIds::dyn__mixType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__mixType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mixType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightmapLightWithIds::MixType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _normalizerWeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIds::dyn__normalizerWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__normalizerWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalizerWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BakedLightsNormalizer _bakedLightsNormalizer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakedLightsNormalizer*& GlobalNamespace::LightmapLightWithIds::dyn__bakedLightsNormalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__bakedLightsNormalizer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bakedLightsNormalizer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakedLightsNormalizer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightmapLightIdColorPropertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightWithIds::dyn__lightmapLightIdColorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__lightmapLightIdColorPropertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapLightIdColorPropertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightProbeLightIdColorPropertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightWithIds::dyn__lightProbeLightIdColorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__lightProbeLightIdColorPropertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightProbeLightIdColorPropertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initializedPropertyIds
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightmapLightWithIds::dyn__initializedPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__initializedPropertyIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializedPropertyIds"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initializedNormalizer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightmapLightWithIds::dyn__initializedNormalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__initializedNormalizer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializedNormalizer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isNormalizerInScene
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightmapLightWithIds::dyn__isNormalizerInScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__isNormalizerInScene");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isNormalizerInScene"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _calculatedColorPreNormalization
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightmapLightWithIds::dyn__calculatedColorPreNormalization() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::dyn__calculatedColorPreNormalization");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_calculatedColorPreNormalization"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightWithIds.get_intensity
float GlobalNamespace::LightmapLightWithIds::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.set_intensity
void GlobalNamespace::LightmapLightWithIds::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds.get_normalizerWeight
float GlobalNamespace::LightmapLightWithIds::get_normalizerWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::get_normalizerWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizerWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.set_normalizerWeight
void GlobalNamespace::LightmapLightWithIds::set_normalizerWeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::set_normalizerWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizerWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds.get_calculatedColorPreNormalization
::UnityEngine::Color GlobalNamespace::LightmapLightWithIds::get_calculatedColorPreNormalization() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::get_calculatedColorPreNormalization");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_calculatedColorPreNormalization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.get_bakeId
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightmapLightWithIds::get_bakeId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::get_bakeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightConstants::BakeId, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.SetDataToShaders
void GlobalNamespace::LightmapLightWithIds::SetDataToShaders(::UnityEngine::Color lightmapColor, ::UnityEngine::Color probeColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::SetDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightmapColor), ::il2cpp_utils::ExtractType(probeColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightmapColor, probeColor);
}
// Autogenerated method: LightmapLightWithIds.SetShaderProperties
void GlobalNamespace::LightmapLightWithIds::SetShaderProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::SetShaderProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShaderProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.GetBakedLightsNormalizer
void GlobalNamespace::LightmapLightWithIds::GetBakedLightsNormalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::GetBakedLightsNormalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBakedLightsNormalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.Awake
void GlobalNamespace::LightmapLightWithIds::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.ProcessNewColorData
void GlobalNamespace::LightmapLightWithIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::LightmapLightWithIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIds/MixType
#include "GlobalNamespace/LightmapLightWithIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LightmapLightWithIds/MixType Maximum
::GlobalNamespace::LightmapLightWithIds::MixType GlobalNamespace::LightmapLightWithIds::MixType::_get_Maximum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::MixType::_get_Maximum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightmapLightWithIds::MixType>("", "LightmapLightWithIds/MixType", "Maximum"));
}
// Autogenerated static field setter
// Set static field: static public LightmapLightWithIds/MixType Maximum
void GlobalNamespace::LightmapLightWithIds::MixType::_set_Maximum(::GlobalNamespace::LightmapLightWithIds::MixType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::MixType::_set_Maximum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightmapLightWithIds/MixType", "Maximum", value));
}
// Autogenerated static field getter
// Get static field: static public LightmapLightWithIds/MixType Sum
::GlobalNamespace::LightmapLightWithIds::MixType GlobalNamespace::LightmapLightWithIds::MixType::_get_Sum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::MixType::_get_Sum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightmapLightWithIds::MixType>("", "LightmapLightWithIds/MixType", "Sum"));
}
// Autogenerated static field setter
// Set static field: static public LightmapLightWithIds/MixType Sum
void GlobalNamespace::LightmapLightWithIds::MixType::_set_Sum(::GlobalNamespace::LightmapLightWithIds::MixType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::MixType::_set_Sum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightmapLightWithIds/MixType", "Sum", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightWithIds::MixType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::MixType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIds/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightWithIds_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _probeHighlightsIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::dyn__probeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::dyn__probeHighlightsIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_probeHighlightsIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesWithId.get_intensity
float GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesWithId.get_probeHighlightsIntensityMultiplier
float GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::get_probeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId::get_probeHighlightsIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_probeHighlightsIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIdsGroupEntry
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry.hpp"
// Including type: LightmapLightWithIdsGroupEntry/GroupLightData
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry_GroupLightData.hpp"
// Including type: LightmapLightWithIdsGroupEntry/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry_LightIntensitiesWithId.hpp"
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIds _lightmapLightWithIds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIds*& GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__lightmapLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__lightmapLightWithIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapLightWithIds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightmapLightWithIds**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIdsGroupEntry/GroupLightData[] _groupLightData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData*>& GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__groupLightData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__groupLightData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupLightData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIdsGroupEntry/LightIntensitiesWithId[] _individualLightData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId*>& GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__individualLightData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__individualLightData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_individualLightData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] _excludedLightIds
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__excludedLightIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__excludedLightIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_excludedLightIds"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightWithIdsGroupEntry/GroupLightsWeighting _groupLightsWeighting
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting& GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__groupLightsWeighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::dyn__groupLightsWeighting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupLightsWeighting"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry.get_lightmapLightWithIds
::GlobalNamespace::LightmapLightWithIds* GlobalNamespace::LightmapLightWithIdsGroupEntry::get_lightmapLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::get_lightmapLightWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightmapLightWithIds*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIdsGroupEntry/GroupLightsWeighting
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting Maximum
::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_get_Maximum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_get_Maximum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting>("", "LightmapLightWithIdsGroupEntry/GroupLightsWeighting", "Maximum"));
}
// Autogenerated static field setter
// Set static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting Maximum
void GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_set_Maximum(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_set_Maximum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightmapLightWithIdsGroupEntry/GroupLightsWeighting", "Maximum", value));
}
// Autogenerated static field getter
// Get static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_get_LinearFraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_get_LinearFraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting>("", "LightmapLightWithIdsGroupEntry/GroupLightsWeighting", "LinearFraction"));
}
// Autogenerated static field setter
// Set static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
void GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_set_LinearFraction(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::_set_LinearFraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightmapLightWithIdsGroupEntry/GroupLightsWeighting", "LinearFraction", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIdsGroupEntry/GroupLightData
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry_GroupLightData.hpp"
// Including type: LightGroupSO
#include "GlobalNamespace/LightGroupSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightGroupSO _lightGroup
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightGroupSO*& GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__lightGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__lightGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroup"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightGroupSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _groupIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__groupIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__groupIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _groupProbeHighlightsIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__groupProbeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::dyn__groupProbeHighlightsIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_groupProbeHighlightsIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/GroupLightData.get_lightGroup
::GlobalNamespace::LightGroupSO* GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_lightGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_lightGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightGroupSO*, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/GroupLightData.get_groupIntensity
float GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_groupIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_groupIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/GroupLightData.get_groupProbeHighlightsIntensityMultiplier
float GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_groupProbeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData::get_groupProbeHighlightsIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_groupProbeHighlightsIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIdsGroupEntry/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightWithIdsGroupEntry_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__lightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _probeHighlightsIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__probeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::dyn__probeHighlightsIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_probeHighlightsIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/LightIntensitiesWithId.get_lightId
int GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_lightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/LightIntensitiesWithId.get_intensity
float GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIdsGroupEntry/LightIntensitiesWithId.get_probeHighlightsIntensityMultiplier
float GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_probeHighlightsIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId::get_probeHighlightsIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_probeHighlightsIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightsWithIds
#include "GlobalNamespace/LightmapLightsWithIds.hpp"
// Including type: LightmapLightsWithIds/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightsWithIds_LightIntensitiesWithId.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _maxTotalIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightsWithIds::dyn__maxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::dyn__maxTotalIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxTotalIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightmapLightsWithIds/LightIntensitiesWithId[] _lightIntensityData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId*>& GlobalNamespace::LightmapLightsWithIds::dyn__lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::dyn__lightIntensityData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightsWithIds.get_maxTotalIntensity
float GlobalNamespace::LightmapLightsWithIds::get_maxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::get_maxTotalIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxTotalIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightsWithIds.set_maxTotalIntensity
void GlobalNamespace::LightmapLightsWithIds::set_maxTotalIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::set_maxTotalIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxTotalIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightsWithIds.ProcessNewColorData
void GlobalNamespace::LightmapLightsWithIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightsWithIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::LightmapLightsWithIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightsWithIds/LightIntensitiesWithId
#include "GlobalNamespace/LightmapLightsWithIds_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightConstants/BakeId _bakeId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightConstants::BakeId& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__bakeId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__bakeId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bakeId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightConstants::BakeId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _weight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightmapLightIdColorPropertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__lightmapLightIdColorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__lightmapLightIdColorPropertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapLightIdColorPropertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightProbeLightIdColorPropertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__lightProbeLightIdColorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__lightProbeLightIdColorPropertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightProbeLightIdColorPropertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initializedPropertyIds
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__initializedPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::dyn__initializedPropertyIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializedPropertyIds"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.get_bakeId
::GlobalNamespace::LightConstants::BakeId GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_bakeId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_bakeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightConstants::BakeId, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.get_intensity
float GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.set_intensity
void GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.get_weight
float GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::get_weight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_weight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.set_weight
void GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::set_weight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::set_weight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_weight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightsWithIds/LightIntensitiesWithId.SetDataToShaders
void GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::SetDataToShaders(::UnityEngine::Color lightmapColor, ::UnityEngine::Color probeColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightsWithIds::LightIntensitiesWithId::SetDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightmapColor), ::il2cpp_utils::ExtractType(probeColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightmapColor, probeColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialLightWithId
#include "GlobalNamespace/MaterialLightWithId.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108374
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialLightWithId::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "MaterialLightWithId", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::MaterialLightWithId::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialLightWithId", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::MaterialLightWithId::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setAlphaOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithId::dyn__setAlphaOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__setAlphaOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setAlphaOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alphaIntoColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithId::dyn__alphaIntoColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__alphaIntoColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaIntoColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _colorProperty
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialLightWithId::dyn__colorProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__colorProperty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorProperty"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alphaIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialLightWithId::dyn__alphaIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__alphaIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyColorWithAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithId::dyn__multiplyColorWithAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__multiplyColorWithAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyColorWithAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithId::dyn__multiplyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__multiplyColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _colorMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialLightWithId::dyn__colorMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__colorMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialLightWithId::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialLightWithId::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialLightWithId::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialLightWithId.get_color
::UnityEngine::Color GlobalNamespace::MaterialLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialLightWithId..cctor
void GlobalNamespace::MaterialLightWithId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialLightWithId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MaterialLightWithId.Awake
void GlobalNamespace::MaterialLightWithId::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialLightWithId.ColorWasSet
void GlobalNamespace::MaterialLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialLightWithIds
#include "GlobalNamespace/MaterialLightWithIds.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11084FC
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialLightWithIds::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("", "MaterialLightWithIds", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::MaterialLightWithIds::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialLightWithIds", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::MaterialLightWithIds::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setAlphaOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithIds::dyn__setAlphaOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__setAlphaOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setAlphaOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alphaIntoColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithIds::dyn__alphaIntoColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__alphaIntoColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaIntoColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialLightWithIds::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _colorProperty
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialLightWithIds::dyn__colorProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__colorProperty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorProperty"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialLightWithIds::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialLightWithIds::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialLightWithIds::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialLightWithIds..cctor
void GlobalNamespace::MaterialLightWithIds::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialLightWithIds", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MaterialLightWithIds.Awake
void GlobalNamespace::MaterialLightWithIds::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialLightWithIds.ColorWasSet
void GlobalNamespace::MaterialLightWithIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemLightWithId
#include "GlobalNamespace/ParticleSystemLightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ParticleSystemLightWithId::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemLightWithId::dyn_setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn_setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MainModule _mainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::ParticleSystemLightWithId::dyn__mainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__mainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.Particle[] _particles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& GlobalNamespace::ParticleSystemLightWithId::dyn__particles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::dyn__particles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::Particle>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemLightWithId.get_color
::UnityEngine::Color GlobalNamespace::ParticleSystemLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemLightWithId.Awake
void GlobalNamespace::ParticleSystemLightWithId::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemLightWithId.ColorWasSet
void GlobalNamespace::ParticleSystemLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParticleSystemLightWithIds
#include "GlobalNamespace/ParticleSystemLightWithIds.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ParticleSystemLightWithIds::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemLightWithIds::dyn__setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ParticleSystemLightWithIds::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ParticleSystemLightWithIds::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MainModule _mainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::ParticleSystemLightWithIds::dyn__mainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__mainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.Particle[] _particles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& GlobalNamespace::ParticleSystemLightWithIds::dyn__particles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::dyn__particles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::Particle>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleSystemLightWithIds.Awake
void GlobalNamespace::ParticleSystemLightWithIds::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemLightWithIds.ColorWasSet
void GlobalNamespace::ParticleSystemLightWithIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PointLightWithIds
#include "GlobalNamespace/PointLightWithIds.hpp"
// Including type: PointLight
#include "GlobalNamespace/PointLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private PointLight _pointLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PointLight*& GlobalNamespace::PointLightWithIds::dyn__pointLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLightWithIds::dyn__pointLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PointLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PointLightWithIds.ColorWasSet
void GlobalNamespace::PointLightWithIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PointLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithIds
#include "GlobalNamespace/RuntimeLightWithIds.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: RuntimeLightWithIds/LightIntensitiesWithId
#include "GlobalNamespace/RuntimeLightWithIds_LightIntensitiesWithId.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private RuntimeLightWithIds/LightIntensitiesWithId[] _lightIntensityData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId*>& GlobalNamespace::RuntimeLightWithIds::dyn__lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::dyn__lightIntensityData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithIds::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithIds::dyn__maxIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::dyn__maxIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyColorByAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RuntimeLightWithIds::dyn__multiplyColorByAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::dyn__multiplyColorByAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyColorByAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RuntimeLightWithIds/MixType _mixType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RuntimeLightWithIds::MixType& GlobalNamespace::RuntimeLightWithIds::dyn__mixType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::dyn__mixType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mixType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RuntimeLightWithIds::MixType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RuntimeLightWithIds.ColorWasSet
void GlobalNamespace::RuntimeLightWithIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: RuntimeLightWithIds.ProcessColor
::UnityEngine::Color GlobalNamespace::RuntimeLightWithIds::ProcessColor(::UnityEngine::Color color, float intensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::ProcessColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(intensity)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, color, intensity);
}
// Autogenerated method: RuntimeLightWithIds.ProcessNewColorData
void GlobalNamespace::RuntimeLightWithIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::RuntimeLightWithIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithIds/MixType
#include "GlobalNamespace/RuntimeLightWithIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RuntimeLightWithIds/MixType Maximum
::GlobalNamespace::RuntimeLightWithIds::MixType GlobalNamespace::RuntimeLightWithIds::MixType::_get_Maximum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::MixType::_get_Maximum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RuntimeLightWithIds::MixType>("", "RuntimeLightWithIds/MixType", "Maximum"));
}
// Autogenerated static field setter
// Set static field: static public RuntimeLightWithIds/MixType Maximum
void GlobalNamespace::RuntimeLightWithIds::MixType::_set_Maximum(::GlobalNamespace::RuntimeLightWithIds::MixType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::MixType::_set_Maximum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RuntimeLightWithIds/MixType", "Maximum", value));
}
// Autogenerated static field getter
// Get static field: static public RuntimeLightWithIds/MixType Sum
::GlobalNamespace::RuntimeLightWithIds::MixType GlobalNamespace::RuntimeLightWithIds::MixType::_get_Sum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::MixType::_get_Sum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RuntimeLightWithIds::MixType>("", "RuntimeLightWithIds/MixType", "Sum"));
}
// Autogenerated static field setter
// Set static field: static public RuntimeLightWithIds/MixType Sum
void GlobalNamespace::RuntimeLightWithIds::MixType::_set_Sum(::GlobalNamespace::RuntimeLightWithIds::MixType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::MixType::_set_Sum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RuntimeLightWithIds/MixType", "Sum", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RuntimeLightWithIds::MixType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::MixType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithIds/LightIntensitiesWithId
#include "GlobalNamespace/RuntimeLightWithIds_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RuntimeLightWithIds/LightIntensitiesWithId.get_intensity
float GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithIds/LightIntensitiesWithId.set_intensity
void GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithLightGroupIds
#include "GlobalNamespace/RuntimeLightWithLightGroupIds.hpp"
// Including type: RuntimeLightWithLightGroupIds/LightIntensitiesWithId
#include "GlobalNamespace/RuntimeLightWithLightGroupIds_LightIntensitiesWithId.hpp"
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LightGroup[] _lightGroupList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroup*>& GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__lightGroupList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__lightGroupList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroupList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightGroup*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__maxIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__maxIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyColorByAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__multiplyColorByAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__multiplyColorByAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyColorByAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RuntimeLightWithLightGroupIds/LightIntensitiesWithId[] _lightIntensityData
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*>& GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::dyn__lightIntensityData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityData"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RuntimeLightWithLightGroupIds.ColorWasSet
void GlobalNamespace::RuntimeLightWithLightGroupIds::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: RuntimeLightWithLightGroupIds.ProcessColor
::UnityEngine::Color GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessColor(::UnityEngine::Color color, float intensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(intensity)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, color, intensity);
}
// Autogenerated method: RuntimeLightWithLightGroupIds.Awake
void GlobalNamespace::RuntimeLightWithLightGroupIds::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithLightGroupIds.ProcessNewColorData
void GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessNewColorData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessNewColorData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNewColorData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithLightGroupIds.GetLightWithIds
::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GlobalNamespace::RuntimeLightWithLightGroupIds::GetLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::GetLightWithIds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithLightGroupIds/LightIntensitiesWithId
#include "GlobalNamespace/RuntimeLightWithLightGroupIds_LightIntensitiesWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RuntimeLightWithLightGroupIds/LightIntensitiesWithId.get_intensity
float GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithLightGroupIds/LightIntensitiesWithId.set_intensity
void GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetChildrenLightId
#include "GlobalNamespace/SetChildrenLightId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SetChildrenLightId::dyn__ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetChildrenLightId::dyn__ID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteLightWithId
#include "GlobalNamespace/SpriteLightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::SpriteLightWithId::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hideIfAlphaOutOfRange
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__hideIfAlphaOutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideIfAlphaOutOfRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideIfAlphaOutOfRange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMin
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hideAlphaRangeMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__hideAlphaRangeMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hideAlphaRangeMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpriteLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SpriteLightWithId/MultiplyColorByAlphaType _multiplyColorByAlpha
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType& GlobalNamespace::SpriteLightWithId::dyn__multiplyColorByAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__multiplyColorByAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyColorByAlpha"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setAlphaOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__setAlphaOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__setAlphaOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setAlphaOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpriteLightWithId::dyn__setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::dyn__setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpriteLightWithId.get_color
::UnityEngine::Color GlobalNamespace::SpriteLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SpriteLightWithId.ColorWasSet
void GlobalNamespace::SpriteLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteLightWithId/MultiplyColorByAlphaType
#include "GlobalNamespace/SpriteLightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SpriteLightWithId/MultiplyColorByAlphaType None
::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType>("", "SpriteLightWithId/MultiplyColorByAlphaType", "None"));
}
// Autogenerated static field setter
// Set static field: static public SpriteLightWithId/MultiplyColorByAlphaType None
void GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_None(::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpriteLightWithId/MultiplyColorByAlphaType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public SpriteLightWithId/MultiplyColorByAlphaType BeforeApplyingMinAlpha
::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_BeforeApplyingMinAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_BeforeApplyingMinAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType>("", "SpriteLightWithId/MultiplyColorByAlphaType", "BeforeApplyingMinAlpha"));
}
// Autogenerated static field setter
// Set static field: static public SpriteLightWithId/MultiplyColorByAlphaType BeforeApplyingMinAlpha
void GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_BeforeApplyingMinAlpha(::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_BeforeApplyingMinAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpriteLightWithId/MultiplyColorByAlphaType", "BeforeApplyingMinAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public SpriteLightWithId/MultiplyColorByAlphaType AfterApplyingMinAlpha
::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_AfterApplyingMinAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_get_AfterApplyingMinAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType>("", "SpriteLightWithId/MultiplyColorByAlphaType", "AfterApplyingMinAlpha"));
}
// Autogenerated static field setter
// Set static field: static public SpriteLightWithId/MultiplyColorByAlphaType AfterApplyingMinAlpha
void GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_AfterApplyingMinAlpha(::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::_set_AfterApplyingMinAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpriteLightWithId/MultiplyColorByAlphaType", "AfterApplyingMinAlpha", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::MultiplyColorByAlphaType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TubeBloomPrePassLightWithId
#include "GlobalNamespace/TubeBloomPrePassLightWithId.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _tubeBloomPrePassLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__tubeBloomPrePassLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__tubeBloomPrePassLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tubeBloomPrePassLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setOnlyOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColorOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setColorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::dyn__setColorOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColorOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TubeBloomPrePassLightWithId.get_color
::UnityEngine::Color GlobalNamespace::TubeBloomPrePassLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLightWithId.ColorWasSet
void GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityLightWithId
#include "GlobalNamespace/UnityLightWithId.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Light _light
[[deprecated("Use field access instead!")]] ::UnityEngine::Light*& GlobalNamespace::UnityLightWithId::dyn__light() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__light");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_light"))->offset;
  return *reinterpret_cast<::UnityEngine::Light**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UnityLightWithId::dyn__intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UnityLightWithId::dyn__minAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::dyn__minAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityLightWithId.get_color
::UnityEngine::Color GlobalNamespace::UnityLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: UnityLightWithId.ColorWasSet
void GlobalNamespace::UnityLightWithId::ColorWasSet(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineLight
#include "GlobalNamespace/LineLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::_get__lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::_get__lineLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>*>("", "LineLight", "_lineLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
void GlobalNamespace::LineLight::_set__lineLights(::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::_set__lineLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLight", "_lineLights", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _p0
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LineLight::dyn__p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__p0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p0"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _p1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LineLight::dyn__p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__p1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LineLight::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LineLight.get_p0
::UnityEngine::Vector3 GlobalNamespace::LineLight::get_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_p0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_p1
::UnityEngine::Vector3 GlobalNamespace::LineLight::get_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_p1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_color
::UnityEngine::Color GlobalNamespace::LineLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_lineLights
::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::get_lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::get_lineLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", "get_lineLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::LineLight*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLight..cctor
void GlobalNamespace::LineLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLight.OnEnable
void GlobalNamespace::LineLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDisable
void GlobalNamespace::LineLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDrawGizmos
void GlobalNamespace::LineLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLight::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineLightManager
#include "GlobalNamespace/LineLightManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfLights
int GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "kMaxNumberOfLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfLights
void GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "kMaxNumberOfLights", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108C30
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _activeLineLightsCountID
int GlobalNamespace::LineLightManager::_get__activeLineLightsCountID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__activeLineLightsCountID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_activeLineLightsCountID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _activeLineLightsCountID
void GlobalNamespace::LineLightManager::_set__activeLineLightsCountID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__activeLineLightsCountID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_activeLineLightsCountID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108C40
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightPointsID
int GlobalNamespace::LineLightManager::_get__lineLightPointsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightPointsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightPointsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightPointsID
void GlobalNamespace::LineLightManager::_set__lineLightPointsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightPointsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightPointsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108C50
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirsID
int GlobalNamespace::LineLightManager::_get__lineLightDirsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightDirsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirsID
void GlobalNamespace::LineLightManager::_set__lineLightDirsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightDirsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108C60
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirLengthsID
int GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirLengthsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirLengthsID
void GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirLengthsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1108C70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightColorsID
int GlobalNamespace::LineLightManager::_get__lineLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_get__lineLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightColorsID
void GlobalNamespace::LineLightManager::_set__lineLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::_set__lineLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightColorsID", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _points
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_points"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _dirs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__dirs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__dirs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dirs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single[] _dirLengths
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::LineLightManager::dyn__dirLengths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__dirLengths");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dirLengths"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::LineLightManager::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LineLightManager..cctor
void GlobalNamespace::LineLightManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLightManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLightManager.Update
void GlobalNamespace::LineLightManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineLightManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockAnimator
#include "GlobalNamespace/MaterialPropertyBlockAnimator.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _property
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_property"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockAnimator::dyn_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn_propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockAnimator::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockAnimator.get_materialPropertyBlockController
::GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController(::GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Awake
void GlobalNamespace::MaterialPropertyBlockAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Update
void GlobalNamespace::MaterialPropertyBlockAnimator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.LazyInit
void GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.RefreshProperty
void GlobalNamespace::MaterialPropertyBlockAnimator::RefreshProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockAnimator::RefreshProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockColorAnimator
#include "GlobalNamespace/MaterialPropertyBlockColorAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialPropertyBlockColorAnimator::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.get_color
::UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.set_color
void GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useTestColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__useTestColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__useTestColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useTestColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _testColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__testColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__testColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_testColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _property
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_property"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _inverseAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__inverseAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__inverseAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _multiplyWithAlpha
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__multiplyWithAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__multiplyWithAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyWithAlpha"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.get_color
::UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorSetter::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.get_materialPropertyBlockController
::GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController(::GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.Awake
void GlobalNamespace::MaterialPropertyBlockColorSetter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.InitIfNeeded
void GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.SetColor
void GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.OnValidate
void GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] _renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::MaterialPropertyBlockController::dyn__renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::MaterialPropertyBlockController::dyn__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__materialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> _numberOfMaterialsInRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::MaterialPropertyBlockController::dyn__numberOfMaterialsInRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__numberOfMaterialsInRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfMaterialsInRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialPropertyBlockController::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockController.get_renderers
::ArrayW<::UnityEngine::Renderer*> GlobalNamespace::MaterialPropertyBlockController::get_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::get_renderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Renderer*>, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.get_materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::MaterialPropertyBlock*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.ApplyChanges
void GlobalNamespace::MaterialPropertyBlockController::ApplyChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockController::ApplyChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockFloatAnimator
#include "GlobalNamespace/MaterialPropertyBlockFloatAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _value
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatAnimator::dyn__value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatAnimator::dyn__value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockFloatAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockFloatCurve
#include "GlobalNamespace/MaterialPropertyBlockFloatCurve.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _curve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _valueMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__valueMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__valueMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valueMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__speedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::dyn__speedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockFloatCurve.SetProperty
void GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockPositionUpdater
#include "GlobalNamespace/MaterialPropertyBlockPositionUpdater.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MaterialPropertyBlockPositionUpdater::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockPositionUpdater::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockPositionUpdater.SetProperty
void GlobalNamespace::MaterialPropertyBlockPositionUpdater::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockPositionUpdater::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockRandomValueSetter
#include "GlobalNamespace/MaterialPropertyBlockRandomValueSetter.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] _renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__minValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__maxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock[] _materialPropertyBlocks
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MaterialPropertyBlock*>& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__materialPropertyBlocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__materialPropertyBlocks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlocks"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MaterialPropertyBlock*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _propertyId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::dyn__propertyId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.Start
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.OnValidate
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.RefreshPropertyId
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::RefreshPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::RefreshPropertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockRandomValueSetter.ApplyParams
void GlobalNamespace::MaterialPropertyBlockRandomValueSetter::ApplyParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockRandomValueSetter::ApplyParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockVectorAnimator
#include "GlobalNamespace/MaterialPropertyBlockVectorAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 _vector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::MaterialPropertyBlockVectorAnimator::dyn__vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockVectorAnimator::dyn__vector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyBlockVectorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter
#include "GlobalNamespace/MaterialPropertyValuesSetter.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameColorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameColorValuePair.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MaterialPropertyValuesSetter::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameFloatValuePair[] _floats
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__floats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__floats");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floats"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameVectorValuePair[] _vectors
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__vectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__vectors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vectors"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameColorValuePair[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyValuesSetter/PropertyNameIntValuePair[] _ints
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>& GlobalNamespace::MaterialPropertyValuesSetter::dyn__ints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::dyn__ints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ints"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyValuesSetter.Start
void GlobalNamespace::MaterialPropertyValuesSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.OnValidate
void GlobalNamespace::MaterialPropertyValuesSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.RefreshPropertyIds
void GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.ApplyParams
void GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn__propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn__propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <propertyId>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn_$propertyId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::dyn_$propertyId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<propertyId>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.get_propertyId
int GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.set_propertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.RefreshPropertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single value
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 value
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 vector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair::dyn_vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair::dyn_vector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
