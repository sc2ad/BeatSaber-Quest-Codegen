// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController
#include "GlobalNamespace/BombNoteController.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private CuttableBySaber _cuttableBySaber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CuttableBySaber*& GlobalNamespace::BombNoteController::dyn__cuttableBySaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::dyn__cuttableBySaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cuttableBySaber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _wrapperGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BombNoteController::dyn__wrapperGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::dyn__wrapperGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wrapperGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BombNoteController.Init
void GlobalNamespace::BombNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity);
}
// Autogenerated method: BombNoteController.HandleDidPassHalfJump
void GlobalNamespace::BombNoteController::HandleDidPassHalfJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::HandleDidPassHalfJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidPassHalfJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.HandleWasCutBySaber
void GlobalNamespace::BombNoteController::HandleWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::HandleWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: BombNoteController.Awake
void GlobalNamespace::BombNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.OnDestroy
void GlobalNamespace::BombNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidPassMissedMarker
void GlobalNamespace::BombNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidStartDissolving
void GlobalNamespace::BombNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.HiddenStateDidChange
void GlobalNamespace::BombNoteController::HiddenStateDidChange(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BombNoteController.Pause
void GlobalNamespace::BombNoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombNoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BurstSliderGameNoteController
#include "GlobalNamespace/BurstSliderGameNoteController.hpp"
// Including type: BurstSliderGameNoteController/Pool
#include "GlobalNamespace/BurstSliderGameNoteController_Pool.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber[] _bigCuttableBySaberList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>& GlobalNamespace::BurstSliderGameNoteController::dyn__bigCuttableBySaberList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__bigCuttableBySaberList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigCuttableBySaberList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber[] _smallCuttableBySaberList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>& GlobalNamespace::BurstSliderGameNoteController::dyn__smallCuttableBySaberList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__smallCuttableBySaberList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smallCuttableBySaberList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _wrapperGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BurstSliderGameNoteController::dyn__wrapperGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__wrapperGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wrapperGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::BurstSliderGameNoteController::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<BurstSliderGameNoteController> cubeNoteControllerDidInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::BurstSliderGameNoteController*>*& GlobalNamespace::BurstSliderGameNoteController::dyn_cubeNoteControllerDidInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn_cubeNoteControllerDidInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubeNoteControllerDidInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::BurstSliderGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteVisualModifierType _noteVisualModifierType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteVisualModifierType& GlobalNamespace::BurstSliderGameNoteController::dyn__noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__noteVisualModifierType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteVisualModifierType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteVisualModifierType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteData/GameplayType _gameplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& GlobalNamespace::BurstSliderGameNoteController::dyn__gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__gameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::GameplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber _bigCuttableBySaber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoxCuttableBySaber*& GlobalNamespace::BurstSliderGameNoteController::dyn__bigCuttableBySaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__bigCuttableBySaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigCuttableBySaber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoxCuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _originalColliderSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BurstSliderGameNoteController::dyn__originalColliderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__originalColliderSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalColliderSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _originalColliderCenter
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BurstSliderGameNoteController::dyn__originalColliderCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::dyn__originalColliderCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalColliderCenter"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BurstSliderGameNoteController.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::BurstSliderGameNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::BurstSliderGameNoteController::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.get_gameplayType
::GlobalNamespace::NoteData::GameplayType GlobalNamespace::BurstSliderGameNoteController::get_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::get_gameplayType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData::GameplayType, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::BurstSliderGameNoteController::add_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::BurstSliderGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BurstSliderGameNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::BurstSliderGameNoteController::remove_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::BurstSliderGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BurstSliderGameNoteController.Init
void GlobalNamespace::BurstSliderGameNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, ::GlobalNamespace::NoteVisualModifierType noteVisualModifierType, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(noteVisualModifierType), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, noteVisualModifierType, uniformScale);
}
// Autogenerated method: BurstSliderGameNoteController.HandleBigWasCutBySaber
void GlobalNamespace::BurstSliderGameNoteController::HandleBigWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::HandleBigWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBigWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: BurstSliderGameNoteController.HandleSmallWasCutBySaber
void GlobalNamespace::BurstSliderGameNoteController::HandleSmallWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::HandleSmallWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSmallWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: BurstSliderGameNoteController.HandleCut
void GlobalNamespace::BurstSliderGameNoteController::HandleCut(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec, bool allowBadCut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::HandleCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(allowBadCut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec, allowBadCut);
}
// Autogenerated method: BurstSliderGameNoteController.Awake
void GlobalNamespace::BurstSliderGameNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.OnDestroy
void GlobalNamespace::BurstSliderGameNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.NoteDidPassMissedMarker
void GlobalNamespace::BurstSliderGameNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.NoteDidStartDissolving
void GlobalNamespace::BurstSliderGameNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.NoteDidStartJump
void GlobalNamespace::BurstSliderGameNoteController::NoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::NoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BurstSliderGameNoteController.HiddenStateDidChange
void GlobalNamespace::BurstSliderGameNoteController::HiddenStateDidChange(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BurstSliderGameNoteController.Pause
void GlobalNamespace::BurstSliderGameNoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderGameNoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BurstSliderGameNoteController/Pool
#include "GlobalNamespace/BurstSliderGameNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BurstSliderNoteDisappearingArrowController
#include "GlobalNamespace/BurstSliderNoteDisappearingArrowController.hpp"
// Including type: BurstSliderGameNoteController
#include "GlobalNamespace/BurstSliderGameNoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BurstSliderGameNoteController _burstSliderNoteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BurstSliderGameNoteController*& GlobalNamespace::BurstSliderNoteDisappearingArrowController::dyn__burstSliderNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderNoteDisappearingArrowController::dyn__burstSliderNoteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderNoteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BurstSliderGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BurstSliderNoteDisappearingArrowController.get_gameNoteController
::GlobalNamespace::BurstSliderGameNoteController* GlobalNamespace::BurstSliderNoteDisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BurstSliderNoteDisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BurstSliderGameNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorNoteVisuals
#include "GlobalNamespace/ColorNoteVisuals.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111EEC0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorId
int GlobalNamespace::ColorNoteVisuals::_get__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::_get__colorId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ColorNoteVisuals", "_colorId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorId
void GlobalNamespace::ColorNoteVisuals::_set__colorId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::_set__colorId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorNoteVisuals", "_colorId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultColorAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ColorNoteVisuals::dyn__defaultColorAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__defaultColorAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultColorAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteControllerBase _noteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteControllerBase*& GlobalNamespace::ColorNoteVisuals::dyn__noteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__noteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteControllerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController[] _materialPropertyBlockControllers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>& GlobalNamespace::ColorNoteVisuals::dyn__materialPropertyBlockControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__materialPropertyBlockControllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockControllers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _arrowMeshRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::ColorNoteVisuals::dyn__arrowMeshRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__arrowMeshRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_arrowMeshRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer[] _circleMeshRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::ColorNoteVisuals::dyn__circleMeshRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__circleMeshRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_circleMeshRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::ColorNoteVisuals::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<ColorNoteVisuals,NoteControllerBase> didInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ColorNoteVisuals*, ::GlobalNamespace::NoteControllerBase*>*& GlobalNamespace::ColorNoteVisuals::dyn_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn_didInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::ColorNoteVisuals*, ::GlobalNamespace::NoteControllerBase*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _noteColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ColorNoteVisuals::dyn__noteColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::dyn__noteColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ColorNoteVisuals.set_showArrow
void GlobalNamespace::ColorNoteVisuals::set_showArrow(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::set_showArrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showArrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.set_showCircle
void GlobalNamespace::ColorNoteVisuals::set_showCircle(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::set_showCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.add_didInitEvent
void GlobalNamespace::ColorNoteVisuals::add_didInitEvent(::System::Action_2<::GlobalNamespace::ColorNoteVisuals*, ::GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.remove_didInitEvent
void GlobalNamespace::ColorNoteVisuals::remove_didInitEvent(::System::Action_2<::GlobalNamespace::ColorNoteVisuals*, ::GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals..cctor
void GlobalNamespace::ColorNoteVisuals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorNoteVisuals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.Awake
void GlobalNamespace::ColorNoteVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.OnDestroy
void GlobalNamespace::ColorNoteVisuals::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerDidInit
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidPassJumpThreeQuarters
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving(::GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisappearingArrowController
#include "GlobalNamespace/DisappearingArrowController.hpp"
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameNoteController _gameNoteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameNoteController*& GlobalNamespace::DisappearingArrowController::dyn__gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisappearingArrowController::dyn__gameNoteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameNoteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DisappearingArrowController.get_gameNoteController
::GlobalNamespace::GameNoteController* GlobalNamespace::DisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GameNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber[] _bigCuttableBySaberList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>& GlobalNamespace::GameNoteController::dyn__bigCuttableBySaberList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__bigCuttableBySaberList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigCuttableBySaberList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber[] _smallCuttableBySaberList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>& GlobalNamespace::GameNoteController::dyn__smallCuttableBySaberList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__smallCuttableBySaberList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smallCuttableBySaberList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _wrapperGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GameNoteController::dyn__wrapperGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__wrapperGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wrapperGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::GameNoteController::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<GameNoteController> cubeNoteControllerDidInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::GameNoteController*>*& GlobalNamespace::GameNoteController::dyn_cubeNoteControllerDidInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn_cubeNoteControllerDidInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubeNoteControllerDidInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::GameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteVisualModifierType _noteVisualModifierType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteVisualModifierType& GlobalNamespace::GameNoteController::dyn__noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__noteVisualModifierType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteVisualModifierType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteVisualModifierType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteData/GameplayType _gameplayType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& GlobalNamespace::GameNoteController::dyn__gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__gameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData::GameplayType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cutAngleTolerance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GameNoteController::dyn__cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::dyn__cutAngleTolerance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutAngleTolerance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameNoteController.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::GameNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::GameNoteController::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.get_gameplayType
::GlobalNamespace::NoteData::GameplayType GlobalNamespace::GameNoteController::get_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::get_gameplayType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData::GameplayType, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::GameNoteController::add_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::GameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::GameNoteController::remove_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::GameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.Init
void GlobalNamespace::GameNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, ::GlobalNamespace::NoteVisualModifierType noteVisualModifierType, float cutAngleTolerance, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(noteVisualModifierType), ::il2cpp_utils::ExtractType(cutAngleTolerance), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, noteVisualModifierType, cutAngleTolerance, uniformScale);
}
// Autogenerated method: GameNoteController.HandleBigWasCutBySaber
void GlobalNamespace::GameNoteController::HandleBigWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::HandleBigWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBigWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: GameNoteController.HandleSmallWasCutBySaber
void GlobalNamespace::GameNoteController::HandleSmallWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::HandleSmallWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSmallWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: GameNoteController.HandleCut
void GlobalNamespace::GameNoteController::HandleCut(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec, bool allowBadCut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::HandleCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(allowBadCut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec, allowBadCut);
}
// Autogenerated method: GameNoteController.Awake
void GlobalNamespace::GameNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.OnDestroy
void GlobalNamespace::GameNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidPassMissedMarker
void GlobalNamespace::GameNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidStartDissolving
void GlobalNamespace::GameNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidStartJump
void GlobalNamespace::GameNoteController::NoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::NoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.HiddenStateDidChange
void GlobalNamespace::GameNoteController::HiddenStateDidChange(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: GameNoteController.Pause
void GlobalNamespace::GameNoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameNoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IGameNoteMirrorable
#include "GlobalNamespace/IGameNoteMirrorable.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteVisualModifierType
#include "GlobalNamespace/NoteVisualModifierType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGameNoteMirrorable.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::IGameNoteMirrorable::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGameNoteMirrorable::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: IGameNoteMirrorable.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::IGameNoteMirrorable::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGameNoteMirrorable::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: IGameNoteMirrorable.get_gameplayType
::GlobalNamespace::NoteData::GameplayType GlobalNamespace::IGameNoteMirrorable::get_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IGameNoteMirrorable::get_gameplayType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData::GameplayType, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteMirrorable.get_noteTransform
::UnityEngine::Transform* GlobalNamespace::INoteMirrorable::get_noteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteMirrorable::get_noteTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: INoteMirrorable.get_noteData
::GlobalNamespace::NoteData* GlobalNamespace::INoteMirrorable::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteMirrorable::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated method: INoteMirrorable.get_noteDidStartDissolvingEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::INoteMirrorable::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteMirrorable::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteMovementProvider
#include "GlobalNamespace/INoteMovementProvider.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteMovementProvider.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::INoteMovementProvider::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteMovementProvider::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteVisualModifierType
#include "GlobalNamespace/NoteVisualModifierType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteVisualModifierType Normal
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::NoteVisualModifierType::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteVisualModifierType>("", "NoteVisualModifierType", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public NoteVisualModifierType Normal
void GlobalNamespace::NoteVisualModifierType::_set_Normal(::GlobalNamespace::NoteVisualModifierType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteVisualModifierType", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public NoteVisualModifierType DisappearingArrow
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::NoteVisualModifierType::_get_DisappearingArrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_get_DisappearingArrow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteVisualModifierType>("", "NoteVisualModifierType", "DisappearingArrow"));
}
// Autogenerated static field setter
// Set static field: static public NoteVisualModifierType DisappearingArrow
void GlobalNamespace::NoteVisualModifierType::_set_DisappearingArrow(::GlobalNamespace::NoteVisualModifierType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_set_DisappearingArrow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteVisualModifierType", "DisappearingArrow", value));
}
// Autogenerated static field getter
// Get static field: static public NoteVisualModifierType Ghost
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::NoteVisualModifierType::_get_Ghost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_get_Ghost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteVisualModifierType>("", "NoteVisualModifierType", "Ghost"));
}
// Autogenerated static field setter
// Set static field: static public NoteVisualModifierType Ghost
void GlobalNamespace::NoteVisualModifierType::_set_Ghost(::GlobalNamespace::NoteVisualModifierType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::_set_Ghost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteVisualModifierType", "Ghost", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteVisualModifierType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteVisualModifierType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteVisualModifierTypeProvider
#include "GlobalNamespace/INoteVisualModifierTypeProvider.hpp"
// Including type: NoteVisualModifierType
#include "GlobalNamespace/NoteVisualModifierType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteVisualModifierTypeProvider.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::INoteVisualModifierTypeProvider::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteVisualModifierTypeProvider::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBombNoteController
#include "GlobalNamespace/MirroredBombNoteController.hpp"
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredDisappearingArrowController
#include "GlobalNamespace/MirroredDisappearingArrowController.hpp"
// Including type: MirroredGameNoteController
#include "GlobalNamespace/MirroredGameNoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MirroredGameNoteController _mirroredGameNoteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredGameNoteController*& GlobalNamespace::MirroredDisappearingArrowController::dyn__mirroredGameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredDisappearingArrowController::dyn__mirroredGameNoteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mirroredGameNoteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MirroredGameNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MirroredDisappearingArrowController.get_gameNoteController
::GlobalNamespace::MirroredGameNoteController* GlobalNamespace::MirroredDisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredDisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MirroredGameNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredGameNoteController
#include "GlobalNamespace/MirroredGameNoteController.hpp"
// Including type: MirroredGameNoteController/Pool
#include "GlobalNamespace/MirroredGameNoteController_Pool.hpp"
// Including type: IGameNoteMirrorable
#include "GlobalNamespace/IGameNoteMirrorable.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteVisualModifierType
#include "GlobalNamespace/NoteVisualModifierType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F040
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorId
int GlobalNamespace::MirroredGameNoteController::_get__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::_get__colorId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MirroredGameNoteController", "_colorId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorId
void GlobalNamespace::MirroredGameNoteController::_set__colorId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::_set__colorId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirroredGameNoteController", "_colorId", value));
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::MirroredGameNoteController::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::MirroredGameNoteController::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MirroredGameNoteController> cubeNoteControllerDidInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MirroredGameNoteController*>*& GlobalNamespace::MirroredGameNoteController::dyn_cubeNoteControllerDidInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::dyn_cubeNoteControllerDidInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubeNoteControllerDidInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::MirroredGameNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MirroredGameNoteController.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::MirroredGameNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: MirroredGameNoteController.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::MirroredGameNoteController::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: MirroredGameNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::MirroredGameNoteController::add_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::MirroredGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredGameNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::MirroredGameNoteController::remove_cubeNoteControllerDidInitEvent(::System::Action_1<::GlobalNamespace::MirroredGameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredGameNoteController..cctor
void GlobalNamespace::MirroredGameNoteController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MirroredGameNoteController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MirroredGameNoteController.Mirror
void GlobalNamespace::MirroredGameNoteController::Mirror(::GlobalNamespace::IGameNoteMirrorable* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredGameNoteController::Mirror");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredGameNoteController/Pool
#include "GlobalNamespace/MirroredGameNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredSliderController
#include "GlobalNamespace/MirroredSliderController.hpp"
// Including type: MirroredSliderController/Pool
#include "GlobalNamespace/MirroredSliderController_Pool.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::MirroredSliderController::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawnController*& GlobalNamespace::MirroredSliderController::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderController _followedSlider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController*& GlobalNamespace::MirroredSliderController::dyn__followedSlider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::dyn__followedSlider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followedSlider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MirroredSliderController::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _followedTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MirroredSliderController::dyn__followedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::dyn__followedTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followedTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MirroredSliderController.set_hide
void GlobalNamespace::MirroredSliderController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredSliderController.Awake
void GlobalNamespace::MirroredSliderController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredSliderController.Update
void GlobalNamespace::MirroredSliderController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredSliderController.OnDestroy
void GlobalNamespace::MirroredSliderController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredSliderController.Mirror
void GlobalNamespace::MirroredSliderController::Mirror(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::Mirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated method: MirroredSliderController.UpdateMaterialPropertyBlock
void GlobalNamespace::MirroredSliderController::UpdateMaterialPropertyBlock(float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::UpdateMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceHeadNoteJump);
}
// Autogenerated method: MirroredSliderController.RemoveListeners
void GlobalNamespace::MirroredSliderController::RemoveListeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::RemoveListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredSliderController.HandleSliderDidStartDissolving
void GlobalNamespace::MirroredSliderController::HandleSliderDidStartDissolving(::GlobalNamespace::SliderController* sliderController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::HandleSliderDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController, duration);
}
// Autogenerated method: MirroredSliderController.Dissolve
void GlobalNamespace::MirroredSliderController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredSliderController::Dissolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredSliderController/Pool
#include "GlobalNamespace/MirroredSliderController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteBigCuttableColliderSize
#include "GlobalNamespace/NoteBigCuttableColliderSize.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private NoteController _noteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteController*& GlobalNamespace::NoteBigCuttableColliderSize::dyn__noteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::dyn__noteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.BoxCollider _boxCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& GlobalNamespace::NoteBigCuttableColliderSize::dyn__boxCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::dyn__boxCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boxCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::BoxCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _defaultColliderSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteBigCuttableColliderSize::dyn__defaultColliderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::dyn__defaultColliderSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultColliderSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteBigCuttableColliderSize.Awake
void GlobalNamespace::NoteBigCuttableColliderSize::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteBigCuttableColliderSize.OnDestroy
void GlobalNamespace::NoteBigCuttableColliderSize::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteBigCuttableColliderSize.HandleNoteControllerDidInit
void GlobalNamespace::NoteBigCuttableColliderSize::HandleNoteControllerDidInit(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteBigCuttableColliderSize::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteController/<DissolveCoroutine>d__73
#include "GlobalNamespace/NoteController_-DissolveCoroutine-d__73.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected NoteMovement _noteMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement*& GlobalNamespace::NoteController::dyn__noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform _noteTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteController::dyn__noteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <hidden>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteController::dyn_$hidden$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn_$hidden$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hidden>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerDidInitEvent> _didInitEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>*& GlobalNamespace::NoteController::dyn__didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__didInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didInitEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> _noteDidStartJumpEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*& GlobalNamespace::NoteController::dyn__noteDidStartJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteDidStartJumpEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDidStartJumpEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> _noteDidFinishJumpEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*& GlobalNamespace::NoteController::dyn__noteDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteDidFinishJumpEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDidFinishJumpEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> _noteDidPassJumpThreeQuartersEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*& GlobalNamespace::NoteController::dyn__noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteDidPassJumpThreeQuartersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDidPassJumpThreeQuartersEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteWasCutEvent> _noteWasCutEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>*& GlobalNamespace::NoteController::dyn__noteWasCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteWasCutEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteWasCutEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> _noteWasMissedEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>*& GlobalNamespace::NoteController::dyn__noteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteWasMissedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteWasMissedEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> _noteDidStartDissolvingEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*& GlobalNamespace::NoteController::dyn__noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteDidStartDissolvingEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDidStartDissolvingEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> _noteDidDissolveEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*& GlobalNamespace::NoteController::dyn__noteDidDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteDidDissolveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDidDissolveEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteData _noteData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData*& GlobalNamespace::NoteController::dyn__noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__noteData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _dissolving
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteController::dyn__dissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__dissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dissolving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _uniformScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteController::dyn__uniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::dyn__uniformScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uniformScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteController.get_noteDidStartJumpEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* GlobalNamespace::NoteController::get_noteDidStartJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidFinishJumpEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* GlobalNamespace::NoteController::get_noteDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteWasCutEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>* GlobalNamespace::NoteController::get_noteWasCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteWasMissedEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>* GlobalNamespace::NoteController::get_noteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidDissolveEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* GlobalNamespace::NoteController::get_noteDidDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteDidDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteTransform
::UnityEngine::Transform* GlobalNamespace::NoteController::get_noteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_worldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteController::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_inverseWorldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteController::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveStartTime
float GlobalNamespace::NoteController::get_moveStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_moveStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveDuration
float GlobalNamespace::NoteController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpDuration
float GlobalNamespace::NoteController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpMoveVec
::UnityEngine::Vector3 GlobalNamespace::NoteController::get_jumpMoveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_jumpMoveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpMoveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_beatPos
::UnityEngine::Vector3 GlobalNamespace::NoteController::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpStartPos
::UnityEngine::Vector3 GlobalNamespace::NoteController::get_jumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_jumpStartPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpStartPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveVec
::UnityEngine::Vector3 GlobalNamespace::NoteController::get_moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_moveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_uniformScale
float GlobalNamespace::NoteController::get_uniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_uniformScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uniformScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_hidden
bool GlobalNamespace::NoteController::get_hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.set_hidden
void GlobalNamespace::NoteController::set_hidden(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::set_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteController.Awake
void GlobalNamespace::NoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.OnDestroy
void GlobalNamespace::NoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.Update
void GlobalNamespace::NoteController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.ManualUpdate
void GlobalNamespace::NoteController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidStartJump
void GlobalNamespace::NoteController::HandleNoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidFinishJump
void GlobalNamespace::NoteController::HandleNoteDidFinishJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::HandleNoteDidFinishJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidPassJumpThreeQuarters
void GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteMovement* noteMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteMovement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteMovement);
}
// Autogenerated method: NoteController.HandleNoteDidPassMissedMarkerEvent
void GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidStartJump
void GlobalNamespace::NoteController::NoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::NoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidFinishJump
void GlobalNamespace::NoteController::NoteDidFinishJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::NoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidPassJumpThreeQuarters
void GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteMovement* noteMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteMovement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteMovement);
}
// Autogenerated method: NoteController.NoteDidPassMissedMarker
void GlobalNamespace::NoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidStartDissolving
void GlobalNamespace::NoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.SendNoteWasMissedEvent
void GlobalNamespace::NoteController::SendNoteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::SendNoteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.SendNoteWasCutEvent
void GlobalNamespace::NoteController::SendNoteWasCutEvent(ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::SendNoteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(noteCutInfo));
}
// Autogenerated method: NoteController.Init
void GlobalNamespace::NoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation, float uniformScale, bool rotateTowardsPlayer, bool useRandomRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(endRotation), ::il2cpp_utils::ExtractType(uniformScale), ::il2cpp_utils::ExtractType(rotateTowardsPlayer), ::il2cpp_utils::ExtractType(useRandomRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, endRotation, uniformScale, rotateTowardsPlayer, useRandomRotation);
}
// Autogenerated method: NoteController.DissolveCoroutine
::System::Collections::IEnumerator* GlobalNamespace::NoteController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: NoteController.Dissolve
void GlobalNamespace::NoteController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Dissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: NoteController.HiddenStateDidChange
void GlobalNamespace::NoteController::HiddenStateDidChange(bool hidden) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hidden)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hidden);
}
// Autogenerated method: NoteController.Hide
void GlobalNamespace::NoteController::Hide(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: NoteController.Pause
void GlobalNamespace::NoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated method: NoteController.get_didInitEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>* GlobalNamespace::NoteController::get_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidPassJumpThreeQuartersEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidStartDissolvingEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteData
::GlobalNamespace::NoteData* GlobalNamespace::NoteController::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteController/<DissolveCoroutine>d__73
#include "GlobalNamespace/NoteController_-DissolveCoroutine-d__73.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NoteController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteController*& GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__73.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__73.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__73.System.IDisposable.Dispose
void GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__73.MoveNext
bool GlobalNamespace::NoteController::$DissolveCoroutine$d__73::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__73.System.Collections.IEnumerator.Reset
void GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::$DissolveCoroutine$d__73::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerDidInitEvent.HandleNoteControllerDidInit
void GlobalNamespace::INoteControllerDidInitEvent::HandleNoteControllerDidInit(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerDidInitEvent::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidStartJumpEvent.HandleNoteControllerNoteDidStartJump
void GlobalNamespace::INoteControllerNoteDidStartJumpEvent::HandleNoteControllerNoteDidStartJump(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteDidStartJumpEvent::HandleNoteControllerNoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidFinishJumpEvent.HandleNoteControllerNoteDidFinishJump
void GlobalNamespace::INoteControllerNoteDidFinishJumpEvent::HandleNoteControllerNoteDidFinishJump(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent::HandleNoteControllerNoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidPassJumpThreeQuartersEvent.HandleNoteControllerNoteDidPassJumpThreeQuarters
void GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent::HandleNoteControllerNoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent::HandleNoteControllerNoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
void GlobalNamespace::INoteControllerNoteWasCutEvent::HandleNoteControllerNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteWasCutEvent::HandleNoteControllerNoteWasCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteWasMissedEvent.HandleNoteControllerNoteWasMissed
void GlobalNamespace::INoteControllerNoteWasMissedEvent::HandleNoteControllerNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteWasMissedEvent::HandleNoteControllerNoteWasMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidStartDissolvingEvent.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent::HandleNoteControllerNoteDidStartDissolving(::GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidDissolveEvent.HandleNoteControllerNoteDidDissolve
void GlobalNamespace::INoteControllerNoteDidDissolveEvent::HandleNoteControllerNoteDidDissolve(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteControllerNoteDidDissolveEvent::HandleNoteControllerNoteDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteControllerBase.get_didInitEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>* GlobalNamespace::NoteControllerBase::get_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteControllerBase::get_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteDidPassJumpThreeQuartersEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* GlobalNamespace::NoteControllerBase::get_noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteControllerBase::get_noteDidPassJumpThreeQuartersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteDidStartDissolvingEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::NoteControllerBase::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteControllerBase::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteData
::GlobalNamespace::NoteData* GlobalNamespace::NoteControllerBase::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteControllerBase::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteDebrisDidFinishEvent
#include "GlobalNamespace/INoteDebrisDidFinishEvent.hpp"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteDebrisDidFinishEvent.HandleNoteDebrisDidFinish
void GlobalNamespace::INoteDebrisDidFinishEvent::HandleNoteDebrisDidFinish(::GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::INoteDebrisDidFinishEvent::HandleNoteDebrisDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDebrisDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDebris)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteDebris);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteDebrisPhysics
#include "GlobalNamespace/NoteDebrisPhysics.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: INoteDebrisDidFinishEvent
#include "GlobalNamespace/INoteDebrisDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F190
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutPropertyID
int GlobalNamespace::NoteDebris::_get__cutoutPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_get__cutoutPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutoutPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutPropertyID
void GlobalNamespace::NoteDebris::_set__cutoutPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_set__cutoutPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutoutPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F1A0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::NoteDebris::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::NoteDebris::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F1B0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutPlaneID
int GlobalNamespace::NoteDebris::_get__cutPlaneID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_get__cutPlaneID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutPlaneID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutPlaneID
void GlobalNamespace::NoteDebris::_set__cutPlaneID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_set__cutPlaneID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutPlaneID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F1C0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutTexOffsetID
int GlobalNamespace::NoteDebris::_get__cutoutTexOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_get__cutoutTexOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutoutTexOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutTexOffsetID
void GlobalNamespace::NoteDebris::_set__cutoutTexOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_set__cutoutTexOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutoutTexOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F1D0
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3[] _meshVertices
::ArrayW<::UnityEngine::Vector3> GlobalNamespace::NoteDebris::_get__meshVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_get__meshVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Vector3>>("", "NoteDebris", "_meshVertices"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3[] _meshVertices
void GlobalNamespace::NoteDebris::_set__meshVertices(::ArrayW<::UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::_set__meshVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_meshVertices", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _meshTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteDebris::dyn__meshTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__meshTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteDebrisPhysics _physics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebrisPhysics*& GlobalNamespace::NoteDebris::dyn__physics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__physics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_physics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebrisPhysics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::NoteDebris::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _cutoutCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::NoteDebris::dyn__cutoutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__cutoutCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutoutCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxCutPointCenterDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebris::dyn__maxCutPointCenterDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__maxCutPointCenterDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxCutPointCenterDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _centroidComputationMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::NoteDebris::dyn__centroidComputationMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__centroidComputationMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centroidComputationMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::NoteDebris::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elapsedTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebris::dyn__elapsedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__elapsedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elapsedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lifeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebris::dyn__lifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__lifeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lifeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<INoteDebrisDidFinishEvent> _didFinishEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteDebrisDidFinishEvent*>*& GlobalNamespace::NoteDebris::dyn__didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::dyn__didFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didFinishEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteDebrisDidFinishEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteDebris.get_didFinishEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteDebrisDidFinishEvent*>* GlobalNamespace::NoteDebris::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteDebrisDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris..cctor
void GlobalNamespace::NoteDebris::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteDebris", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: NoteDebris.Awake
void GlobalNamespace::NoteDebris::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris.Update
void GlobalNamespace::NoteDebris::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris.Init
void GlobalNamespace::NoteDebris::Init(::GlobalNamespace::ColorType colorType, ::UnityEngine::Vector3 notePos, ::UnityEngine::Quaternion noteRot, ::UnityEngine::Vector3 noteMoveVec, ::UnityEngine::Vector3 noteScale, ::UnityEngine::Vector3 positionOffset, ::UnityEngine::Quaternion rotationOffset, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Vector3 cutNormal, ::UnityEngine::Vector3 force, ::UnityEngine::Vector3 torque, float lifeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebris::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(notePos), ::il2cpp_utils::ExtractType(noteRot), ::il2cpp_utils::ExtractType(noteMoveVec), ::il2cpp_utils::ExtractType(noteScale), ::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque), ::il2cpp_utils::ExtractType(lifeTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, colorType, notePos, noteRot, noteMoveVec, noteScale, positionOffset, rotationOffset, cutPoint, cutNormal, force, torque, lifeTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisPhysics
#include "GlobalNamespace/NoteDebrisPhysics.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteDebrisPhysics.get_position
::UnityEngine::Vector3 GlobalNamespace::NoteDebrisPhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisPhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisPhysics.Init
void GlobalNamespace::NoteDebrisPhysics::Init(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisPhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisPhysics.AddVelocity
void GlobalNamespace::NoteDebrisPhysics::AddVelocity(::UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisPhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisRigidbodyPhysics
#include "GlobalNamespace/NoteDebrisRigidbodyPhysics.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: NoteDebrisSimplePhysics
#include "GlobalNamespace/NoteDebrisSimplePhysics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody _rigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__rigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__rigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteDebrisSimplePhysics _simplePhysics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebrisSimplePhysics*& GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__simplePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__simplePhysics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_simplePhysics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebrisSimplePhysics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _firstUpdate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__firstUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::dyn__firstUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.FixedUpdate
void GlobalNamespace::NoteDebrisRigidbodyPhysics::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.get_position
::UnityEngine::Vector3 GlobalNamespace::NoteDebrisRigidbodyPhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.Init
void GlobalNamespace::NoteDebrisRigidbodyPhysics::Init(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.AddVelocity
void GlobalNamespace::NoteDebrisRigidbodyPhysics::AddVelocity(::UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisRigidbodyPhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisSimplePhysics
#include "GlobalNamespace/NoteDebrisSimplePhysics.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _currentForce
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteDebrisSimplePhysics::dyn__currentForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::dyn__currentForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentForce"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _currentTorque
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteDebrisSimplePhysics::dyn__currentTorque() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::dyn__currentTorque");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTorque"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteDebrisSimplePhysics::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _gravity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteDebrisSimplePhysics::dyn__gravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::dyn__gravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gravity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _firstUpdate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteDebrisSimplePhysics::dyn__firstUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::dyn__firstUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteDebrisSimplePhysics.Start
void GlobalNamespace::NoteDebrisSimplePhysics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.LateUpdate
void GlobalNamespace::NoteDebrisSimplePhysics::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.get_position
::UnityEngine::Vector3 GlobalNamespace::NoteDebrisSimplePhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.Init
void GlobalNamespace::NoteDebrisSimplePhysics::Init(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisSimplePhysics.AddVelocity
void GlobalNamespace::NoteDebrisSimplePhysics::AddVelocity(::UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSimplePhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteFloorMovement
#include "GlobalNamespace/NoteFloorMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _rotatedObject
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteFloorMovement::dyn__rotatedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__rotatedObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotatedObject"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::NoteFloorMovement::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::NoteFloorMovement::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action floorMovementDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteFloorMovement::dyn_floorMovementDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn_floorMovementDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorMovementDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteFloorMovement::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _endPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteFloorMovement::dyn__endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__endPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _moveDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteFloorMovement::dyn__moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__moveDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteFloorMovement::dyn__startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__startTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteFloorMovement::dyn__worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__worldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteFloorMovement::dyn__inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__inverseWorldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteFloorMovement::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteFloorMovement.get_distanceToPlayer
float GlobalNamespace::NoteFloorMovement::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_startPos
::UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_startPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_endPos
::UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_endPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_startTime
float GlobalNamespace::NoteFloorMovement::get_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_startTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_moveDuration
float GlobalNamespace::NoteFloorMovement::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_worldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteFloorMovement::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_inverseWorldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteFloorMovement::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_localPosition
::UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.add_floorMovementDidFinishEvent
void GlobalNamespace::NoteFloorMovement::add_floorMovementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::add_floorMovementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_floorMovementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteFloorMovement.remove_floorMovementDidFinishEvent
void GlobalNamespace::NoteFloorMovement::remove_floorMovementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::remove_floorMovementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_floorMovementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteFloorMovement.Init
void GlobalNamespace::NoteFloorMovement::Init(float worldRotation, ::UnityEngine::Vector3 startPos, ::UnityEngine::Vector3 endPos, float moveDuration, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldRotation, startPos, endPos, moveDuration, startTime);
}
// Autogenerated method: NoteFloorMovement.SetToStart
::UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::SetToStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::SetToStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.ManualUpdate
::UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteFloorMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: PlayerSpaceConvertor
#include "GlobalNamespace/PlayerSpaceConvertor.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMissedTimeOffset
float GlobalNamespace::NoteJump::_get_kMissedTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::_get_kMissedTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteJump", "kMissedTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMissedTimeOffset
void GlobalNamespace::NoteJump::_set_kMissedTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::_set_kMissedTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteJump", "kMissedTimeOffset", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _rotatedObject
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteJump::dyn__rotatedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__rotatedObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotatedObject"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _yAvoidanceUp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__yAvoidanceUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__yAvoidanceUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yAvoidanceUp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _yAvoidanceDown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__yAvoidanceDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__yAvoidanceDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yAvoidanceDown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _endDistanceOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__endDistanceOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__endDistanceOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endDistanceOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::NoteJump::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerSpaceConvertor _playerSpaceConvertor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpaceConvertor*& GlobalNamespace::NoteJump::dyn__playerSpaceConvertor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__playerSpaceConvertor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerSpaceConvertor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerSpaceConvertor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::NoteJump::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteJumpDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteJump::dyn_noteJumpDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn_noteJumpDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteJumpDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteJumpDidPassMissedMarkerEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteJump::dyn_noteJumpDidPassMissedMarkerEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn_noteJumpDidPassMissedMarkerEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteJumpDidPassMissedMarkerEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteJump> noteJumpDidPassThreeQuartersEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteJump*>*& GlobalNamespace::NoteJump::dyn_noteJumpDidPassThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn_noteJumpDidPassThreeQuartersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteJumpDidPassThreeQuartersEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteJump*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteJumpDidPassHalfEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteJump::dyn_noteJumpDidPassHalfEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn_noteJumpDidPassHalfEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteJumpDidPassHalfEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> noteJumpDidUpdateProgressEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::NoteJump::dyn_noteJumpDidUpdateProgressEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn_noteJumpDidUpdateProgressEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteJumpDidUpdateProgressEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteJump::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _endPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteJump::dyn__endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__endPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _moveVec
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteJump::dyn__moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__moveVec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveVec"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _beatTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__beatTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__beatTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startVerticalVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__startVerticalVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__startVerticalVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startVerticalVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _startRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteJump::dyn__startRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__startRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _middleRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteJump::dyn__middleRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__middleRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _endRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteJump::dyn__endRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__endRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _gravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__gravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__gravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _yAvoidance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__yAvoidance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__yAvoidance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yAvoidance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _missedTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJump::dyn__missedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__missedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _missedMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteJump::dyn__missedMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__missedMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missedMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _threeQuartersMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteJump::dyn__threeQuartersMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__threeQuartersMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threeQuartersMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _halfJumpMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteJump::dyn__halfJumpMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__halfJumpMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_halfJumpMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteJump::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _randomRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::NoteJump::dyn__randomRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__randomRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteJump::dyn__worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__worldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::NoteJump::dyn__inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__inverseWorldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _rotateTowardsPlayer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteJump::dyn__rotateTowardsPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::dyn__rotateTowardsPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotateTowardsPlayer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteJump.get_distanceToPlayer
float GlobalNamespace::NoteJump::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_beatPos
::UnityEngine::Vector3 GlobalNamespace::NoteJump::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_jumpDuration
float GlobalNamespace::NoteJump::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_moveVec
::UnityEngine::Vector3 GlobalNamespace::NoteJump::get_moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::get_moveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_localPosition
::UnityEngine::Vector3 GlobalNamespace::NoteJump::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.add_noteJumpDidFinishEvent
void GlobalNamespace::NoteJump::add_noteJumpDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::add_noteJumpDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidFinishEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::remove_noteJumpDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassMissedMarkerEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassMissedMarkerEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::add_noteJumpDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassMissedMarkerEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassMissedMarkerEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::remove_noteJumpDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassThreeQuartersEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteJump*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::add_noteJumpDidPassThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassThreeQuartersEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteJump*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::remove_noteJumpDidPassThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassHalfEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassHalfEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::add_noteJumpDidPassHalfEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassHalfEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassHalfEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassHalfEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::remove_noteJumpDidPassHalfEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassHalfEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidUpdateProgressEvent
void GlobalNamespace::NoteJump::add_noteJumpDidUpdateProgressEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::add_noteJumpDidUpdateProgressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidUpdateProgressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidUpdateProgressEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidUpdateProgressEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::remove_noteJumpDidUpdateProgressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidUpdateProgressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.Init
void GlobalNamespace::NoteJump::Init(float beatTime, float worldRotation, ::UnityEngine::Vector3 startPos, ::UnityEngine::Vector3 endPos, float jumpDuration, float gravity, float flipYSide, float endRotation, bool rotateTowardsPlayer, bool useRandomRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(gravity), ::il2cpp_utils::ExtractType(flipYSide), ::il2cpp_utils::ExtractType(endRotation), ::il2cpp_utils::ExtractType(rotateTowardsPlayer), ::il2cpp_utils::ExtractType(useRandomRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatTime, worldRotation, startPos, endPos, jumpDuration, gravity, flipYSide, endRotation, rotateTowardsPlayer, useRandomRotation);
}
// Autogenerated method: NoteJump.ManualUpdate
::UnityEngine::Vector3 GlobalNamespace::NoteJump::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJump::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteJumpStartScaleUp
#include "GlobalNamespace/NoteJumpStartScaleUp.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _fullScaleJumpPart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteJumpStartScaleUp::dyn__fullScaleJumpPart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::dyn__fullScaleJumpPart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fullScaleJumpPart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::NoteJumpStartScaleUp::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteController _noteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteController*& GlobalNamespace::NoteJumpStartScaleUp::dyn__noteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::dyn__noteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteJump _noteJump
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteJump*& GlobalNamespace::NoteJumpStartScaleUp::dyn__noteJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::dyn__noteJump");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteJump"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteJump**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteJumpStartScaleUp.Awake
void GlobalNamespace::NoteJumpStartScaleUp::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteJumpStartScaleUp.OnDestroy
void GlobalNamespace::NoteJumpStartScaleUp::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteJumpStartScaleUp.UpdateScale
void GlobalNamespace::NoteJumpStartScaleUp::UpdateScale(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::UpdateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: NoteJumpStartScaleUp.HandleNoteJumpDidUpdateProgress
void GlobalNamespace::NoteJumpStartScaleUp::HandleNoteJumpDidUpdateProgress(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::HandleNoteJumpDidUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: NoteJumpStartScaleUp.HandleNoteControllerDidInit
void GlobalNamespace::NoteJumpStartScaleUp::HandleNoteControllerDidInit(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteJumpStartScaleUp::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineConnectionController
#include "GlobalNamespace/NoteLineConnectionController.hpp"
// Including type: NoteLineConnectionController/Pool
#include "GlobalNamespace/NoteLineConnectionController_Pool.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer _lineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::NoteLineConnectionController::dyn__lineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__lineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::NoteLineConnectionController::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::NoteLineConnectionController::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::NoteLineConnectionController::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteLineConnectionController> didFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteLineConnectionController*>*& GlobalNamespace::NoteLineConnectionController::dyn_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn_didFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteLineConnectionController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteController _noteController0
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteController*& GlobalNamespace::NoteLineConnectionController::dyn__noteController0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__noteController0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController0"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteController _noteController1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteController*& GlobalNamespace::NoteLineConnectionController::dyn__noteController1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__noteController1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color0
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::NoteLineConnectionController::dyn__color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__color0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color0"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color1
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::NoteLineConnectionController::dyn__color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__color1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color1"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutStartDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteLineConnectionController::dyn__fadeOutStartDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__fadeOutStartDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutStartDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutEndDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteLineConnectionController::dyn__fadeOutEndDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__fadeOutEndDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutEndDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteLineConnectionController::dyn__noteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__noteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didFinish
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::NoteLineConnectionController::dyn__didFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::dyn__didFinish");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didFinish"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteLineConnectionController.add_didFinishEvent
void GlobalNamespace::NoteLineConnectionController::add_didFinishEvent(::System::Action_1<::GlobalNamespace::NoteLineConnectionController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteLineConnectionController.remove_didFinishEvent
void GlobalNamespace::NoteLineConnectionController::remove_didFinishEvent(::System::Action_1<::GlobalNamespace::NoteLineConnectionController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteLineConnectionController.Setup
void GlobalNamespace::NoteLineConnectionController::Setup(::GlobalNamespace::NoteController* noteController0, ::GlobalNamespace::NoteController* noteController1, float fadeOutStartDistance, float fadeOutEndDistance, float noteTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController0), ::il2cpp_utils::ExtractType(noteController1), ::il2cpp_utils::ExtractType(fadeOutStartDistance), ::il2cpp_utils::ExtractType(fadeOutEndDistance), ::il2cpp_utils::ExtractType(noteTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController0, noteController1, fadeOutStartDistance, fadeOutEndDistance, noteTime);
}
// Autogenerated method: NoteLineConnectionController.Update
void GlobalNamespace::NoteLineConnectionController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteLineConnectionController.UpdatePositionsAndColors
void GlobalNamespace::NoteLineConnectionController::UpdatePositionsAndColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteLineConnectionController::UpdatePositionsAndColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionsAndColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineConnectionController/Pool
#include "GlobalNamespace/NoteLineConnectionController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteFloorMovement
#include "GlobalNamespace/NoteFloorMovement.hpp"
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private NoteFloorMovement _floorMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteFloorMovement*& GlobalNamespace::NoteMovement::dyn__floorMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__floorMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floorMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteFloorMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteJump _jump
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteJump*& GlobalNamespace::NoteMovement::dyn__jump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__jump");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jump"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteJump**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _zOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteMovement::dyn__zOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__zOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action didInitEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_didInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didInitEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteDidStartJumpEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_noteDidStartJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidStartJumpEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidStartJumpEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteDidFinishJumpEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_noteDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidFinishJumpEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidFinishJumpEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteDidPassMissedMarkerEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_noteDidPassMissedMarkerEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidPassMissedMarkerEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidPassMissedMarkerEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteDidPassHalfJumpEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_noteDidPassHalfJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidPassHalfJumpEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidPassHalfJumpEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NoteMovement> noteDidPassJumpThreeQuartersEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteMovement*>*& GlobalNamespace::NoteMovement::dyn_noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidPassJumpThreeQuartersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidPassJumpThreeQuartersEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::NoteMovement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action noteDidMoveInJumpPhaseEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::NoteMovement::dyn_noteDidMoveInJumpPhaseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_noteDidMoveInJumpPhaseEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteDidMoveInJumpPhaseEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteMovement/MovementPhase <movementPhase>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement::MovementPhase& GlobalNamespace::NoteMovement::dyn_$movementPhase$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn_$movementPhase$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<movementPhase>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteMovement::MovementPhase*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteMovement::dyn__position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteMovement::dyn__prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__prevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteMovement::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::NoteMovement::dyn__prevLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::dyn__prevLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteMovement.get_movementPhase
::GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::get_movementPhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_movementPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_movementPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement::MovementPhase, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.set_movementPhase
void GlobalNamespace::NoteMovement::set_movementPhase(::GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::set_movementPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_movementPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.get_position
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_prevPosition
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_prevPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_localPosition
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_prevLocalPosition
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_prevLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_prevLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_worldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteMovement::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_inverseWorldRotation
::UnityEngine::Quaternion GlobalNamespace::NoteMovement::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveEndPos
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_moveEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_moveEndPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveEndPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveStartTime
float GlobalNamespace::NoteMovement::get_moveStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_moveStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveDuration
float GlobalNamespace::NoteMovement::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_beatPos
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_jumpDuration
float GlobalNamespace::NoteMovement::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_jumpMoveVec
::UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_jumpMoveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_jumpMoveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpMoveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_distanceToPlayer
float GlobalNamespace::NoteMovement::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.add_didInitEvent
void GlobalNamespace::NoteMovement::add_didInitEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_didInitEvent
void GlobalNamespace::NoteMovement::remove_didInitEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidStartJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidStartJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidFinishJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidFinishJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassMissedMarkerEvent
void GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassMissedMarkerEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassHalfJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassHalfJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassJumpThreeQuartersEvent
void GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteMovement*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassJumpThreeQuartersEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteMovement*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidMoveInJumpPhaseEvent
void GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidMoveInJumpPhaseEvent
void GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.Init
void GlobalNamespace::NoteMovement::Init(float beatTime, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float flipYSide, float endRotation, bool rotateTowardsPlayer, bool useRandomRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(flipYSide), ::il2cpp_utils::ExtractType(endRotation), ::il2cpp_utils::ExtractType(rotateTowardsPlayer), ::il2cpp_utils::ExtractType(useRandomRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatTime, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, flipYSide, endRotation, rotateTowardsPlayer, useRandomRotation);
}
// Autogenerated method: NoteMovement.Awake
void GlobalNamespace::NoteMovement::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.OnDestroy
void GlobalNamespace::NoteMovement::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleFloorMovementDidFinish
void GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFloorMovementDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidFinish
void GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidPassMissedMark
void GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidPassMissedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidPassThreeQuarters
void GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters(::GlobalNamespace::NoteJump* noteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidPassThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteJump);
}
// Autogenerated method: NoteMovement.HandleNoteJumpNoteJumpDidPassHalf
void GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpNoteJumpDidPassHalf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.ManualUpdate
void GlobalNamespace::NoteMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteMovement/MovementPhase
#include "GlobalNamespace/NoteMovement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase None
::GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase None
void GlobalNamespace::NoteMovement::MovementPhase::_set_None(::GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "None", value));
}
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase MovingOnTheFloor
::GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_MovingOnTheFloor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_get_MovingOnTheFloor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "MovingOnTheFloor"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase MovingOnTheFloor
void GlobalNamespace::NoteMovement::MovementPhase::_set_MovingOnTheFloor(::GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_set_MovingOnTheFloor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "MovingOnTheFloor", value));
}
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase Jumping
::GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_Jumping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_get_Jumping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "Jumping"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase Jumping
void GlobalNamespace::NoteMovement::MovementPhase::_set_Jumping(::GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::_set_Jumping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "Jumping", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteMovement::MovementPhase::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::MovementPhase::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ProModeTrailingCollidersController
#include "GlobalNamespace/ProModeTrailingCollidersController.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber _mainSmallCuttableBySaber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoxCuttableBySaber*& GlobalNamespace::ProModeTrailingCollidersController::dyn__mainSmallCuttableBySaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::dyn__mainSmallCuttableBySaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainSmallCuttableBySaber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoxCuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber[] _trailingSmallCuttableBySaberList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>& GlobalNamespace::ProModeTrailingCollidersController::dyn__trailingSmallCuttableBySaberList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::dyn__trailingSmallCuttableBySaberList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailingSmallCuttableBySaberList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BoxCuttableBySaber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteMovement _noteMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement*& GlobalNamespace::ProModeTrailingCollidersController::dyn__noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::dyn__noteMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ProModeTrailingCollidersController::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ProModeTrailingCollidersController.Start
void GlobalNamespace::ProModeTrailingCollidersController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProModeTrailingCollidersController.OnDestroy
void GlobalNamespace::ProModeTrailingCollidersController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProModeTrailingCollidersController.HandleNoteDidMoveInJumpPhase
void GlobalNamespace::ProModeTrailingCollidersController::HandleNoteDidMoveInJumpPhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProModeTrailingCollidersController::HandleNoteDidMoveInJumpPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidMoveInJumpPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomNoteRotation
#include "GlobalNamespace/RandomNoteRotation.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private NoteControllerBase _noteController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteControllerBase*& GlobalNamespace::RandomNoteRotation::dyn__noteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomNoteRotation::dyn__noteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteControllerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::RandomNoteRotation::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomNoteRotation::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomNoteRotation.Awake
void GlobalNamespace::RandomNoteRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomNoteRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomNoteRotation.OnDestroy
void GlobalNamespace::RandomNoteRotation::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomNoteRotation::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomNoteRotation.HandleNoteControllerDidInit
void GlobalNamespace::RandomNoteRotation::HandleNoteControllerDidInit(::GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomNoteRotation::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialNoteController
#include "GlobalNamespace/TutorialNoteController.hpp"
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteVisualModifierType
#include "GlobalNamespace/NoteVisualModifierType.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber _cuttableBySaberCore
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoxCuttableBySaber*& GlobalNamespace::TutorialNoteController::dyn__cuttableBySaberCore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::dyn__cuttableBySaberCore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cuttableBySaberCore"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoxCuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoxCuttableBySaber _cuttableBySaberBeforeNote
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoxCuttableBySaber*& GlobalNamespace::TutorialNoteController::dyn__cuttableBySaberBeforeNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::dyn__cuttableBySaberBeforeNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cuttableBySaberBeforeNote"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoxCuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _wrapperGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TutorialNoteController::dyn__wrapperGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::dyn__wrapperGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wrapperGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _beforeNoteCutWasOk
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TutorialNoteController::dyn__beforeNoteCutWasOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::dyn__beforeNoteCutWasOk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beforeNoteCutWasOk"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cutAngleTolerance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TutorialNoteController::dyn__cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::dyn__cutAngleTolerance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutAngleTolerance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TutorialNoteController.get_noteMovement
::GlobalNamespace::NoteMovement* GlobalNamespace::TutorialNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.get_noteVisualModifierType
::GlobalNamespace::NoteVisualModifierType GlobalNamespace::TutorialNoteController::get_noteVisualModifierType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::get_noteVisualModifierType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteVisualModifierType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteVisualModifierType, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.get_gameplayType
::GlobalNamespace::NoteData::GameplayType GlobalNamespace::TutorialNoteController::get_gameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::get_gameplayType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NoteData::GameplayType, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.Init
void GlobalNamespace::TutorialNoteController::Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float cutAngleTolerance, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(cutAngleTolerance), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, cutAngleTolerance, uniformScale);
}
// Autogenerated method: TutorialNoteController.HandleBeforeNoteWasCutBySaber
void GlobalNamespace::TutorialNoteController::HandleBeforeNoteWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::HandleBeforeNoteWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeforeNoteWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: TutorialNoteController.HandleCoreWasCutBySaber
void GlobalNamespace::TutorialNoteController::HandleCoreWasCutBySaber(::GlobalNamespace::Saber* saber, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::HandleCoreWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCoreWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: TutorialNoteController.Awake
void GlobalNamespace::TutorialNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.OnDestroy
void GlobalNamespace::TutorialNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.NoteDidPassMissedMarker
void GlobalNamespace::TutorialNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.HiddenStateDidChange
void GlobalNamespace::TutorialNoteController::HiddenStateDidChange(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::HiddenStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HiddenStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: TutorialNoteController.Pause
void GlobalNamespace::TutorialNoteController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialNoteController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredObstacleController
#include "GlobalNamespace/MirroredObstacleController.hpp"
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private StretchableObstacle _stretchableObstacle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StretchableObstacle*& GlobalNamespace::MirroredObstacleController::dyn__stretchableObstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::dyn__stretchableObstacle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stretchableObstacle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StretchableObstacle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ObstacleController _followedObstacle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleController*& GlobalNamespace::MirroredObstacleController::dyn__followedObstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::dyn__followedObstacle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followedObstacle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MirroredObstacleController::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _followedTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MirroredObstacleController::dyn__followedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::dyn__followedTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followedTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MirroredObstacleController.set_hide
void GlobalNamespace::MirroredObstacleController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredObstacleController.Awake
void GlobalNamespace::MirroredObstacleController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.OnDestroy
void GlobalNamespace::MirroredObstacleController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.Update
void GlobalNamespace::MirroredObstacleController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.RemoveListeners
void GlobalNamespace::MirroredObstacleController::RemoveListeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::RemoveListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.UpdatePositionAndRotation
void GlobalNamespace::MirroredObstacleController::UpdatePositionAndRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::UpdatePositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.Mirror
void GlobalNamespace::MirroredObstacleController::Mirror(::GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::Mirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredObstacleController.HandleDidStartDissolving
void GlobalNamespace::MirroredObstacleController::HandleDidStartDissolving(::GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredObstacleController::HandleDidStartDissolving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
// Including type: ObstacleController/<DissolveCoroutine>d__65
#include "GlobalNamespace/ObstacleController_-DissolveCoroutine-d__65.hpp"
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kAvoidMarkTimeOffset
float GlobalNamespace::ObstacleController::_get_kAvoidMarkTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::_get_kAvoidMarkTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ObstacleController", "kAvoidMarkTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kAvoidMarkTimeOffset
void GlobalNamespace::ObstacleController::_set_kAvoidMarkTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::_set_kAvoidMarkTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleController", "kAvoidMarkTimeOffset", value));
}
// Autogenerated instance field getter
// Get instance field: private StretchableObstacle _stretchableObstacle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StretchableObstacle*& GlobalNamespace::ObstacleController::dyn__stretchableObstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__stretchableObstacle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stretchableObstacle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StretchableObstacle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _endDistanceOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__endDistanceOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__endDistanceOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endDistanceOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _visualWrappers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ObstacleController::dyn__visualWrappers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__visualWrappers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_visualWrappers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::ObstacleController::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::ObstacleController::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::ObstacleController::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleController> finishedMovementEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::ObstacleController::dyn_finishedMovementEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn_finishedMovementEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishedMovementEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleController> passedThreeQuartersOfMove2Event
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::ObstacleController::dyn_passedThreeQuartersOfMove2Event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn_passedThreeQuartersOfMove2Event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "passedThreeQuartersOfMove2Event"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleController> passedAvoidedMarkEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::ObstacleController::dyn_passedAvoidedMarkEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn_passedAvoidedMarkEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "passedAvoidedMarkEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleController> didDissolveEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::ObstacleController::dyn_didDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn_didDissolveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didDissolveEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<ObstacleController,System.Single> didUpdateProgress
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ObstacleController*, float>*& GlobalNamespace::ObstacleController::dyn_didUpdateProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn_didUpdateProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didUpdateProgress"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::ObstacleController*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _width
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _height
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _length
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ObstacleController::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _midPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ObstacleController::dyn__midPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__midPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_midPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _endPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ObstacleController::dyn__endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__endPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _move1Duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__move1Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__move1Duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_move1Duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _move2Duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__move2Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__move2Duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_move2Duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startTimeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__startTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__startTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _obstacleDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__obstacleDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__obstacleDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _passedThreeQuartersOfMove2Reported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObstacleController::dyn__passedThreeQuartersOfMove2Reported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__passedThreeQuartersOfMove2Reported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_passedThreeQuartersOfMove2Reported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _passedAvoidedMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObstacleController::dyn__passedAvoidedMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__passedAvoidedMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_passedAvoidedMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _passedAvoidedMarkTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__passedAvoidedMarkTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__passedAvoidedMarkTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_passedAvoidedMarkTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _finishMovementTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::dyn__finishMovementTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__finishMovementTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finishMovementTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds _bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::ObstacleController::dyn__bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _dissolving
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObstacleController::dyn__dissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__dissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dissolving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ObstacleData _obstacleData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleData*& GlobalNamespace::ObstacleController::dyn__obstacleData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__obstacleData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ObstacleController::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ObstacleController::dyn__worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__worldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ObstacleController::dyn__inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::dyn__inverseWorldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleController.get_bounds
::UnityEngine::Bounds GlobalNamespace::ObstacleController::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_obstacleData
::GlobalNamespace::ObstacleData* GlobalNamespace::ObstacleController::get_obstacleData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_obstacleData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ObstacleData*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_hasPassedAvoidedMark
bool GlobalNamespace::ObstacleController::get_hasPassedAvoidedMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_hasPassedAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPassedAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_move1Duration
float GlobalNamespace::ObstacleController::get_move1Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_move1Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_move1Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_move2Duration
float GlobalNamespace::ObstacleController::get_move2Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_move2Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_move2Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_width
float GlobalNamespace::ObstacleController::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_height
float GlobalNamespace::ObstacleController::get_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_length
float GlobalNamespace::ObstacleController::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_color
::UnityEngine::Color GlobalNamespace::ObstacleController::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.add_finishedMovementEvent
void GlobalNamespace::ObstacleController::add_finishedMovementEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::add_finishedMovementEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_finishedMovementEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_finishedMovementEvent
void GlobalNamespace::ObstacleController::remove_finishedMovementEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::remove_finishedMovementEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_finishedMovementEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_passedThreeQuartersOfMove2Event
void GlobalNamespace::ObstacleController::add_passedThreeQuartersOfMove2Event(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::add_passedThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_passedThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_passedThreeQuartersOfMove2Event
void GlobalNamespace::ObstacleController::remove_passedThreeQuartersOfMove2Event(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::remove_passedThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_passedThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_passedAvoidedMarkEvent
void GlobalNamespace::ObstacleController::add_passedAvoidedMarkEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::add_passedAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_passedAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_passedAvoidedMarkEvent
void GlobalNamespace::ObstacleController::remove_passedAvoidedMarkEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::remove_passedAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_passedAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_didDissolveEvent
void GlobalNamespace::ObstacleController::add_didDissolveEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::add_didDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_didDissolveEvent
void GlobalNamespace::ObstacleController::remove_didDissolveEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::remove_didDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_didUpdateProgress
void GlobalNamespace::ObstacleController::add_didUpdateProgress(::System::Action_2<::GlobalNamespace::ObstacleController*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::add_didUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_didUpdateProgress
void GlobalNamespace::ObstacleController::remove_didUpdateProgress(::System::Action_2<::GlobalNamespace::ObstacleController*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::remove_didUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.Init
void GlobalNamespace::ObstacleController::Init(::GlobalNamespace::ObstacleData* obstacleData, float worldRotation, ::UnityEngine::Vector3 startPos, ::UnityEngine::Vector3 midPos, ::UnityEngine::Vector3 endPos, float move1Duration, float move2Duration, float singleLineWidth, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(midPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(move1Duration), ::il2cpp_utils::ExtractType(move2Duration), ::il2cpp_utils::ExtractType(singleLineWidth), ::il2cpp_utils::ExtractType(height)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, worldRotation, startPos, midPos, endPos, move1Duration, move2Duration, singleLineWidth, height);
}
// Autogenerated method: ObstacleController.Update
void GlobalNamespace::ObstacleController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.ManualUpdate
void GlobalNamespace::ObstacleController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.GetPosForTime
::UnityEngine::Vector3 GlobalNamespace::ObstacleController::GetPosForTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::GetPosForTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosForTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: ObstacleController.DissolveCoroutine
::System::Collections::IEnumerator* GlobalNamespace::ObstacleController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: ObstacleController.Dissolve
void GlobalNamespace::ObstacleController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::Dissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: ObstacleController.Hide
void GlobalNamespace::ObstacleController::Hide(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::Hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: ObstacleController.Pause
void GlobalNamespace::ObstacleController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObstacleController/<DissolveCoroutine>d__65
#include "GlobalNamespace/ObstacleController_-DissolveCoroutine-d__65.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ObstacleController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleController*& GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__65.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__65.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__65.System.IDisposable.Dispose
void GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__65.MoveNext
bool GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__65.System.Collections.IEnumerator.Reset
void GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleController::$DissolveCoroutine$d__65::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ObstacleControllerBase> didInitEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleControllerBase*>*& GlobalNamespace::ObstacleControllerBase::dyn_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::dyn_didInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didInitEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::ObstacleControllerBase*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<ObstacleControllerBase,System.Single> didStartDissolvingEvent
[[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ObstacleControllerBase*, float>*& GlobalNamespace::ObstacleControllerBase::dyn_didStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::dyn_didStartDissolvingEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didStartDissolvingEvent"))->offset;
  return *reinterpret_cast<::System::Action_2<::GlobalNamespace::ObstacleControllerBase*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleControllerBase.add_didInitEvent
void GlobalNamespace::ObstacleControllerBase::add_didInitEvent(::System::Action_1<::GlobalNamespace::ObstacleControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.remove_didInitEvent
void GlobalNamespace::ObstacleControllerBase::remove_didInitEvent(::System::Action_1<::GlobalNamespace::ObstacleControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.add_didStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::add_didStartDissolvingEvent(::System::Action_2<::GlobalNamespace::ObstacleControllerBase*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::add_didStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.remove_didStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::remove_didStartDissolvingEvent(::System::Action_2<::GlobalNamespace::ObstacleControllerBase*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::remove_didStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.InvokeDidInitEvent
void GlobalNamespace::ObstacleControllerBase::InvokeDidInitEvent(::GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::InvokeDidInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: ObstacleControllerBase.InvokeDidStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::InvokeDidStartDissolvingEvent(::GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleControllerBase::InvokeDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleDissolve
#include "GlobalNamespace/ObstacleDissolve.hpp"
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ObstacleControllerBase _obstacleController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleControllerBase*& GlobalNamespace::ObstacleDissolve::dyn__obstacleController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::dyn__obstacleController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleControllerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private CutoutAnimateEffect _cutoutAnimateEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CutoutAnimateEffect*& GlobalNamespace::ObstacleDissolve::dyn__cutoutAnimateEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::dyn__cutoutAnimateEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutoutAnimateEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CutoutAnimateEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleDissolve.Awake
void GlobalNamespace::ObstacleDissolve::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleDissolve.OnDestroy
void GlobalNamespace::ObstacleDissolve::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleDissolve.HandleObstacleDidInitEvent
void GlobalNamespace::ObstacleDissolve::HandleObstacleDidInitEvent(::GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::HandleObstacleDidInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: ObstacleDissolve.HandleObcstacleDidStartDissolvingEvent
void GlobalNamespace::ObstacleDissolve::HandleObcstacleDidStartDissolvingEvent(::GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleDissolve::HandleObcstacleDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObcstacleDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleScaleUp
#include "GlobalNamespace/ObstacleScaleUp.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _fullScalePart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ObstacleScaleUp::dyn__fullScalePart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::dyn__fullScalePart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fullScalePart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ObstacleScaleUp::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ObstacleController _obstacleController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleController*& GlobalNamespace::ObstacleScaleUp::dyn__obstacleController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::dyn__obstacleController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleScaleUp.Awake
void GlobalNamespace::ObstacleScaleUp::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleScaleUp.OnDestroy
void GlobalNamespace::ObstacleScaleUp::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleScaleUp.UpdateScale
void GlobalNamespace::ObstacleScaleUp::UpdateScale(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::UpdateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: ObstacleScaleUp.HandleObstacleControllerDidUpdateProgress
void GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidUpdateProgress(::GlobalNamespace::ObstacleController* obstacleController, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleControllerDidUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController, time);
}
// Autogenerated method: ObstacleScaleUp.HandleObstacleControllerDidInit
void GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidInit(::GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StretchableCube
#include "GlobalNamespace/StretchableCube.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kLength
float GlobalNamespace::StretchableCube::_get_kLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_kLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLength
void GlobalNamespace::StretchableCube::_set_kLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_kLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kWidth
float GlobalNamespace::StretchableCube::_get_kWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_kWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kWidth
void GlobalNamespace::StretchableCube::_set_kWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_kWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kWidth", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHeight
float GlobalNamespace::StretchableCube::_get_kHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_kHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kHeight"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHeight
void GlobalNamespace::StretchableCube::_set_kHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_kHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kHeight", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F6E0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p0
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p0"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p0
void GlobalNamespace::StretchableCube::_set_p0(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p0", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F6F0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p1
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p1"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p1
void GlobalNamespace::StretchableCube::_set_p1(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p1", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F700
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p2
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p2"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p2
void GlobalNamespace::StretchableCube::_set_p2(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p2", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F710
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p3
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p3"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p3
void GlobalNamespace::StretchableCube::_set_p3(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p3", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F720
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p4
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p4"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p4
void GlobalNamespace::StretchableCube::_set_p4(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p4", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F730
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p5
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p5"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p5
void GlobalNamespace::StretchableCube::_set_p5(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p5", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F740
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p6
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p6"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p6
void GlobalNamespace::StretchableCube::_set_p6(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p6", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F750
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p7
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_p7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "p7"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p7
void GlobalNamespace::StretchableCube::_set_p7(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_p7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p7", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F760
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] vertices
::ArrayW<::UnityEngine::Vector3> GlobalNamespace::StretchableCube::_get_vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_vertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Vector3>>("", "StretchableCube", "vertices"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] vertices
void GlobalNamespace::StretchableCube::_set_vertices(::ArrayW<::UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_vertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "vertices", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F770
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 up
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "up"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 up
void GlobalNamespace::StretchableCube::_set_up(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "up", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F780
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 down
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_down() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "down"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 down
void GlobalNamespace::StretchableCube::_set_down(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "down", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F790
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 front
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_front() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_front");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "front"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 front
void GlobalNamespace::StretchableCube::_set_front(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_front");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "front", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F7A0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 back
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_back() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "back"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 back
void GlobalNamespace::StretchableCube::_set_back(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "back", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F7B0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 left
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "left"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 left
void GlobalNamespace::StretchableCube::_set_left(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "left", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F7C0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 right
::UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "StretchableCube", "right"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 right
void GlobalNamespace::StretchableCube::_set_right(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "right", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F7D0
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] normals
::ArrayW<::UnityEngine::Vector3> GlobalNamespace::StretchableCube::_get_normals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_normals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Vector3>>("", "StretchableCube", "normals"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] normals
void GlobalNamespace::StretchableCube::_set_normals(::ArrayW<::UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_normals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "normals", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F7E0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] triangles
::ArrayW<int> GlobalNamespace::StretchableCube::_get_triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_get_triangles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("", "StretchableCube", "triangles"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] triangles
void GlobalNamespace::StretchableCube::_set_triangles(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::_set_triangles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "triangles", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _uvs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& GlobalNamespace::StretchableCube::dyn__uvs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::dyn__uvs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uvs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::StretchableCube::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StretchableCube..cctor
void GlobalNamespace::StretchableCube::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StretchableCube", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: StretchableCube.Awake
void GlobalNamespace::StretchableCube::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.OnDestroy
void GlobalNamespace::StretchableCube::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.CreateBox
::UnityEngine::Mesh* GlobalNamespace::StretchableCube::CreateBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::CreateBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.RecalculateUVs
void GlobalNamespace::StretchableCube::RecalculateUVs(::ArrayW<::UnityEngine::Vector2> uvs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::RecalculateUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvs)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, uvs);
}
// Autogenerated method: StretchableCube.RefreshUVs
void GlobalNamespace::StretchableCube::RefreshUVs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableCube::RefreshUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: ParametricBoxFrameController
#include "GlobalNamespace/ParametricBoxFrameController.hpp"
// Including type: ParametricBoxFakeGlowController
#include "GlobalNamespace/ParametricBoxFakeGlowController.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F8E0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _uvScaleID
int GlobalNamespace::StretchableObstacle::_get__uvScaleID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_get__uvScaleID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_uvScaleID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _uvScaleID
void GlobalNamespace::StretchableObstacle::_set__uvScaleID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_set__uvScaleID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_uvScaleID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F8F0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tintColorID
int GlobalNamespace::StretchableObstacle::_get__tintColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_get__tintColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_tintColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tintColorID
void GlobalNamespace::StretchableObstacle::_set__tintColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_set__tintColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_tintColorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F900
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _addColorID
int GlobalNamespace::StretchableObstacle::_get__addColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_get__addColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_addColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _addColorID
void GlobalNamespace::StretchableObstacle::_set__addColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::_set__addColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_addColorID", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _edgeSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StretchableObstacle::dyn__edgeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__edgeSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_edgeSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _coreOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StretchableObstacle::dyn__coreOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__coreOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coreOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _addColorMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StretchableObstacle::dyn__addColorMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__addColorMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_addColorMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _obstacleCoreLerpToWhiteFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StretchableObstacle::dyn__obstacleCoreLerpToWhiteFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__obstacleCoreLerpToWhiteFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleCoreLerpToWhiteFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _fakeGlowOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::StretchableObstacle::dyn__fakeGlowOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__fakeGlowOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fakeGlowOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _obstacleCore
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::StretchableObstacle::dyn__obstacleCore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__obstacleCore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleCore"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController[] _materialPropertyBlockControllers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>& GlobalNamespace::StretchableObstacle::dyn__materialPropertyBlockControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__materialPropertyBlockControllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockControllers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ParametricBoxFrameController _obstacleFrame
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ParametricBoxFrameController*& GlobalNamespace::StretchableObstacle::dyn__obstacleFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__obstacleFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleFrame"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ParametricBoxFrameController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ParametricBoxFakeGlowController _obstacleFakeGlow
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ParametricBoxFakeGlowController*& GlobalNamespace::StretchableObstacle::dyn__obstacleFakeGlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__obstacleFakeGlow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleFakeGlow"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ParametricBoxFakeGlowController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds _bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::StretchableObstacle::dyn__bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::dyn__bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StretchableObstacle.get_bounds
::UnityEngine::Bounds GlobalNamespace::StretchableObstacle::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: StretchableObstacle..cctor
void GlobalNamespace::StretchableObstacle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StretchableObstacle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: StretchableObstacle.SetSizeAndColor
void GlobalNamespace::StretchableObstacle::SetSizeAndColor(float width, float height, float length, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::SetSizeAndColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSizeAndColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, width, height, length, color);
}
// Autogenerated method: StretchableObstacle.OnValidate
void GlobalNamespace::StretchableObstacle::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IJumpOffsetYProvider
#include "GlobalNamespace/IJumpOffsetYProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IJumpOffsetYProvider.get_jumpOffsetY
float GlobalNamespace::IJumpOffsetYProvider::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IJumpOffsetYProvider::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderDidFinishJumpEvent
#include "GlobalNamespace/ISliderDidFinishJumpEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderDidFinishJumpEvent.HandleSliderDidFinishJump
void GlobalNamespace::ISliderDidFinishJumpEvent::HandleSliderDidFinishJump(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderDidFinishJumpEvent::HandleSliderDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderHeadDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderHeadDidMovePastCutMarkEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderHeadDidMovePastCutMarkEvent.HandleSliderStartDidMovePastCutMark
void GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent::HandleSliderStartDidMovePastCutMark(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent::HandleSliderStartDidMovePastCutMark");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderStartDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderTailDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderTailDidMovePastCutMarkEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderTailDidMovePastCutMarkEvent.HandleSliderTailDidMovePastCutMark
void GlobalNamespace::ISliderTailDidMovePastCutMarkEvent::HandleSliderTailDidMovePastCutMark(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent::HandleSliderTailDidMovePastCutMark");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderTailDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderDidStartDissolvingEvent
#include "GlobalNamespace/ISliderDidStartDissolvingEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderDidStartDissolvingEvent.HandleSliderDidStartDissolving
void GlobalNamespace::ISliderDidStartDissolvingEvent::HandleSliderDidStartDissolving(::GlobalNamespace::SliderController* sliderController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderDidStartDissolvingEvent::HandleSliderDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderDidDissolveEvent
#include "GlobalNamespace/ISliderDidDissolveEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderDidDissolveEvent.HandleSliderDidDissolve
void GlobalNamespace::ISliderDidDissolveEvent::HandleSliderDidDissolve(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderDidDissolveEvent::HandleSliderDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController/Pool
#include "GlobalNamespace/SliderController_Pool.hpp"
// Including type: SliderController/<DissolveCoroutine>d__70
#include "GlobalNamespace/SliderController_-DissolveCoroutine-d__70.hpp"
// Including type: SliderIntensityEffect
#include "GlobalNamespace/SliderIntensityEffect.hpp"
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: SliderMovement
#include "GlobalNamespace/SliderMovement.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: ISliderDidFinishJumpEvent
#include "GlobalNamespace/ISliderDidFinishJumpEvent.hpp"
// Including type: ISliderDidStartDissolvingEvent
#include "GlobalNamespace/ISliderDidStartDissolvingEvent.hpp"
// Including type: ISliderDidDissolveEvent
#include "GlobalNamespace/ISliderDidDissolveEvent.hpp"
// Including type: ISliderHeadDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderHeadDidMovePastCutMarkEvent.hpp"
// Including type: ISliderTailDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderTailDidMovePastCutMarkEvent.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: FixedUpdateVector3SmoothValue
#include "GlobalNamespace/FixedUpdateVector3SmoothValue.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSaberAttractPointNormalizedPosition
float GlobalNamespace::SliderController::_get_kSaberAttractPointNormalizedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::_get_kSaberAttractPointNormalizedPosition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController", "kSaberAttractPointNormalizedPosition"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSaberAttractPointNormalizedPosition
void GlobalNamespace::SliderController::_set_kSaberAttractPointNormalizedPosition(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::_set_kSaberAttractPointNormalizedPosition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController", "kSaberAttractPointNormalizedPosition", value));
}
// Autogenerated instance field getter
// Get instance field: protected SliderIntensityEffect _sliderIntensityEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect*& GlobalNamespace::SliderController::dyn__sliderIntensityEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderIntensityEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderIntensityEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMeshController _sliderMeshController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& GlobalNamespace::SliderController::dyn__sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderMeshController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMovement _sliderMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMovement*& GlobalNamespace::SliderController::dyn__sliderMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _closeInteractionSaberPosSmoothParam
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__closeInteractionSaberPosSmoothParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__closeInteractionSaberPosSmoothParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_closeInteractionSaberPosSmoothParam"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawnController*& GlobalNamespace::SliderController::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SliderController::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::SliderController::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SliderController::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidFinishJumpEvent> _sliderDidFinishMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidFinishMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidFinishMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidFinishMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidStartDissolvingEvent> _sliderDidStartDissolving
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidStartDissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidStartDissolving"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidDissolveEvent> _sliderDidDissolve
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidDissolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidDissolve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidDissolve"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderHeadDidMovePastCutMarkEvent> _sliderHeadDidMovePastCutMark
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*& GlobalNamespace::SliderController::dyn__sliderHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderHeadDidMovePastCutMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderHeadDidMovePastCutMark"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderTailDidMovePastCutMarkEvent> _sliderTailDidMovePastCutMark
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*& GlobalNamespace::SliderController::dyn__sliderTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderTailDidMovePastCutMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderTailDidMovePastCutMark"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderController/LengthType _lengthType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::LengthType& GlobalNamespace::SliderController::dyn__lengthType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__lengthType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::LengthType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderData _sliderData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderData*& GlobalNamespace::SliderController::dyn__sliderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _saber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& GlobalNamespace::SliderController::dyn__saber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__saber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headJumpOffsetY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__headJumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__headJumpOffsetY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headJumpOffsetY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sliderDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _initColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SliderController::dyn__initColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__initColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _attractingSaber
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderController::dyn__attractingSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__attractingSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_attractingSaber"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _randomValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__randomValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__randomValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _zDistanceBetweenNotes
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__zDistanceBetweenNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__zDistanceBetweenNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zDistanceBetweenNotes"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__jumpDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FixedUpdateVector3SmoothValue _closeSmoothedSaberInteractionPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FixedUpdateVector3SmoothValue*& GlobalNamespace::SliderController::dyn__closeSmoothedSaberInteractionPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__closeSmoothedSaberInteractionPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_closeSmoothedSaberInteractionPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FixedUpdateVector3SmoothValue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController.get_sliderDidFinishJumpEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>* GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDidStartDissolvingEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>* GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDidDissolveEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>* GlobalNamespace::SliderController::get_sliderDidDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderHeadDidMovePastCutMark
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>* GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderHeadDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderTailDidMovePastCutMark
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>* GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderTailDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_lengthType
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::get_lengthType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_lengthType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lengthType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderController::LengthType, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderData
::GlobalNamespace::SliderData* GlobalNamespace::SliderController::get_sliderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderData*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_saberInteractionParam
float GlobalNamespace::SliderController::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderMeshController
::GlobalNamespace::SliderMeshController* GlobalNamespace::SliderController::get_sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderMeshController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderMeshController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderMeshController*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderMovement
::GlobalNamespace::SliderMovement* GlobalNamespace::SliderController::get_sliderMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderMovement*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_initColor
::UnityEngine::Color GlobalNamespace::SliderController::get_initColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_initColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_randomValue
float GlobalNamespace::SliderController::get_randomValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_randomValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_randomValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_zDistanceBetweenNotes
float GlobalNamespace::SliderController::get_zDistanceBetweenNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_zDistanceBetweenNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_zDistanceBetweenNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_jumpDistance
float GlobalNamespace::SliderController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_jumpDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_headJumpOffsetY
float GlobalNamespace::SliderController::get_headJumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_headJumpOffsetY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headJumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDuration
float GlobalNamespace::SliderController::get_sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_closeSmoothedSaberInteractionPos
::GlobalNamespace::FixedUpdateVector3SmoothValue* GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_closeSmoothedSaberInteractionPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::FixedUpdateVector3SmoothValue*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderIntensityEffect
::GlobalNamespace::SliderIntensityEffect* GlobalNamespace::SliderController::get_sliderIntensityEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderIntensityEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderIntensityEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderIntensityEffect*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Init
void GlobalNamespace::SliderController::Init(::GlobalNamespace::SliderController::LengthType lengthType, ::GlobalNamespace::SliderData* sliderData, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 tailNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, ::UnityEngine::Vector3 tailNoteJumpEndPos, float jumpDuration, float startNoteJumpGravity, float endNoteJumpGravity, float noteUniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lengthType), ::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(headNoteJumpStartPos), ::il2cpp_utils::ExtractType(tailNoteJumpStartPos), ::il2cpp_utils::ExtractType(headNoteJumpEndPos), ::il2cpp_utils::ExtractType(tailNoteJumpEndPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(startNoteJumpGravity), ::il2cpp_utils::ExtractType(endNoteJumpGravity), ::il2cpp_utils::ExtractType(noteUniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lengthType, sliderData, worldRotation, headNoteJumpStartPos, tailNoteJumpStartPos, headNoteJumpEndPos, tailNoteJumpEndPos, jumpDuration, startNoteJumpGravity, endNoteJumpGravity, noteUniformScale);
}
// Autogenerated method: SliderController.Awake
void GlobalNamespace::SliderController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Start
void GlobalNamespace::SliderController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.OnDestroy
void GlobalNamespace::SliderController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Update
void GlobalNamespace::SliderController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.FixedUpdate
void GlobalNamespace::SliderController::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.ManualUpdate
void GlobalNamespace::SliderController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.UpdateMaterialPropertyBlock
void GlobalNamespace::SliderController::UpdateMaterialPropertyBlock(float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::UpdateMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderController.DissolveCoroutine
::System::Collections::IEnumerator* GlobalNamespace::SliderController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: SliderController.Dissolve
void GlobalNamespace::SliderController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Dissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: SliderController.Hide
void GlobalNamespace::SliderController::Hide(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: SliderController.Pause
void GlobalNamespace::SliderController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated method: SliderController.IsNoteStartOfThisSlider
bool GlobalNamespace::SliderController::IsNoteStartOfThisSlider(::GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::IsNoteStartOfThisSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNoteStartOfThisSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, noteData);
}
// Autogenerated method: SliderController.HandleMovementDidFinish
void GlobalNamespace::SliderController::HandleMovementDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleMovementDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMovementDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleHeadDidMovePastCutMark
void GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHeadDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleTailDidMovePastCutMark
void GlobalNamespace::SliderController::HandleTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleTailDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTailDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleNoteWasMissed
void GlobalNamespace::SliderController::HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: SliderController.HandleNoteWasCut
void GlobalNamespace::SliderController::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: SliderController.HandleFadeInDidStart
void GlobalNamespace::SliderController::HandleFadeInDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleFadeInDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFadeInDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.SetSaberAttraction
void GlobalNamespace::SliderController::SetSaberAttraction(bool saberAttraction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::SetSaberAttraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSaberAttraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberAttraction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberAttraction);
}
// Autogenerated method: SliderController.GetSaberInteractionPoint
::UnityEngine::Vector3 GlobalNamespace::SliderController::GetSaberInteractionPoint(::GlobalNamespace::Saber* saber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::GetSaberInteractionPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderController", "GetSaberInteractionPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, saber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/LengthType
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Short
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Short() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Short");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Short"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Short
void GlobalNamespace::SliderController::LengthType::_set_Short(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Short");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Short", value));
}
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Medium
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Medium() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Medium");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Medium"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Medium
void GlobalNamespace::SliderController::LengthType::_set_Medium(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Medium");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Medium", value));
}
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Long
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Long() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Long");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Long"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Long
void GlobalNamespace::SliderController::LengthType::_set_Long(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Long");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Long", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderController::LengthType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool
#include "GlobalNamespace/SliderController_Pool.hpp"
// Including type: SliderController/Pool/Short
#include "GlobalNamespace/SliderController_Pool_Short.hpp"
// Including type: SliderController/Pool/Medium
#include "GlobalNamespace/SliderController_Pool_Medium.hpp"
// Including type: SliderController/Pool/Long
#include "GlobalNamespace/SliderController_Pool_Long.hpp"
// Including type: Zenject.MonoMemoryPool`1
#include "Zenject/MonoMemoryPool_1.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController/LengthType
#include "GlobalNamespace/SliderController.hpp"
// Including type: BeatmapObjectSpawnMovementData/SliderSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_SliderSpawnData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToUseMedium
float GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseMedium() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseMedium");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController/Pool", "kMinDistanceToUseMedium"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToUseMedium
void GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseMedium(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseMedium");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/Pool", "kMinDistanceToUseMedium", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToUseLong
float GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController/Pool", "kMinDistanceToUseLong"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToUseLong
void GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseLong(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/Pool", "kMinDistanceToUseLong", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Short _shortPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Short*& GlobalNamespace::SliderController::Pool::dyn__shortPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__shortPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Short**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Medium _mediumPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Medium*& GlobalNamespace::SliderController::Pool::dyn__mediumPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__mediumPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mediumPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Medium**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Long _longPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Long*& GlobalNamespace::SliderController::Pool::dyn__longPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__longPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_longPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Long**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController/Pool.GetPool
::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>* GlobalNamespace::SliderController::Pool::GetPool(::GlobalNamespace::SliderController::LengthType lengthType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::GetPool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lengthType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>*, false>(this, ___internal__method, lengthType);
}
// Autogenerated method: SliderController/Pool.GetLengthFromSliderData
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::Pool::GetLengthFromSliderData(::GlobalNamespace::SliderData* sliderNoteData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData sliderSpawnData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::GetLengthFromSliderData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderController/Pool", "GetLengthFromSliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderNoteData), ::il2cpp_utils::ExtractType(sliderSpawnData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderController::LengthType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sliderNoteData, sliderSpawnData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Short
#include "GlobalNamespace/SliderController_Pool_Short.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Medium
#include "GlobalNamespace/SliderController_Pool_Medium.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Long
#include "GlobalNamespace/SliderController_Pool_Long.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderController/<DissolveCoroutine>d__70
#include "GlobalNamespace/SliderController_-DissolveCoroutine-d__70.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController*& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.IDisposable.Dispose
void GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.MoveNext
bool GlobalNamespace::SliderController::$DissolveCoroutine$d__70::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.IEnumerator.Reset
void GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderControllerBase
#include "GlobalNamespace/SliderControllerBase.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::SliderControllerBase::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected CutoutAnimateEffect _cutoutAnimateEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CutoutAnimateEffect*& GlobalNamespace::SliderControllerBase::dyn__cutoutAnimateEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__cutoutAnimateEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutoutAnimateEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CutoutAnimateEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _dissolving
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderControllerBase::dyn__dissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__dissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dissolving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderControllerBase.AnimateCutout
void GlobalNamespace::SliderControllerBase::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderHapticFeedbackInteractionEffect
#include "GlobalNamespace/SliderHapticFeedbackInteractionEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kVibrationSaberInteractionParamThreshold
float GlobalNamespace::SliderHapticFeedbackInteractionEffect::_get_kVibrationSaberInteractionParamThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::_get_kVibrationSaberInteractionParamThreshold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderHapticFeedbackInteractionEffect", "kVibrationSaberInteractionParamThreshold"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVibrationSaberInteractionParamThreshold
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::_set_kVibrationSaberInteractionParamThreshold(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::_set_kVibrationSaberInteractionParamThreshold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderHapticFeedbackInteractionEffect", "kVibrationSaberInteractionParamThreshold", value));
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _hapticPreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticPreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGamePause _gamePause
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGamePause*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__gamePause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__gamePause");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gamePause"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGamePause**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberType _saberType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberType& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__saberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Update
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Vibrate
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Vibrate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Vibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Vibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Start
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.StartEffect
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.EndEffect
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderIntensityEffect
#include "GlobalNamespace/SliderIntensityEffect.hpp"
// Including type: SliderIntensityEffect/InitData
#include "GlobalNamespace/SliderIntensityEffect_InitData.hpp"
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
// Including type: SliderIntensityEffect/IntensityCalculationDelegate
#include "GlobalNamespace/SliderIntensityEffect_IntensityCalculationDelegate.hpp"
// Including type: SliderIntensityEffect/<ProcessEffectCoroutine>d__32
#include "GlobalNamespace/SliderIntensityEffect_-ProcessEffectCoroutine-d__32.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _longSliderHeadIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__longSliderHeadIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__longSliderHeadIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_longSliderHeadIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shortSliderHeadIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__shortSliderHeadIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__shortSliderHeadIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortSliderHeadIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__tailIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__tailIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__fadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__fadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stayOffDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__stayOffDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__stayOffDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stayOffDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashBoost
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashBoost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashBoost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashBoost"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashInDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::SliderIntensityEffect::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderIntensityEffect/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::InitData*& GlobalNamespace::SliderIntensityEffect::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action fadeInDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderIntensityEffect::dyn_fadeInDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn_fadeInDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _coreIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__coreIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__coreIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coreIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _effectIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__effectIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__effectIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effectIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _halfJumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__halfJumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__halfJumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_halfJumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sliderDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__sliderDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single headIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn_headIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn_headIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/IntensityCalculationDelegate _intensityCalculationDelegate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate*& GlobalNamespace::SliderIntensityEffect::dyn__intensityCalculationDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__intensityCalculationDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensityCalculationDelegate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement[] _dipEffectFadeElements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& GlobalNamespace::SliderIntensityEffect::dyn__dipEffectFadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__dipEffectFadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dipEffectFadeElements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement[] _flashEffectFadeElements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& GlobalNamespace::SliderIntensityEffect::dyn__flashEffectFadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashEffectFadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashEffectFadeElements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement[] _fadeInEffectFadeElements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& GlobalNamespace::SliderIntensityEffect::dyn__fadeInEffectFadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__fadeInEffectFadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInEffectFadeElements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderIntensityEffect.get_intensity
float GlobalNamespace::SliderIntensityEffect::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.get_colorIntensity
float GlobalNamespace::SliderIntensityEffect::get_colorIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::get_colorIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.add_fadeInDidStartEvent
void GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_fadeInDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderIntensityEffect.remove_fadeInDidStartEvent
void GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_fadeInDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderIntensityEffect.Awake
void GlobalNamespace::SliderIntensityEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.Init
void GlobalNamespace::SliderIntensityEffect::Init(float sliderDuration, float halfJumpDuration, bool startVisible) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderDuration), ::il2cpp_utils::ExtractType(halfJumpDuration), ::il2cpp_utils::ExtractType(startVisible)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderDuration, halfJumpDuration, startVisible);
}
// Autogenerated method: SliderIntensityEffect.ManualUpdate
void GlobalNamespace::SliderIntensityEffect::ManualUpdate(float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderIntensityEffect.ProcessEffectCoroutine
::System::Collections::IEnumerator* GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>* fadeElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEffectCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeElements)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, fadeElements);
}
// Autogenerated method: SliderIntensityEffect.StartIntensityDipEffect
void GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartIntensityDipEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.StartIntensityFadeInEffect
void GlobalNamespace::SliderIntensityEffect::StartIntensityFadeInEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::StartIntensityFadeInEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartIntensityFadeInEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.StartFlashEffect
void GlobalNamespace::SliderIntensityEffect::StartFlashEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::StartFlashEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartFlashEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.<Awake>b__29_0
void GlobalNamespace::SliderIntensityEffect::$Awake$b__29_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::<Awake>b__29_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__29_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.<Awake>b__29_1
void GlobalNamespace::SliderIntensityEffect::$Awake$b__29_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::<Awake>b__29_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__29_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderIntensityEffect/InitData
#include "GlobalNamespace/SliderIntensityEffect_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single sliderColorIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::InitData::dyn_sliderColorIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::InitData::dyn_sliderColorIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sliderColorIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 hapticFeedback
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderIntensityEffect::InitData::dyn_hapticFeedback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::InitData::dyn_hapticFeedback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticFeedback"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single endIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_endIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_endIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly EaseType easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Action startCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderIntensityEffect/IntensityCalculationDelegate
#include "GlobalNamespace/SliderIntensityEffect_IntensityCalculationDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.Invoke
float GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::Invoke(float timeSinceLastSection, float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceLastSection), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, timeSinceLastSection, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::BeginInvoke(float timeSinceLastSection, float timeSinceHeadNoteJump, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceLastSection), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, timeSinceLastSection, timeSinceHeadNoteJump, callback, object);
}
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.EndInvoke
float GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderIntensityEffect/<ProcessEffectCoroutine>d__32
#include "GlobalNamespace/SliderIntensityEffect_-ProcessEffectCoroutine-d__32.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.IEnumerable`1<SliderIntensityEffect/FadeElement> fadeElements
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_fadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_fadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeElements"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderIntensityEffect <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<SliderIntensityEffect/FadeElement> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement <fadeElement>5__3
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::FadeElement*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$fadeElement$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$fadeElement$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<fadeElement>5__3"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect::FadeElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>5__4
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$startTime$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::dyn_$startTime$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.System.IDisposable.Dispose
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.MoveNext
bool GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.<>m__Finally1
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__32.System.Collections.IEnumerator.Reset
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderInteractionEffect
#include "GlobalNamespace/SliderInteractionEffect.hpp"
// Including type: SliderInteractionManager
#include "GlobalNamespace/SliderInteractionManager.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SliderInteractionManager _sliderInteractionManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderInteractionManager*& GlobalNamespace::SliderInteractionEffect::dyn__sliderInteractionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::dyn__sliderInteractionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderInteractionManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderInteractionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderInteractionEffect.get_saberInteractionParam
float GlobalNamespace::SliderInteractionEffect::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.get_colorType
::GlobalNamespace::ColorType GlobalNamespace::SliderInteractionEffect::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.Start
void GlobalNamespace::SliderInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.OnDestroy
void GlobalNamespace::SliderInteractionEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.StartEffect
void GlobalNamespace::SliderInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderInteractionEffect.EndEffect
void GlobalNamespace::SliderInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.HandleSliderWasAddedToActiveSliders
void GlobalNamespace::SliderInteractionEffect::HandleSliderWasAddedToActiveSliders(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::HandleSliderWasAddedToActiveSliders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasAddedToActiveSliders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderInteractionEffect.HandleAllSliderWereRemovedFromActiveSliders
void GlobalNamespace::SliderInteractionEffect::HandleAllSliderWereRemovedFromActiveSliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::HandleAllSliderWereRemovedFromActiveSliders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAllSliderWereRemovedFromActiveSliders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderInteractionManager
#include "GlobalNamespace/SliderInteractionManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorType _colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::SliderInteractionManager::dyn__colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::SliderInteractionManager::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <saberInteractionParam>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderInteractionManager::dyn_$saberInteractionParam$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_$saberInteractionParam$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<saberInteractionParam>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> sliderWasAddedToActiveSlidersEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::SliderInteractionManager::dyn_sliderWasAddedToActiveSlidersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_sliderWasAddedToActiveSlidersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sliderWasAddedToActiveSlidersEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action allSliderWereRemovedFromActiveSlidersEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderInteractionManager::dyn_allSliderWereRemovedFromActiveSlidersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_allSliderWereRemovedFromActiveSlidersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allSliderWereRemovedFromActiveSlidersEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<SliderController> _activeSliders
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SliderController*>*& GlobalNamespace::SliderInteractionManager::dyn__activeSliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__activeSliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeSliders"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SliderController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderInteractionManager.get_colorType
::GlobalNamespace::ColorType GlobalNamespace::SliderInteractionManager::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.get_saberInteractionParam
float GlobalNamespace::SliderInteractionManager::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.set_saberInteractionParam
void GlobalNamespace::SliderInteractionManager::set_saberInteractionParam(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::set_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.add_sliderWasAddedToActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::add_sliderWasAddedToActiveSlidersEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::add_sliderWasAddedToActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sliderWasAddedToActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.remove_sliderWasAddedToActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::remove_sliderWasAddedToActiveSlidersEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::remove_sliderWasAddedToActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sliderWasAddedToActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.add_allSliderWereRemovedFromActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::add_allSliderWereRemovedFromActiveSlidersEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::add_allSliderWereRemovedFromActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_allSliderWereRemovedFromActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.remove_allSliderWereRemovedFromActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::remove_allSliderWereRemovedFromActiveSlidersEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::remove_allSliderWereRemovedFromActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_allSliderWereRemovedFromActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.Start
void GlobalNamespace::SliderInteractionManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.OnDestroy
void GlobalNamespace::SliderInteractionManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.Update
void GlobalNamespace::SliderInteractionManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.AddActiveSlider
void GlobalNamespace::SliderInteractionManager::AddActiveSlider(::GlobalNamespace::SliderController* newSliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::AddActiveSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddActiveSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSliderController);
}
// Autogenerated method: SliderInteractionManager.RemoveActiveSlider
void GlobalNamespace::SliderInteractionManager::RemoveActiveSlider(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::RemoveActiveSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveActiveSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated method: SliderInteractionManager.HandleSliderWasSpawned
void GlobalNamespace::SliderInteractionManager::HandleSliderWasSpawned(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::HandleSliderWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated method: SliderInteractionManager.HandleSliderWasDespawned
void GlobalNamespace::SliderInteractionManager::HandleSliderWasDespawned(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::HandleSliderWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshConstructor
#include "GlobalNamespace/SliderMeshConstructor.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: VertexPath
#include "GlobalNamespace/VertexPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::SliderMeshConstructor::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3[] reusableVerts
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshConstructor::dyn_reusableVerts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableVerts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableVerts"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector2[] reusableUvs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& GlobalNamespace::SliderMeshConstructor::dyn_reusableUvs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableUvs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableUvs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3[] reusableNormals
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshConstructor::dyn_reusableNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableNormals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableNormals"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32[] reusableTriangles
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::SliderMeshConstructor::dyn_reusableTriangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableTriangles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableTriangles"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::SliderMeshConstructor::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshConstructor.get_mesh
::UnityEngine::Mesh* GlobalNamespace::SliderMeshConstructor::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshConstructor.CreateMeshIfNonExisting
void GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMeshIfNonExisting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshConstructor.CreateSliderMesh
void GlobalNamespace::SliderMeshConstructor::CreateSliderMesh(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateSliderMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.CreateSliderMeshInternal
void GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMeshInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.GetVertexCount
int GlobalNamespace::SliderMeshConstructor::GetVertexCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::GetVertexCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVertexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.GetTrianglesCount
int GlobalNamespace::SliderMeshConstructor::GetTrianglesCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::GetTrianglesCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrianglesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshConstructorCrossedStrips
#include "GlobalNamespace/SliderMeshConstructorCrossedStrips.hpp"
// Including type: VertexPath
#include "GlobalNamespace/VertexPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32[] _triangleMap
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::SliderMeshConstructorCrossedStrips::dyn__triangleMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::dyn__triangleMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_triangleMap"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.CreateSliderMeshInternal
void GlobalNamespace::SliderMeshConstructorCrossedStrips::CreateSliderMeshInternal(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::CreateSliderMeshInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMeshInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.GetVertexCount
int GlobalNamespace::SliderMeshConstructorCrossedStrips::GetVertexCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::GetVertexCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVertexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.GetTrianglesCount
int GlobalNamespace::SliderMeshConstructorCrossedStrips::GetTrianglesCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::GetTrianglesCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrianglesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: SliderMeshConstructor
#include "GlobalNamespace/SliderMeshConstructor.hpp"
// Including type: PathsHolder
#include "GlobalNamespace/PathsHolder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultGameNoteSize
float GlobalNamespace::SliderMeshController::_get_kDefaultGameNoteSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::_get_kDefaultGameNoteSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderMeshController", "kDefaultGameNoteSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultGameNoteSize
void GlobalNamespace::SliderMeshController::_set_kDefaultGameNoteSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::_set_kDefaultGameNoteSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderMeshController", "kDefaultGameNoteSize", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfFixedVertexPathSegments
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderMeshController::dyn__numberOfFixedVertexPathSegments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__numberOfFixedVertexPathSegments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfFixedVertexPathSegments"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _controlPointDistancePerSqrtNotesDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__controlPointDistancePerSqrtNotesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__controlPointDistancePerSqrtNotesDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controlPointDistancePerSqrtNotesDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleAnchorPointOffsetAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleAnchorPointOffsetAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleAnchorPointOffsetAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleAnchorPointOffsetAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointZDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointZDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointZDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointZDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointYDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointYDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointYDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointYDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointXDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointXDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointXDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointXDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMeshConstructor _sliderMeshConstructor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshConstructor*& GlobalNamespace::SliderMeshController::dyn__sliderMeshConstructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__sliderMeshConstructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshConstructor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshConstructor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PathsHolder _pathsHolder
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PathsHolder*& GlobalNamespace::SliderMeshController::dyn__pathsHolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__pathsHolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pathsHolder"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PathsHolder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> _reusableAnchorsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::SliderMeshController::dyn__reusableAnchorsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableAnchorsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableAnchorsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _reusableControlPointsArray4
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableControlPointsArray4"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _reusableControlPointsArray2
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableControlPointsArray2"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshController.get_pathLength
float GlobalNamespace::SliderMeshController::get_pathLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::get_pathLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pathLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshController.get_mesh
::UnityEngine::Mesh* GlobalNamespace::SliderMeshController::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshController.get_pathsHolder
::GlobalNamespace::PathsHolder* GlobalNamespace::SliderMeshController::get_pathsHolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::get_pathsHolder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pathsHolder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PathsHolder*, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshController.CreateBezierPathAndMesh
void GlobalNamespace::SliderMeshController::CreateBezierPathAndMesh(::GlobalNamespace::SliderData* sliderData, ::UnityEngine::Vector3 headNotePos, ::UnityEngine::Vector3 tailNotePos, float jumpSpeed, float noteUniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::CreateBezierPathAndMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBezierPathAndMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(headNotePos), ::il2cpp_utils::ExtractType(tailNotePos), ::il2cpp_utils::ExtractType(jumpSpeed), ::il2cpp_utils::ExtractType(noteUniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, headNotePos, tailNotePos, jumpSpeed, noteUniformScale);
}
// Autogenerated method: SliderMeshController.CutDirectionToControlPointPosition
::UnityEngine::Vector3 GlobalNamespace::SliderMeshController::CutDirectionToControlPointPosition(::GlobalNamespace::NoteCutDirection noteCutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::CutDirectionToControlPointPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderMeshController", "CutDirectionToControlPointPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutDirection)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noteCutDirection);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMovement
#include "GlobalNamespace/SliderMovement.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::SliderMovement::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::SliderMovement::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action movementDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_movementDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_movementDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movementDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> movementDidMoveEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::SliderMovement::dyn_movementDidMoveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_movementDidMoveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movementDidMoveEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action headDidMovePastCutMarkEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_headDidMovePastCutMarkEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_headDidMovePastCutMarkEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headDidMovePastCutMarkEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action tailDidMovePastCutMarkEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_tailDidMovePastCutMarkEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_tailDidMovePastCutMarkEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailDidMovePastCutMarkEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headNoteJumpStartPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__headNoteJumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteJumpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteJumpStartPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headNoteJumpEndPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__headNoteJumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteJumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteJumpEndPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headNoteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__headNoteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailNoteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__tailNoteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailNoteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailNoteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SliderMovement::dyn__worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__worldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SliderMovement::dyn__inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__inverseWorldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headNoteGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__headNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailNoteGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__tailNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailNoteGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailNoteGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SliderMovement::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _movementEndReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__movementEndReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__movementEndReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementEndReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _headDidMovePastCutMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__headDidMovePastCutMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headDidMovePastCutMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headDidMovePastCutMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _tailDidMovePastCutMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__tailDidMovePastCutMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailDidMovePastCutMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailDidMovePastCutMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeSinceHeadNoteJump
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__timeSinceHeadNoteJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__timeSinceHeadNoteJump");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceHeadNoteJump"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMovement.get_jumpDuration
float GlobalNamespace::SliderMovement::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_headNoteGravity
float GlobalNamespace::SliderMovement::get_headNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_headNoteGravity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headNoteGravity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_tailNoteGravity
float GlobalNamespace::SliderMovement::get_tailNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_tailNoteGravity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tailNoteGravity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_timeSinceHeadNoteJump
float GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeSinceHeadNoteJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.add_movementDidFinishEvent
void GlobalNamespace::SliderMovement::add_movementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_movementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_movementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_movementDidFinishEvent
void GlobalNamespace::SliderMovement::remove_movementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_movementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_movementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_movementDidMoveEvent
void GlobalNamespace::SliderMovement::add_movementDidMoveEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_movementDidMoveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_movementDidMoveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_movementDidMoveEvent
void GlobalNamespace::SliderMovement::remove_movementDidMoveEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_movementDidMoveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_movementDidMoveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_headDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_headDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_tailDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_tailDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.Init
void GlobalNamespace::SliderMovement::Init(float headNoteTime, float tailNoteTime, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, float jumpDuration, float headNoteGravity, float tailNoteGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headNoteTime), ::il2cpp_utils::ExtractType(tailNoteTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(headNoteJumpStartPos), ::il2cpp_utils::ExtractType(headNoteJumpEndPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(headNoteGravity), ::il2cpp_utils::ExtractType(tailNoteGravity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, headNoteTime, tailNoteTime, worldRotation, headNoteJumpStartPos, headNoteJumpEndPos, jumpDuration, headNoteGravity, tailNoteGravity);
}
// Autogenerated method: SliderMovement.StartMovement
void GlobalNamespace::SliderMovement::StartMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::StartMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.ManualUpdate
void GlobalNamespace::SliderMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderParticleInteractionEffect
#include "GlobalNamespace/SliderParticleInteractionEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::SliderParticleInteractionEffect::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SliderParticleInteractionEffect::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SliderParticleInteractionEffect::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _startColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SliderParticleInteractionEffect::dyn__startColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__startColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _saber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& GlobalNamespace::SliderParticleInteractionEffect::dyn__saber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__saber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderParticleInteractionEffect.Update
void GlobalNamespace::SliderParticleInteractionEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderParticleInteractionEffect.SetPSStartColor
void GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPSStartColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: SliderParticleInteractionEffect.Start
void GlobalNamespace::SliderParticleInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderParticleInteractionEffect.StartEffect
void GlobalNamespace::SliderParticleInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderParticleInteractionEffect.EndEffect
void GlobalNamespace::SliderParticleInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderShaderHelper
#include "GlobalNamespace/SliderShaderHelper.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCA0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 colorPropertyId
int GlobalNamespace::SliderShaderHelper::_get_colorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_colorPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "colorPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 colorPropertyId
void GlobalNamespace::SliderShaderHelper::_set_colorPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_colorPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "colorPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCB0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 saberAttractionPointPropertyId
int GlobalNamespace::SliderShaderHelper::_get_saberAttractionPointPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_saberAttractionPointPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "saberAttractionPointPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 saberAttractionPointPropertyId
void GlobalNamespace::SliderShaderHelper::_set_saberAttractionPointPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_saberAttractionPointPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "saberAttractionPointPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCC0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
int GlobalNamespace::SliderShaderHelper::_get_timeSinceHeadNoteJumpPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_timeSinceHeadNoteJumpPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "timeSinceHeadNoteJumpPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
void GlobalNamespace::SliderShaderHelper::_set_timeSinceHeadNoteJumpPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_timeSinceHeadNoteJumpPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "timeSinceHeadNoteJumpPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCD0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 headNoteJumpDataPropertyId
int GlobalNamespace::SliderShaderHelper::_get_headNoteJumpDataPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_headNoteJumpDataPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "headNoteJumpDataPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 headNoteJumpDataPropertyId
void GlobalNamespace::SliderShaderHelper::_set_headNoteJumpDataPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_headNoteJumpDataPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "headNoteJumpDataPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCE0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailNoteJumpDataPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailNoteJumpDataPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailNoteJumpDataPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailNoteJumpDataPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailNoteJumpDataPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailNoteJumpDataPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FCF0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 jumpSpeedPropertyId
int GlobalNamespace::SliderShaderHelper::_get_jumpSpeedPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_jumpSpeedPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "jumpSpeedPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 jumpSpeedPropertyId
void GlobalNamespace::SliderShaderHelper::_set_jumpSpeedPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_jumpSpeedPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "jumpSpeedPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD00
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 jumpDistancePropertyId
int GlobalNamespace::SliderShaderHelper::_get_jumpDistancePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_jumpDistancePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "jumpDistancePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 jumpDistancePropertyId
void GlobalNamespace::SliderShaderHelper::_set_jumpDistancePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_jumpDistancePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "jumpDistancePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD10
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 randomPropertyId
int GlobalNamespace::SliderShaderHelper::_get_randomPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_randomPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "randomPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 randomPropertyId
void GlobalNamespace::SliderShaderHelper::_set_randomPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_randomPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "randomPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD20
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 headFadeLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_headFadeLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_headFadeLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "headFadeLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 headFadeLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_headFadeLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_headFadeLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "headFadeLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD30
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailFadeLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailFadeLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailFadeLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailFadeLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailFadeLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailFadeLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailFadeLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailFadeLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD40
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 sliderZLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_sliderZLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_sliderZLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "sliderZLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 sliderZLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_sliderZLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_sliderZLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "sliderZLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD50
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 sliderLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_sliderLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_sliderLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "sliderLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 sliderLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_sliderLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_sliderLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "sliderLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD60
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailHeadNoteJumpOffsetDifferencePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailHeadNoteJumpOffsetDifferencePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailHeadNoteJumpOffsetDifferencePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailHeadNoteJumpOffsetDifferencePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailHeadNoteJumpOffsetDifferencePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailHeadNoteJumpOffsetDifferencePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111FD70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 saberAttractionMultiplier
int GlobalNamespace::SliderShaderHelper::_get_saberAttractionMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_saberAttractionMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "saberAttractionMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 saberAttractionMultiplier
void GlobalNamespace::SliderShaderHelper::_set_saberAttractionMultiplier(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_saberAttractionMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "saberAttractionMultiplier", value));
}
// Autogenerated method: SliderShaderHelper..cctor
void GlobalNamespace::SliderShaderHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SliderShaderHelper.SetTimeSinceHeadNoteJump
void GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetTimeSinceHeadNoteJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, time);
}
// Autogenerated method: SliderShaderHelper.SetTailHeadNoteJumpOffsetDifference
void GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float tailHeadNoteJumpOffsetDifference) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetTailHeadNoteJumpOffsetDifference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(tailHeadNoteJumpOffsetDifference)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, tailHeadNoteJumpOffsetDifference);
}
// Autogenerated method: SliderShaderHelper.SetSaberAttractionPoint
void GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Vector3 attractPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetSaberAttractionPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(attractPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, attractPoint);
}
// Autogenerated method: SliderShaderHelper.EnableSaberAttraction
void GlobalNamespace::SliderShaderHelper::EnableSaberAttraction(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, bool enableSaberAttraction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::EnableSaberAttraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "EnableSaberAttraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(enableSaberAttraction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, enableSaberAttraction);
}
// Autogenerated method: SliderShaderHelper.SetColor
void GlobalNamespace::SliderShaderHelper::SetColor(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, color);
}
// Autogenerated method: SliderShaderHelper.SetInitialProperties
void GlobalNamespace::SliderShaderHelper::SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color sliderColor, float headNoteGravity, float tailNoteGravity, float noteJumpMovementSpeed, float jumpDistance, float sliderZLength, float sliderLength, bool hasHeadNote, bool hasTailNote, float randomValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetInitialProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetInitialProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderColor), ::il2cpp_utils::ExtractType(headNoteGravity), ::il2cpp_utils::ExtractType(tailNoteGravity), ::il2cpp_utils::ExtractType(noteJumpMovementSpeed), ::il2cpp_utils::ExtractType(jumpDistance), ::il2cpp_utils::ExtractType(sliderZLength), ::il2cpp_utils::ExtractType(sliderLength), ::il2cpp_utils::ExtractType(hasHeadNote), ::il2cpp_utils::ExtractType(hasTailNote), ::il2cpp_utils::ExtractType(randomValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderColor, headNoteGravity, tailNoteGravity, noteJumpMovementSpeed, jumpDistance, sliderZLength, sliderLength, hasHeadNote, hasTailNote, randomValue);
}
// Autogenerated method: SliderShaderHelper.SetInitialProperties
void GlobalNamespace::SliderShaderHelper::SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float noteJumpMovementSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetInitialProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetInitialProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(noteJumpMovementSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderController, noteJumpMovementSpeed);
}
// Autogenerated method: SliderShaderHelper.UpdateMaterialPropertyBlock
void GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float timeSinceHeadNoteJump, float jumpOffsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump), ::il2cpp_utils::ExtractType(jumpOffsetY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderController, timeSinceHeadNoteJump, jumpOffsetY);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderShaderWarmup
#include "GlobalNamespace/SliderShaderWarmup.hpp"
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SliderMeshController _sliderMeshController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& GlobalNamespace::SliderShaderWarmup::dyn__sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::dyn__sliderMeshController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::SliderShaderWarmup::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderShaderWarmup.Start
void GlobalNamespace::SliderShaderWarmup::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StaticJumpOffsetYProvider
#include "GlobalNamespace/StaticJumpOffsetYProvider.hpp"
// Including type: StaticJumpOffsetYProvider/InitData
#include "GlobalNamespace/StaticJumpOffsetYProvider_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly StaticJumpOffsetYProvider/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StaticJumpOffsetYProvider::InitData*& GlobalNamespace::StaticJumpOffsetYProvider::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StaticJumpOffsetYProvider::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StaticJumpOffsetYProvider.get_jumpOffsetY
float GlobalNamespace::StaticJumpOffsetYProvider::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StaticJumpOffsetYProvider/InitData
#include "GlobalNamespace/StaticJumpOffsetYProvider_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single jumpyYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StaticJumpOffsetYProvider::InitData::dyn_jumpyYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::InitData::dyn_jumpyYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpyYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager
#include "GlobalNamespace/TutorialBeatmapObjectManager.hpp"
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<TutorialNoteController> _tutorialNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::TutorialNoteController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__tutorialNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__tutorialNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tutorialNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::TutorialNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<BombNoteController> _bombNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BombNoteController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__bombNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__bombNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BombNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<ObstacleController> _obstaclePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__obstaclePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__obstaclePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstaclePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TutorialBeatmapObjectManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TutorialBeatmapObjectManager::InitData*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TutorialBeatmapObjectManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TutorialBeatmapObjectManager.Init
void GlobalNamespace::TutorialBeatmapObjectManager::Init(::GlobalNamespace::TutorialBeatmapObjectManager::InitData* initData, ::GlobalNamespace::TutorialNoteController::Pool* tutorialNotePool, ::GlobalNamespace::BombNoteController::Pool* bombNotePool, ::GlobalNamespace::ObstacleController::Pool* obstaclePool) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initData), ::il2cpp_utils::ExtractType(tutorialNotePool), ::il2cpp_utils::ExtractType(bombNotePool), ::il2cpp_utils::ExtractType(obstaclePool)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initData, tutorialNotePool, bombNotePool, obstaclePool);
}
// Autogenerated method: TutorialBeatmapObjectManager.get_activeObstacleControllers
::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>* GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessObstacleData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessObstacleData(::GlobalNamespace::ObstacleData* obstacleData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData> obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessObstacleData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessObstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, byref(obstacleSpawnData), rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessNoteData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessNoteData(::GlobalNamespace::NoteData* noteData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData> noteSpawnData, float rotation, bool forceIsFirstNoteBehaviour) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessNoteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(forceIsFirstNoteBehaviour)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, byref(noteSpawnData), rotation, forceIsFirstNoteBehaviour);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessSliderData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessSliderData(::GlobalNamespace::SliderData* sliderData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData> sliderSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessSliderData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(sliderSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, byref(sliderSpawnData), rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::SliderController* sliderNoteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderNoteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderNoteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single cutAngleTolerance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TutorialBeatmapObjectManager::InitData::dyn_cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::InitData::dyn_cutAngleTolerance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutAngleTolerance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BpmController
#include "GlobalNamespace/BpmController.hpp"
// Including type: BpmController/InitData
#include "GlobalNamespace/BpmController_InitData.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BPMChangeBeatmapEventData
#include "GlobalNamespace/BPMChangeBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::BpmController::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDataCallbackWrapper _beatmapDataCallback
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::BpmController::dyn__beatmapDataCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__beatmapDataCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallback"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentBpm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BpmController::dyn__currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__currentBpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentBpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BpmController.get_currentBpm
float GlobalNamespace::BpmController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BpmController.Dispose
void GlobalNamespace::BpmController::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BpmController.HandleBpmChangeBeatmapEvent
void GlobalNamespace::BpmController::HandleBpmChangeBeatmapEvent(::GlobalNamespace::BPMChangeBeatmapEventData* bpmChangeBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::HandleBpmChangeBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBpmChangeBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bpmChangeBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bpmChangeBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BpmController/InitData
#include "GlobalNamespace/BpmController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startBpm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BpmController::InitData::dyn_startBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::InitData::dyn_startBpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startBpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBpmController
#include "GlobalNamespace/IBpmController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBpmController.get_currentBpm
float GlobalNamespace::IBpmController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBpmController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BadNoteCutEffectSpawner
#include "GlobalNamespace/BadNoteCutEffectSpawner.hpp"
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FlyingSpriteSpawner _failFlyingSpriteSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingSpriteSpawner*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__failFlyingSpriteSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__failFlyingSpriteSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failFlyingSpriteSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingSpriteSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly CoreGameHUDController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController::InitData*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CoreGameHUDController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BadNoteCutEffectSpawner.Start
void GlobalNamespace::BadNoteCutEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.OnDestroy
void GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.HandleNoteWasCut
void GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
